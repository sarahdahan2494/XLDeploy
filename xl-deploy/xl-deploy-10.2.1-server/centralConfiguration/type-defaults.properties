# Note: If you modify this file, you must restart the XL Deploy server.

# Enable/Disable SSL verification while connecting to IDP.
#aws.Cloud.idpVerifySSL=true
# Enable access key ID and secret access key authentication for AWS. Note: Disable this option when running XL Deploy in an EC2 instance if the IAM role to access the AWS API is already set.
#aws.Cloud.useCredentials=true
# Enable/Disable SSL verification while connecting to AWS.
#aws.Cloud.verifySSL=false
# The number of seconds the credentials should remain valid
#aws.Cloud_submitMFAToken.tokenTimeOutDuration=3600
# Specifies a type of integration.
#aws.api.Method.integrationType=AWS
# Full Path of the resource.
#aws.api.ResourceSpec.fullPath=null
# Resource ID (string)
#aws.api.ResourceSpec.resourceId=null
# The index of the cardinality amount created provisioneds. (inherited from: udm.BaseProvisioned.ordinal)
#aws.api.RestApi.ordinal=1
# Deployment Stage
#aws.api.RestApi.stage=Production
# API Id (string)
#aws.api.RestApiSpec.apiId=null
# Number of instances to launch. (inherited from: udm.BaseProvisionable.cardinality)
#aws.api.RestApiSpec.cardinality=1
# Deployment ID (string)
#aws.api.RestApiSpec.deploymentId=null
# The set of created CIs.
#aws.api.RestApiSpec.provisioners=null
# Root (/) Resource ID (string)
#aws.api.RestApiSpec.rootResourceId=null
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#aws.autoscale.AutoScalingGroup.boundConfigurationItems=null
# The number of EC2 instances that should be running in the group.
#aws.autoscale.AutoScalingGroup.desiredCapacity=0
# Number of retries to wait for the NI to be detached.
#aws.autoscale.AutoScalingGroup.maxRetriesForASGToBeDestroyed=1500
# The maximum size of the group
#aws.autoscale.AutoScalingGroup.maxSize=1
# The minimum size of the group
#aws.autoscale.AutoScalingGroup.minSize=0
#  Indicates whether newly launched instances are protected from termination by auto scaling when scaling in.
#aws.autoscale.AutoScalingGroup.newInstancesProtectedFromScaleIn=false
# Determines whether the tag is added to new instances as they are launched in the group.
#aws.autoscale.AutoScalingGroup.propagateAtLaunch=true
# Determines the type of resource. The only supported value is auto-scaling-group.
#aws.autoscale.AutoScalingGroup.resourceType=auto-scaling-group
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#aws.autoscale.AutoScalingGroupSpec.boundTemplates=null
# If this value is true, XL Deploy will automatically delete the infrastructure items created by the deployment of this template.
#aws.cloudformation.DeployedTemplate.automaticInfrastructure=true
# Disable rollback of the stack if stack creation failed. Set to 'false' for auto rollback on failure.
#aws.cloudformation.DeployedTemplate.disableRollback=true
# Last Event Id consumed by plugin.
#aws.cloudformation.DeployedTemplate.last_event_id=null
# Timeout interval count for waiting the stack to be created i.e 1 interval equals 6 seconds.
#aws.cloudformation.DeployedTemplate.timeoutInterval=150
# The set of CI templates. (inherited from: udm.BaseDeployableFileArtifact.boundTemplates)
#aws.cloudformation.Template.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableFileArtifact.delimiters)
#aws.cloudformation.Template.delimiters={{ }}
# Output variables captured in deployed. Key is the alias name and value is the CloudFormation output property value for a given resource.
#aws.cloudformation.Template.outputVariables=null
# The CloudFormation stack ID
#aws.cloudformation.Template.stackId=null
# Regular expression that matches file names of text files
#aws.cloudformation.Template.textFileNamesRegex=.+\.(yaml|yml|json)
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#aws.ec2.EBSVolume.boundConfigurationItems=null
# Specifies whether the volume should be encrypted.
#aws.ec2.EBSVolume.encryption=false
# The volume type. This can be gp2 for General Purpose SSD, io1 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard for Magnetic volumes
#aws.ec2.EBSVolume.volumeType=standard
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#aws.ec2.EBSVolumeSpec.boundTemplates=null
# Specifies whether the volume should be encrypted. (boolean) default(false)
#aws.ec2.EBSVolumeSpec.encryption=false
# The volume type. This can be gp2 for General Purpose SSD, io1 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard for Magnetic volumes (enum) values(gp2, io1, st1, sc1, standard) default(standard)
#aws.ec2.EBSVolumeSpec.volumeType=standard
# Indicates whether CloudWatch detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
#aws.ec2.Instance.detailedMonitoring=false
# Indicates whether this Elastic IP address is for use with instances in EC2-Classic (standard ) or instances in a VPC (vpc ).
#aws.ec2.Instance.elasticIpDomain=standard
# Number of times to check if instance is fully booted.
#aws.ec2.Instance.instanceBootRetryCount=5
# The instance type that you specify determines the hardware of the host computer used for the instance.
#aws.ec2.Instance.instanceType=m1.small
# The name of the key pair, if the instance was launched with an associated key pair.
#aws.ec2.Instance.keyName=default
# The index of the cardinality amount created provisioneds. (inherited from: udm.BaseProvisioned.ordinal)
#aws.ec2.Instance.ordinal=1
# Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
#aws.ec2.Instance.shutdownBehavior=stop
# The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware. 
#aws.ec2.Instance.tenancy=default
# If this parameter is set to true, the instance cannot be terminated using the Amazon EC2 console, CLI, or API.
#aws.ec2.Instance.terminationProtection=false
# Number of instances to launch. (inherited from: udm.BaseProvisionable.cardinality)
#aws.ec2.InstanceSpec.cardinality=1
# Indicates whether CloudWatch detailed monitoring is enabled. Otherwise, basic monitoring is enabled. (boolean) default(false)
#aws.ec2.InstanceSpec.detailedMonitoring=false
# Allocation id of public elastic IP
#aws.ec2.InstanceSpec.elasticIpAllocationId=null
# Indicates whether this Elastic IP address is for use with instances in EC2-Classic (standard ) or instances in a VPC (vpc ). (enum) values(standard, vpc) default(standard)
#aws.ec2.InstanceSpec.elasticIpDomain=standard
# Number of times to check if instance is fully booted. (integer) default(5)
#aws.ec2.InstanceSpec.instanceBootRetryCount=5
# The instance type that you specify determines the hardware of the host computer used for the instance. (string) default(m1.small)
#aws.ec2.InstanceSpec.instanceType=m1.small
# The name of the key pair, if the instance was launched with an associated key pair. (string) default(default)
#aws.ec2.InstanceSpec.keyName=default
# Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown). (enum) values(stop, terminate) default(stop)
#aws.ec2.InstanceSpec.shutdownBehavior=stop
# The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware.  (enum) values(default, dedicated, host) default(default)
#aws.ec2.InstanceSpec.tenancy=default
# If this parameter is set to true, the instance cannot be terminated using the Amazon EC2 console, CLI, or API. (boolean) default(false)
#aws.ec2.InstanceSpec.terminationProtection=false
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#aws.ec2.NetworkInterface.boundConfigurationItems=null
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#aws.ec2.NetworkInterfaceSpec.boundTemplates=null
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#aws.ecr.Repository.boundConfigurationItems=null
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#aws.ecr.RepositorySpec.boundTemplates=null
# The URI for the repository. You can use this URI for Docker push and pull operations.
#aws.ecr.RepositorySpec.repositoryUri=null
# The set of created CIs. (inherited from: udm.BaseDeployedContainer.boundConfigurationItems)
#aws.ecs.Cluster.boundConfigurationItems=null
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#aws.ecs.ClusterSpec.boundTemplates=null
# The Amazon Resource Name (ARN) that identifies the cluster.
#aws.ecs.ClusterSpec.clusterArn=null
# The index of the cardinality amount created provisioneds. (inherited from: aws.ec2.Instance.ordinal)
#aws.ecs.ContainerInstance.ordinal=1
# Number of instances to launch. (inherited from: aws.ec2.InstanceSpec.cardinality)
#aws.ecs.ContainerInstanceSpec.cardinality=1
# Indicates whether CloudWatch detailed monitoring is enabled. Otherwise, basic monitoring is enabled. (boolean) default(false)
#aws.ecs.ContainerInstanceSpec.detailedMonitoring=false
# Indicates whether this Elastic IP address is for use with instances in EC2-Classic (standard ) or instances in a VPC (vpc ). (enum) values(standard, vpc) default(standard)
#aws.ecs.ContainerInstanceSpec.elasticIpDomain=standard
# Number of times to check if instance is fully booted. (integer) default(5)
#aws.ecs.ContainerInstanceSpec.instanceBootRetryCount=5
# The instance type that you specify determines the hardware of the host computer used for the instance. (string) default(m1.small)
#aws.ecs.ContainerInstanceSpec.instanceType=m1.small
# Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown). (enum) values(stop, terminate) default(stop)
#aws.ecs.ContainerInstanceSpec.shutdownBehavior=stop
# The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware.  (enum) values(default, dedicated, host) default(default)
#aws.ecs.ContainerInstanceSpec.tenancy=default
# If this parameter is set to true, the instance cannot be terminated using the Amazon EC2 console, CLI, or API. (boolean) default(false)
#aws.ecs.ContainerInstanceSpec.terminationProtection=false
# The protocol used for the port mapping.
#aws.ecs.Port.protocol=tcp
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#aws.ecs.Runnable.boundConfigurationItems=null
# Launch Type
#aws.ecs.Runnable.launchType=EC2
# The Docker networking mode to use for the containers in the task
#aws.ecs.Runnable.networkMode=bridge
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#aws.ecs.RunnableSpec.boundTemplates=null
# The set of created CIs. (inherited from: aws.ecs.Runnable.boundConfigurationItems)
#aws.ecs.Service.boundConfigurationItems=null
# Maximum number of times to retry while checking for service to drain completely (no. of running tasks becomes zero).
#aws.ecs.Service.maxDrainRetryCount=50
# Minimum number of tasks that should come up for this service to be considered successfully deployed.
#aws.ecs.Service.waitForTasksNr=1
# The set of CI templates. (inherited from: aws.ecs.RunnableSpec.boundTemplates)
#aws.ecs.ServiceSpec.boundTemplates=null
# Launch Type (enum) values(EC2, FARGATE) default(EC2)
#aws.ecs.ServiceSpec.launchType=EC2
# Maximum number of times to retry while checking for service to drain completely (no. of running tasks becomes zero). (integer) default(50)
#aws.ecs.ServiceSpec.maxDrainRetryCount=50
# The Docker networking mode to use for the containers in the task (enum) values(none, bridge, host, awsvpc) default(bridge)
#aws.ecs.ServiceSpec.networkMode=bridge
# The ARN of the service created
#aws.ecs.ServiceSpec.serviceArn=null
# The Amazon Resource Name (ARN) of the task definition.
#aws.ecs.ServiceSpec.taskDefinitionArn=null
# Minimum number of tasks that should come up for this service to be considered successfully deployed. (integer) default(1)
#aws.ecs.ServiceSpec.waitForTasksNr=1
# The set of created CIs. (inherited from: aws.ecs.Runnable.boundConfigurationItems)
#aws.ecs.Task.boundConfigurationItems=null
# Maximum number of times to retry while checking for tasks to either be in RUNNING or STOPPED state.
#aws.ecs.Task.maxTaskWaitRetryCount=50
# The number of instantiations of the specified task to place on the cluster.
#aws.ecs.Task.nrOfTasks=1
# The set of CI templates. (inherited from: aws.ecs.RunnableSpec.boundTemplates)
#aws.ecs.TaskSpec.boundTemplates=null
# The Amazon Resource Name (ARN) of all the tasks ran using this task definition
#aws.ecs.TaskSpec.taskArns=null
# The Amazon Resource Name (ARN) of the task definition.
#aws.ecs.TaskSpec.taskDefinitionArn=null
# It indicates whether deletion protection is enabled or not for load balancer.
#aws.elb.ApplicationELB.deletionProtection=false
# It indicates that ELB captures detailed logs of all requests made to it. The logs are stored in Amazon S3 bucket.
#aws.elb.ApplicationELB.enableAccessLog=false
# The idle timeout value, in seconds. The valid range is 1-3600.
#aws.elb.ApplicationELB.idleTimeout=60
# The IP address type of the application load balancer. Internal load balancers must use ipv4.
#aws.elb.ApplicationELB.ipAddressType=ipv4
# Number of retries to wait for the network interface to be detached.
#aws.elb.ApplicationELB.maxDetachmentRetries=100
# The index of the cardinality amount created provisioneds. (inherited from: udm.BaseProvisioned.ordinal)
#aws.elb.ApplicationELB.ordinal=1
# The scheme of the application load balancer.
#aws.elb.ApplicationELB.scheme=internet-facing
# The ARN of the application load balancer.
#aws.elb.ApplicationELBSpec.arn=null
# The Canonical Hosted Zone ID of the application load balancer.
#aws.elb.ApplicationELBSpec.canonicalHostedZoneId=null
# Number of instances to launch. (inherited from: udm.BaseProvisionable.cardinality)
#aws.elb.ApplicationELBSpec.cardinality=1
# The DNS Name of the application load balancer.
#aws.elb.ApplicationELBSpec.dnsName=null
# The set of created CIs.
#aws.elb.ApplicationELBSpec.provisioners=null
# The VPC ID of the application load balancer.
#aws.elb.ApplicationELBSpec.vpcId=null
# ARN of the listener.
#aws.elb.ApplicationListenerSpec.arn=null
# The interval for publishing the access logs. You can specify an interval of either 5 minutes or 60 minutes.
#aws.elb.ClassicELB.accessLogEmitInterval=60
# Connection draining timeout(in seconds).
#aws.elb.ClassicELB.connectionDrainingTimeout=300
# Idle Timeout is the number of seconds a connection can be idle before the load balancer closes the connection.
#aws.elb.ClassicELB.connectionSettingIdleTimeout=60
# Wait time for ELB to get destroyed (in seconds).
#aws.elb.ClassicELB.destroyWaitTime=200
# The load balancer port used by dummy listener.
#aws.elb.ClassicELB.dummyListenerLoadBalancerPort=65535
# Access Logs deliver detailed logs of all requests made to Elastic Load Balancing. The logs are stored in Amazon S3.
#aws.elb.ClassicELB.enableAccessLog=false
# Connection Draining allows existing requests to complete before the load balancer shifts traffic away from a deregistered or unhealthy back-end instance.
#aws.elb.ClassicELB.enableConnectionDraining=true
# Cross-Zone Load Balancing distributes traffic evenly across all your back-end instances in all Availability Zones.
#aws.elb.ClassicELB.enableCrossZoneLoadBalancing=true
# Num of retries to wait for the NI to be detached.
#aws.elb.ClassicELB.maxRetriesForNiDetachment=100
# The index of the cardinality amount created provisioneds. (inherited from: udm.BaseProvisioned.ordinal)
#aws.elb.ClassicELB.ordinal=1
# Wait time for ELB resources to be dissociated (in seconds).
#aws.elb.ClassicELB.resourceDissociationWaitTime=50
# It can be one of two types: Internet-facing or internal.
#aws.elb.ClassicELB.scheme=Internet-facing
# Number of instances to launch. (inherited from: udm.BaseProvisionable.cardinality)
#aws.elb.ClassicELBSpec.cardinality=1
# The set of created CIs.
#aws.elb.ClassicELBSpec.provisioners=null
# Enable application generated cookie stickiness.
#aws.elb.ClassicListener.enableAppCookieStickiness=false
# Enable load balancer generated cookie stickiness. This policy can be associated only with HTTP/HTTPS listeners.
#aws.elb.ClassicListener.enableLbCookieStickiness=false
# Load Balancer Cookie Expiration Period.
#aws.elb.ClassicListener.lbCookieExpirationPeriod=0
# The priority of the rule.
#aws.elb.ListenerRule.priority=1
# ARN of the listener rule.
#aws.elb.ListenerRuleSpec.arn=null
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#aws.elb.TargetGroup.boundConfigurationItems=null
# The deregistration delay of the target group.
#aws.elb.TargetGroup.deRegistrationDelay=300
# The health check interval (seconds) of the target group.
#aws.elb.TargetGroup.healthCheckInterval=30
# The health path of the target group.
#aws.elb.TargetGroup.healthCheckPath=/
# The health check port number of the target group.
#aws.elb.TargetGroup.healthCheckPort=traffic-port
# The health check protocol name of the target group.
#aws.elb.TargetGroup.healthCheckProtocol=http
# The health check success code of the target group.
#aws.elb.TargetGroup.healthCheckSuccessCode=200
# The health check timeout (seconds) of the target group.
#aws.elb.TargetGroup.healthCheckTimeout=5
# The health check threshold count of the target group.
#aws.elb.TargetGroup.healthyThresholdCount=5
# The stickiness duration (seconds) of the target group. A value <= 0 means stickiness is disabled.
#aws.elb.TargetGroup.stickinessDuration=0
# The unhealth check threshold count of the target group.
#aws.elb.TargetGroup.unhealthyThresholdCount=2
# ARN of the target group.
#aws.elb.TargetGroupSpec.arn=null
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#aws.elb.TargetGroupSpec.boundTemplates=null
# The set of created CIs. (inherited from: udm.BaseDeployedArtifact.boundConfigurationItems)
#aws.lambda.Function.boundConfigurationItems=null
# The amount of memory, in MB, the Lambda function is given.
#aws.lambda.Function.memorySize=128
# This boolean parameter can be used to request AWS Lambda to create the Lambda function and publish a version as an atomic operation.
#aws.lambda.Function.publish=false
# The function execution time at which Lambda should terminate the function.
#aws.lambda.Function.timeout=3
# Tracing settings. If PassThrough, Lambda will only trace the request from an upstream service if it contains a tracing header with sampled=1. If Active, Lambda will respect any tracing header it receives from an upstream service. If no tracing header is received, Lambda will call X-Ray for a tracing decision
#aws.lambda.Function.tracingConfig=PassThrough
# The set of CI templates. (inherited from: udm.BaseDeployableArtifact.boundTemplates)
#aws.lambda.FunctionZip.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableArtifact.delimiters)
#aws.lambda.FunctionZip.delimiters={{ }}
# The Amazon Resource Name (ARN) assigned to the function.
#aws.lambda.FunctionZip.functionARN=null
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableArtifact.textFileNamesRegex)
#aws.lambda.FunctionZip.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#aws.lambda.S3.boundConfigurationItems=null
# The amount of memory, in MB, the Lambda function is given.
#aws.lambda.S3.memorySize=128
# This boolean parameter can be used to request AWS Lambda to create the Lambda function and publish a version as an atomic operation.
#aws.lambda.S3.publish=false
# The function execution time at which Lambda should terminate the function.
#aws.lambda.S3.timeout=3
# Tracing settings. If PassThrough, Lambda will only trace the request from an upstream service if it contains a tracing header with sampled=1. If Active, Lambda will respect any tracing header it receives from an upstream service. If no tracing header is received, Lambda will call X-Ray for a tracing decision
#aws.lambda.S3.tracingConfig=PassThrough
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#aws.lambda.S3Spec.boundTemplates=null
# The Amazon Resource Name (ARN) assigned to the function.
#aws.lambda.S3Spec.functionARN=null
# The version of the Lambda function.
#aws.lambda.S3Spec.version=null
# Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the PreferredMaintenanceWindow setting for the DB instance.
#aws.rds.DBInstance.applyImmediately=false
# Indicates that minor engine upgrades will be applied automatically to the DB instance during the maintenance window.
#aws.rds.DBInstance.autoMinorVersionUpgrade=true
# The number of days for which automated backups are retained.
#aws.rds.DBInstance.backupRetentionPeriod=1
# When set to 'true', copies all tags from the DB instance to snapshots of the DB instance.
#aws.rds.DBInstance.copyTagsToSnapshot=false
# When set to 'true', enables mapping of AWS Identity and Access Management (IAM) accounts to database accounts; otherwise false.
#aws.rds.DBInstance.enableIAMDatabaseAuthentication=false
# The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.
#aws.rds.DBInstance.monitoringInterval=0
# The index of the cardinality amount created provisioneds. (inherited from: udm.BaseProvisioned.ordinal)
#aws.rds.DBInstance.ordinal=1
# When set to 'false', a DB snapshot is created before the DB instance is deleted.
#aws.rds.DBInstance.skipFinalSnapshot=false
# Specifies whether the DB instance is encrypted.
#aws.rds.DBInstance.storageEncrypted=false
# Time in sec to wait to get update after modifying.
#aws.rds.DBInstance.waitTime=30
# Specifies the DNS address of the DB instance.
#aws.rds.DBInstanceSpec.address=null
# Number of instances to launch. (inherited from: udm.BaseProvisionable.cardinality)
#aws.rds.DBInstanceSpec.cardinality=1
# The Amazon Resource Name (ARN) for the DB instance.
#aws.rds.DBInstanceSpec.dbInstanceArn=null
# Specifies the port that the database engine is listening on.
#aws.rds.DBInstanceSpec.finalPort=null
# The set of created CIs.
#aws.rds.DBInstanceSpec.provisioners=null
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#aws.rds.DBSecurityGroup.boundConfigurationItems=null
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#aws.rds.DBSecurityGroupSpec.boundTemplates=null
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#aws.rds.DBSubnetGroup.boundConfigurationItems=null
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#aws.rds.DBSubnetGroupSpec.boundTemplates=null
# The set of CI templates. (inherited from: file.Archive.boundTemplates)
#aws.s3.Archive.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: file.Archive.delimiters)
#aws.s3.Archive.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: file.Archive.textFileNamesRegex)
#aws.s3.Archive.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: udm.BaseDeployedContainer.boundConfigurationItems)
#aws.s3.Bucket.boundConfigurationItems=null
# Enable logging for your bucket to get detailed access logs delivered to the bucket of your choice.
#aws.s3.Bucket.logging=false
# Enable static website hosting for this S3 bucket.
#aws.s3.Bucket.staticWebsiteHosting=false
# To specify a key prefix for log objects. Required if logging is enabled.
#aws.s3.Bucket.targetPrefix=logs/
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#aws.s3.BucketSpec.boundTemplates=null
# Enable logging for your bucket to get detailed access logs delivered to the bucket of your choice. (boolean) default(false)
#aws.s3.BucketSpec.logging=false
# Enable static website hosting for this S3 bucket. (boolean) default(false)
#aws.s3.BucketSpec.staticWebsiteHosting=false
# To specify a key prefix for log objects. Required if logging is enabled. (string) default(logs/)
#aws.s3.BucketSpec.targetPrefix=logs/
# The set of CI templates. (inherited from: file.File.boundTemplates)
#aws.s3.File.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: file.File.delimiters)
#aws.s3.File.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: file.File.textFileNamesRegex)
#aws.s3.File.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of CI templates. (inherited from: file.Folder.boundTemplates)
#aws.s3.Folder.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: file.Folder.delimiters)
#aws.s3.Folder.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: file.Folder.textFileNamesRegex)
#aws.s3.Folder.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The canned ACL to apply to the object.
#aws.s3.UploadedArchive.acl=private
# The set of created CIs. (inherited from: udm.BaseDeployedArtifact.boundConfigurationItems)
#aws.s3.UploadedArchive.boundConfigurationItems=null
# The canned ACL to apply to the object.
#aws.s3.UploadedFile.acl=private
# The set of created CIs. (inherited from: udm.BaseDeployedArtifact.boundConfigurationItems)
#aws.s3.UploadedFile.boundConfigurationItems=null
# The canned ACL to apply to the object.
#aws.s3.UploadedFolder.acl=private
# The set of created CIs. (inherited from: udm.BaseDeployedArtifact.boundConfigurationItems)
#aws.s3.UploadedFolder.boundConfigurationItems=null
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#aws.servicecatalog.ProvisionedProduct.boundConfigurationItems=null
# Launch Path Id
#aws.servicecatalog.ProvisionedProduct.pathId=null
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#aws.servicecatalog.ProvisionedProductSpec.boundTemplates=null
# Last Event Id consumed by plugin. No need to specify
#aws.servicecatalog.ProvisionedProductSpec.lastEventId=null
# Provisioned product Id
#aws.servicecatalog.ProvisionedProductSpec.provisionedProductId=null
# The stack ID
#aws.servicecatalog.ProvisionedProductSpec.stackId=null
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#aws.vpc.RouteTable.boundConfigurationItems=null
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#aws.vpc.RouteTableSpec.boundTemplates=null
# The ID of the original (default) route table
#aws.vpc.RouteTableSpec.originalRouteTableId=null
# The ID of the route table
#aws.vpc.RouteTableSpec.routeTableId=null
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#aws.vpc.SecurityGroup.boundConfigurationItems=null
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#aws.vpc.SecurityGroupSpec.boundTemplates=null
# The ID of the security group
#aws.vpc.SecurityGroupSpec.securityGroupId=null
# Specify true to indicate that network interfaces created in this subnet should be assigned an IPv6 address. 
#aws.vpc.Subnet.assignIpv6AddressOnCreation=false
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#aws.vpc.Subnet.boundConfigurationItems=null
# The suffix to be used for subnet IPv6 CIDR Block.
#aws.vpc.Subnet.ipv6CidrBlockSuffix=/64
# Specify true to indicate that network interfaces created in this subnet should be assigned a public IPv4 address. 
#aws.vpc.Subnet.mapPublicIpOnLaunch=false
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#aws.vpc.SubnetSpec.boundTemplates=null
# Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC.
#aws.vpc.VPC.amazonProvidedIpv6CidrBlock=false
# Enables a VPC for ClassicLink. You can then link EC2-Classic instances to your ClassicLink-enabled VPC to allow communication over private IP addresses.
#aws.vpc.VPC.classicLink=false
# Enables a VPC to support DNS hostname resolution for ClassicLink.
#aws.vpc.VPC.classicLinkDnsSupport=false
# Creates internet gateway.
#aws.vpc.VPC.createInternetGateway=false
# Indicates whether the instances launched in the VPC get DNS hostnames. If enabled, instances in the VPC get DNS hostnames, otherwise they do not.
#aws.vpc.VPC.dnsHostnames=false
# Indicates whether the DNS resolution is supported for the VPC.
#aws.vpc.VPC.dnsSupport=true
# The tenancy options for instances launched into the VPC.
#aws.vpc.VPC.instanceTenancy=default
# The index of the cardinality amount created provisioneds. (inherited from: udm.BaseProvisioned.ordinal)
#aws.vpc.VPC.ordinal=1
# Number of instances to launch. (inherited from: udm.BaseProvisionable.cardinality)
#aws.vpc.VPCSpec.cardinality=1
# The set of created CIs.
#aws.vpc.VPCSpec.provisioners=null
# ID of VPC
#aws.vpc.VPCSpec.vpcId=null
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#azure.AppServicePlan.boundConfigurationItems=null
# Operating System
#azure.AppServicePlan.osType=Windows
# Web Hosting Plan SKU capacity
#azure.AppServicePlan.skuCapacity=0
# Web Hosting Plan SKU family
#azure.AppServicePlan.skuFamily=S
# Web Hosting Plan SKU name
#azure.AppServicePlan.skuName=S1
# Web Hosting Plan SKU size
#azure.AppServicePlan.skuSize=1
# Web Hosting Plan SKU tier
#azure.AppServicePlan.skuTier=Basic
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#azure.AppServicePlanSpec.boundTemplates=null
# The set of created CIs. (inherited from: udm.BaseDeployedArtifact.boundConfigurationItems)
#azure.ArtifactPackage.boundConfigurationItems=null
# The set of CI templates. (inherited from: udm.BaseDeployableArchiveArtifact.boundTemplates)
#azure.ArtifactPackageSpec.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableArchiveArtifact.delimiters)
#azure.ArtifactPackageSpec.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableArchiveArtifact.textFileNamesRegex)
#azure.ArtifactPackageSpec.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: udm.BaseDeployedContainer.boundConfigurationItems)
#azure.ArtifactsFeed.boundConfigurationItems=null
# Scope of the Package
#azure.ArtifactsFeed.scope=project
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#azure.ArtifactsFeedSpec.boundTemplates=null
# Scope of the Package (enum) values(project, organization) default(project)
#azure.ArtifactsFeedSpec.scope=project
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#azure.AvailabilitySet.boundConfigurationItems=null
# Specifies whether the availability set is managed or not. Posible values are: Aligned or Classic. Aligned = managed. Classic = unmanaged. Default = Classic.
#azure.AvailabilitySet.sku=Classic
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#azure.AvailabilitySetSpec.boundTemplates=null
# Priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.
#azure.BaseSecurityRule.priority=100
# Network protocol this rule applies to
#azure.BaseSecurityRule.protocol=*
# Priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule. (integer) default(100)
#azure.BaseSecurityRuleSpec.priority=100
# Network protocol this rule applies to (enum) values(*, Tcp, Udp) default(*)
#azure.BaseSecurityRuleSpec.protocol=*
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#azure.BaseWebAppExtension.boundConfigurationItems=null
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#azure.BaseWebAppLogging.boundConfigurationItems=null
# Quota (in MB) required if enabling Web Server Logging (FileSystem). Maximum size in megabytes that http log files can use. When reached old log files will be removed to make space for new ones.
#azure.BaseWebAppLogging.httpFileSystemQuota=35
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#azure.BaseWebAppSlot.boundConfigurationItems=null
# The set of created CIs. (inherited from: udm.BaseDeployedArtifact.boundConfigurationItems)
#azure.BaseWebJob.boundConfigurationItems=null
# Authorization Method
#azure.Cloud.authMethod=active-directory-user-password
# Enable/Disable SSL verification while connecting to Azure.
#azure.Cloud.verifySSL=false
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#azure.CloudService.boundConfigurationItems=null
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#azure.CloudServiceSpec.boundTemplates=null
# The index of the cardinality amount created provisioneds. (inherited from: udm.BaseProvisioned.ordinal)
#azure.ContainerGroup.ordinal=1
# Base OS to use
#azure.ContainerGroup.osType=linux
# Number of instances to launch. (inherited from: udm.BaseProvisionable.cardinality)
#azure.ContainerGroupSpec.cardinality=1
# Base OS to use (string) default(linux)
#azure.ContainerGroupSpec.osType=linux
# CPU limits of this container
#azure.ContainerInstance.resourceLimitsCpu=2
# The memory limits in GB of this container
#azure.ContainerInstance.resourceLimitsMemoryGb=2
# CPU request of this container
#azure.ContainerInstance.resourceRequestsCpu=1
# The memory request in GB of this container
#azure.ContainerInstance.resourceRequestsMemoryGb=1
# CPU limits of this container (integer) default(2)
#azure.ContainerInstanceSpec.resourceLimitsCpu=2
# The memory limits in GB of this container (integer) default(2)
#azure.ContainerInstanceSpec.resourceLimitsMemoryGb=2
# CPU request of this container (integer) default(1)
#azure.ContainerInstanceSpec.resourceRequestsCpu=1
# The memory request in GB of this container (integer) default(1)
#azure.ContainerInstanceSpec.resourceRequestsMemoryGb=1
# The set of created CIs. (inherited from: azure.BaseWebJob.boundConfigurationItems)
#azure.ContinuousWebJob.boundConfigurationItems=null
# If a continuous job is set as singleton it'll run only on a single instance opposed to running on all instances. By default, it runs on all instances.
#azure.ContinuousWebJob.isSingleton=false
# Job Type
#azure.ContinuousWebJob.jobType=continuouswebjobs
# The set of CI templates. (inherited from: udm.BaseDeployableFileArtifact.boundTemplates)
#azure.ContinuousWebJobSpec.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableFileArtifact.delimiters)
#azure.ContinuousWebJobSpec.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableFileArtifact.textFileNamesRegex)
#azure.ContinuousWebJobSpec.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# Priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule. (integer) default(100)
#azure.DefaultSecurityRuleSpec.priority=100
# Network protocol this rule applies to (enum) values(*, Tcp, Udp) default(*)
#azure.DefaultSecurityRuleSpec.protocol=*
# The set of created CIs. (inherited from: udm.BaseDeployedArtifact.boundConfigurationItems)
#azure.FunctionApp.boundConfigurationItems=null
# The set of CI templates. (inherited from: udm.BaseDeployableArchiveArtifact.boundTemplates)
#azure.FunctionAppZip.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableArchiveArtifact.delimiters)
#azure.FunctionAppZip.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableArchiveArtifact.textFileNamesRegex)
#azure.FunctionAppZip.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#azure.KeyVault.boundConfigurationItems=null
# Property to specify whether Azure Virtual      Machines are permitted to retrieve certificates stored as secrets from the      key vault.
#azure.KeyVault.enabledForDeployment=True
# Property to specify whether Azure      Resource Manager is permitted to retrieve secrets from the key vault
#azure.KeyVault.enabledForTemplateDeployment=True
# SKU details
#azure.KeyVault.sku=standard
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#azure.KeyVaultSpec.boundTemplates=null
# Property to specify whether Azure Virtual      Machines are permitted to retrieve certificates stored as secrets from the      key vault. (boolean) default(true)
#azure.KeyVaultSpec.enabledForDeployment=True
# Property to specify whether Azure      Resource Manager is permitted to retrieve secrets from the key vault (boolean) default(true)
#azure.KeyVaultSpec.enabledForTemplateDeployment=True
# SKU details (string) default(standard)
#azure.KeyVaultSpec.sku=standard
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#azure.LoadBalancer.boundConfigurationItems=null
# Load Balancer name. If not specified, the CI name will be used.
#azure.LoadBalancerFeIpConfiguration.loadBalancerName=null
#  Defines how a private IP address is assigned
#azure.LoadBalancerFeIpConfiguration.privateIpAllocationMethod=Dynamic
# Protocol of the load balancing probe
#azure.LoadBalancerProbe.loadBalancingProbeProtocol=tcp
# Protocol of the load balancing rule
#azure.LoadBalancerRule.loadBalancingRuleProtocol=all
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#azure.LoadBalancerSpec.boundTemplates=null
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#azure.NetworkInterface.boundConfigurationItems=null
# Activate dns settings
#azure.NetworkInterface.dnsSettingsEnable=false
# Represents whether the specific ipconfiguration is IPv4 or IPv6
#azure.NetworkInterfaceIPConfiguration.privateIpAddressVersion=IPv4
#  Defines how a private IP address is assigned
#azure.NetworkInterfaceIPConfiguration.privateIpAllocationMethod=Dynamic
# Represents whether the specific ipconfiguration is IPv4 or IPv6 (enum) values(IPv4, IPv6) default(IPv4)
#azure.NetworkInterfaceIPConfigurationSpec.privateIpAddressVersion=IPv4
#  Defines how a private IP address is assigned (enum) values(Static, Dynamic) default(Dynamic)
#azure.NetworkInterfaceIPConfigurationSpec.privateIpAllocationMethod=Dynamic
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#azure.NetworkInterfaceSpec.boundTemplates=null
# Activate dns settings (boolean) default(false)
#azure.NetworkInterfaceSpec.dnsSettingsEnable=false
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#azure.NetworkSecurityGroup.boundConfigurationItems=null
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#azure.NetworkSecurityGroupSpec.boundTemplates=null
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#azure.PublicIpAddress.boundConfigurationItems=null
# Public IP allocation method
#azure.PublicIpAddress.publicIpAddressAllocationMethod=Dynamic
# Idle timeout of the public IP address 4 .. 30
#azure.PublicIpAddress.publicIpAddressIdleTimeoutInMinutes=4
# Public IP address version
#azure.PublicIpAddress.publicIpAddressVersion=IPv4
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#azure.PublicIpAddressSpec.boundTemplates=null
# Public IP allocation method (enum) values(Static, Dynamic) default(Dynamic)
#azure.PublicIpAddressSpec.publicIpAddressAllocationMethod=Dynamic
# Idle timeout of the public IP address 4 .. 30 (integer) default(4)
#azure.PublicIpAddressSpec.publicIpAddressIdleTimeoutInMinutes=4
# Public IP address version (enum) values(IPv4, IPv6) default(IPv4)
#azure.PublicIpAddressSpec.publicIpAddressVersion=IPv4
# The set of created CIs. (inherited from: udm.BaseDeployedContainer.boundConfigurationItems)
#azure.ResourceGroup.boundConfigurationItems=null
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#azure.ResourceGroupSpec.boundTemplates=null
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#azure.RouteTable.boundConfigurationItems=null
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#azure.RouteTableSpec.boundTemplates=null
# Priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule. (integer) default(100)
#azure.SecurityRuleSpec.priority=100
# Network protocol this rule applies to (enum) values(*, Tcp, Udp) default(*)
#azure.SecurityRuleSpec.protocol=*
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#azure.StorageAccount.boundConfigurationItems=null
# Kind
#azure.StorageAccount.storageAccountKind=Storage
# Type of storage account
#azure.StorageAccount.storageAccountType=Standard_LRS
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#azure.StorageAccountSpec.boundTemplates=null
# Kind (enum) values(Storage, StorageBlob) default(Storage)
#azure.StorageAccountSpec.storageAccountKind=Storage
# Type of storage account (string) default(Standard_LRS)
#azure.StorageAccountSpec.storageAccountType=Standard_LRS
# The set of created CIs. (inherited from: azure.BaseWebJob.boundConfigurationItems)
#azure.TriggeredWebJob.boundConfigurationItems=null
# Job Type
#azure.TriggeredWebJob.jobType=triggeredwebjobs
# The set of CI templates. (inherited from: udm.BaseDeployableFileArtifact.boundTemplates)
#azure.TriggeredWebJobSpec.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableFileArtifact.delimiters)
#azure.TriggeredWebJobSpec.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableFileArtifact.textFileNamesRegex)
#azure.TriggeredWebJobSpec.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# Caching type
#azure.VirtualMachine.caching=None
# Create option
#azure.VirtualMachine.createOption=fromImage
# Initial disk size, in GB, for blank data disks, and the new desired size for resizing existing OS and data disks.
#azure.VirtualMachine.diskSizeGb=30
# Indicates whether Windows updates are automatically installed on the VM
#azure.VirtualMachine.enableAutomaticUpdates=true
# Image offer
#azure.VirtualMachine.offer=UbuntuServer
# The index of the cardinality amount created provisioneds. (inherited from: udm.BaseProvisioned.ordinal)
#azure.VirtualMachine.ordinal=1
# Remove OS Disk on vm removal
#azure.VirtualMachine.osDiskAutoRemove=false
# Operating System type
#azure.VirtualMachine.osType=Linux
#  Indicates whether the virtual machine agent should be provisioned on the Virtual Machine. If not specified, then the default behavior is to set it to true.
#azure.VirtualMachine.provisionVmAgent=true
# Image publisher
#azure.VirtualMachine.publisher=Canonical
# Image SKU
#azure.VirtualMachine.sku=16.04.0-LTS
# Parameters of a managed disk
#azure.VirtualMachine.storageAccountType=Standard_LRS
# Hardware profile.
#azure.VirtualMachine.vmSize=Basic_A0
# Caching type (enum) values(None, ReadOnly, ReadWrite) default(None)
#azure.VirtualMachineSpec.caching=None
# Number of instances to launch. (inherited from: udm.BaseProvisionable.cardinality)
#azure.VirtualMachineSpec.cardinality=1
# Create option (enum) values(fromImage, empty, attach) default(fromImage)
#azure.VirtualMachineSpec.createOption=fromImage
# Initial disk size, in GB, for blank data disks, and the new desired size for resizing existing OS and data disks. (integer) default(30)
#azure.VirtualMachineSpec.diskSizeGb=30
# Indicates whether Windows updates are automatically installed on the VM (boolean) default(true)
#azure.VirtualMachineSpec.enableAutomaticUpdates=true
# Image offer (string) default(UbuntuServer)
#azure.VirtualMachineSpec.offer=UbuntuServer
# Remove OS Disk on vm removal (boolean) default(false)
#azure.VirtualMachineSpec.osDiskAutoRemove=false
# Operating System type (enum) values(Linux, Windows) default(Linux)
#azure.VirtualMachineSpec.osType=Linux
#  Indicates whether the virtual machine agent should be provisioned on the Virtual Machine. If not specified, then the default behavior is to set it to true. (boolean) default(true)
#azure.VirtualMachineSpec.provisionVmAgent=true
# Image publisher (string) default(Canonical)
#azure.VirtualMachineSpec.publisher=Canonical
# Image SKU (string) default(16.04.0-LTS)
#azure.VirtualMachineSpec.sku=16.04.0-LTS
# Parameters of a managed disk (string) default(Standard_LRS)
#azure.VirtualMachineSpec.storageAccountType=Standard_LRS
# Hardware profile. (string) default(Basic_A0)
#azure.VirtualMachineSpec.vmSize=Basic_A0
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#azure.VirtualNetwork.boundConfigurationItems=null
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#azure.VirtualNetworkSpec.boundTemplates=null
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#azure.WebApp.boundConfigurationItems=null
# The set of created CIs. (inherited from: udm.BaseDeployedArtifact.boundConfigurationItems)
#azure.WebAppCode.boundConfigurationItems=null
# The set of CI templates. (inherited from: udm.BaseDeployableFileArtifact.boundTemplates)
#azure.WebAppCodeSpec.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableFileArtifact.delimiters)
#azure.WebAppCodeSpec.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableFileArtifact.textFileNamesRegex)
#azure.WebAppCodeSpec.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: azure.BaseWebAppExtension.boundConfigurationItems)
#azure.WebAppExtension.boundConfigurationItems=null
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#azure.WebAppExtensionSpec.boundTemplates=null
# The set of created CIs. (inherited from: azure.BaseWebAppLogging.boundConfigurationItems)
#azure.WebAppLogging.boundConfigurationItems=null
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#azure.WebAppLoggingSpec.boundTemplates=null
# The set of created CIs. (inherited from: azure.BaseWebAppSlot.boundConfigurationItems)
#azure.WebAppSlot.boundConfigurationItems=null
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#azure.WebAppSlotSpec.boundTemplates=null
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#azure.WebAppSpec.boundTemplates=null
# protocol
#azure.WinRMListener.protocol=http
# protocol (enum) values(Http, Https) default(Http)
#azure.WinRMListenerSpec.protocol=http
# create new Resource Group or not
#azure.arm.DeployedTemplate.createNewResourceGroup=true
# Deployment mode
#azure.arm.DeployedTemplate.deploymentMode=Incremental
# Number of times the script waits the Resource Group to be created. 5 seconds interval.
#azure.arm.DeployedTemplate.maxRetries=500
# The set of CI templates. (inherited from: udm.BaseDeployableFileArtifact.boundTemplates)
#azure.arm.Template.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableFileArtifact.delimiters)
#azure.arm.Template.delimiters={{ }}
# Output variables captured in deployed. Key is the alias name and value is the ARM Template output property value for a given resource.
#azure.arm.Template.outputVariables=null
# Regular expression that matches file names of text files
#azure.arm.Template.textFileNamesRegex=.+\.json
# The set of CI templates. (inherited from: file.Archive.boundTemplates)
#azure.blob.Container.Archive.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: file.Archive.delimiters)
#azure.blob.Container.Archive.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: file.Archive.textFileNamesRegex)
#azure.blob.Container.Archive.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of CI templates. (inherited from: file.File.boundTemplates)
#azure.blob.Container.File.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: file.File.delimiters)
#azure.blob.Container.File.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: file.File.textFileNamesRegex)
#azure.blob.Container.File.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of CI templates. (inherited from: file.Folder.boundTemplates)
#azure.blob.Container.Folder.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: file.Folder.delimiters)
#azure.blob.Container.Folder.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: file.Folder.textFileNamesRegex)
#azure.blob.Container.Folder.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: udm.BaseDeployedContainer.boundConfigurationItems)
#azure.blob.Container.boundConfigurationItems=null
# The protocol to use for requests
#azure.blob.Container.protocol=http
# The canned ACL to apply to the object.
#azure.blob.Container.publicAccess=container
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#azure.blob.ContainerSpec.boundTemplates=null
# The protocol to use for requests (enum) values(http, https) default(http)
#azure.blob.ContainerSpec.protocol=http
# The canned ACL to apply to the object. (enum) values(off, blob, container) default(container)
#azure.blob.ContainerSpec.publicAccess=container
# The set of created CIs. (inherited from: udm.BaseDeployedArtifact.boundConfigurationItems)
#azure.blob.UploadedArchive.boundConfigurationItems=null
# The set of created CIs. (inherited from: udm.BaseDeployedArtifact.boundConfigurationItems)
#azure.blob.UploadedFile.boundConfigurationItems=null
# The set of created CIs. (inherited from: udm.BaseDeployedArtifact.boundConfigurationItems)
#azure.blob.UploadedFolder.boundConfigurationItems=null
# Run recipe on NOOP state.
#chef.Cookbook.applyOnNoop=false
# The set of created CIs. (inherited from: udm.BaseDeployedArtifact.boundConfigurationItems)
#chef.Cookbook.boundConfigurationItems=null
# Order at which the Chef recipe should be run.
#chef.Cookbook.runOrder=50
# The set of CI templates. (inherited from: udm.BaseDeployableFileArtifact.boundTemplates)
#chef.CookbookSpec.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableFileArtifact.delimiters)
#chef.CookbookSpec.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableFileArtifact.textFileNamesRegex)
#chef.CookbookSpec.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# Chef binary directory path.
#chef.Solo.chefPath=/usr/local/bin
# The set of created CIs. (inherited from: udm.BaseDeployedArtifact.boundConfigurationItems)
#cloudFoundry.App.boundConfigurationItems=null
# Number of instances to run.
#cloudFoundry.App.instances=1
# The maximum amount of memory that each instance of your app can consume.
#cloudFoundry.App.memory=512
# If true, does not create any route.
#cloudFoundry.App.noRoute=false
# If true, creates a unique random route. Not applicable if 'No Route' property is set.
#cloudFoundry.App.randomRoute=true
# Application Id
#cloudFoundry.AppSpec.appId=null
# The set of CI templates. (inherited from: udm.BaseDeployableArchiveArtifact.boundTemplates)
#cloudFoundry.AppSpec.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableArchiveArtifact.delimiters)
#cloudFoundry.AppSpec.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableArchiveArtifact.textFileNamesRegex)
#cloudFoundry.AppSpec.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# Urls to access the application
#cloudFoundry.AppSpec.urls=null
# The set of created CIs. (inherited from: udm.BaseDeployedArtifact.boundConfigurationItems)
#cloudFoundry.ManifestModule.boundConfigurationItems=null
# Either the manifest file name (if the manifest file is in the base directory of the package), or the path to the manifest file, such as 'package/app/manifest.yml'.
#cloudFoundry.ManifestModule.manifestFileName=manifest.yml
# The set of CI templates. (inherited from: udm.BaseDeployableFolderArtifact.boundTemplates)
#cloudFoundry.ManifestModuleSpec.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableFolderArtifact.delimiters)
#cloudFoundry.ManifestModuleSpec.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableFolderArtifact.textFileNamesRegex)
#cloudFoundry.ManifestModuleSpec.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# Inspection Script
#cloudFoundry.Organization.inspectionScript=cf/discovery/discover-spaces.py
# Whether to use random port (tcp).
#cloudFoundry.Route.randomPort=false
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#cloudFoundry.Services.boundConfigurationItems=null
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#cloudFoundry.ServicesSpec.boundTemplates=null
# The set of created CIs. (inherited from: udm.BaseDeployedContainer.boundConfigurationItems)
#cloudFoundry.Space.boundConfigurationItems=null
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#cloudFoundry.SpaceSpec.boundTemplates=null
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#cmd.Command.boundTemplates=null
# Order of the command
#cmd.Command.order=50
# Indicates whether the undoCommand should be run on an upgrade
#cmd.Command.runUndoCommandOnUpgrade=true
# Order of the undo command
#cmd.Command.undoOrder=49
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#cmd.DeployedCommand.boundConfigurationItems=null
# Order of the command
#cmd.DeployedCommand.order=50
# Forces the command to be rerun.
#cmd.DeployedCommand.rerunCommand=false
# Indicates whether the undoCommand should be run on an upgrade
#cmd.DeployedCommand.runUndoCommandOnUpgrade=true
# Order of the undo command
#cmd.DeployedCommand.undoOrder=49
# Proxy port.
#credentials.ProxyServer.port=80
# Proxy protocol.
#credentials.ProxyServer.protocol=HTTP
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#docker.Container.boundConfigurationItems=null
# If set to a non-zero value, check that the container is running and show the logs after N seconds.
#docker.Container.showLogsAfter=30
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#docker.ContainerSpec.boundTemplates=null
# ID of the container. (string)
#docker.ContainerSpec.containerId=null
# The set of created CIs. (inherited from: udm.BaseDeployedArtifact.boundConfigurationItems)
#docker.DeployedFile.boundConfigurationItems=null
# Create Target Path
#docker.DeployedFile.createTargetPath=false
# Target Path Shared
#docker.DeployedFile.targetPathShared=true
# The set of created CIs. (inherited from: udm.BaseDeployedArtifact.boundConfigurationItems)
#docker.DeployedFolder.boundConfigurationItems=null
# Create Target Path
#docker.DeployedFolder.createTargetPath=false
# Target Path Shared
#docker.DeployedFolder.targetPathShared=true
# Enable this option to connect to the Docker host in a safe manner. If enabled, you must provide certificate details.
#docker.Engine.enableTLS=false
# Enable this option if docker host is also a swarm manager
#docker.Engine.isSwarmManager=false
# The set of CI templates. (inherited from: udm.BaseDeployableFileArtifact.boundTemplates)
#docker.File.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableFileArtifact.delimiters)
#docker.File.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableFileArtifact.textFileNamesRegex)
#docker.File.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of CI templates. (inherited from: udm.BaseDeployableFolderArtifact.boundTemplates)
#docker.Folder.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableFolderArtifact.delimiters)
#docker.Folder.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableFolderArtifact.textFileNamesRegex)
#docker.Folder.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# If set to true, volume will be mounted as read-only.
#docker.MountedVolume.readOnly=false
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#docker.Network.boundConfigurationItems=null
# Name of the driver used to create the network.
#docker.Network.driver=bridge
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#docker.NetworkSpec.boundTemplates=null
# Network Id (string)
#docker.NetworkSpec.networkId=null
# Protocol used by the specified port binding. For example: udp or tcp
#docker.Port.protocol=tcp
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#docker.Service.boundConfigurationItems=null
# Mode of resolution to use for internal load balancing between tasks ('vip' or 'dnsrr').
#docker.Service.endpointResolution=vip
# Scheduling mode for the service.
#docker.Service.mode=replicated
# Number of replicas.
#docker.Service.replicas=1
# Restart the container when it exits.
#docker.Service.restartPolicyName=none
# Amount of time between updates.
#docker.Service.updateDelay=0
# Update Failure Action
#docker.Service.updateFailureAction=pause
# Maximum number of tasks to be updated in one iteration (0 means unlimited parallelism).
#docker.Service.updateParallelism=0
# Maximum number of retries to wait for the required number of replicas to come up.
#docker.Service.waitForReplicasMaxRetries=12
# Minimum number of replicas that should come up for this service to be considered successfully deployed.
#docker.Service.waitForReplicasNr=1
# Protocol used by the specified port binding. For example: udp or tcp
#docker.ServicePort.protocol=tcp
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#docker.ServiceSpec.boundTemplates=null
# ID of the service. (string)
#docker.ServiceSpec.serviceId=null
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#docker.Volume.boundConfigurationItems=null
# Name of the driver used to create the volume.
#docker.Volume.driver=local
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#docker.VolumeSpec.boundTemplates=null
# The set of CI templates. (inherited from: udm.BaseDeployableArchiveArtifact.boundTemplates)
#file.Archive.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableArchiveArtifact.delimiters)
#file.Archive.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableArchiveArtifact.textFileNamesRegex)
#file.Archive.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: file.DeployedArtifactOnHost.boundConfigurationItems)
#file.DeployedArchive.boundConfigurationItems=null
# If set to true, files are directly copied to the target directory without first being uploaded to the staging or temporary directory (like versions of XL Deploy prior to 4.0.0) (inherited from: file.DeployedArtifactOnHost.copyDirectlyToTargetPath)
#file.DeployedArchive.copyDirectlyToTargetPath=false
# The sub directories on the target machine are not deleted if files other than that copied by XL Deploy are present.  (inherited from: file.DeployedArtifactOnHost.targetPathSharedSubDirectories)
#file.DeployedArchive.targetPathSharedSubDirectories=false
# The set of created CIs. (inherited from: udm.BaseDeployedArtifact.boundConfigurationItems)
#file.DeployedArtifactOnHost.boundConfigurationItems=null
# If set to true, files are directly copied to the target directory without first being uploaded to the staging or temporary directory (like versions of XL Deploy prior to 4.0.0)
#file.DeployedArtifactOnHost.copyDirectlyToTargetPath=false
# Create the targetPath on the host if it does not exist.
#file.DeployedArtifactOnHost.createTargetPath=false
# Is the targetPath shared by others on the host. When true, the targetPath is not deleted during undeployment; only the artifacts copied to it.
#file.DeployedArtifactOnHost.targetPathShared=true
# The sub directories on the target machine are not deleted if files other than that copied by XL Deploy are present. 
#file.DeployedArtifactOnHost.targetPathSharedSubDirectories=false
# The set of created CIs. (inherited from: file.DeployedArtifactOnHost.boundConfigurationItems)
#file.DeployedFile.boundConfigurationItems=null
# If set to true, files are directly copied to the target directory without first being uploaded to the staging or temporary directory (like versions of XL Deploy prior to 4.0.0) (inherited from: file.DeployedArtifactOnHost.copyDirectlyToTargetPath)
#file.DeployedFile.copyDirectlyToTargetPath=false
# The sub directories on the target machine are not deleted if files other than that copied by XL Deploy are present.  (inherited from: file.DeployedArtifactOnHost.targetPathSharedSubDirectories)
#file.DeployedFile.targetPathSharedSubDirectories=false
# The set of created CIs. (inherited from: file.DeployedArtifactOnHost.boundConfigurationItems)
#file.DeployedFolder.boundConfigurationItems=null
# If set to true, files are directly copied to the target directory without first being uploaded to the staging or temporary directory (like versions of XL Deploy prior to 4.0.0) (inherited from: file.DeployedArtifactOnHost.copyDirectlyToTargetPath)
#file.DeployedFolder.copyDirectlyToTargetPath=false
# Not applicable for this type.
#file.DeployedFolder.targetFileName=null
# The sub directories on the target machine are not deleted if files other than that copied by XL Deploy are present.  (inherited from: file.DeployedArtifactOnHost.targetPathSharedSubDirectories)
#file.DeployedFolder.targetPathSharedSubDirectories=false
# The set of CI templates. (inherited from: udm.BaseDeployableFileArtifact.boundTemplates)
#file.File.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableFileArtifact.delimiters)
#file.File.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableFileArtifact.textFileNamesRegex)
#file.File.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of CI templates. (inherited from: udm.BaseDeployableFolderArtifact.boundTemplates)
#file.Folder.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableFolderArtifact.delimiters)
#file.Folder.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableFolderArtifact.textFileNamesRegex)
#file.Folder.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#generic.AbstractDeployed.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources).
#generic.AbstractDeployed.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation.
#generic.AbstractDeployed.createOrder=50
# Create Verb
#generic.AbstractDeployed.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources).
#generic.AbstractDeployed.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation.
#generic.AbstractDeployed.destroyOrder=40
# Destroy Verb
#generic.AbstractDeployed.destroyVerb=Destroy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script.
#generic.AbstractDeployed.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container.
#generic.AbstractDeployed.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory.
#generic.AbstractDeployed.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources).
#generic.AbstractDeployed.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation.
#generic.AbstractDeployed.modifyOrder=50
# Modify Verb
#generic.AbstractDeployed.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources).
#generic.AbstractDeployed.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation.
#generic.AbstractDeployed.noopOrder=50
# Noop Verb
#generic.AbstractDeployed.noopVerb=Modify
# The generic container requires a restart for the action performed by this deployed.
#generic.AbstractDeployed.restartRequired=false
# The generic container requires a restart for the NOOP action performed by this deployed.
#generic.AbstractDeployed.restartRequiredForNoop=false
# The set of created CIs. (inherited from: generic.AbstractDeployed.boundConfigurationItems)
#generic.AbstractDeployedArtifact.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.AbstractDeployed.createOptions)
#generic.AbstractDeployedArtifact.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: generic.AbstractDeployed.createOrder)
#generic.AbstractDeployedArtifact.createOrder=50
# Create the target directory on the generic server if it does not exist.
#generic.AbstractDeployedArtifact.createTargetDirectory=false
# Create Verb (inherited from: generic.AbstractDeployed.createVerb)
#generic.AbstractDeployedArtifact.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.AbstractDeployed.destroyOptions)
#generic.AbstractDeployedArtifact.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: generic.AbstractDeployed.destroyOrder)
#generic.AbstractDeployedArtifact.destroyOrder=40
# Destroy Verb (inherited from: generic.AbstractDeployed.destroyVerb)
#generic.AbstractDeployedArtifact.destroyVerb=Destroy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.AbstractDeployed.inspectClasspathResources)
#generic.AbstractDeployedArtifact.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.AbstractDeployed.inspectScript)
#generic.AbstractDeployedArtifact.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.AbstractDeployed.inspectTemplateClasspathResources)
#generic.AbstractDeployedArtifact.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.AbstractDeployed.modifyOptions)
#generic.AbstractDeployedArtifact.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: generic.AbstractDeployed.modifyOrder)
#generic.AbstractDeployedArtifact.modifyOrder=50
# Modify Verb (inherited from: generic.AbstractDeployed.modifyVerb)
#generic.AbstractDeployedArtifact.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.AbstractDeployed.noopOptions)
#generic.AbstractDeployedArtifact.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: generic.AbstractDeployed.noopOrder)
#generic.AbstractDeployedArtifact.noopOrder=50
# Noop Verb (inherited from: generic.AbstractDeployed.noopVerb)
#generic.AbstractDeployedArtifact.noopVerb=Modify
# The generic container requires a restart for the action performed by this deployed. (inherited from: generic.AbstractDeployed.restartRequired)
#generic.AbstractDeployedArtifact.restartRequired=false
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: generic.AbstractDeployed.restartRequiredForNoop)
#generic.AbstractDeployedArtifact.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server.
#generic.AbstractDeployedArtifact.targetDirectory=null
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it.
#generic.AbstractDeployedArtifact.targetDirectoryShared=true
# The set of CI templates. (inherited from: udm.BaseDeployableArchiveArtifact.boundTemplates)
#generic.Archive.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableArchiveArtifact.delimiters)
#generic.Archive.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableArchiveArtifact.textFileNamesRegex)
#generic.Archive.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script.
#generic.BaseGenericContainer.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container.
#generic.BaseGenericContainer.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory.
#generic.BaseGenericContainer.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script.
#generic.BaseGenericContainer.restartClasspathResources=null
# The order of the restart container step in the step list.
#generic.BaseGenericContainer.restartOrder=90
# Classpath to the script used to restart the generic container.
#generic.BaseGenericContainer.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory.
#generic.BaseGenericContainer.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action.
#generic.BaseGenericContainer.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script.
#generic.BaseGenericContainer.startClasspathResources=null
# The order of the start container step in the step list.
#generic.BaseGenericContainer.startOrder=90
# Classpath to the script used to start the generic container.
#generic.BaseGenericContainer.startScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory.
#generic.BaseGenericContainer.startTemplateClasspathResources=null
# The time to wait in seconds for a container start action.
#generic.BaseGenericContainer.startWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the stop script.
#generic.BaseGenericContainer.stopClasspathResources=null
# The order of the stop container step in the step list.
#generic.BaseGenericContainer.stopOrder=10
# Classpath to the script used to stop the generic container.
#generic.BaseGenericContainer.stopScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory.
#generic.BaseGenericContainer.stopTemplateClasspathResources=null
# The time to wait in seconds for a container stop action.
#generic.BaseGenericContainer.stopWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.BaseGenericContainer.inspectClasspathResources)
#generic.Container.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.BaseGenericContainer.inspectScript)
#generic.Container.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.BaseGenericContainer.inspectTemplateClasspathResources)
#generic.Container.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: generic.BaseGenericContainer.restartClasspathResources)
#generic.Container.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: generic.BaseGenericContainer.restartOrder)
#generic.Container.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: generic.BaseGenericContainer.restartScript)
#generic.Container.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.BaseGenericContainer.restartTemplateClasspathResources)
#generic.Container.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: generic.BaseGenericContainer.restartWaitTime)
#generic.Container.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: generic.BaseGenericContainer.startClasspathResources)
#generic.Container.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: generic.BaseGenericContainer.startOrder)
#generic.Container.startOrder=90
# Classpath to the script used to start the generic container. (inherited from: generic.BaseGenericContainer.startScript)
#generic.Container.startScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.BaseGenericContainer.startTemplateClasspathResources)
#generic.Container.startTemplateClasspathResources=null
# The time to wait in seconds for a container start action. (inherited from: generic.BaseGenericContainer.startWaitTime)
#generic.Container.startWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: generic.BaseGenericContainer.stopClasspathResources)
#generic.Container.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: generic.BaseGenericContainer.stopOrder)
#generic.Container.stopOrder=10
# Classpath to the script used to stop the generic container. (inherited from: generic.BaseGenericContainer.stopScript)
#generic.Container.stopScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.BaseGenericContainer.stopTemplateClasspathResources)
#generic.Container.stopTemplateClasspathResources=null
# The time to wait in seconds for a container stop action. (inherited from: generic.BaseGenericContainer.stopWaitTime)
#generic.Container.stopWaitTime=0
# The set of created CIs. (inherited from: generic.AbstractDeployedArtifact.boundConfigurationItems)
#generic.CopiedArtifact.boundConfigurationItems=null
# If set to true, files are directly copied to the target directory without first being uploaded to the staging or temporary directory (like versions of XL Deploy prior to 4.0.0)
#generic.CopiedArtifact.copyDirectlyToTargetPath=false
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.AbstractDeployedArtifact.createOptions)
#generic.CopiedArtifact.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: generic.AbstractDeployedArtifact.createOrder)
#generic.CopiedArtifact.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: generic.AbstractDeployedArtifact.createTargetDirectory)
#generic.CopiedArtifact.createTargetDirectory=false
# Create Verb (inherited from: generic.AbstractDeployedArtifact.createVerb)
#generic.CopiedArtifact.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.AbstractDeployedArtifact.destroyOptions)
#generic.CopiedArtifact.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: generic.AbstractDeployedArtifact.destroyOrder)
#generic.CopiedArtifact.destroyOrder=40
# Destroy Verb (inherited from: generic.AbstractDeployedArtifact.destroyVerb)
#generic.CopiedArtifact.destroyVerb=Destroy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.AbstractDeployedArtifact.inspectClasspathResources)
#generic.CopiedArtifact.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.AbstractDeployedArtifact.inspectScript)
#generic.CopiedArtifact.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.AbstractDeployedArtifact.inspectTemplateClasspathResources)
#generic.CopiedArtifact.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.AbstractDeployedArtifact.modifyOptions)
#generic.CopiedArtifact.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: generic.AbstractDeployedArtifact.modifyOrder)
#generic.CopiedArtifact.modifyOrder=50
# Modify Verb (inherited from: generic.AbstractDeployedArtifact.modifyVerb)
#generic.CopiedArtifact.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.AbstractDeployedArtifact.noopOptions)
#generic.CopiedArtifact.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: generic.AbstractDeployedArtifact.noopOrder)
#generic.CopiedArtifact.noopOrder=50
# Noop Verb (inherited from: generic.AbstractDeployedArtifact.noopVerb)
#generic.CopiedArtifact.noopVerb=Modify
# If set to true, preserve the existing files on the remote host (do not delete the copied files during the destroy operation). 
#generic.CopiedArtifact.preserveExistingFiles=false
# The generic container requires a restart for the action performed by this deployed. (inherited from: generic.AbstractDeployedArtifact.restartRequired)
#generic.CopiedArtifact.restartRequired=false
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: generic.AbstractDeployedArtifact.restartRequiredForNoop)
#generic.CopiedArtifact.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: generic.AbstractDeployedArtifact.targetDirectory)
#generic.CopiedArtifact.targetDirectory=null
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: generic.AbstractDeployedArtifact.targetDirectoryShared)
#generic.CopiedArtifact.targetDirectoryShared=true
# If set to true, the sub directories on the target machine are not deleted if files other than that copied by XL Deploy are present. Please note that setting this option to true will cause the removal process to be a slower. 
#generic.CopiedArtifact.targetPathSharedSubDirectories=false
# The set of created CIs. (inherited from: generic.AbstractDeployed.boundConfigurationItems)
#generic.ExecutedFolder.boundConfigurationItems=null
# If set to true, the checkpoint is set after the first script in a folder has been executed. Otherwise the checkpoint is set after the last script in a folder has been executed.
#generic.ExecutedFolder.checkpointAfterFirstScript=true
# Additional classpath resources that should be uploaded to the working directory before executing the script.
#generic.ExecutedFolder.classpathResources=null
# Common folder that should be uploaded to the working directory.
#generic.ExecutedFolder.commonScriptFolderName=common
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.AbstractDeployed.createOptions)
#generic.ExecutedFolder.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: generic.AbstractDeployed.createOrder)
#generic.ExecutedFolder.createOrder=50
# Create Verb (inherited from: generic.AbstractDeployed.createVerb)
#generic.ExecutedFolder.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.AbstractDeployed.destroyOptions)
#generic.ExecutedFolder.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: generic.AbstractDeployed.destroyOrder)
#generic.ExecutedFolder.destroyOrder=40
# Destroy Verb (inherited from: generic.AbstractDeployed.destroyVerb)
#generic.ExecutedFolder.destroyVerb=Destroy
# If set to true, modified scripts are also executed on a MODIFY or a NOOP.
#generic.ExecutedFolder.executeModifiedScripts=true
# If set to true, rollback scripts for modified scripts are also executed on a MODIFY or a NOOP.
#generic.ExecutedFolder.executeRollbackForModifiedScripts=true
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.AbstractDeployed.inspectClasspathResources)
#generic.ExecutedFolder.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.AbstractDeployed.inspectScript)
#generic.ExecutedFolder.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.AbstractDeployed.inspectTemplateClasspathResources)
#generic.ExecutedFolder.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.AbstractDeployed.modifyOptions)
#generic.ExecutedFolder.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: generic.AbstractDeployed.modifyOrder)
#generic.ExecutedFolder.modifyOrder=50
# Modify Verb (inherited from: generic.AbstractDeployed.modifyVerb)
#generic.ExecutedFolder.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.AbstractDeployed.noopOptions)
#generic.ExecutedFolder.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: generic.AbstractDeployed.noopOrder)
#generic.ExecutedFolder.noopOrder=50
# Noop Verb (inherited from: generic.AbstractDeployed.noopVerb)
#generic.ExecutedFolder.noopVerb=Modify
# The generic container requires a restart for the action performed by this deployed. (inherited from: generic.AbstractDeployed.restartRequired)
#generic.ExecutedFolder.restartRequired=false
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: generic.AbstractDeployed.restartRequiredForNoop)
#generic.ExecutedFolder.restartRequiredForNoop=false
# Additional template classpath resources that should be uploaded to the working directory before executing the script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory.
#generic.ExecutedFolder.templateClasspathResources=null
# The set of created CIs. (inherited from: generic.AbstractDeployed.boundConfigurationItems)
#generic.ExecutedScript.boundConfigurationItems=null
# Additional classpath resources that should be uploaded to the working directory before executing the script.
#generic.ExecutedScript.classpathResources=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.AbstractDeployed.createOptions)
#generic.ExecutedScript.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: generic.AbstractDeployed.createOrder)
#generic.ExecutedScript.createOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the create operation.
#generic.ExecutedScript.createScript=null
# Create Verb (inherited from: generic.AbstractDeployed.createVerb)
#generic.ExecutedScript.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.AbstractDeployed.destroyOptions)
#generic.ExecutedScript.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: generic.AbstractDeployed.destroyOrder)
#generic.ExecutedScript.destroyOrder=40
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation.
#generic.ExecutedScript.destroyScript=null
# Destroy Verb (inherited from: generic.AbstractDeployed.destroyVerb)
#generic.ExecutedScript.destroyVerb=Destroy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.AbstractDeployed.inspectClasspathResources)
#generic.ExecutedScript.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.AbstractDeployed.inspectScript)
#generic.ExecutedScript.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.AbstractDeployed.inspectTemplateClasspathResources)
#generic.ExecutedScript.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.AbstractDeployed.modifyOptions)
#generic.ExecutedScript.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: generic.AbstractDeployed.modifyOrder)
#generic.ExecutedScript.modifyOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the modify operation.
#generic.ExecutedScript.modifyScript=null
# Modify Verb (inherited from: generic.AbstractDeployed.modifyVerb)
#generic.ExecutedScript.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.AbstractDeployed.noopOptions)
#generic.ExecutedScript.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: generic.AbstractDeployed.noopOrder)
#generic.ExecutedScript.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation.
#generic.ExecutedScript.noopScript=null
# Noop Verb (inherited from: generic.AbstractDeployed.noopVerb)
#generic.ExecutedScript.noopVerb=Modify
# Name of working directory on target host. Default is to create a temporary directory which is deleted when connection is closed.
#generic.ExecutedScript.remoteWorkingDirectoryPath=null
# The generic container requires a restart for the action performed by this deployed. (inherited from: generic.AbstractDeployed.restartRequired)
#generic.ExecutedScript.restartRequired=false
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: generic.AbstractDeployed.restartRequiredForNoop)
#generic.ExecutedScript.restartRequiredForNoop=false
# Retain the specified working directory on target host after completion.
#generic.ExecutedScript.retainRemoteWorkingDirectory=false
# Additional template classpath resources that should be uploaded to the working directory before executing the script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory.
#generic.ExecutedScript.templateClasspathResources=null
# The set of created CIs. (inherited from: generic.ExecutedScript.boundConfigurationItems)
#generic.ExecutedScriptWithDerivedArtifact.boundConfigurationItems=null
# Additional classpath resources that should be uploaded to the working directory before executing the script. (inherited from: generic.ExecutedScript.classpathResources)
#generic.ExecutedScriptWithDerivedArtifact.classpathResources=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.ExecutedScript.createOptions)
#generic.ExecutedScriptWithDerivedArtifact.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: generic.ExecutedScript.createOrder)
#generic.ExecutedScriptWithDerivedArtifact.createOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the create operation. (inherited from: generic.ExecutedScript.createScript)
#generic.ExecutedScriptWithDerivedArtifact.createScript=null
# Create Verb (inherited from: generic.ExecutedScript.createVerb)
#generic.ExecutedScriptWithDerivedArtifact.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.ExecutedScript.destroyOptions)
#generic.ExecutedScriptWithDerivedArtifact.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: generic.ExecutedScript.destroyOrder)
#generic.ExecutedScriptWithDerivedArtifact.destroyOrder=40
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation. (inherited from: generic.ExecutedScript.destroyScript)
#generic.ExecutedScriptWithDerivedArtifact.destroyScript=null
# Destroy Verb (inherited from: generic.ExecutedScript.destroyVerb)
#generic.ExecutedScriptWithDerivedArtifact.destroyVerb=Destroy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.ExecutedScript.inspectClasspathResources)
#generic.ExecutedScriptWithDerivedArtifact.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.ExecutedScript.inspectScript)
#generic.ExecutedScriptWithDerivedArtifact.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.ExecutedScript.inspectTemplateClasspathResources)
#generic.ExecutedScriptWithDerivedArtifact.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.ExecutedScript.modifyOptions)
#generic.ExecutedScriptWithDerivedArtifact.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: generic.ExecutedScript.modifyOrder)
#generic.ExecutedScriptWithDerivedArtifact.modifyOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the modify operation. (inherited from: generic.ExecutedScript.modifyScript)
#generic.ExecutedScriptWithDerivedArtifact.modifyScript=null
# Modify Verb (inherited from: generic.ExecutedScript.modifyVerb)
#generic.ExecutedScriptWithDerivedArtifact.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.ExecutedScript.noopOptions)
#generic.ExecutedScriptWithDerivedArtifact.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: generic.ExecutedScript.noopOrder)
#generic.ExecutedScriptWithDerivedArtifact.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: generic.ExecutedScript.noopScript)
#generic.ExecutedScriptWithDerivedArtifact.noopScript=null
# Noop Verb (inherited from: generic.ExecutedScript.noopVerb)
#generic.ExecutedScriptWithDerivedArtifact.noopVerb=Modify
# Name of working directory on target host. Default is to create a temporary directory which is deleted when connection is closed. (inherited from: generic.ExecutedScript.remoteWorkingDirectoryPath)
#generic.ExecutedScriptWithDerivedArtifact.remoteWorkingDirectoryPath=null
# The generic container requires a restart for the action performed by this deployed. (inherited from: generic.ExecutedScript.restartRequired)
#generic.ExecutedScriptWithDerivedArtifact.restartRequired=false
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: generic.ExecutedScript.restartRequiredForNoop)
#generic.ExecutedScriptWithDerivedArtifact.restartRequiredForNoop=false
# Retain the specified working directory on target host after completion. (inherited from: generic.ExecutedScript.retainRemoteWorkingDirectory)
#generic.ExecutedScriptWithDerivedArtifact.retainRemoteWorkingDirectory=false
# Additional template classpath resources that should be uploaded to the working directory before executing the script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.ExecutedScript.templateClasspathResources)
#generic.ExecutedScriptWithDerivedArtifact.templateClasspathResources=null
# The set of CI templates. (inherited from: udm.BaseDeployableFileArtifact.boundTemplates)
#generic.File.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableFileArtifact.delimiters)
#generic.File.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableFileArtifact.textFileNamesRegex)
#generic.File.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of CI templates. (inherited from: udm.BaseDeployableFolderArtifact.boundTemplates)
#generic.Folder.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableFolderArtifact.delimiters)
#generic.Folder.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableFolderArtifact.textFileNamesRegex)
#generic.Folder.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: generic.AbstractDeployed.boundConfigurationItems)
#generic.ManualProcess.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.AbstractDeployed.createOptions)
#generic.ManualProcess.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: generic.AbstractDeployed.createOrder)
#generic.ManualProcess.createOrder=50
# Classpath to the script that generates the instructions for the create operation.
#generic.ManualProcess.createScript=null
# Create Verb (inherited from: generic.AbstractDeployed.createVerb)
#generic.ManualProcess.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.AbstractDeployed.destroyOptions)
#generic.ManualProcess.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: generic.AbstractDeployed.destroyOrder)
#generic.ManualProcess.destroyOrder=40
# Classpath to the script that generates the instructions for the destroy operation.
#generic.ManualProcess.destroyScript=null
# Destroy Verb (inherited from: generic.AbstractDeployed.destroyVerb)
#generic.ManualProcess.destroyVerb=Destroy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.AbstractDeployed.inspectClasspathResources)
#generic.ManualProcess.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.AbstractDeployed.inspectScript)
#generic.ManualProcess.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.AbstractDeployed.inspectTemplateClasspathResources)
#generic.ManualProcess.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.AbstractDeployed.modifyOptions)
#generic.ManualProcess.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: generic.AbstractDeployed.modifyOrder)
#generic.ManualProcess.modifyOrder=50
# Classpath to the script that generates the instructions for the modify operation.
#generic.ManualProcess.modifyScript=null
# Modify Verb (inherited from: generic.AbstractDeployed.modifyVerb)
#generic.ManualProcess.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.AbstractDeployed.noopOptions)
#generic.ManualProcess.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: generic.AbstractDeployed.noopOrder)
#generic.ManualProcess.noopOrder=50
# Classpath to the script that generates the instructions for the noop operation.
#generic.ManualProcess.noopScript=null
# Noop Verb (inherited from: generic.AbstractDeployed.noopVerb)
#generic.ManualProcess.noopVerb=Modify
# The generic container requires a restart for the action performed by this deployed. (inherited from: generic.AbstractDeployed.restartRequired)
#generic.ManualProcess.restartRequired=false
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: generic.AbstractDeployed.restartRequiredForNoop)
#generic.ManualProcess.restartRequiredForNoop=false
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.BaseGenericContainer.inspectClasspathResources)
#generic.NestedContainer.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.BaseGenericContainer.inspectScript)
#generic.NestedContainer.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.BaseGenericContainer.inspectTemplateClasspathResources)
#generic.NestedContainer.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: generic.BaseGenericContainer.restartClasspathResources)
#generic.NestedContainer.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: generic.BaseGenericContainer.restartOrder)
#generic.NestedContainer.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: generic.BaseGenericContainer.restartScript)
#generic.NestedContainer.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.BaseGenericContainer.restartTemplateClasspathResources)
#generic.NestedContainer.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: generic.BaseGenericContainer.restartWaitTime)
#generic.NestedContainer.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: generic.BaseGenericContainer.startClasspathResources)
#generic.NestedContainer.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: generic.BaseGenericContainer.startOrder)
#generic.NestedContainer.startOrder=90
# Classpath to the script used to start the generic container. (inherited from: generic.BaseGenericContainer.startScript)
#generic.NestedContainer.startScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.BaseGenericContainer.startTemplateClasspathResources)
#generic.NestedContainer.startTemplateClasspathResources=null
# The time to wait in seconds for a container start action. (inherited from: generic.BaseGenericContainer.startWaitTime)
#generic.NestedContainer.startWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: generic.BaseGenericContainer.stopClasspathResources)
#generic.NestedContainer.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: generic.BaseGenericContainer.stopOrder)
#generic.NestedContainer.stopOrder=10
# Classpath to the script used to stop the generic container. (inherited from: generic.BaseGenericContainer.stopScript)
#generic.NestedContainer.stopScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.BaseGenericContainer.stopTemplateClasspathResources)
#generic.NestedContainer.stopTemplateClasspathResources=null
# The time to wait in seconds for a container stop action. (inherited from: generic.BaseGenericContainer.stopWaitTime)
#generic.NestedContainer.stopWaitTime=0
# The set of created CIs. (inherited from: generic.AbstractDeployedArtifact.boundConfigurationItems)
#generic.ProcessedTemplate.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.AbstractDeployedArtifact.createOptions)
#generic.ProcessedTemplate.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: generic.AbstractDeployedArtifact.createOrder)
#generic.ProcessedTemplate.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: generic.AbstractDeployedArtifact.createTargetDirectory)
#generic.ProcessedTemplate.createTargetDirectory=false
# Create Verb (inherited from: generic.AbstractDeployedArtifact.createVerb)
#generic.ProcessedTemplate.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.AbstractDeployedArtifact.destroyOptions)
#generic.ProcessedTemplate.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: generic.AbstractDeployedArtifact.destroyOrder)
#generic.ProcessedTemplate.destroyOrder=40
# Destroy Verb (inherited from: generic.AbstractDeployedArtifact.destroyVerb)
#generic.ProcessedTemplate.destroyVerb=Destroy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.AbstractDeployedArtifact.inspectClasspathResources)
#generic.ProcessedTemplate.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.AbstractDeployedArtifact.inspectScript)
#generic.ProcessedTemplate.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.AbstractDeployedArtifact.inspectTemplateClasspathResources)
#generic.ProcessedTemplate.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.AbstractDeployedArtifact.modifyOptions)
#generic.ProcessedTemplate.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: generic.AbstractDeployedArtifact.modifyOrder)
#generic.ProcessedTemplate.modifyOrder=50
# Modify Verb (inherited from: generic.AbstractDeployedArtifact.modifyVerb)
#generic.ProcessedTemplate.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.AbstractDeployedArtifact.noopOptions)
#generic.ProcessedTemplate.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: generic.AbstractDeployedArtifact.noopOrder)
#generic.ProcessedTemplate.noopOrder=50
# Noop Verb (inherited from: generic.AbstractDeployedArtifact.noopVerb)
#generic.ProcessedTemplate.noopVerb=Modify
# The generic container requires a restart for the action performed by this deployed. (inherited from: generic.AbstractDeployedArtifact.restartRequired)
#generic.ProcessedTemplate.restartRequired=false
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: generic.AbstractDeployedArtifact.restartRequiredForNoop)
#generic.ProcessedTemplate.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: generic.AbstractDeployedArtifact.targetDirectory)
#generic.ProcessedTemplate.targetDirectory=null
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: generic.AbstractDeployedArtifact.targetDirectoryShared)
#generic.ProcessedTemplate.targetDirectoryShared=true
# Classpath to the freemarker template used to generate the content of the final text base artifact.
#generic.ProcessedTemplate.template=null
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#generic.Resource.boundTemplates=null
# When true, the container restart strategy is applied for a NOOP operation (inherited from: glassfish.CliManagedDeployed.applyContainerRestartStrategyOnNoop)
#glassfish.ApplicationRef.applyContainerRestartStrategyOnNoop=false
# When true, the deployed restart strategy is applied for a NOOP operation (inherited from: glassfish.CliManagedDeployed.applyRestartStrategyOnNoop)
#glassfish.ApplicationRef.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: glassfish.CliManagedDeployed.boundConfigurationItems)
#glassfish.ApplicationRef.boundConfigurationItems=null
# The logical stop/start sequence for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, stop container, start container. (inherited from: glassfish.CliManagedDeployed.containerRestartStrategy)
#glassfish.ApplicationRef.containerRestartStrategy=NONE
# The order of the step in the step list for the create operation.
#glassfish.ApplicationRef.createOrder=75
# Classpath to the script that is uploaded and executed on the generic container for the create operation.
#glassfish.ApplicationRef.createScript=glassfish/applicationref/deploy.py
# Create Verb (inherited from: glassfish.CliManagedDeployed.createVerb)
#glassfish.ApplicationRef.createVerb=Create
# The order of the step in the step list for the destroy operation.
#glassfish.ApplicationRef.destroyOrder=25
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation.
#glassfish.ApplicationRef.destroyScript=glassfish/applicationref/undeploy.py
# Destroy Verb (inherited from: glassfish.CliManagedDeployed.destroyVerb)
#glassfish.ApplicationRef.destroyVerb=Destroy
# Classpath to the script used to inspect the generic container.
#glassfish.ApplicationRef.inspectScript=glassfish/applicationref/inspect.py
# List of python library scripts that should be automatically loaded when using a Glassfish CLI script. (inherited from: glassfish.CliManagedDeployed.libraryScripts)
#glassfish.ApplicationRef.libraryScripts=null
# The order of the step in the step list for the modify operation.
#glassfish.ApplicationRef.modifyOrder=75
# Classpath to the script that is uploaded and executed on the generic container for the modify operation. (inherited from: glassfish.CliManagedDeployed.modifyScript)
#glassfish.ApplicationRef.modifyScript=null
# Modify Verb (inherited from: glassfish.CliManagedDeployed.modifyVerb)
#glassfish.ApplicationRef.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: glassfish.CliManagedDeployed.noopOrder)
#glassfish.ApplicationRef.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: glassfish.CliManagedDeployed.noopScript)
#glassfish.ApplicationRef.noopScript=null
# Noop Verb (inherited from: glassfish.CliManagedDeployed.noopVerb)
#glassfish.ApplicationRef.noopVerb=Modify
# The logical stop/start sequence for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. Please note that the steps will be created only if start/stop scripts are defined for the deployable. (inherited from: glassfish.CliManagedDeployed.restartStrategy)
#glassfish.ApplicationRef.restartStrategy=NONE
# The order in which a start step will be executed. (inherited from: glassfish.CliManagedDeployed.startOrder)
#glassfish.ApplicationRef.startOrder=90
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: glassfish.CliManagedDeployed.startScript)
#glassfish.ApplicationRef.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: glassfish.CliManagedDeployed.startVerb)
#glassfish.ApplicationRef.startVerb=Start
# The order in which a stop step will be executed. (inherited from: glassfish.CliManagedDeployed.stopOrder)
#glassfish.ApplicationRef.stopOrder=10
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: glassfish.CliManagedDeployed.stopScript)
#glassfish.ApplicationRef.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: glassfish.CliManagedDeployed.stopVerb)
#glassfish.ApplicationRef.stopVerb=Stop
# The set of CI templates. (inherited from: jee.ResourceSpec.boundTemplates)
#glassfish.ApplicationRefSpec.boundTemplates=null
# When true, the container restart strategy is applied for a NOOP operation (inherited from: glassfish.CliManagedDeployedArtifact.applyContainerRestartStrategyOnNoop)
#glassfish.Artifact.applyContainerRestartStrategyOnNoop=false
# When true, the deployed restart strategy is applied for a NOOP operation (inherited from: glassfish.CliManagedDeployedArtifact.applyRestartStrategyOnNoop)
#glassfish.Artifact.applyRestartStrategyOnNoop=false
# Controls whether availability is enabled for web sessions and for stateful session bean (SFSB) checkpointing and potentially passivation
#glassfish.Artifact.availabilityEnabled=false
# The set of created CIs. (inherited from: glassfish.CliManagedDeployedArtifact.boundConfigurationItems)
#glassfish.Artifact.boundConfigurationItems=null
# The logical stop/start sequence for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, stop container, start container. (inherited from: glassfish.CliManagedDeployedArtifact.containerRestartStrategy)
#glassfish.Artifact.containerRestartStrategy=NONE
# The order of the step in the step list for the create operation.
#glassfish.Artifact.createOrder=70
# Classpath to the script that is uploaded and executed on the generic container for the create operation.
#glassfish.Artifact.createScript=glassfish/application/deploy.py
# Create Verb
#glassfish.Artifact.createVerb=Deploy
# The order of the step in the step list for the destroy operation.
#glassfish.Artifact.destroyOrder=30
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation.
#glassfish.Artifact.destroyScript=glassfish/application/undeploy.py
# Destroy Verb
#glassfish.Artifact.destroyVerb=Undeploy
# Allows users to access the application.
#glassfish.Artifact.enabled=true
# Forces redeployment even if this application has already been deployed or already exists.
#glassfish.Artifact.force=false
# Classpath to the script used to inspect the generic container.
#glassfish.Artifact.inspectScript=glassfish/application/inspect-app.py
# Retains web sessions, SFSB instances, and persistently created EJB timers between redeployments
#glassfish.Artifact.keepState=false
# This option controls whether the deployed application is available for load balancing. The default is true
#glassfish.Artifact.lbenabled=true
# List of python library scripts that should be automatically loaded when using a Glassfish CLI script.
#glassfish.Artifact.libraryScripts=glassfish/application/application-lib.py
# The order of the step in the step list for the modify operation.
#glassfish.Artifact.modifyOrder=70
# Classpath to the script that is uploaded and executed on the generic container for the modify operation.
#glassfish.Artifact.modifyScript=glassfish/application/modify.py
# Modify Verb
#glassfish.Artifact.modifyVerb=Update
# The order of the step in the step list for the noop operation. (inherited from: glassfish.CliManagedDeployedArtifact.noopOrder)
#glassfish.Artifact.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: glassfish.CliManagedDeployedArtifact.noopScript)
#glassfish.Artifact.noopScript=null
# Noop Verb (inherited from: glassfish.CliManagedDeployedArtifact.noopVerb)
#glassfish.Artifact.noopVerb=Modify
# The logical stop/start sequence for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. Please note that the steps will be created only if start/stop scripts are defined for the deployable. (inherited from: glassfish.CliManagedDeployedArtifact.restartStrategy)
#glassfish.Artifact.restartStrategy=NONE
# The order in which a start step will be executed. (inherited from: glassfish.CliManagedDeployedArtifact.startOrder)
#glassfish.Artifact.startOrder=90
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: glassfish.CliManagedDeployedArtifact.startScript)
#glassfish.Artifact.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: glassfish.CliManagedDeployedArtifact.startVerb)
#glassfish.Artifact.startVerb=Start
# The order in which a stop step will be executed. (inherited from: glassfish.CliManagedDeployedArtifact.stopOrder)
#glassfish.Artifact.stopOrder=10
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: glassfish.CliManagedDeployedArtifact.stopScript)
#glassfish.Artifact.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: glassfish.CliManagedDeployedArtifact.stopVerb)
#glassfish.Artifact.stopVerb=Stop
# Verifies the syntax and semantics of the deployment descriptor. Verifier packages must be installed
#glassfish.Artifact.verify=false
# Host which is used to login to DAS, default is localhost
#glassfish.CliBasedContainer.adminHostAddress=localhost
# List of python library scripts that should be automatically loaded when using a GlassFish CLI script.
#glassfish.CliBasedContainer.libraryScripts=glassfish/library/runtime.py,glassfish/library/commandHelper.py
# TCP port which is used to login to DAS, default is 4848
#glassfish.CliBasedContainer.port=4848
# Connection to DAS should be secure.
#glassfish.CliBasedContainer.secure=false
# When true, the container restart strategy is applied for a NOOP operation
#glassfish.CliManagedDeployed.applyContainerRestartStrategyOnNoop=false
# When true, the deployed restart strategy is applied for a NOOP operation
#glassfish.CliManagedDeployed.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#glassfish.CliManagedDeployed.boundConfigurationItems=null
# The logical stop/start sequence for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, stop container, start container.
#glassfish.CliManagedDeployed.containerRestartStrategy=NONE
# The order of the step in the step list for the create operation.
#glassfish.CliManagedDeployed.createOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the create operation.
#glassfish.CliManagedDeployed.createScript=null
# Create Verb
#glassfish.CliManagedDeployed.createVerb=Create
# The order of the step in the step list for the destroy operation.
#glassfish.CliManagedDeployed.destroyOrder=40
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation.
#glassfish.CliManagedDeployed.destroyScript=null
# Destroy Verb
#glassfish.CliManagedDeployed.destroyVerb=Destroy
# Classpath to the script used to inspect the generic container.
#glassfish.CliManagedDeployed.inspectScript=null
# List of python library scripts that should be automatically loaded when using a Glassfish CLI script.
#glassfish.CliManagedDeployed.libraryScripts=null
# The order of the step in the step list for the modify operation.
#glassfish.CliManagedDeployed.modifyOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the modify operation.
#glassfish.CliManagedDeployed.modifyScript=null
# Modify Verb
#glassfish.CliManagedDeployed.modifyVerb=Modify
# The order of the step in the step list for the noop operation.
#glassfish.CliManagedDeployed.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation.
#glassfish.CliManagedDeployed.noopScript=null
# Noop Verb
#glassfish.CliManagedDeployed.noopVerb=Modify
# The logical stop/start sequence for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. Please note that the steps will be created only if start/stop scripts are defined for the deployable.
#glassfish.CliManagedDeployed.restartStrategy=NONE
# The order in which a start step will be executed.
#glassfish.CliManagedDeployed.startOrder=90
# Python script invoked to start a Java EE artifact or Java EE resource
#glassfish.CliManagedDeployed.startScript=null
# The word that is used to prefix a step description for the start operation.
#glassfish.CliManagedDeployed.startVerb=Start
# The order in which a stop step will be executed.
#glassfish.CliManagedDeployed.stopOrder=10
# Python script invoked to stop a Java EE artifact or Java EE resource
#glassfish.CliManagedDeployed.stopScript=null
# The word that is used to prefix a step description for the stop operation.
#glassfish.CliManagedDeployed.stopVerb=Stop
# When true, the container restart strategy is applied for a NOOP operation (inherited from: glassfish.CliManagedDeployed.applyContainerRestartStrategyOnNoop)
#glassfish.CliManagedDeployedArtifact.applyContainerRestartStrategyOnNoop=false
# When true, the deployed restart strategy is applied for a NOOP operation (inherited from: glassfish.CliManagedDeployed.applyRestartStrategyOnNoop)
#glassfish.CliManagedDeployedArtifact.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: glassfish.CliManagedDeployed.boundConfigurationItems)
#glassfish.CliManagedDeployedArtifact.boundConfigurationItems=null
# The logical stop/start sequence for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, stop container, start container. (inherited from: glassfish.CliManagedDeployed.containerRestartStrategy)
#glassfish.CliManagedDeployedArtifact.containerRestartStrategy=NONE
# The order of the step in the step list for the create operation. (inherited from: glassfish.CliManagedDeployed.createOrder)
#glassfish.CliManagedDeployedArtifact.createOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the create operation. (inherited from: glassfish.CliManagedDeployed.createScript)
#glassfish.CliManagedDeployedArtifact.createScript=null
# Create Verb (inherited from: glassfish.CliManagedDeployed.createVerb)
#glassfish.CliManagedDeployedArtifact.createVerb=Create
# The order of the step in the step list for the destroy operation. (inherited from: glassfish.CliManagedDeployed.destroyOrder)
#glassfish.CliManagedDeployedArtifact.destroyOrder=40
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation. (inherited from: glassfish.CliManagedDeployed.destroyScript)
#glassfish.CliManagedDeployedArtifact.destroyScript=null
# Destroy Verb (inherited from: glassfish.CliManagedDeployed.destroyVerb)
#glassfish.CliManagedDeployedArtifact.destroyVerb=Destroy
# Classpath to the script used to inspect the generic container. (inherited from: glassfish.CliManagedDeployed.inspectScript)
#glassfish.CliManagedDeployedArtifact.inspectScript=null
# List of python library scripts that should be automatically loaded when using a Glassfish CLI script. (inherited from: glassfish.CliManagedDeployed.libraryScripts)
#glassfish.CliManagedDeployedArtifact.libraryScripts=null
# The order of the step in the step list for the modify operation. (inherited from: glassfish.CliManagedDeployed.modifyOrder)
#glassfish.CliManagedDeployedArtifact.modifyOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the modify operation. (inherited from: glassfish.CliManagedDeployed.modifyScript)
#glassfish.CliManagedDeployedArtifact.modifyScript=null
# Modify Verb (inherited from: glassfish.CliManagedDeployed.modifyVerb)
#glassfish.CliManagedDeployedArtifact.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: glassfish.CliManagedDeployed.noopOrder)
#glassfish.CliManagedDeployedArtifact.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: glassfish.CliManagedDeployed.noopScript)
#glassfish.CliManagedDeployedArtifact.noopScript=null
# Noop Verb (inherited from: glassfish.CliManagedDeployed.noopVerb)
#glassfish.CliManagedDeployedArtifact.noopVerb=Modify
# The logical stop/start sequence for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. Please note that the steps will be created only if start/stop scripts are defined for the deployable. (inherited from: glassfish.CliManagedDeployed.restartStrategy)
#glassfish.CliManagedDeployedArtifact.restartStrategy=NONE
# The order in which a start step will be executed. (inherited from: glassfish.CliManagedDeployed.startOrder)
#glassfish.CliManagedDeployedArtifact.startOrder=90
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: glassfish.CliManagedDeployed.startScript)
#glassfish.CliManagedDeployedArtifact.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: glassfish.CliManagedDeployed.startVerb)
#glassfish.CliManagedDeployedArtifact.startVerb=Start
# The order in which a stop step will be executed. (inherited from: glassfish.CliManagedDeployed.stopOrder)
#glassfish.CliManagedDeployedArtifact.stopOrder=10
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: glassfish.CliManagedDeployed.stopScript)
#glassfish.CliManagedDeployedArtifact.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: glassfish.CliManagedDeployed.stopVerb)
#glassfish.CliManagedDeployedArtifact.stopVerb=Stop
# Restart Order
#glassfish.Cluster.restartOrder=80
# Start Order
#glassfish.Cluster.startOrder=80
# Start Script
#glassfish.Cluster.startScript=glassfish/container/start-cluster.py
# Stop Order
#glassfish.Cluster.stopOrder=20
# Stop Script
#glassfish.Cluster.stopScript=glassfish/container/stop-cluster.py
# Classpath to the script used to inspect the domain.
#glassfish.Domain.inspectScript=glassfish/container/inspect-domain.py
# List of python library scripts that should be automatically loaded when using a GlassFish CLI script. (inherited from: glassfish.CliBasedContainer.libraryScripts)
#glassfish.Domain.libraryScripts=glassfish/library/runtime.py,glassfish/library/commandHelper.py
# The set of CI templates. (inherited from: jee.Ear.boundTemplates)
#glassfish.Ear.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: jee.Ear.delimiters)
#glassfish.Ear.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: jee.Ear.textFileNamesRegex)
#glassfish.Ear.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# When true, the container restart strategy is applied for a NOOP operation (inherited from: glassfish.Artifact.applyContainerRestartStrategyOnNoop)
#glassfish.EarModule.applyContainerRestartStrategyOnNoop=false
# When true, the deployed restart strategy is applied for a NOOP operation (inherited from: glassfish.Artifact.applyRestartStrategyOnNoop)
#glassfish.EarModule.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: glassfish.Artifact.boundConfigurationItems)
#glassfish.EarModule.boundConfigurationItems=null
# Supports the backward compatibility of JAR visibility in v2 instead of the stricter Java EE 6 requirements implemented in v3.
#glassfish.EarModule.compatibility=false
# The logical stop/start sequence for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, stop container, start container. (inherited from: glassfish.Artifact.containerRestartStrategy)
#glassfish.EarModule.containerRestartStrategy=NONE
# The order of the step in the step list for the create operation. (inherited from: glassfish.Artifact.createOrder)
#glassfish.EarModule.createOrder=70
# Classpath to the script that is uploaded and executed on the generic container for the create operation. (inherited from: glassfish.Artifact.createScript)
#glassfish.EarModule.createScript=glassfish/application/deploy.py
# Create Verb (inherited from: glassfish.Artifact.createVerb)
#glassfish.EarModule.createVerb=Deploy
# The order of the step in the step list for the destroy operation. (inherited from: glassfish.Artifact.destroyOrder)
#glassfish.EarModule.destroyOrder=30
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation. (inherited from: glassfish.Artifact.destroyScript)
#glassfish.EarModule.destroyScript=glassfish/application/undeploy.py
# Destroy Verb (inherited from: glassfish.Artifact.destroyVerb)
#glassfish.EarModule.destroyVerb=Undeploy
# Allows users to access the application. (inherited from: glassfish.Artifact.enabled)
#glassfish.EarModule.enabled=true
# Extension
#glassfish.EarModule.extension=ear
# Classpath to the script used to inspect the generic container. (inherited from: glassfish.Artifact.inspectScript)
#glassfish.EarModule.inspectScript=glassfish/application/inspect-app.py
# Specifies whether Java Web Start access is permitted for an application client module.
#glassfish.EarModule.javaWebStartEnabled=true
# List of python library scripts that should be automatically loaded when using a Glassfish CLI script. (inherited from: glassfish.Artifact.libraryScripts)
#glassfish.EarModule.libraryScripts=glassfish/application/application-lib.py
# The order of the step in the step list for the modify operation. (inherited from: glassfish.Artifact.modifyOrder)
#glassfish.EarModule.modifyOrder=70
# Classpath to the script that is uploaded and executed on the generic container for the modify operation. (inherited from: glassfish.Artifact.modifyScript)
#glassfish.EarModule.modifyScript=glassfish/application/modify.py
# Modify Verb (inherited from: glassfish.Artifact.modifyVerb)
#glassfish.EarModule.modifyVerb=Update
# The order of the step in the step list for the noop operation. (inherited from: glassfish.Artifact.noopOrder)
#glassfish.EarModule.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: glassfish.Artifact.noopScript)
#glassfish.EarModule.noopScript=null
# Noop Verb (inherited from: glassfish.Artifact.noopVerb)
#glassfish.EarModule.noopVerb=Modify
# Precompiles JSP pages during deployment.
#glassfish.EarModule.precompileJsp=false
# The logical stop/start sequence for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. Please note that the steps will be created only if start/stop scripts are defined for the deployable. (inherited from: glassfish.Artifact.restartStrategy)
#glassfish.EarModule.restartStrategy=NONE
# The order in which a start step will be executed. (inherited from: glassfish.Artifact.startOrder)
#glassfish.EarModule.startOrder=90
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: glassfish.Artifact.startScript)
#glassfish.EarModule.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: glassfish.Artifact.startVerb)
#glassfish.EarModule.startVerb=Start
# The order in which a stop step will be executed. (inherited from: glassfish.Artifact.stopOrder)
#glassfish.EarModule.stopOrder=10
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: glassfish.Artifact.stopScript)
#glassfish.EarModule.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: glassfish.Artifact.stopVerb)
#glassfish.EarModule.stopVerb=Stop
# The set of CI templates. (inherited from: jee.EjbJar.boundTemplates)
#glassfish.EjbJar.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: jee.EjbJar.delimiters)
#glassfish.EjbJar.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: jee.EjbJar.textFileNamesRegex)
#glassfish.EjbJar.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# When true, the container restart strategy is applied for a NOOP operation (inherited from: glassfish.Artifact.applyContainerRestartStrategyOnNoop)
#glassfish.EjbJarModule.applyContainerRestartStrategyOnNoop=false
# When true, the deployed restart strategy is applied for a NOOP operation (inherited from: glassfish.Artifact.applyRestartStrategyOnNoop)
#glassfish.EjbJarModule.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: glassfish.Artifact.boundConfigurationItems)
#glassfish.EjbJarModule.boundConfigurationItems=null
# Supports the backward compatibility of JAR visibility in v2 instead of the stricter Java EE 6 requirements implemented in v3.
#glassfish.EjbJarModule.compatibility=false
# The logical stop/start sequence for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, stop container, start container. (inherited from: glassfish.Artifact.containerRestartStrategy)
#glassfish.EjbJarModule.containerRestartStrategy=NONE
# The order of the step in the step list for the create operation. (inherited from: glassfish.Artifact.createOrder)
#glassfish.EjbJarModule.createOrder=70
# Classpath to the script that is uploaded and executed on the generic container for the create operation. (inherited from: glassfish.Artifact.createScript)
#glassfish.EjbJarModule.createScript=glassfish/application/deploy.py
# Create Verb (inherited from: glassfish.Artifact.createVerb)
#glassfish.EjbJarModule.createVerb=Deploy
# The order of the step in the step list for the destroy operation. (inherited from: glassfish.Artifact.destroyOrder)
#glassfish.EjbJarModule.destroyOrder=30
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation. (inherited from: glassfish.Artifact.destroyScript)
#glassfish.EjbJarModule.destroyScript=glassfish/application/undeploy.py
# Destroy Verb (inherited from: glassfish.Artifact.destroyVerb)
#glassfish.EjbJarModule.destroyVerb=Undeploy
# Allows users to access the application. (inherited from: glassfish.Artifact.enabled)
#glassfish.EjbJarModule.enabled=true
# Extension
#glassfish.EjbJarModule.extension=jar
# Classpath to the script used to inspect the generic container. (inherited from: glassfish.Artifact.inspectScript)
#glassfish.EjbJarModule.inspectScript=glassfish/application/inspect-app.py
# List of python library scripts that should be automatically loaded when using a Glassfish CLI script. (inherited from: glassfish.Artifact.libraryScripts)
#glassfish.EjbJarModule.libraryScripts=glassfish/application/application-lib.py
# The order of the step in the step list for the modify operation. (inherited from: glassfish.Artifact.modifyOrder)
#glassfish.EjbJarModule.modifyOrder=70
# Classpath to the script that is uploaded and executed on the generic container for the modify operation. (inherited from: glassfish.Artifact.modifyScript)
#glassfish.EjbJarModule.modifyScript=glassfish/application/modify.py
# Modify Verb (inherited from: glassfish.Artifact.modifyVerb)
#glassfish.EjbJarModule.modifyVerb=Update
# The order of the step in the step list for the noop operation. (inherited from: glassfish.Artifact.noopOrder)
#glassfish.EjbJarModule.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: glassfish.Artifact.noopScript)
#glassfish.EjbJarModule.noopScript=null
# Noop Verb (inherited from: glassfish.Artifact.noopVerb)
#glassfish.EjbJarModule.noopVerb=Modify
# The logical stop/start sequence for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. Please note that the steps will be created only if start/stop scripts are defined for the deployable. (inherited from: glassfish.Artifact.restartStrategy)
#glassfish.EjbJarModule.restartStrategy=NONE
# The order in which a start step will be executed. (inherited from: glassfish.Artifact.startOrder)
#glassfish.EjbJarModule.startOrder=90
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: glassfish.Artifact.startScript)
#glassfish.EjbJarModule.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: glassfish.Artifact.startVerb)
#glassfish.EjbJarModule.startVerb=Start
# The order in which a stop step will be executed. (inherited from: glassfish.Artifact.stopOrder)
#glassfish.EjbJarModule.stopOrder=10
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: glassfish.Artifact.stopScript)
#glassfish.EjbJarModule.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: glassfish.Artifact.stopVerb)
#glassfish.EjbJarModule.stopVerb=Stop
# When true, the container restart strategy is applied for a NOOP operation (inherited from: glassfish.JMSResources.applyContainerRestartStrategyOnNoop)
#glassfish.JMSConnectionFactory.applyContainerRestartStrategyOnNoop=false
# When true, the deployed restart strategy is applied for a NOOP operation (inherited from: glassfish.JMSResources.applyRestartStrategyOnNoop)
#glassfish.JMSConnectionFactory.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: glassfish.JMSResources.boundConfigurationItems)
#glassfish.JMSConnectionFactory.boundConfigurationItems=null
# The logical stop/start sequence for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, stop container, start container. (inherited from: glassfish.JMSResources.containerRestartStrategy)
#glassfish.JMSConnectionFactory.containerRestartStrategy=NONE
# The order of the step in the step list for the create operation. (inherited from: glassfish.JMSResources.createOrder)
#glassfish.JMSConnectionFactory.createOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the create operation.
#glassfish.JMSConnectionFactory.createScript=glassfish/jmsconnectionfactory/deploy.py
# Create Verb (inherited from: glassfish.JMSResources.createVerb)
#glassfish.JMSConnectionFactory.createVerb=Create
# The order of the step in the step list for the destroy operation. (inherited from: glassfish.JMSResources.destroyOrder)
#glassfish.JMSConnectionFactory.destroyOrder=40
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation.
#glassfish.JMSConnectionFactory.destroyScript=glassfish/jmsconnectionfactory/undeploy.py
# Destroy Verb (inherited from: glassfish.JMSResources.destroyVerb)
#glassfish.JMSConnectionFactory.destroyVerb=Destroy
# Classpath to the script used to inspect the generic container.
#glassfish.JMSConnectionFactory.inspectScript=glassfish/jmsconnectionfactory/inspect.py
# List of python library scripts that should be automatically loaded when using a Glassfish CLI script.
#glassfish.JMSConnectionFactory.libraryScripts=glassfish/jmsconnectionfactory/jms-connectionfactory-lib.py
# The order of the step in the step list for the modify operation. (inherited from: glassfish.JMSResources.modifyOrder)
#glassfish.JMSConnectionFactory.modifyOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the modify operation.
#glassfish.JMSConnectionFactory.modifyScript=glassfish/jmsconnectionfactory/modify.py
# Modify Verb (inherited from: glassfish.JMSResources.modifyVerb)
#glassfish.JMSConnectionFactory.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: glassfish.JMSResources.noopOrder)
#glassfish.JMSConnectionFactory.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: glassfish.JMSResources.noopScript)
#glassfish.JMSConnectionFactory.noopScript=null
# Noop Verb (inherited from: glassfish.JMSResources.noopVerb)
#glassfish.JMSConnectionFactory.noopVerb=Modify
# The logical stop/start sequence for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. Please note that the steps will be created only if start/stop scripts are defined for the deployable. (inherited from: glassfish.JMSResources.restartStrategy)
#glassfish.JMSConnectionFactory.restartStrategy=NONE
# The order in which a start step will be executed. (inherited from: glassfish.JMSResources.startOrder)
#glassfish.JMSConnectionFactory.startOrder=90
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: glassfish.JMSResources.startScript)
#glassfish.JMSConnectionFactory.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: glassfish.JMSResources.startVerb)
#glassfish.JMSConnectionFactory.startVerb=Start
# The order in which a stop step will be executed. (inherited from: glassfish.JMSResources.stopOrder)
#glassfish.JMSConnectionFactory.stopOrder=10
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: glassfish.JMSResources.stopScript)
#glassfish.JMSConnectionFactory.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: glassfish.JMSResources.stopVerb)
#glassfish.JMSConnectionFactory.stopVerb=Stop
# When true, the container restart strategy is applied for a NOOP operation (inherited from: glassfish.JMSResources.applyContainerRestartStrategyOnNoop)
#glassfish.JMSDestination.applyContainerRestartStrategyOnNoop=false
# When true, the deployed restart strategy is applied for a NOOP operation (inherited from: glassfish.JMSResources.applyRestartStrategyOnNoop)
#glassfish.JMSDestination.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: glassfish.JMSResources.boundConfigurationItems)
#glassfish.JMSDestination.boundConfigurationItems=null
# The logical stop/start sequence for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, stop container, start container. (inherited from: glassfish.JMSResources.containerRestartStrategy)
#glassfish.JMSDestination.containerRestartStrategy=NONE
# The order of the step in the step list for the create operation. (inherited from: glassfish.JMSResources.createOrder)
#glassfish.JMSDestination.createOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the create operation.
#glassfish.JMSDestination.createScript=glassfish/jmsdestination/deploy.py
# Create Verb (inherited from: glassfish.JMSResources.createVerb)
#glassfish.JMSDestination.createVerb=Create
# The order of the step in the step list for the destroy operation. (inherited from: glassfish.JMSResources.destroyOrder)
#glassfish.JMSDestination.destroyOrder=40
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation.
#glassfish.JMSDestination.destroyScript=glassfish/jmsdestination/undeploy.py
# Destroy Verb (inherited from: glassfish.JMSResources.destroyVerb)
#glassfish.JMSDestination.destroyVerb=Destroy
# Classpath to the script used to inspect the generic container.
#glassfish.JMSDestination.inspectScript=glassfish/jmsdestination/inspect.py
# List of python library scripts that should be automatically loaded when using a Glassfish CLI script. (inherited from: glassfish.JMSResources.libraryScripts)
#glassfish.JMSDestination.libraryScripts=null
# The order of the step in the step list for the modify operation. (inherited from: glassfish.JMSResources.modifyOrder)
#glassfish.JMSDestination.modifyOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the modify operation.
#glassfish.JMSDestination.modifyScript=glassfish/jmsdestination/modify.py
# Modify Verb (inherited from: glassfish.JMSResources.modifyVerb)
#glassfish.JMSDestination.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: glassfish.JMSResources.noopOrder)
#glassfish.JMSDestination.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: glassfish.JMSResources.noopScript)
#glassfish.JMSDestination.noopScript=null
# Noop Verb (inherited from: glassfish.JMSResources.noopVerb)
#glassfish.JMSDestination.noopVerb=Modify
# The logical stop/start sequence for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. Please note that the steps will be created only if start/stop scripts are defined for the deployable. (inherited from: glassfish.JMSResources.restartStrategy)
#glassfish.JMSDestination.restartStrategy=NONE
# The order in which a start step will be executed. (inherited from: glassfish.JMSResources.startOrder)
#glassfish.JMSDestination.startOrder=90
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: glassfish.JMSResources.startScript)
#glassfish.JMSDestination.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: glassfish.JMSResources.startVerb)
#glassfish.JMSDestination.startVerb=Start
# The order in which a stop step will be executed. (inherited from: glassfish.JMSResources.stopOrder)
#glassfish.JMSDestination.stopOrder=10
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: glassfish.JMSResources.stopScript)
#glassfish.JMSDestination.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: glassfish.JMSResources.stopVerb)
#glassfish.JMSDestination.stopVerb=Stop
# When true, the container restart strategy is applied for a NOOP operation (inherited from: glassfish.CliManagedDeployed.applyContainerRestartStrategyOnNoop)
#glassfish.JMSResources.applyContainerRestartStrategyOnNoop=false
# When true, the deployed restart strategy is applied for a NOOP operation (inherited from: glassfish.CliManagedDeployed.applyRestartStrategyOnNoop)
#glassfish.JMSResources.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: glassfish.CliManagedDeployed.boundConfigurationItems)
#glassfish.JMSResources.boundConfigurationItems=null
# The logical stop/start sequence for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, stop container, start container. (inherited from: glassfish.CliManagedDeployed.containerRestartStrategy)
#glassfish.JMSResources.containerRestartStrategy=NONE
# The order of the step in the step list for the create operation. (inherited from: glassfish.CliManagedDeployed.createOrder)
#glassfish.JMSResources.createOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the create operation. (inherited from: glassfish.CliManagedDeployed.createScript)
#glassfish.JMSResources.createScript=null
# Create Verb (inherited from: glassfish.CliManagedDeployed.createVerb)
#glassfish.JMSResources.createVerb=Create
# The order of the step in the step list for the destroy operation. (inherited from: glassfish.CliManagedDeployed.destroyOrder)
#glassfish.JMSResources.destroyOrder=40
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation. (inherited from: glassfish.CliManagedDeployed.destroyScript)
#glassfish.JMSResources.destroyScript=null
# Destroy Verb (inherited from: glassfish.CliManagedDeployed.destroyVerb)
#glassfish.JMSResources.destroyVerb=Destroy
# Classpath to the script used to inspect the generic container. (inherited from: glassfish.CliManagedDeployed.inspectScript)
#glassfish.JMSResources.inspectScript=null
# List of python library scripts that should be automatically loaded when using a Glassfish CLI script. (inherited from: glassfish.CliManagedDeployed.libraryScripts)
#glassfish.JMSResources.libraryScripts=null
# The order of the step in the step list for the modify operation. (inherited from: glassfish.CliManagedDeployed.modifyOrder)
#glassfish.JMSResources.modifyOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the modify operation. (inherited from: glassfish.CliManagedDeployed.modifyScript)
#glassfish.JMSResources.modifyScript=null
# Modify Verb (inherited from: glassfish.CliManagedDeployed.modifyVerb)
#glassfish.JMSResources.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: glassfish.CliManagedDeployed.noopOrder)
#glassfish.JMSResources.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: glassfish.CliManagedDeployed.noopScript)
#glassfish.JMSResources.noopScript=null
# Noop Verb (inherited from: glassfish.CliManagedDeployed.noopVerb)
#glassfish.JMSResources.noopVerb=Modify
# The logical stop/start sequence for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. Please note that the steps will be created only if start/stop scripts are defined for the deployable. (inherited from: glassfish.CliManagedDeployed.restartStrategy)
#glassfish.JMSResources.restartStrategy=NONE
# The order in which a start step will be executed. (inherited from: glassfish.CliManagedDeployed.startOrder)
#glassfish.JMSResources.startOrder=90
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: glassfish.CliManagedDeployed.startScript)
#glassfish.JMSResources.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: glassfish.CliManagedDeployed.startVerb)
#glassfish.JMSResources.startVerb=Start
# The order in which a stop step will be executed. (inherited from: glassfish.CliManagedDeployed.stopOrder)
#glassfish.JMSResources.stopOrder=10
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: glassfish.CliManagedDeployed.stopScript)
#glassfish.JMSResources.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: glassfish.CliManagedDeployed.stopVerb)
#glassfish.JMSResources.stopVerb=Stop
# When true, the container restart strategy is applied for a NOOP operation (inherited from: glassfish.CliManagedDeployed.applyContainerRestartStrategyOnNoop)
#glassfish.JdbcConnectionPool.applyContainerRestartStrategyOnNoop=false
# When true, the deployed restart strategy is applied for a NOOP operation (inherited from: glassfish.CliManagedDeployed.applyRestartStrategyOnNoop)
#glassfish.JdbcConnectionPool.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: glassfish.CliManagedDeployed.boundConfigurationItems)
#glassfish.JdbcConnectionPool.boundConfigurationItems=null
# The logical stop/start sequence for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, stop container, start container. (inherited from: glassfish.CliManagedDeployed.containerRestartStrategy)
#glassfish.JdbcConnectionPool.containerRestartStrategy=NONE
# The order of the step in the step list for the create operation. (inherited from: glassfish.CliManagedDeployed.createOrder)
#glassfish.JdbcConnectionPool.createOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the create operation.
#glassfish.JdbcConnectionPool.createScript=glassfish/jdbcconnectionpool/deploy.py
# Create Verb (inherited from: glassfish.CliManagedDeployed.createVerb)
#glassfish.JdbcConnectionPool.createVerb=Create
# The order of the step in the step list for the destroy operation.
#glassfish.JdbcConnectionPool.destroyOrder=70
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation.
#glassfish.JdbcConnectionPool.destroyScript=glassfish/jdbcconnectionpool/undeploy.py
# Destroy Verb (inherited from: glassfish.CliManagedDeployed.destroyVerb)
#glassfish.JdbcConnectionPool.destroyVerb=Destroy
# Maximum time that connection can remain idle in the pool(in seconds)
#glassfish.JdbcConnectionPool.idletimeout=300
# Classpath to the script used to inspect the generic container.
#glassfish.JdbcConnectionPool.inspectScript=glassfish/jdbcconnectionpool/inspect.py
# All connections use same isolation level; requires Transaction Isolation
#glassfish.JdbcConnectionPool.isisolationguaranteed=true
# List of python library scripts that should be automatically loaded when using a Glassfish CLI script.
#glassfish.JdbcConnectionPool.libraryScripts=glassfish/jdbcconnectionpool/jdbc-connectionpool-lib.py
# Maximum number of connections that can be created to satisfy client requests
#glassfish.JdbcConnectionPool.maxpoolsize=32
# Amount of time caller waits before connection timeout is sent(in milliseconds)
#glassfish.JdbcConnectionPool.maxwait=60000
# The order of the step in the step list for the modify operation. (inherited from: glassfish.CliManagedDeployed.modifyOrder)
#glassfish.JdbcConnectionPool.modifyOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the modify operation.
#glassfish.JdbcConnectionPool.modifyScript=glassfish/jdbcconnectionpool/modify.py
# Modify Verb (inherited from: glassfish.CliManagedDeployed.modifyVerb)
#glassfish.JdbcConnectionPool.modifyVerb=Modify
# Returns non-transactional connections
#glassfish.JdbcConnectionPool.nontransactionalconnections=false
# The order of the step in the step list for the noop operation. (inherited from: glassfish.CliManagedDeployed.noopOrder)
#glassfish.JdbcConnectionPool.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: glassfish.CliManagedDeployed.noopScript)
#glassfish.JdbcConnectionPool.noopScript=null
# Noop Verb (inherited from: glassfish.CliManagedDeployed.noopVerb)
#glassfish.JdbcConnectionPool.noopVerb=Modify
# When enabled, the pool is pinged during creation or reconfiguration to identify and warn of any erroneous values for its attributes
#glassfish.JdbcConnectionPool.ping=false
# Number of connections to be removed when pool idle timeout expires
#glassfish.JdbcConnectionPool.poolresize=2
# Property Category
#glassfish.JdbcConnectionPool.propertyCategory=Properties
# The logical stop/start sequence for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. Please note that the steps will be created only if start/stop scripts are defined for the deployable. (inherited from: glassfish.CliManagedDeployed.restartStrategy)
#glassfish.JdbcConnectionPool.restartStrategy=NONE
# The order in which a start step will be executed. (inherited from: glassfish.CliManagedDeployed.startOrder)
#glassfish.JdbcConnectionPool.startOrder=90
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: glassfish.CliManagedDeployed.startScript)
#glassfish.JdbcConnectionPool.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: glassfish.CliManagedDeployed.startVerb)
#glassfish.JdbcConnectionPool.startVerb=Start
# Minimum and initial number of connections maintained in the pool
#glassfish.JdbcConnectionPool.steadypoolsize=8
# The order in which a stop step will be executed. (inherited from: glassfish.CliManagedDeployed.stopOrder)
#glassfish.JdbcConnectionPool.stopOrder=10
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: glassfish.CliManagedDeployed.stopScript)
#glassfish.JdbcConnectionPool.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: glassfish.CliManagedDeployed.stopVerb)
#glassfish.JdbcConnectionPool.stopVerb=Stop
# The set of CI templates. (inherited from: jee.ResourceSpec.boundTemplates)
#glassfish.JdbcConnectionPoolSpec.boundTemplates=null
# When true, the container restart strategy is applied for a NOOP operation (inherited from: glassfish.JeeJdbcResource.applyContainerRestartStrategyOnNoop)
#glassfish.JdbcResource.applyContainerRestartStrategyOnNoop=false
# When true, the deployed restart strategy is applied for a NOOP operation (inherited from: glassfish.JeeJdbcResource.applyRestartStrategyOnNoop)
#glassfish.JdbcResource.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: glassfish.JeeJdbcResource.boundConfigurationItems)
#glassfish.JdbcResource.boundConfigurationItems=null
# The logical stop/start sequence for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, stop container, start container. (inherited from: glassfish.JeeJdbcResource.containerRestartStrategy)
#glassfish.JdbcResource.containerRestartStrategy=NONE
# The order of the step in the step list for the create operation. (inherited from: glassfish.JeeJdbcResource.createOrder)
#glassfish.JdbcResource.createOrder=65
# Classpath to the script that is uploaded and executed on the generic container for the create operation. (inherited from: glassfish.JeeJdbcResource.createScript)
#glassfish.JdbcResource.createScript=glassfish/jdbcresource/deploy.py
# Create Verb (inherited from: glassfish.JeeJdbcResource.createVerb)
#glassfish.JdbcResource.createVerb=Create
# The order of the step in the step list for the destroy operation. (inherited from: glassfish.JeeJdbcResource.destroyOrder)
#glassfish.JdbcResource.destroyOrder=35
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation. (inherited from: glassfish.JeeJdbcResource.destroyScript)
#glassfish.JdbcResource.destroyScript=glassfish/jdbcresource/undeploy.py
# Destroy Verb (inherited from: glassfish.JeeJdbcResource.destroyVerb)
#glassfish.JdbcResource.destroyVerb=Destroy
# Classpath to the script used to inspect the generic container. (inherited from: glassfish.JeeJdbcResource.inspectScript)
#glassfish.JdbcResource.inspectScript=glassfish/jdbcresource/inspect.py
# List of python library scripts that should be automatically loaded when using a Glassfish CLI script. (inherited from: glassfish.JeeJdbcResource.libraryScripts)
#glassfish.JdbcResource.libraryScripts=null
# The order of the step in the step list for the modify operation. (inherited from: glassfish.JeeJdbcResource.modifyOrder)
#glassfish.JdbcResource.modifyOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the modify operation. (inherited from: glassfish.JeeJdbcResource.modifyScript)
#glassfish.JdbcResource.modifyScript=glassfish/jdbcresource/modify.py
# Modify Verb (inherited from: glassfish.JeeJdbcResource.modifyVerb)
#glassfish.JdbcResource.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: glassfish.JeeJdbcResource.noopOrder)
#glassfish.JdbcResource.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: glassfish.JeeJdbcResource.noopScript)
#glassfish.JdbcResource.noopScript=null
# Noop Verb (inherited from: glassfish.JeeJdbcResource.noopVerb)
#glassfish.JdbcResource.noopVerb=Modify
# Property Category (inherited from: glassfish.JeeJdbcResource.propertyCategory)
#glassfish.JdbcResource.propertyCategory=Properties
# The logical stop/start sequence for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. Please note that the steps will be created only if start/stop scripts are defined for the deployable. (inherited from: glassfish.JeeJdbcResource.restartStrategy)
#glassfish.JdbcResource.restartStrategy=NONE
# The order in which a start step will be executed. (inherited from: glassfish.JeeJdbcResource.startOrder)
#glassfish.JdbcResource.startOrder=90
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: glassfish.JeeJdbcResource.startScript)
#glassfish.JdbcResource.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: glassfish.JeeJdbcResource.startVerb)
#glassfish.JdbcResource.startVerb=Start
# The order in which a stop step will be executed. (inherited from: glassfish.JeeJdbcResource.stopOrder)
#glassfish.JdbcResource.stopOrder=10
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: glassfish.JeeJdbcResource.stopScript)
#glassfish.JdbcResource.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: glassfish.JeeJdbcResource.stopVerb)
#glassfish.JdbcResource.stopVerb=Stop
# The set of CI templates. (inherited from: jee.DataSourceSpec.boundTemplates)
#glassfish.JdbcResourceSpec.boundTemplates=null
# When true, the container restart strategy is applied for a NOOP operation (inherited from: glassfish.CliManagedDeployed.applyContainerRestartStrategyOnNoop)
#glassfish.JeeJdbcResource.applyContainerRestartStrategyOnNoop=false
# When true, the deployed restart strategy is applied for a NOOP operation (inherited from: glassfish.CliManagedDeployed.applyRestartStrategyOnNoop)
#glassfish.JeeJdbcResource.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: glassfish.CliManagedDeployed.boundConfigurationItems)
#glassfish.JeeJdbcResource.boundConfigurationItems=null
# The logical stop/start sequence for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, stop container, start container. (inherited from: glassfish.CliManagedDeployed.containerRestartStrategy)
#glassfish.JeeJdbcResource.containerRestartStrategy=NONE
# The order of the step in the step list for the create operation.
#glassfish.JeeJdbcResource.createOrder=65
# Classpath to the script that is uploaded and executed on the generic container for the create operation.
#glassfish.JeeJdbcResource.createScript=glassfish/jdbcresource/deploy.py
# Create Verb (inherited from: glassfish.CliManagedDeployed.createVerb)
#glassfish.JeeJdbcResource.createVerb=Create
# The order of the step in the step list for the destroy operation.
#glassfish.JeeJdbcResource.destroyOrder=35
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation.
#glassfish.JeeJdbcResource.destroyScript=glassfish/jdbcresource/undeploy.py
# Destroy Verb (inherited from: glassfish.CliManagedDeployed.destroyVerb)
#glassfish.JeeJdbcResource.destroyVerb=Destroy
# Classpath to the script used to inspect the generic container.
#glassfish.JeeJdbcResource.inspectScript=glassfish/jdbcresource/inspect.py
# List of python library scripts that should be automatically loaded when using a Glassfish CLI script. (inherited from: glassfish.CliManagedDeployed.libraryScripts)
#glassfish.JeeJdbcResource.libraryScripts=null
# The order of the step in the step list for the modify operation. (inherited from: glassfish.CliManagedDeployed.modifyOrder)
#glassfish.JeeJdbcResource.modifyOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the modify operation.
#glassfish.JeeJdbcResource.modifyScript=glassfish/jdbcresource/modify.py
# Modify Verb (inherited from: glassfish.CliManagedDeployed.modifyVerb)
#glassfish.JeeJdbcResource.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: glassfish.CliManagedDeployed.noopOrder)
#glassfish.JeeJdbcResource.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: glassfish.CliManagedDeployed.noopScript)
#glassfish.JeeJdbcResource.noopScript=null
# Noop Verb (inherited from: glassfish.CliManagedDeployed.noopVerb)
#glassfish.JeeJdbcResource.noopVerb=Modify
# Property Category
#glassfish.JeeJdbcResource.propertyCategory=Properties
# The logical stop/start sequence for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. Please note that the steps will be created only if start/stop scripts are defined for the deployable. (inherited from: glassfish.CliManagedDeployed.restartStrategy)
#glassfish.JeeJdbcResource.restartStrategy=NONE
# The order in which a start step will be executed. (inherited from: glassfish.CliManagedDeployed.startOrder)
#glassfish.JeeJdbcResource.startOrder=90
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: glassfish.CliManagedDeployed.startScript)
#glassfish.JeeJdbcResource.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: glassfish.CliManagedDeployed.startVerb)
#glassfish.JeeJdbcResource.startVerb=Start
# The order in which a stop step will be executed. (inherited from: glassfish.CliManagedDeployed.stopOrder)
#glassfish.JeeJdbcResource.stopOrder=10
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: glassfish.CliManagedDeployed.stopScript)
#glassfish.JeeJdbcResource.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: glassfish.CliManagedDeployed.stopVerb)
#glassfish.JeeJdbcResource.stopVerb=Stop
# When true, the container restart strategy is applied for a NOOP operation (inherited from: glassfish.JMSDestination.applyContainerRestartStrategyOnNoop)
#glassfish.Queue.applyContainerRestartStrategyOnNoop=false
# When true, the deployed restart strategy is applied for a NOOP operation (inherited from: glassfish.JMSDestination.applyRestartStrategyOnNoop)
#glassfish.Queue.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: glassfish.JMSDestination.boundConfigurationItems)
#glassfish.Queue.boundConfigurationItems=null
# The logical stop/start sequence for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, stop container, start container. (inherited from: glassfish.JMSDestination.containerRestartStrategy)
#glassfish.Queue.containerRestartStrategy=NONE
# The order of the step in the step list for the create operation. (inherited from: glassfish.JMSDestination.createOrder)
#glassfish.Queue.createOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the create operation. (inherited from: glassfish.JMSDestination.createScript)
#glassfish.Queue.createScript=glassfish/jmsdestination/deploy.py
# Create Verb (inherited from: glassfish.JMSDestination.createVerb)
#glassfish.Queue.createVerb=Create
# The order of the step in the step list for the destroy operation. (inherited from: glassfish.JMSDestination.destroyOrder)
#glassfish.Queue.destroyOrder=40
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation. (inherited from: glassfish.JMSDestination.destroyScript)
#glassfish.Queue.destroyScript=glassfish/jmsdestination/undeploy.py
# Destroy Verb (inherited from: glassfish.JMSDestination.destroyVerb)
#glassfish.Queue.destroyVerb=Destroy
# Classpath to the script used to inspect the generic container. (inherited from: glassfish.JMSDestination.inspectScript)
#glassfish.Queue.inspectScript=glassfish/jmsdestination/inspect.py
# List of python library scripts that should be automatically loaded when using a Glassfish CLI script. (inherited from: glassfish.JMSDestination.libraryScripts)
#glassfish.Queue.libraryScripts=null
# The order of the step in the step list for the modify operation. (inherited from: glassfish.JMSDestination.modifyOrder)
#glassfish.Queue.modifyOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the modify operation. (inherited from: glassfish.JMSDestination.modifyScript)
#glassfish.Queue.modifyScript=glassfish/jmsdestination/modify.py
# Modify Verb (inherited from: glassfish.JMSDestination.modifyVerb)
#glassfish.Queue.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: glassfish.JMSDestination.noopOrder)
#glassfish.Queue.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: glassfish.JMSDestination.noopScript)
#glassfish.Queue.noopScript=null
# Noop Verb (inherited from: glassfish.JMSDestination.noopVerb)
#glassfish.Queue.noopVerb=Modify
# The logical stop/start sequence for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. Please note that the steps will be created only if start/stop scripts are defined for the deployable. (inherited from: glassfish.JMSDestination.restartStrategy)
#glassfish.Queue.restartStrategy=NONE
# The JMS resource type, which is javax.jms.Queue
#glassfish.Queue.restype=javax.jms.Queue
# The order in which a start step will be executed. (inherited from: glassfish.JMSDestination.startOrder)
#glassfish.Queue.startOrder=90
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: glassfish.JMSDestination.startScript)
#glassfish.Queue.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: glassfish.JMSDestination.startVerb)
#glassfish.Queue.startVerb=Start
# The order in which a stop step will be executed. (inherited from: glassfish.JMSDestination.stopOrder)
#glassfish.Queue.stopOrder=10
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: glassfish.JMSDestination.stopScript)
#glassfish.Queue.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: glassfish.JMSDestination.stopVerb)
#glassfish.Queue.stopVerb=Stop
# When true, the container restart strategy is applied for a NOOP operation (inherited from: glassfish.JMSConnectionFactory.applyContainerRestartStrategyOnNoop)
#glassfish.QueueConnectionFactory.applyContainerRestartStrategyOnNoop=false
# When true, the deployed restart strategy is applied for a NOOP operation (inherited from: glassfish.JMSConnectionFactory.applyRestartStrategyOnNoop)
#glassfish.QueueConnectionFactory.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: glassfish.JMSConnectionFactory.boundConfigurationItems)
#glassfish.QueueConnectionFactory.boundConfigurationItems=null
# The logical stop/start sequence for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, stop container, start container. (inherited from: glassfish.JMSConnectionFactory.containerRestartStrategy)
#glassfish.QueueConnectionFactory.containerRestartStrategy=NONE
# The order of the step in the step list for the create operation. (inherited from: glassfish.JMSConnectionFactory.createOrder)
#glassfish.QueueConnectionFactory.createOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the create operation. (inherited from: glassfish.JMSConnectionFactory.createScript)
#glassfish.QueueConnectionFactory.createScript=glassfish/jmsconnectionfactory/deploy.py
# Create Verb (inherited from: glassfish.JMSConnectionFactory.createVerb)
#glassfish.QueueConnectionFactory.createVerb=Create
# The order of the step in the step list for the destroy operation. (inherited from: glassfish.JMSConnectionFactory.destroyOrder)
#glassfish.QueueConnectionFactory.destroyOrder=40
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation. (inherited from: glassfish.JMSConnectionFactory.destroyScript)
#glassfish.QueueConnectionFactory.destroyScript=glassfish/jmsconnectionfactory/undeploy.py
# Destroy Verb (inherited from: glassfish.JMSConnectionFactory.destroyVerb)
#glassfish.QueueConnectionFactory.destroyVerb=Destroy
# Classpath to the script used to inspect the generic container. (inherited from: glassfish.JMSConnectionFactory.inspectScript)
#glassfish.QueueConnectionFactory.inspectScript=glassfish/jmsconnectionfactory/inspect.py
# List of python library scripts that should be automatically loaded when using a Glassfish CLI script. (inherited from: glassfish.JMSConnectionFactory.libraryScripts)
#glassfish.QueueConnectionFactory.libraryScripts=glassfish/jmsconnectionfactory/jms-connectionfactory-lib.py
# The order of the step in the step list for the modify operation. (inherited from: glassfish.JMSConnectionFactory.modifyOrder)
#glassfish.QueueConnectionFactory.modifyOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the modify operation. (inherited from: glassfish.JMSConnectionFactory.modifyScript)
#glassfish.QueueConnectionFactory.modifyScript=glassfish/jmsconnectionfactory/modify.py
# Modify Verb (inherited from: glassfish.JMSConnectionFactory.modifyVerb)
#glassfish.QueueConnectionFactory.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: glassfish.JMSConnectionFactory.noopOrder)
#glassfish.QueueConnectionFactory.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: glassfish.JMSConnectionFactory.noopScript)
#glassfish.QueueConnectionFactory.noopScript=null
# Noop Verb (inherited from: glassfish.JMSConnectionFactory.noopVerb)
#glassfish.QueueConnectionFactory.noopVerb=Modify
# The logical stop/start sequence for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. Please note that the steps will be created only if start/stop scripts are defined for the deployable. (inherited from: glassfish.JMSConnectionFactory.restartStrategy)
#glassfish.QueueConnectionFactory.restartStrategy=NONE
# The JMS resource type, which is javax.jms.QueueConnectionFactory
#glassfish.QueueConnectionFactory.restype=javax.jms.QueueConnectionFactory
# The order in which a start step will be executed. (inherited from: glassfish.JMSConnectionFactory.startOrder)
#glassfish.QueueConnectionFactory.startOrder=90
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: glassfish.JMSConnectionFactory.startScript)
#glassfish.QueueConnectionFactory.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: glassfish.JMSConnectionFactory.startVerb)
#glassfish.QueueConnectionFactory.startVerb=Start
# The order in which a stop step will be executed. (inherited from: glassfish.JMSConnectionFactory.stopOrder)
#glassfish.QueueConnectionFactory.stopOrder=10
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: glassfish.JMSConnectionFactory.stopScript)
#glassfish.QueueConnectionFactory.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: glassfish.JMSConnectionFactory.stopVerb)
#glassfish.QueueConnectionFactory.stopVerb=Stop
# The set of CI templates. (inherited from: jee.ResourceSpec.boundTemplates)
#glassfish.QueueConnectionFactorySpec.boundTemplates=null
# The set of CI templates. (inherited from: jee.ResourceSpec.boundTemplates)
#glassfish.QueueSpec.boundTemplates=null
# When true, the container restart strategy is applied for a NOOP operation (inherited from: glassfish.CliManagedDeployed.applyContainerRestartStrategyOnNoop)
#glassfish.ResourceRef.applyContainerRestartStrategyOnNoop=false
# When true, the deployed restart strategy is applied for a NOOP operation (inherited from: glassfish.CliManagedDeployed.applyRestartStrategyOnNoop)
#glassfish.ResourceRef.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: glassfish.CliManagedDeployed.boundConfigurationItems)
#glassfish.ResourceRef.boundConfigurationItems=null
# The logical stop/start sequence for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, stop container, start container. (inherited from: glassfish.CliManagedDeployed.containerRestartStrategy)
#glassfish.ResourceRef.containerRestartStrategy=NONE
# The order of the step in the step list for the create operation.
#glassfish.ResourceRef.createOrder=70
# Classpath to the script that is uploaded and executed on the generic container for the create operation.
#glassfish.ResourceRef.createScript=glassfish/resourceref/deploy.py
# Create Verb (inherited from: glassfish.CliManagedDeployed.createVerb)
#glassfish.ResourceRef.createVerb=Create
# The order of the step in the step list for the destroy operation.
#glassfish.ResourceRef.destroyOrder=25
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation.
#glassfish.ResourceRef.destroyScript=glassfish/resourceref/undeploy.py
# Destroy Verb (inherited from: glassfish.CliManagedDeployed.destroyVerb)
#glassfish.ResourceRef.destroyVerb=Destroy
# Classpath to the script used to inspect the generic container.
#glassfish.ResourceRef.inspectScript=glassfish/resourceref/inspect.py
# List of python library scripts that should be automatically loaded when using a Glassfish CLI script. (inherited from: glassfish.CliManagedDeployed.libraryScripts)
#glassfish.ResourceRef.libraryScripts=null
# The order of the step in the step list for the modify operation.
#glassfish.ResourceRef.modifyOrder=65
# Classpath to the script that is uploaded and executed on the generic container for the modify operation. (inherited from: glassfish.CliManagedDeployed.modifyScript)
#glassfish.ResourceRef.modifyScript=null
# Modify Verb (inherited from: glassfish.CliManagedDeployed.modifyVerb)
#glassfish.ResourceRef.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: glassfish.CliManagedDeployed.noopOrder)
#glassfish.ResourceRef.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: glassfish.CliManagedDeployed.noopScript)
#glassfish.ResourceRef.noopScript=null
# Noop Verb (inherited from: glassfish.CliManagedDeployed.noopVerb)
#glassfish.ResourceRef.noopVerb=Modify
# The logical stop/start sequence for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. Please note that the steps will be created only if start/stop scripts are defined for the deployable. (inherited from: glassfish.CliManagedDeployed.restartStrategy)
#glassfish.ResourceRef.restartStrategy=NONE
# The order in which a start step will be executed. (inherited from: glassfish.CliManagedDeployed.startOrder)
#glassfish.ResourceRef.startOrder=90
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: glassfish.CliManagedDeployed.startScript)
#glassfish.ResourceRef.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: glassfish.CliManagedDeployed.startVerb)
#glassfish.ResourceRef.startVerb=Start
# The order in which a stop step will be executed. (inherited from: glassfish.CliManagedDeployed.stopOrder)
#glassfish.ResourceRef.stopOrder=10
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: glassfish.CliManagedDeployed.stopScript)
#glassfish.ResourceRef.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: glassfish.CliManagedDeployed.stopVerb)
#glassfish.ResourceRef.stopVerb=Stop
# The set of CI templates. (inherited from: jee.ResourceSpec.boundTemplates)
#glassfish.ResourceRefSpec.boundTemplates=null
# Restart Order
#glassfish.StandaloneServer.restartOrder=80
# Start Order
#glassfish.StandaloneServer.startOrder=80
# Start Script
#glassfish.StandaloneServer.startScript=glassfish/container/start-instance.py
# Stop Order
#glassfish.StandaloneServer.stopOrder=20
# Stop Script
#glassfish.StandaloneServer.stopScript=glassfish/container/stop-instance.py
# When true, the container restart strategy is applied for a NOOP operation (inherited from: glassfish.JMSDestination.applyContainerRestartStrategyOnNoop)
#glassfish.Topic.applyContainerRestartStrategyOnNoop=false
# When true, the deployed restart strategy is applied for a NOOP operation (inherited from: glassfish.JMSDestination.applyRestartStrategyOnNoop)
#glassfish.Topic.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: glassfish.JMSDestination.boundConfigurationItems)
#glassfish.Topic.boundConfigurationItems=null
# The logical stop/start sequence for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, stop container, start container. (inherited from: glassfish.JMSDestination.containerRestartStrategy)
#glassfish.Topic.containerRestartStrategy=NONE
# The order of the step in the step list for the create operation. (inherited from: glassfish.JMSDestination.createOrder)
#glassfish.Topic.createOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the create operation. (inherited from: glassfish.JMSDestination.createScript)
#glassfish.Topic.createScript=glassfish/jmsdestination/deploy.py
# Create Verb (inherited from: glassfish.JMSDestination.createVerb)
#glassfish.Topic.createVerb=Create
# The order of the step in the step list for the destroy operation. (inherited from: glassfish.JMSDestination.destroyOrder)
#glassfish.Topic.destroyOrder=40
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation. (inherited from: glassfish.JMSDestination.destroyScript)
#glassfish.Topic.destroyScript=glassfish/jmsdestination/undeploy.py
# Destroy Verb (inherited from: glassfish.JMSDestination.destroyVerb)
#glassfish.Topic.destroyVerb=Destroy
# Classpath to the script used to inspect the generic container. (inherited from: glassfish.JMSDestination.inspectScript)
#glassfish.Topic.inspectScript=glassfish/jmsdestination/inspect.py
# List of python library scripts that should be automatically loaded when using a Glassfish CLI script. (inherited from: glassfish.JMSDestination.libraryScripts)
#glassfish.Topic.libraryScripts=null
# The order of the step in the step list for the modify operation. (inherited from: glassfish.JMSDestination.modifyOrder)
#glassfish.Topic.modifyOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the modify operation. (inherited from: glassfish.JMSDestination.modifyScript)
#glassfish.Topic.modifyScript=glassfish/jmsdestination/modify.py
# Modify Verb (inherited from: glassfish.JMSDestination.modifyVerb)
#glassfish.Topic.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: glassfish.JMSDestination.noopOrder)
#glassfish.Topic.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: glassfish.JMSDestination.noopScript)
#glassfish.Topic.noopScript=null
# Noop Verb (inherited from: glassfish.JMSDestination.noopVerb)
#glassfish.Topic.noopVerb=Modify
# The logical stop/start sequence for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. Please note that the steps will be created only if start/stop scripts are defined for the deployable. (inherited from: glassfish.JMSDestination.restartStrategy)
#glassfish.Topic.restartStrategy=NONE
# The JMS resource type, which  is javax.jms.Topic
#glassfish.Topic.restype=javax.jms.Topic
# The order in which a start step will be executed. (inherited from: glassfish.JMSDestination.startOrder)
#glassfish.Topic.startOrder=90
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: glassfish.JMSDestination.startScript)
#glassfish.Topic.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: glassfish.JMSDestination.startVerb)
#glassfish.Topic.startVerb=Start
# The order in which a stop step will be executed. (inherited from: glassfish.JMSDestination.stopOrder)
#glassfish.Topic.stopOrder=10
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: glassfish.JMSDestination.stopScript)
#glassfish.Topic.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: glassfish.JMSDestination.stopVerb)
#glassfish.Topic.stopVerb=Stop
# When true, the container restart strategy is applied for a NOOP operation (inherited from: glassfish.JMSConnectionFactory.applyContainerRestartStrategyOnNoop)
#glassfish.TopicConnectionFactory.applyContainerRestartStrategyOnNoop=false
# When true, the deployed restart strategy is applied for a NOOP operation (inherited from: glassfish.JMSConnectionFactory.applyRestartStrategyOnNoop)
#glassfish.TopicConnectionFactory.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: glassfish.JMSConnectionFactory.boundConfigurationItems)
#glassfish.TopicConnectionFactory.boundConfigurationItems=null
# The logical stop/start sequence for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, stop container, start container. (inherited from: glassfish.JMSConnectionFactory.containerRestartStrategy)
#glassfish.TopicConnectionFactory.containerRestartStrategy=NONE
# The order of the step in the step list for the create operation. (inherited from: glassfish.JMSConnectionFactory.createOrder)
#glassfish.TopicConnectionFactory.createOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the create operation. (inherited from: glassfish.JMSConnectionFactory.createScript)
#glassfish.TopicConnectionFactory.createScript=glassfish/jmsconnectionfactory/deploy.py
# Create Verb (inherited from: glassfish.JMSConnectionFactory.createVerb)
#glassfish.TopicConnectionFactory.createVerb=Create
# The order of the step in the step list for the destroy operation. (inherited from: glassfish.JMSConnectionFactory.destroyOrder)
#glassfish.TopicConnectionFactory.destroyOrder=40
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation. (inherited from: glassfish.JMSConnectionFactory.destroyScript)
#glassfish.TopicConnectionFactory.destroyScript=glassfish/jmsconnectionfactory/undeploy.py
# Destroy Verb (inherited from: glassfish.JMSConnectionFactory.destroyVerb)
#glassfish.TopicConnectionFactory.destroyVerb=Destroy
# Classpath to the script used to inspect the generic container. (inherited from: glassfish.JMSConnectionFactory.inspectScript)
#glassfish.TopicConnectionFactory.inspectScript=glassfish/jmsconnectionfactory/inspect.py
# List of python library scripts that should be automatically loaded when using a Glassfish CLI script. (inherited from: glassfish.JMSConnectionFactory.libraryScripts)
#glassfish.TopicConnectionFactory.libraryScripts=glassfish/jmsconnectionfactory/jms-connectionfactory-lib.py
# The order of the step in the step list for the modify operation. (inherited from: glassfish.JMSConnectionFactory.modifyOrder)
#glassfish.TopicConnectionFactory.modifyOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the modify operation. (inherited from: glassfish.JMSConnectionFactory.modifyScript)
#glassfish.TopicConnectionFactory.modifyScript=glassfish/jmsconnectionfactory/modify.py
# Modify Verb (inherited from: glassfish.JMSConnectionFactory.modifyVerb)
#glassfish.TopicConnectionFactory.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: glassfish.JMSConnectionFactory.noopOrder)
#glassfish.TopicConnectionFactory.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: glassfish.JMSConnectionFactory.noopScript)
#glassfish.TopicConnectionFactory.noopScript=null
# Noop Verb (inherited from: glassfish.JMSConnectionFactory.noopVerb)
#glassfish.TopicConnectionFactory.noopVerb=Modify
# The logical stop/start sequence for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. Please note that the steps will be created only if start/stop scripts are defined for the deployable. (inherited from: glassfish.JMSConnectionFactory.restartStrategy)
#glassfish.TopicConnectionFactory.restartStrategy=NONE
# The JMS resource type, which can be javax.jms.TopicConnectionFactory
#glassfish.TopicConnectionFactory.restype=javax.jms.TopicConnectionFactory
# The order in which a start step will be executed. (inherited from: glassfish.JMSConnectionFactory.startOrder)
#glassfish.TopicConnectionFactory.startOrder=90
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: glassfish.JMSConnectionFactory.startScript)
#glassfish.TopicConnectionFactory.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: glassfish.JMSConnectionFactory.startVerb)
#glassfish.TopicConnectionFactory.startVerb=Start
# The order in which a stop step will be executed. (inherited from: glassfish.JMSConnectionFactory.stopOrder)
#glassfish.TopicConnectionFactory.stopOrder=10
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: glassfish.JMSConnectionFactory.stopScript)
#glassfish.TopicConnectionFactory.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: glassfish.JMSConnectionFactory.stopVerb)
#glassfish.TopicConnectionFactory.stopVerb=Stop
# The set of CI templates. (inherited from: jee.ResourceSpec.boundTemplates)
#glassfish.TopicConnectionFactorySpec.boundTemplates=null
# The set of CI templates. (inherited from: jee.ResourceSpec.boundTemplates)
#glassfish.TopicSpec.boundTemplates=null
# The set of CI templates. (inherited from: jee.War.boundTemplates)
#glassfish.War.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: jee.War.delimiters)
#glassfish.War.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: jee.War.textFileNamesRegex)
#glassfish.War.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# When true, the container restart strategy is applied for a NOOP operation (inherited from: glassfish.Artifact.applyContainerRestartStrategyOnNoop)
#glassfish.WarModule.applyContainerRestartStrategyOnNoop=false
# When true, the deployed restart strategy is applied for a NOOP operation (inherited from: glassfish.Artifact.applyRestartStrategyOnNoop)
#glassfish.WarModule.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: glassfish.Artifact.boundConfigurationItems)
#glassfish.WarModule.boundConfigurationItems=null
# The logical stop/start sequence for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, stop container, start container. (inherited from: glassfish.Artifact.containerRestartStrategy)
#glassfish.WarModule.containerRestartStrategy=NONE
# The order of the step in the step list for the create operation. (inherited from: glassfish.Artifact.createOrder)
#glassfish.WarModule.createOrder=70
# Classpath to the script that is uploaded and executed on the generic container for the create operation. (inherited from: glassfish.Artifact.createScript)
#glassfish.WarModule.createScript=glassfish/application/deploy.py
# Create Verb (inherited from: glassfish.Artifact.createVerb)
#glassfish.WarModule.createVerb=Deploy
# The order of the step in the step list for the destroy operation. (inherited from: glassfish.Artifact.destroyOrder)
#glassfish.WarModule.destroyOrder=30
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation. (inherited from: glassfish.Artifact.destroyScript)
#glassfish.WarModule.destroyScript=glassfish/application/undeploy.py
# Destroy Verb (inherited from: glassfish.Artifact.destroyVerb)
#glassfish.WarModule.destroyVerb=Undeploy
# Allows users to access the application. (inherited from: glassfish.Artifact.enabled)
#glassfish.WarModule.enabled=true
# Extension
#glassfish.WarModule.extension=war
# Classpath to the script used to inspect the generic container. (inherited from: glassfish.Artifact.inspectScript)
#glassfish.WarModule.inspectScript=glassfish/application/inspect-app.py
# List of python library scripts that should be automatically loaded when using a Glassfish CLI script. (inherited from: glassfish.Artifact.libraryScripts)
#glassfish.WarModule.libraryScripts=glassfish/application/application-lib.py
# The order of the step in the step list for the modify operation. (inherited from: glassfish.Artifact.modifyOrder)
#glassfish.WarModule.modifyOrder=70
# Classpath to the script that is uploaded and executed on the generic container for the modify operation. (inherited from: glassfish.Artifact.modifyScript)
#glassfish.WarModule.modifyScript=glassfish/application/modify.py
# Modify Verb (inherited from: glassfish.Artifact.modifyVerb)
#glassfish.WarModule.modifyVerb=Update
# The order of the step in the step list for the noop operation. (inherited from: glassfish.Artifact.noopOrder)
#glassfish.WarModule.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: glassfish.Artifact.noopScript)
#glassfish.WarModule.noopScript=null
# Noop Verb (inherited from: glassfish.Artifact.noopVerb)
#glassfish.WarModule.noopVerb=Modify
# Precompiles JSP pages during deployment.
#glassfish.WarModule.precompileJsp=false
# The logical stop/start sequence for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. Please note that the steps will be created only if start/stop scripts are defined for the deployable. (inherited from: glassfish.Artifact.restartStrategy)
#glassfish.WarModule.restartStrategy=NONE
# The order in which a start step will be executed. (inherited from: glassfish.Artifact.startOrder)
#glassfish.WarModule.startOrder=90
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: glassfish.Artifact.startScript)
#glassfish.WarModule.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: glassfish.Artifact.startVerb)
#glassfish.WarModule.startVerb=Start
# The order in which a stop step will be executed. (inherited from: glassfish.Artifact.stopOrder)
#glassfish.WarModule.stopOrder=10
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: glassfish.Artifact.stopScript)
#glassfish.WarModule.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: glassfish.Artifact.stopVerb)
#glassfish.WarModule.stopVerb=Stop
# Name of the application pool for this website.
#iis.Application.applicationPoolName=DefaultAppPool
# If set to true, multiple steps at the same order will be batched together in one batch to improve performance over high-latency WinRM connections (inherited from: iis.Resource.batchSteps)
#iis.Application.batchSteps=false
# The set of created CIs. (inherited from: iis.Resource.boundConfigurationItems)
#iis.Application.boundConfigurationItems=null
# Additional classpath resources that should be uploaded to the working directory before executing the script. (inherited from: iis.Resource.classpathResources)
#iis.Application.classpathResources=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Resource.createOptions)
#iis.Application.createOptions=uploadArtifactData,uploadClasspathResources
# Order at which the create step will be executed. (inherited from: iis.Resource.createOrder)
#iis.Application.createOrder=60
# PowerShell script invoked to create a resource (or deploy an artifact) on Windows.
#iis.Application.createScript=iis/create-or-modify-application.ps1
# Verb that is used to prefix the description for the create step. (inherited from: iis.Resource.createVerb)
#iis.Application.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Resource.destroyOptions)
#iis.Application.destroyOptions=uploadClasspathResources
# Order at which the destroy step will be executed. (inherited from: iis.Resource.destroyOrder)
#iis.Application.destroyOrder=40
# PowerShell script invoked to destroy a resource (or undeploy an artifact) on Windows.
#iis.Application.destroyScript=iis/destroy-application.ps1
# Verb that is used to prefix the description for the destroy step. (inherited from: iis.Resource.destroyVerb)
#iis.Application.destroyVerb=Destroy
# Order at which the discover step will be executed. (inherited from: iis.Resource.discoverOrder)
#iis.Application.discoverOrder=50
# Script invoked to discover and inspect deployeds of this type.
#iis.Application.discoverScript=iis/inspect-applications.ps1
# Whether to add the host password to the powershell variable values. (inherited from: iis.Resource.exposePasswordPropertiesOnHosts)
#iis.Application.exposePasswordPropertiesOnHosts=false
# List of scripts to append to the the step script. (inherited from: iis.Resource.libraryScripts)
#iis.Application.libraryScripts=iis/library/resource.ps1
# Maximum number of steps in a batch. (inherited from: iis.Resource.maxBatchSize)
#iis.Application.maxBatchSize=100
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed).
#iis.Application.modifyOptions=uploadArtifactData,exposePreviousDeployed
# Order at which the modify step will be executed. (inherited from: iis.Resource.modifyOrder)
#iis.Application.modifyOrder=60
# PowerShell script invoked to modify a resource (or an artifact) on Windows.
#iis.Application.modifyScript=iis/create-or-modify-application.ps1
# Verb that is used to prefix the description for the modify step. (inherited from: iis.Resource.modifyVerb)
#iis.Application.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Resource.noopOptions)
#iis.Application.noopOptions=uploadClasspathResources
# Order at which the noop step will be executed. (inherited from: iis.Resource.noopOrder)
#iis.Application.noopOrder=50
# PowerShell script invoked to noop a resource or an artifact on Windows. (inherited from: iis.Resource.noopScript)
#iis.Application.noopScript=null
# Verb that is used to prefix the description for the noop step. (inherited from: iis.Resource.noopVerb)
#iis.Application.noopVerb=Noop
# Protocols supported by this application
#iis.Application.protocols=http
# Options for the start step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Resource.startOptions)
#iis.Application.startOptions=uploadClasspathResources
# Order at which the start step will be executed. (inherited from: iis.Resource.startOrder)
#iis.Application.startOrder=90
# PowerShell script invoked to start a resource of an artifact on Windows. (inherited from: iis.Resource.startScript)
#iis.Application.startScript=null
# Verb that is used to prefix the description for the start step. (inherited from: iis.Resource.startVerb)
#iis.Application.startVerb=Start
# Options for the stop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Resource.stopOptions)
#iis.Application.stopOptions=uploadClasspathResources
# Order at which the stop script will be executed. (inherited from: iis.Resource.stopOrder)
#iis.Application.stopOrder=10
# PowerShell script invoked to stop a resource or an artifact on Windows. (inherited from: iis.Resource.stopScript)
#iis.Application.stopScript=null
# Verb that is used to prefix the description for the stop step. (inherited from: iis.Resource.stopVerb)
#iis.Application.stopVerb=Stop
# Whether to use a sidecar '.ini' file to transfer the powershell variable values. (inherited from: iis.Resource.useSidecarIniFile)
#iis.Application.useSidecarIniFile=false
# If set to true, multiple steps at the same order will be batched together in one batch to improve performance over high-latency WinRM connections (inherited from: powershell.ExtensiblePowerShellDeployed.batchSteps)
#iis.ApplicationPool.batchSteps=false
# The set of created CIs. (inherited from: powershell.ExtensiblePowerShellDeployed.boundConfigurationItems)
#iis.ApplicationPool.boundConfigurationItems=null
# Additional classpath resources that should be uploaded to the working directory before executing the script. (inherited from: powershell.ExtensiblePowerShellDeployed.classpathResources)
#iis.ApplicationPool.classpathResources=null
# Clear previous recycling times added to IIS Application Pool.
#iis.ApplicationPool.cleanRecycleTimes=true
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployed.createOptions)
#iis.ApplicationPool.createOptions=uploadArtifactData,uploadClasspathResources
# Order at which the create step will be executed.
#iis.ApplicationPool.createOrder=56
# PowerShell script invoked to create a resource (or deploy an artifact) on Windows.
#iis.ApplicationPool.createScript=iis/create-or-modify-application-pool.ps1
# Verb that is used to prefix the description for the create step. (inherited from: powershell.ExtensiblePowerShellDeployed.createVerb)
#iis.ApplicationPool.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployed.destroyOptions)
#iis.ApplicationPool.destroyOptions=uploadClasspathResources
# Order at which the destroy step will be executed.
#iis.ApplicationPool.destroyOrder=44
# PowerShell script invoked to destroy a resource (or undeploy an artifact) on Windows.
#iis.ApplicationPool.destroyScript=iis/destroy-application-pool.ps1
# Verb that is used to prefix the description for the destroy step. (inherited from: powershell.ExtensiblePowerShellDeployed.destroyVerb)
#iis.ApplicationPool.destroyVerb=Destroy
# Order at which the discover step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployed.discoverOrder)
#iis.ApplicationPool.discoverOrder=50
# Script invoked to discover and inspect deployeds of this type.
#iis.ApplicationPool.discoverScript=iis/inspect-application-pools.ps1
# When the Enable32BitAppOnWin64 property is set to true, a 32-bit application is allowed to run on a computer than has a 64-bit processor.
#iis.ApplicationPool.enable32BitAppOnWin64=false
# Whether to add the host password to the powershell variable values. (inherited from: powershell.ExtensiblePowerShellDeployed.exposePasswordPropertiesOnHosts)
#iis.ApplicationPool.exposePasswordPropertiesOnHosts=false
# Setting to true instructs the WWW service to remove from service all applications that are in an application pool.
#iis.ApplicationPool.failureRapidFailProtection=true
# Specifies the number of minutes before the failure count for a process is reset.
#iis.ApplicationPool.failureRapidFailProtectionInterval=5
# Specifies the maximum number of failures that are allowed within the number of minutes specified by the rapidFailProtectionInterval attribute.
#iis.ApplicationPool.failureRapidFailProtectionMaxCrashes=5
# List of scripts to append to the the step script. (inherited from: powershell.ExtensiblePowerShellDeployed.libraryScripts)
#iis.ApplicationPool.libraryScripts=null
# The managed .NET runtime version to use.
#iis.ApplicationPool.managedRuntimeVersion=v4.0
# Maximum number of steps in a batch. (inherited from: powershell.ExtensiblePowerShellDeployed.maxBatchSize)
#iis.ApplicationPool.maxBatchSize=100
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed).
#iis.ApplicationPool.modifyOptions=uploadArtifactData,exposePreviousDeployed
# Order at which the modify step will be executed.
#iis.ApplicationPool.modifyOrder=56
# PowerShell script invoked to modify a resource (or an artifact) on Windows.
#iis.ApplicationPool.modifyScript=iis/create-or-modify-application-pool.ps1
# Verb that is used to prefix the description for the modify step. (inherited from: powershell.ExtensiblePowerShellDeployed.modifyVerb)
#iis.ApplicationPool.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployed.noopOptions)
#iis.ApplicationPool.noopOptions=uploadClasspathResources
# Order at which the noop step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployed.noopOrder)
#iis.ApplicationPool.noopOrder=50
# PowerShell script invoked to noop a resource or an artifact on Windows. (inherited from: powershell.ExtensiblePowerShellDeployed.noopScript)
#iis.ApplicationPool.noopScript=null
# Verb that is used to prefix the description for the noop step. (inherited from: powershell.ExtensiblePowerShellDeployed.noopVerb)
#iis.ApplicationPool.noopVerb=Noop
# Specifies the number of times to checks when stopping/starting the application pool. Will fail step if all attempts fails. Default value is 3 times
#iis.ApplicationPool.numberOfChecks=3
# Specifies how long a worker process should run idle if no new requests are received and the worker process is not processing requests. After the allocated time passes, the worker process should request that it be shut down by the WWW service (minutes).
#iis.ApplicationPool.processModelIdleTimeout=20
# Specifies the number of worker processes associated with the application pool. A value other than 1 indicates a Web garden.
#iis.ApplicationPool.processModelMaxProcesses=1
# If True, the worker process(es) serving this application pool are pinged periodically to ensure that they are still responsive
#iis.ApplicationPool.processModelPingEnabled=true
# Specifies the time between health-monitoring pings that the WWW service sends to a worker process (seconds).
#iis.ApplicationPool.processModelPingInterval=30
# Specifies the time that a worker process is given to respond to a health-monitoring ping. After the time limit is exceeded, the WWW service terminates the worker process. (seconds)
#iis.ApplicationPool.processModelPingResponseTime=90
# Specifies the time that the W3SVC service waits after it initiated a recycle. If the worker process does not shut down within the shutdownTimeLimit, it will be terminated by the W3SVC service (seconds).
#iis.ApplicationPool.processModelShutdownTimeLimit=90
# Specifies the time that IIS waits for an application pool to start. If the application pool does not startup within the startupTimeLimit, the worker process is terminated and the rapid-fail protection count is incremented (seconds).
#iis.ApplicationPool.processModelStartupTimeLimit=90
# Maximum number of requests that Http.sys queues for the application pool.
#iis.ApplicationPool.queueLength=1000
# Period of time (in minutes) after which an application pool will recycle.
#iis.ApplicationPool.recyclingPeriodicRestartTime=1740
# Application pool can run as several built-in service accounts. Valid values are NetworkService, LocalService, LocalSystem, ApplicationPoolIdentity, SpecificUser.
#iis.ApplicationPool.serviceAccount=ApplicationPoolIdentity
# Specifies the number of seconds to pause for a new application pool to become responsive after creation.
#iis.ApplicationPool.sleepAfterCreate=2
# Specifies the number of seconds to pause during deployment before starting the application pool. Default value is 0 second
#iis.ApplicationPool.sleepBeforeStart=0
# Specifies the number of seconds to wait between checks when stopping/starting the application pool. Default value is 5 seconds
#iis.ApplicationPool.sleepBetweenChecks=5
# Options for the start step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployed.startOptions)
#iis.ApplicationPool.startOptions=uploadClasspathResources
# Order at which the start step will be executed.
#iis.ApplicationPool.startOrder=86
# PowerShell script invoked to start a resource of an artifact on Windows.
#iis.ApplicationPool.startScript=iis/start-application-pool.ps1
# Verb that is used to prefix the description for the start step. (inherited from: powershell.ExtensiblePowerShellDeployed.startVerb)
#iis.ApplicationPool.startVerb=Start
# Options for the stop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployed.stopOptions)
#iis.ApplicationPool.stopOptions=uploadClasspathResources
# Order at which the stop script will be executed.
#iis.ApplicationPool.stopOrder=14
# PowerShell script invoked to stop a resource or an artifact on Windows.
#iis.ApplicationPool.stopScript=iis/stop-application-pool.ps1
# If set to true, this application pool is stopped and started when another component in the same package is deployed
#iis.ApplicationPool.stopStartOnNoop=true
# Verb that is used to prefix the description for the stop step. (inherited from: powershell.ExtensiblePowerShellDeployed.stopVerb)
#iis.ApplicationPool.stopVerb=Stop
# Whether to use a sidecar '.ini' file to transfer the powershell variable values. (inherited from: powershell.ExtensiblePowerShellDeployed.useSidecarIniFile)
#iis.ApplicationPool.useSidecarIniFile=false
# The set of CI templates. (inherited from: powershell.BasePowerShellDeployable.boundTemplates)
#iis.ApplicationPoolSpec.boundTemplates=null
# The set of CI templates. (inherited from: powershell.BasePowerShellDeployable.boundTemplates)
#iis.ApplicationSpec.boundTemplates=null
# Allows any user to access any public content without providing a user name and password challenge to the client browser. By default, Anonymous authentication is enabled
#iis.Authentication.anonymousAuthentication_enabled=true
# The logonMethod attribute can be one of the following possible values: Interactive - 0, Batch - 1, Network - 2, ClearText - 3.
#iis.Authentication.anonymousAuthentication_logonMethod=ClearText
# Specifies the user identity type to authenticate anonymous users.
#iis.Authentication.anonymousAuthentication_userIdentity=SpecificUser
# Specifies the username for Anonymous authentication.
#iis.Authentication.anonymousAuthentication_userName=IUSR
# Use ASP.NET impersonation when you want to run your ASP.NET application under a security context different from the default security context for ASP.NET application.
#iis.Authentication.aspnetImpersonation_impersonate=false
# Specifies whether Basic authentication is enabled.
#iis.Authentication.basicAuthentication_enabled=false
# The logonMethod attribute can be one of the following possible values: Interactive - 0, Batch - 1, Network - 2, ClearText - 3.
#iis.Authentication.basicAuthentication_logonMethod=ClearText
# Specifies whether Client Certificate Mapping authentication using Active Directory is enabled. For this setting to take effect, you must set this attribute with IIS Manager. If you use any other method to set this attribute, you must restart the Web server for the setting to take effect.
#iis.Authentication.clientCertificateMappingAuthentication_enabled=false
# Specifies whether Digest authentication is enabled.
#iis.Authentication.digestAuthentication_enabled=false
# Defines whether cookies are used and their behavior.
#iis.Authentication.formsAuthentication_cookieless=UseDeviceProfile
# Defines the default URL that is used for redirection after authentication.
#iis.Authentication.formsAuthentication_defaultUrl=default.aspx
# Indicates whether authenticated users are redirected to URLs in other Web applications.
#iis.Authentication.formsAuthentication_enableCrossAppRedirects=false
# Specifies whether ASP.NET forms–based authentication is enabled.
#iis.Authentication.formsAuthentication_enabled=false
# Specifies the URL to which the request is redirected for logon, if no valid authentication cookie is found.
#iis.Authentication.formsAuthentication_loginUrl=login.aspx
# Specifies the HTTP cookie to use for authentication. If multiple applications are running on a single server and each application requires a unique cookie, you must configure the cookie name in each Web.config file for each application.
#iis.Authentication.formsAuthentication_name=.ASPXAUTH
# Specifies the path for cookies that are issued by the application.
#iis.Authentication.formsAuthentication_path=/
# Specifies the type of encryption, if any, to use for cookies.
#iis.Authentication.formsAuthentication_protection=All
# Specifies whether an SSL connection is required to transmit the authentication cookie.
#iis.Authentication.formsAuthentication_requireSSL=false
# Specifies whether sliding expiration is enabled. Sliding expiration resets the active authentication time for a cookie to expire upon each request during a single session.
#iis.Authentication.formsAuthentication_slidingExpiration=true
# Specifies the time after which the cookie expires. The time format is 'HH:MM:SS'. Default value is '00:30:00' (30 minutes).
#iis.Authentication.formsAuthentication_timeout=00:30:00
# Specifies whether IIS automatically reauthenticates every non-NTLM (for example, Kerberos) request, even those on the same connection. False enables multiple authentications for the same connections.
#iis.Authentication.windowsAuthentication_authPersistNonNTLM=true
# Setting this flag to true specifies that authentication persists only for a single request on a connection. IIS resets the authentication at the end of each request, and forces reauthentication on the next request of the session.
#iis.Authentication.windowsAuthentication_authPersistSingleRequest=false
# Specifies whether Windows authentication is enabled.
#iis.Authentication.windowsAuthentication_enabled=false
# Specifies whether Windows authentication is done in kernel mode. Kernel-mode authentication may improve authentication performance and prevent authentication problems with application pools that are configured to use a custom identity.
#iis.Authentication.windowsAuthentication_useKernelMode=true
# If set to true, multiple steps at the same order will be batched together in one batch to improve performance over high-latency WinRM connections (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.batchSteps)
#iis.PublishedWebContent.batchSteps=false
# The set of created CIs. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.boundConfigurationItems)
#iis.PublishedWebContent.boundConfigurationItems=null
# Additional classpath resources that should be uploaded to the working directory before executing the script. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.classpathResources)
#iis.PublishedWebContent.classpathResources=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.createOptions)
#iis.PublishedWebContent.createOptions=uploadArtifactData,uploadClasspathResources
# Order at which the create step will be executed.
#iis.PublishedWebContent.createOrder=54
# PowerShell script invoked to create a resource (or deploy an artifact) on Windows.
#iis.PublishedWebContent.createScript=iis/deploy-webcontent.ps1
# Verb that is used to prefix the description for the create step.
#iis.PublishedWebContent.createVerb=Copy
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.destroyOptions)
#iis.PublishedWebContent.destroyOptions=uploadClasspathResources
# Order at which the destroy step will be executed.
#iis.PublishedWebContent.destroyOrder=46
# PowerShell script invoked to destroy a resource (or undeploy an artifact) on Windows.
#iis.PublishedWebContent.destroyScript=iis/undeploy-webcontent.ps1
# Verb that is used to prefix the description for the destroy step.
#iis.PublishedWebContent.destroyVerb=Remove
# Order at which the discover step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.discoverOrder)
#iis.PublishedWebContent.discoverOrder=50
# Script invoked to discover and inspect deployeds of this type. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.discoverScript)
#iis.PublishedWebContent.discoverScript=null
# Whether to add the host password to the powershell variable values. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.exposePasswordPropertiesOnHosts)
#iis.PublishedWebContent.exposePasswordPropertiesOnHosts=false
# List of scripts to append to the the step script. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.libraryScripts)
#iis.PublishedWebContent.libraryScripts=null
# Maximum number of steps in a batch. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.maxBatchSize)
#iis.PublishedWebContent.maxBatchSize=100
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.modifyOptions)
#iis.PublishedWebContent.modifyOptions=uploadArtifactData,uploadClasspathResources
# Order at which the modify step will be executed.
#iis.PublishedWebContent.modifyOrder=54
# PowerShell script invoked to modify a resource (or an artifact) on Windows.
#iis.PublishedWebContent.modifyScript=iis/deploy-webcontent.ps1
# Verb that is used to prefix the description for the modify step.
#iis.PublishedWebContent.modifyVerb=Copy
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.noopOptions)
#iis.PublishedWebContent.noopOptions=uploadClasspathResources
# Order at which the noop step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.noopOrder)
#iis.PublishedWebContent.noopOrder=50
# PowerShell script invoked to noop a resource or an artifact on Windows. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.noopScript)
#iis.PublishedWebContent.noopScript=null
# Verb that is used to prefix the description for the noop step. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.noopVerb)
#iis.PublishedWebContent.noopVerb=Noop
# Options for the start step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.startOptions)
#iis.PublishedWebContent.startOptions=uploadClasspathResources
# Order at which the start step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.startOrder)
#iis.PublishedWebContent.startOrder=90
# PowerShell script invoked to start a resource of an artifact on Windows. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.startScript)
#iis.PublishedWebContent.startScript=null
# Verb that is used to prefix the description for the start step. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.startVerb)
#iis.PublishedWebContent.startVerb=Start
# Options for the stop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.stopOptions)
#iis.PublishedWebContent.stopOptions=uploadClasspathResources
# Order at which the stop script will be executed. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.stopOrder)
#iis.PublishedWebContent.stopOrder=10
# PowerShell script invoked to stop a resource or an artifact on Windows. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.stopScript)
#iis.PublishedWebContent.stopScript=null
# Verb that is used to prefix the description for the stop step. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.stopVerb)
#iis.PublishedWebContent.stopVerb=Stop
# Whether to use a sidecar '.ini' file to transfer the powershell variable values. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.useSidecarIniFile)
#iis.PublishedWebContent.useSidecarIniFile=false
# If set to true, multiple steps at the same order will be batched together in one batch to improve performance over high-latency WinRM connections (inherited from: powershell.ExtensiblePowerShellDeployed.batchSteps)
#iis.Resource.batchSteps=false
# The set of created CIs. (inherited from: powershell.ExtensiblePowerShellDeployed.boundConfigurationItems)
#iis.Resource.boundConfigurationItems=null
# Additional classpath resources that should be uploaded to the working directory before executing the script. (inherited from: powershell.ExtensiblePowerShellDeployed.classpathResources)
#iis.Resource.classpathResources=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployed.createOptions)
#iis.Resource.createOptions=uploadArtifactData,uploadClasspathResources
# Order at which the create step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployed.createOrder)
#iis.Resource.createOrder=60
# PowerShell script invoked to create a resource (or deploy an artifact) on Windows. (inherited from: powershell.ExtensiblePowerShellDeployed.createScript)
#iis.Resource.createScript=null
# Verb that is used to prefix the description for the create step. (inherited from: powershell.ExtensiblePowerShellDeployed.createVerb)
#iis.Resource.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployed.destroyOptions)
#iis.Resource.destroyOptions=uploadClasspathResources
# Order at which the destroy step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployed.destroyOrder)
#iis.Resource.destroyOrder=40
# PowerShell script invoked to destroy a resource (or undeploy an artifact) on Windows. (inherited from: powershell.ExtensiblePowerShellDeployed.destroyScript)
#iis.Resource.destroyScript=null
# Verb that is used to prefix the description for the destroy step. (inherited from: powershell.ExtensiblePowerShellDeployed.destroyVerb)
#iis.Resource.destroyVerb=Destroy
# Specifies whether directory browsing is enabled (true) or disabled (false) on the Web server.
#iis.Resource.directoryBrowse_enabled=false
# The showFlags attribute can have one or more of the following possible values. If you specify more than one value, separate the values with a comma (,). The default values are Date, Time, Size, Extension. None specifies that only the file or directory names are returned in a directory listing.
#iis.Resource.directoryBrowse_showFlags=Date,Time,Size,Extension
# Order at which the discover step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployed.discoverOrder)
#iis.Resource.discoverOrder=50
# Script invoked to discover and inspect deployeds of this type. (inherited from: powershell.ExtensiblePowerShellDeployed.discoverScript)
#iis.Resource.discoverScript=null
# Whether to add the host password to the powershell variable values. (inherited from: powershell.ExtensiblePowerShellDeployed.exposePasswordPropertiesOnHosts)
#iis.Resource.exposePasswordPropertiesOnHosts=false
# List of scripts to append to the the step script.
#iis.Resource.libraryScripts=iis/library/resource.ps1
# Maximum number of steps in a batch. (inherited from: powershell.ExtensiblePowerShellDeployed.maxBatchSize)
#iis.Resource.maxBatchSize=100
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployed.modifyOptions)
#iis.Resource.modifyOptions=uploadArtifactData,uploadClasspathResources
# Order at which the modify step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployed.modifyOrder)
#iis.Resource.modifyOrder=60
# PowerShell script invoked to modify a resource (or an artifact) on Windows. (inherited from: powershell.ExtensiblePowerShellDeployed.modifyScript)
#iis.Resource.modifyScript=null
# Verb that is used to prefix the description for the modify step. (inherited from: powershell.ExtensiblePowerShellDeployed.modifyVerb)
#iis.Resource.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployed.noopOptions)
#iis.Resource.noopOptions=uploadClasspathResources
# Order at which the noop step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployed.noopOrder)
#iis.Resource.noopOrder=50
# PowerShell script invoked to noop a resource or an artifact on Windows. (inherited from: powershell.ExtensiblePowerShellDeployed.noopScript)
#iis.Resource.noopScript=null
# Verb that is used to prefix the description for the noop step. (inherited from: powershell.ExtensiblePowerShellDeployed.noopVerb)
#iis.Resource.noopVerb=Noop
# Options for the start step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployed.startOptions)
#iis.Resource.startOptions=uploadClasspathResources
# Order at which the start step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployed.startOrder)
#iis.Resource.startOrder=90
# PowerShell script invoked to start a resource of an artifact on Windows. (inherited from: powershell.ExtensiblePowerShellDeployed.startScript)
#iis.Resource.startScript=null
# Verb that is used to prefix the description for the start step. (inherited from: powershell.ExtensiblePowerShellDeployed.startVerb)
#iis.Resource.startVerb=Start
# Options for the stop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployed.stopOptions)
#iis.Resource.stopOptions=uploadClasspathResources
# Order at which the stop script will be executed. (inherited from: powershell.ExtensiblePowerShellDeployed.stopOrder)
#iis.Resource.stopOrder=10
# PowerShell script invoked to stop a resource or an artifact on Windows. (inherited from: powershell.ExtensiblePowerShellDeployed.stopScript)
#iis.Resource.stopScript=null
# Verb that is used to prefix the description for the stop step. (inherited from: powershell.ExtensiblePowerShellDeployed.stopVerb)
#iis.Resource.stopVerb=Stop
# Whether to use a sidecar '.ini' file to transfer the powershell variable values. (inherited from: powershell.ExtensiblePowerShellDeployed.useSidecarIniFile)
#iis.Resource.useSidecarIniFile=false
# Deployeds To Discover (inherited from: powershell.BasePowerShellContainer.deployedsToDiscover)
#iis.Server.deployedsToDiscover=null
# Order at which the discover step will be executed. (inherited from: powershell.BasePowerShellContainer.discoverOrder)
#iis.Server.discoverOrder=0
# Script invoked to inspect this container and discover deployeds on it. (inherited from: powershell.BasePowerShellContainer.discoverScript)
#iis.Server.discoverScript=null
# List of scripts to append to the the step script.
#iis.Server.libraryScripts=iis/runtime/assert.ps1,iis/runtime/load-webadministration.ps1
# Power Shell Path (inherited from: powershell.BasePowerShellContainer.powerShellPath)
#iis.Server.powerShellPath=powershell
# If set to true, multiple steps at the same order will be batched together in one batch to improve performance over high-latency WinRM connections (inherited from: iis.Resource.batchSteps)
#iis.VirtualDirectory.batchSteps=false
# The set of created CIs. (inherited from: iis.Resource.boundConfigurationItems)
#iis.VirtualDirectory.boundConfigurationItems=null
# Additional classpath resources that should be uploaded to the working directory before executing the script. (inherited from: iis.Resource.classpathResources)
#iis.VirtualDirectory.classpathResources=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Resource.createOptions)
#iis.VirtualDirectory.createOptions=uploadArtifactData,uploadClasspathResources
# Order at which the create step will be executed. (inherited from: iis.Resource.createOrder)
#iis.VirtualDirectory.createOrder=60
# PowerShell script invoked to create a resource (or deploy an artifact) on Windows.
#iis.VirtualDirectory.createScript=iis/create-or-modify-virtual-directory.ps1
# Verb that is used to prefix the description for the create step. (inherited from: iis.Resource.createVerb)
#iis.VirtualDirectory.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Resource.destroyOptions)
#iis.VirtualDirectory.destroyOptions=uploadClasspathResources
# Order at which the destroy step will be executed. (inherited from: iis.Resource.destroyOrder)
#iis.VirtualDirectory.destroyOrder=40
# PowerShell script invoked to destroy a resource (or undeploy an artifact) on Windows.
#iis.VirtualDirectory.destroyScript=iis/destroy-virtual-directory.ps1
# Verb that is used to prefix the description for the destroy step. (inherited from: iis.Resource.destroyVerb)
#iis.VirtualDirectory.destroyVerb=Destroy
# Order at which the discover step will be executed. (inherited from: iis.Resource.discoverOrder)
#iis.VirtualDirectory.discoverOrder=50
# Script invoked to discover and inspect deployeds of this type.
#iis.VirtualDirectory.discoverScript=iis/inspect-virtual-directories.ps1
# Whether to add the host password to the powershell variable values. (inherited from: iis.Resource.exposePasswordPropertiesOnHosts)
#iis.VirtualDirectory.exposePasswordPropertiesOnHosts=false
# List of scripts to append to the the step script. (inherited from: iis.Resource.libraryScripts)
#iis.VirtualDirectory.libraryScripts=iis/library/resource.ps1
# Maximum number of steps in a batch. (inherited from: iis.Resource.maxBatchSize)
#iis.VirtualDirectory.maxBatchSize=100
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed).
#iis.VirtualDirectory.modifyOptions=uploadArtifactData,exposePreviousDeployed
# Order at which the modify step will be executed. (inherited from: iis.Resource.modifyOrder)
#iis.VirtualDirectory.modifyOrder=60
# PowerShell script invoked to modify a resource (or an artifact) on Windows.
#iis.VirtualDirectory.modifyScript=iis/create-or-modify-virtual-directory.ps1
# Verb that is used to prefix the description for the modify step. (inherited from: iis.Resource.modifyVerb)
#iis.VirtualDirectory.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Resource.noopOptions)
#iis.VirtualDirectory.noopOptions=uploadClasspathResources
# Order at which the noop step will be executed. (inherited from: iis.Resource.noopOrder)
#iis.VirtualDirectory.noopOrder=50
# PowerShell script invoked to noop a resource or an artifact on Windows. (inherited from: iis.Resource.noopScript)
#iis.VirtualDirectory.noopScript=null
# Verb that is used to prefix the description for the noop step. (inherited from: iis.Resource.noopVerb)
#iis.VirtualDirectory.noopVerb=Noop
# Options for the start step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Resource.startOptions)
#iis.VirtualDirectory.startOptions=uploadClasspathResources
# Order at which the start step will be executed. (inherited from: iis.Resource.startOrder)
#iis.VirtualDirectory.startOrder=90
# PowerShell script invoked to start a resource of an artifact on Windows. (inherited from: iis.Resource.startScript)
#iis.VirtualDirectory.startScript=null
# Verb that is used to prefix the description for the start step. (inherited from: iis.Resource.startVerb)
#iis.VirtualDirectory.startVerb=Start
# Options for the stop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Resource.stopOptions)
#iis.VirtualDirectory.stopOptions=uploadClasspathResources
# Order at which the stop script will be executed. (inherited from: iis.Resource.stopOrder)
#iis.VirtualDirectory.stopOrder=10
# PowerShell script invoked to stop a resource or an artifact on Windows. (inherited from: iis.Resource.stopScript)
#iis.VirtualDirectory.stopScript=null
# Verb that is used to prefix the description for the stop step. (inherited from: iis.Resource.stopVerb)
#iis.VirtualDirectory.stopVerb=Stop
# Whether to use a sidecar '.ini' file to transfer the powershell variable values. (inherited from: iis.Resource.useSidecarIniFile)
#iis.VirtualDirectory.useSidecarIniFile=false
# The set of CI templates. (inherited from: powershell.BasePowerShellDeployable.boundTemplates)
#iis.VirtualDirectorySpec.boundTemplates=null
# The set of CI templates. (inherited from: powershell.BasePowerShellDeployableFolderArtifact.boundTemplates)
#iis.WebContent.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: powershell.BasePowerShellDeployableFolderArtifact.delimiters)
#iis.WebContent.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: powershell.BasePowerShellDeployableFolderArtifact.textFileNamesRegex)
#iis.WebContent.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# Name of the application pool for this website.
#iis.Website.applicationPoolName=DefaultAppPool
# If set to true, multiple steps at the same order will be batched together in one batch to improve performance over high-latency WinRM connections (inherited from: iis.Resource.batchSteps)
#iis.Website.batchSteps=false
# The set of created CIs. (inherited from: iis.Resource.boundConfigurationItems)
#iis.Website.boundConfigurationItems=null
# Additional classpath resources that should be uploaded to the working directory before executing the script. (inherited from: iis.Resource.classpathResources)
#iis.Website.classpathResources=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Resource.createOptions)
#iis.Website.createOptions=uploadArtifactData,uploadClasspathResources
# Order at which the create step will be executed.
#iis.Website.createOrder=58
# PowerShell script invoked to create a resource (or deploy an artifact) on Windows.
#iis.Website.createScript=iis/create-or-modify-website.ps1
# Verb that is used to prefix the description for the create step. (inherited from: iis.Resource.createVerb)
#iis.Website.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Resource.destroyOptions)
#iis.Website.destroyOptions=uploadClasspathResources
# Order at which the destroy step will be executed.
#iis.Website.destroyOrder=42
# PowerShell script invoked to destroy a resource (or undeploy an artifact) on Windows.
#iis.Website.destroyScript=iis/destroy-website.ps1
# Verb that is used to prefix the description for the destroy step. (inherited from: iis.Resource.destroyVerb)
#iis.Website.destroyVerb=Destroy
# Order at which the discover step will be executed. (inherited from: iis.Resource.discoverOrder)
#iis.Website.discoverOrder=50
# Script invoked to discover and inspect deployeds of this type.
#iis.Website.discoverScript=iis/inspect-websites.ps1
# Whether to add the host password to the powershell variable values. (inherited from: iis.Resource.exposePasswordPropertiesOnHosts)
#iis.Website.exposePasswordPropertiesOnHosts=false
# List of scripts to append to the the step script. (inherited from: iis.Resource.libraryScripts)
#iis.Website.libraryScripts=iis/library/resource.ps1
# Specifies the time (in seconds) that IIS waits before it disconnects a connection that is considered inactive.
#iis.Website.limitsConnectionTimeout=120
# Specifies the logging directory, where the log file and logging-related support files are stored.
#iis.Website.logFileDirectory=%SystemDrive%\inetpub\logs\LogFiles
# Specifies whether logging is enabled (true) or disabled (false) for a site.
#iis.Website.logFileEnabled=true
# Specifies whether a new log file is created based on local time or Coordinated Universal Time (UTC), which was previously called Greenwich Mean Time (GMT).
#iis.Website.logFileLocalTimeRollover=false
# Specifies the categories of information that are written to either the log file (when you use W3C Extended log file format) or to the ODBC data source during logging events for a site.
#iis.Website.logFileLogExtFileFlags=Date,Time,ClientIP,UserName,ServerIP,Method,UriStem,UriQuery,HttpStatus,Win32Status,TimeTaken,ServerPort,UserAgent,HttpSubStatus
# Specifies the log file format.
#iis.Website.logFileLogFormat=W3C
# Specifies how often IIS creates a new log file. 
#iis.Website.logFilePeriod=Daily
# File size to create a new log file when the file reaches a certain size (in bytes)
#iis.Website.logFileTruncateSize=1048576
# Maximum number of steps in a batch. (inherited from: iis.Resource.maxBatchSize)
#iis.Website.maxBatchSize=100
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed).
#iis.Website.modifyOptions=uploadArtifactData,exposePreviousDeployed
# Order at which the modify step will be executed.
#iis.Website.modifyOrder=58
# PowerShell script invoked to modify a resource (or an artifact) on Windows.
#iis.Website.modifyScript=iis/create-or-modify-website.ps1
# Verb that is used to prefix the description for the modify step. (inherited from: iis.Resource.modifyVerb)
#iis.Website.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Resource.noopOptions)
#iis.Website.noopOptions=uploadClasspathResources
# Order at which the noop step will be executed. (inherited from: iis.Resource.noopOrder)
#iis.Website.noopOrder=50
# PowerShell script invoked to noop a resource or an artifact on Windows. (inherited from: iis.Resource.noopScript)
#iis.Website.noopScript=null
# Verb that is used to prefix the description for the noop step. (inherited from: iis.Resource.noopVerb)
#iis.Website.noopVerb=Noop
# Specifies the number of times to checks when stopping/starting the website. Will fail step if all attempts fails. Default value is 3 times
#iis.Website.numberOfChecks=3
# Specifies the number of seconds to wait between checks when stopping/starting the website. Default value is 5 seconds
#iis.Website.sleepBetweenChecks=5
# Options for the start step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Resource.startOptions)
#iis.Website.startOptions=uploadClasspathResources
# Order at which the start step will be executed. (inherited from: iis.Resource.startOrder)
#iis.Website.startOrder=90
# PowerShell script invoked to start a resource of an artifact on Windows.
#iis.Website.startScript=iis/start-website.ps1
# Verb that is used to prefix the description for the start step. (inherited from: iis.Resource.startVerb)
#iis.Website.startVerb=Start
# Options for the stop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Resource.stopOptions)
#iis.Website.stopOptions=uploadClasspathResources
# Order at which the stop script will be executed. (inherited from: iis.Resource.stopOrder)
#iis.Website.stopOrder=10
# PowerShell script invoked to stop a resource or an artifact on Windows.
#iis.Website.stopScript=iis/stop-website.ps1
# If set to true, this website is stopped and started when another component in the same package is deployed
#iis.Website.stopStartOnNoop=true
# Verb that is used to prefix the description for the stop step. (inherited from: iis.Resource.stopVerb)
#iis.Website.stopVerb=Stop
# Whether to use a sidecar '.ini' file to transfer the powershell variable values. (inherited from: iis.Resource.useSidecarIniFile)
#iis.Website.useSidecarIniFile=false
# Web site or application uses client certificates
#iis.WebsiteBinding.certRequired=Ignore
# Require Server Name Indication
#iis.WebsiteBinding.enableSni=false
# IP address
#iis.WebsiteBinding.ipAddress=*
# Port
#iis.WebsiteBinding.port=80
# Protocol
#iis.WebsiteBinding.protocol=http
# Require SSL for the content of a website or application
#iis.WebsiteBinding.sslRequired=false
# The set of CI templates. (inherited from: powershell.BasePowerShellDeployable.boundTemplates)
#iis.WebsiteSpec.boundTemplates=null
# If set to true, multiple steps at the same order will be batched together in one batch to improve performance over high-latency WinRM connections (inherited from: iis.Application.batchSteps)
#iis6.Application.batchSteps=false
# The set of created CIs. (inherited from: iis.Application.boundConfigurationItems)
#iis6.Application.boundConfigurationItems=null
# Additional classpath resources that should be uploaded to the working directory before executing the script. (inherited from: iis.Application.classpathResources)
#iis6.Application.classpathResources=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Application.createOptions)
#iis6.Application.createOptions=uploadArtifactData,uploadClasspathResources
# Order at which the create step will be executed. (inherited from: iis.Application.createOrder)
#iis6.Application.createOrder=60
# PowerShell script invoked to create a resource (or deploy an artifact) on Windows.
#iis6.Application.createScript=iis6/create-or-modify-application.ps1
# Verb that is used to prefix the description for the create step. (inherited from: iis.Application.createVerb)
#iis6.Application.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Application.destroyOptions)
#iis6.Application.destroyOptions=uploadClasspathResources
# Order at which the destroy step will be executed. (inherited from: iis.Application.destroyOrder)
#iis6.Application.destroyOrder=40
# PowerShell script invoked to destroy a resource (or undeploy an artifact) on Windows.
#iis6.Application.destroyScript=iis6/destroy-application.ps1
# Verb that is used to prefix the description for the destroy step. (inherited from: iis.Application.destroyVerb)
#iis6.Application.destroyVerb=Destroy
# Not applicable for IIS6
#iis6.Application.directoryBrowse_enabled=false
# Not applicable for IIS6
#iis6.Application.directoryBrowse_showFlags=NOTUSED
# Order at which the discover step will be executed. (inherited from: iis.Application.discoverOrder)
#iis6.Application.discoverOrder=50
# Script invoked to discover and inspect deployeds of this type.
#iis6.Application.discoverScript=iis6/inspect-applications.ps1
# Whether to add the host password to the powershell variable values. (inherited from: iis.Application.exposePasswordPropertiesOnHosts)
#iis6.Application.exposePasswordPropertiesOnHosts=false
# List of scripts to append to the the step script. (inherited from: iis.Application.libraryScripts)
#iis6.Application.libraryScripts=iis/library/resource.ps1
# Maximum number of steps in a batch. (inherited from: iis.Application.maxBatchSize)
#iis6.Application.maxBatchSize=100
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Application.modifyOptions)
#iis6.Application.modifyOptions=uploadArtifactData,exposePreviousDeployed
# Order at which the modify step will be executed. (inherited from: iis.Application.modifyOrder)
#iis6.Application.modifyOrder=60
# PowerShell script invoked to modify a resource (or an artifact) on Windows.
#iis6.Application.modifyScript=iis6/create-or-modify-application.ps1
# Verb that is used to prefix the description for the modify step. (inherited from: iis.Application.modifyVerb)
#iis6.Application.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Application.noopOptions)
#iis6.Application.noopOptions=uploadClasspathResources
# Order at which the noop step will be executed. (inherited from: iis.Application.noopOrder)
#iis6.Application.noopOrder=50
# PowerShell script invoked to noop a resource or an artifact on Windows. (inherited from: iis.Application.noopScript)
#iis6.Application.noopScript=null
# Verb that is used to prefix the description for the noop step. (inherited from: iis.Application.noopVerb)
#iis6.Application.noopVerb=Noop
# Not applicable for IIS6
#iis6.Application.protocols=UNUSED
# Options for the start step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Application.startOptions)
#iis6.Application.startOptions=uploadClasspathResources
# Order at which the start step will be executed. (inherited from: iis.Application.startOrder)
#iis6.Application.startOrder=90
# PowerShell script invoked to start a resource of an artifact on Windows. (inherited from: iis.Application.startScript)
#iis6.Application.startScript=null
# Verb that is used to prefix the description for the start step. (inherited from: iis.Application.startVerb)
#iis6.Application.startVerb=Start
# Options for the stop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Application.stopOptions)
#iis6.Application.stopOptions=uploadClasspathResources
# Order at which the stop script will be executed. (inherited from: iis.Application.stopOrder)
#iis6.Application.stopOrder=10
# PowerShell script invoked to stop a resource or an artifact on Windows. (inherited from: iis.Application.stopScript)
#iis6.Application.stopScript=null
# Verb that is used to prefix the description for the stop step. (inherited from: iis.Application.stopVerb)
#iis6.Application.stopVerb=Stop
# Whether to use a sidecar '.ini' file to transfer the powershell variable values. (inherited from: iis.Application.useSidecarIniFile)
#iis6.Application.useSidecarIniFile=false
# If set to true, multiple steps at the same order will be batched together in one batch to improve performance over high-latency WinRM connections (inherited from: iis.ApplicationPool.batchSteps)
#iis6.ApplicationPool.batchSteps=false
# The set of created CIs. (inherited from: iis.ApplicationPool.boundConfigurationItems)
#iis6.ApplicationPool.boundConfigurationItems=null
# Additional classpath resources that should be uploaded to the working directory before executing the script. (inherited from: iis.ApplicationPool.classpathResources)
#iis6.ApplicationPool.classpathResources=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.ApplicationPool.createOptions)
#iis6.ApplicationPool.createOptions=uploadArtifactData,uploadClasspathResources
# Order at which the create step will be executed. (inherited from: iis.ApplicationPool.createOrder)
#iis6.ApplicationPool.createOrder=56
# PowerShell script invoked to create a resource (or deploy an artifact) on Windows.
#iis6.ApplicationPool.createScript=iis6/create-or-modify-application-pool.ps1
# Verb that is used to prefix the description for the create step. (inherited from: iis.ApplicationPool.createVerb)
#iis6.ApplicationPool.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.ApplicationPool.destroyOptions)
#iis6.ApplicationPool.destroyOptions=uploadClasspathResources
# Order at which the destroy step will be executed. (inherited from: iis.ApplicationPool.destroyOrder)
#iis6.ApplicationPool.destroyOrder=44
# PowerShell script invoked to destroy a resource (or undeploy an artifact) on Windows.
#iis6.ApplicationPool.destroyScript=iis6/destroy-application-pool.ps1
# Verb that is used to prefix the description for the destroy step. (inherited from: iis.ApplicationPool.destroyVerb)
#iis6.ApplicationPool.destroyVerb=Destroy
# Order at which the discover step will be executed. (inherited from: iis.ApplicationPool.discoverOrder)
#iis6.ApplicationPool.discoverOrder=50
# Script invoked to discover and inspect deployeds of this type.
#iis6.ApplicationPool.discoverScript=iis6/inspect-application-pools.ps1
# When the Enable32BitAppOnWin64 property is set to true, a 32-bit application is allowed to run on a computer than has a 64-bit processor. WARN: Setting Enable32BitAppOnWin64 to true for IIS 6 means that all worker processes (all application pools) are running as 32 bit processes. When enabled, change of the .NET framework version to 32-bit is required.
#iis6.ApplicationPool.enable32BitAppOnWin64=false
# Whether to add the host password to the powershell variable values. (inherited from: iis.ApplicationPool.exposePasswordPropertiesOnHosts)
#iis6.ApplicationPool.exposePasswordPropertiesOnHosts=false
# List of scripts to append to the the step script. (inherited from: iis.ApplicationPool.libraryScripts)
#iis6.ApplicationPool.libraryScripts=null
# Not applicable for IIS6
#iis6.ApplicationPool.managedRuntimeVersion=UNUSED
# Maximum number of steps in a batch. (inherited from: iis.ApplicationPool.maxBatchSize)
#iis6.ApplicationPool.maxBatchSize=100
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.ApplicationPool.modifyOptions)
#iis6.ApplicationPool.modifyOptions=uploadArtifactData,exposePreviousDeployed
# Order at which the modify step will be executed. (inherited from: iis.ApplicationPool.modifyOrder)
#iis6.ApplicationPool.modifyOrder=56
# PowerShell script invoked to modify a resource (or an artifact) on Windows.
#iis6.ApplicationPool.modifyScript=iis6/create-or-modify-application-pool.ps1
# Verb that is used to prefix the description for the modify step. (inherited from: iis.ApplicationPool.modifyVerb)
#iis6.ApplicationPool.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.ApplicationPool.noopOptions)
#iis6.ApplicationPool.noopOptions=uploadClasspathResources
# Order at which the noop step will be executed. (inherited from: iis.ApplicationPool.noopOrder)
#iis6.ApplicationPool.noopOrder=50
# PowerShell script invoked to noop a resource or an artifact on Windows. (inherited from: iis.ApplicationPool.noopScript)
#iis6.ApplicationPool.noopScript=null
# Verb that is used to prefix the description for the noop step. (inherited from: iis.ApplicationPool.noopVerb)
#iis6.ApplicationPool.noopVerb=Noop
# Application pool can run as several built-in service accounts. Valid values are NetworkService, LocalService, LocalSystem, SpecificUser.
#iis6.ApplicationPool.serviceAccount=NetworkService
# Options for the start step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.ApplicationPool.startOptions)
#iis6.ApplicationPool.startOptions=uploadClasspathResources
# Order at which the start step will be executed. (inherited from: iis.ApplicationPool.startOrder)
#iis6.ApplicationPool.startOrder=86
# PowerShell script invoked to start a resource of an artifact on Windows.
#iis6.ApplicationPool.startScript=iis6/start-application-pool.ps1
# Verb that is used to prefix the description for the start step. (inherited from: iis.ApplicationPool.startVerb)
#iis6.ApplicationPool.startVerb=Start
# Options for the stop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.ApplicationPool.stopOptions)
#iis6.ApplicationPool.stopOptions=uploadClasspathResources
# Order at which the stop script will be executed. (inherited from: iis.ApplicationPool.stopOrder)
#iis6.ApplicationPool.stopOrder=14
# PowerShell script invoked to stop a resource or an artifact on Windows.
#iis6.ApplicationPool.stopScript=iis6/stop-application-pool.ps1
# Verb that is used to prefix the description for the stop step. (inherited from: iis.ApplicationPool.stopVerb)
#iis6.ApplicationPool.stopVerb=Stop
# Not applicable for IIS6
#iis6.ApplicationPool.useClassicManagedPipeline=false
# Whether to use a sidecar '.ini' file to transfer the powershell variable values. (inherited from: iis.ApplicationPool.useSidecarIniFile)
#iis6.ApplicationPool.useSidecarIniFile=false
# The set of CI templates. (inherited from: iis.ApplicationPoolSpec.boundTemplates)
#iis6.ApplicationPoolSpec.boundTemplates=null
# Not applicable for IIS6
#iis6.ApplicationPoolSpec.managedRuntimeVersion=UNUSED
# Not applicable for IIS6
#iis6.ApplicationPoolSpec.useClassicManagedPipeline=false
# The set of CI templates. (inherited from: iis.ApplicationSpec.boundTemplates)
#iis6.ApplicationSpec.boundTemplates=null
# Not applicable for IIS6
#iis6.ApplicationSpec.protocols=UNUSED
# Deployeds To Discover (inherited from: iis.Server.deployedsToDiscover)
#iis6.Server.deployedsToDiscover=null
# Order at which the discover step will be executed. (inherited from: iis.Server.discoverOrder)
#iis6.Server.discoverOrder=0
# Script invoked to inspect this container and discover deployeds on it. (inherited from: iis.Server.discoverScript)
#iis6.Server.discoverScript=null
# Path to the installation directory containing the different versions of the .NET Framework
#iis6.Server.dotNetFrameworkInstallationPath=C:\WINDOWS\Microsoft.NET\Framework64
# List of scripts to append to the the step script.
#iis6.Server.libraryScripts=powershell/runtime/base.ps1,iis/runtime/assert.ps1,iis6/runtime/iis6-admin.ps1
# Power Shell Path (inherited from: iis.Server.powerShellPath)
#iis6.Server.powerShellPath=powershell
# NOT USED
#iis6.Server.sleepAfterAppPoolCreate=null
# If set to true, multiple steps at the same order will be batched together in one batch to improve performance over high-latency WinRM connections (inherited from: iis.VirtualDirectory.batchSteps)
#iis6.VirtualDirectory.batchSteps=false
# The set of created CIs. (inherited from: iis.VirtualDirectory.boundConfigurationItems)
#iis6.VirtualDirectory.boundConfigurationItems=null
# Additional classpath resources that should be uploaded to the working directory before executing the script. (inherited from: iis.VirtualDirectory.classpathResources)
#iis6.VirtualDirectory.classpathResources=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.VirtualDirectory.createOptions)
#iis6.VirtualDirectory.createOptions=uploadArtifactData,uploadClasspathResources
# Order at which the create step will be executed. (inherited from: iis.VirtualDirectory.createOrder)
#iis6.VirtualDirectory.createOrder=60
# PowerShell script invoked to create a resource (or deploy an artifact) on Windows.
#iis6.VirtualDirectory.createScript=iis6/create-or-modify-virtual-directory.ps1
# Verb that is used to prefix the description for the create step. (inherited from: iis.VirtualDirectory.createVerb)
#iis6.VirtualDirectory.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.VirtualDirectory.destroyOptions)
#iis6.VirtualDirectory.destroyOptions=uploadClasspathResources
# Order at which the destroy step will be executed. (inherited from: iis.VirtualDirectory.destroyOrder)
#iis6.VirtualDirectory.destroyOrder=40
# PowerShell script invoked to destroy a resource (or undeploy an artifact) on Windows.
#iis6.VirtualDirectory.destroyScript=iis6/destroy-virtual-directory.ps1
# Verb that is used to prefix the description for the destroy step. (inherited from: iis.VirtualDirectory.destroyVerb)
#iis6.VirtualDirectory.destroyVerb=Destroy
# Not applicable for IIS6
#iis6.VirtualDirectory.directoryBrowse_enabled=false
# Not applicable for IIS6
#iis6.VirtualDirectory.directoryBrowse_showFlags=NOTUSED
# Order at which the discover step will be executed. (inherited from: iis.VirtualDirectory.discoverOrder)
#iis6.VirtualDirectory.discoverOrder=50
# Script invoked to discover and inspect deployeds of this type.
#iis6.VirtualDirectory.discoverScript=iis6/inspect-virtual-directories.ps1
# Whether to add the host password to the powershell variable values. (inherited from: iis.VirtualDirectory.exposePasswordPropertiesOnHosts)
#iis6.VirtualDirectory.exposePasswordPropertiesOnHosts=false
# List of scripts to append to the the step script. (inherited from: iis.VirtualDirectory.libraryScripts)
#iis6.VirtualDirectory.libraryScripts=iis/library/resource.ps1
# Maximum number of steps in a batch. (inherited from: iis.VirtualDirectory.maxBatchSize)
#iis6.VirtualDirectory.maxBatchSize=100
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.VirtualDirectory.modifyOptions)
#iis6.VirtualDirectory.modifyOptions=uploadArtifactData,exposePreviousDeployed
# Order at which the modify step will be executed. (inherited from: iis.VirtualDirectory.modifyOrder)
#iis6.VirtualDirectory.modifyOrder=60
# PowerShell script invoked to modify a resource (or an artifact) on Windows.
#iis6.VirtualDirectory.modifyScript=iis6/create-or-modify-virtual-directory.ps1
# Verb that is used to prefix the description for the modify step. (inherited from: iis.VirtualDirectory.modifyVerb)
#iis6.VirtualDirectory.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.VirtualDirectory.noopOptions)
#iis6.VirtualDirectory.noopOptions=uploadClasspathResources
# Order at which the noop step will be executed. (inherited from: iis.VirtualDirectory.noopOrder)
#iis6.VirtualDirectory.noopOrder=50
# PowerShell script invoked to noop a resource or an artifact on Windows. (inherited from: iis.VirtualDirectory.noopScript)
#iis6.VirtualDirectory.noopScript=null
# Verb that is used to prefix the description for the noop step. (inherited from: iis.VirtualDirectory.noopVerb)
#iis6.VirtualDirectory.noopVerb=Noop
# Options for the start step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.VirtualDirectory.startOptions)
#iis6.VirtualDirectory.startOptions=uploadClasspathResources
# Order at which the start step will be executed. (inherited from: iis.VirtualDirectory.startOrder)
#iis6.VirtualDirectory.startOrder=90
# PowerShell script invoked to start a resource of an artifact on Windows. (inherited from: iis.VirtualDirectory.startScript)
#iis6.VirtualDirectory.startScript=null
# Verb that is used to prefix the description for the start step. (inherited from: iis.VirtualDirectory.startVerb)
#iis6.VirtualDirectory.startVerb=Start
# Options for the stop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.VirtualDirectory.stopOptions)
#iis6.VirtualDirectory.stopOptions=uploadClasspathResources
# Order at which the stop script will be executed. (inherited from: iis.VirtualDirectory.stopOrder)
#iis6.VirtualDirectory.stopOrder=10
# PowerShell script invoked to stop a resource or an artifact on Windows. (inherited from: iis.VirtualDirectory.stopScript)
#iis6.VirtualDirectory.stopScript=null
# Verb that is used to prefix the description for the stop step. (inherited from: iis.VirtualDirectory.stopVerb)
#iis6.VirtualDirectory.stopVerb=Stop
# Whether to use a sidecar '.ini' file to transfer the powershell variable values. (inherited from: iis.VirtualDirectory.useSidecarIniFile)
#iis6.VirtualDirectory.useSidecarIniFile=false
# The set of CI templates. (inherited from: iis.VirtualDirectorySpec.boundTemplates)
#iis6.VirtualDirectorySpec.boundTemplates=null
# If set to true, multiple steps at the same order will be batched together in one batch to improve performance over high-latency WinRM connections (inherited from: iis.Website.batchSteps)
#iis6.Website.batchSteps=false
# The set of created CIs. (inherited from: iis.Website.boundConfigurationItems)
#iis6.Website.boundConfigurationItems=null
# Additional classpath resources that should be uploaded to the working directory before executing the script. (inherited from: iis.Website.classpathResources)
#iis6.Website.classpathResources=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Website.createOptions)
#iis6.Website.createOptions=uploadArtifactData,uploadClasspathResources
# Order at which the create step will be executed. (inherited from: iis.Website.createOrder)
#iis6.Website.createOrder=58
# PowerShell script invoked to create a resource (or deploy an artifact) on Windows.
#iis6.Website.createScript=iis6/create-or-modify-website.ps1
# Verb that is used to prefix the description for the create step. (inherited from: iis.Website.createVerb)
#iis6.Website.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Website.destroyOptions)
#iis6.Website.destroyOptions=uploadClasspathResources
# Order at which the destroy step will be executed. (inherited from: iis.Website.destroyOrder)
#iis6.Website.destroyOrder=42
# PowerShell script invoked to destroy a resource (or undeploy an artifact) on Windows.
#iis6.Website.destroyScript=iis6/destroy-website.ps1
# Verb that is used to prefix the description for the destroy step. (inherited from: iis.Website.destroyVerb)
#iis6.Website.destroyVerb=Destroy
# Not applicable for IIS6
#iis6.Website.directoryBrowse_enabled=false
# Not applicable for IIS6
#iis6.Website.directoryBrowse_showFlags=NOTUSED
# Order at which the discover step will be executed. (inherited from: iis.Website.discoverOrder)
#iis6.Website.discoverOrder=50
# Script invoked to discover and inspect deployeds of this type.
#iis6.Website.discoverScript=iis6/inspect-websites.ps1
# Whether to add the host password to the powershell variable values. (inherited from: iis.Website.exposePasswordPropertiesOnHosts)
#iis6.Website.exposePasswordPropertiesOnHosts=false
# List of scripts to append to the the step script. (inherited from: iis.Website.libraryScripts)
#iis6.Website.libraryScripts=iis/library/resource.ps1
# Maximum number of steps in a batch. (inherited from: iis.Website.maxBatchSize)
#iis6.Website.maxBatchSize=100
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Website.modifyOptions)
#iis6.Website.modifyOptions=uploadArtifactData,exposePreviousDeployed
# Order at which the modify step will be executed. (inherited from: iis.Website.modifyOrder)
#iis6.Website.modifyOrder=58
# PowerShell script invoked to modify a resource (or an artifact) on Windows.
#iis6.Website.modifyScript=iis6/create-or-modify-website.ps1
# Verb that is used to prefix the description for the modify step. (inherited from: iis.Website.modifyVerb)
#iis6.Website.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Website.noopOptions)
#iis6.Website.noopOptions=uploadClasspathResources
# Order at which the noop step will be executed. (inherited from: iis.Website.noopOrder)
#iis6.Website.noopOrder=50
# PowerShell script invoked to noop a resource or an artifact on Windows. (inherited from: iis.Website.noopScript)
#iis6.Website.noopScript=null
# Verb that is used to prefix the description for the noop step. (inherited from: iis.Website.noopVerb)
#iis6.Website.noopVerb=Noop
# Options for the start step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Website.startOptions)
#iis6.Website.startOptions=uploadClasspathResources
# Order at which the start step will be executed. (inherited from: iis.Website.startOrder)
#iis6.Website.startOrder=90
# PowerShell script invoked to start a resource of an artifact on Windows.
#iis6.Website.startScript=iis6/start-website.ps1
# Verb that is used to prefix the description for the start step. (inherited from: iis.Website.startVerb)
#iis6.Website.startVerb=Start
# Options for the stop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: iis.Website.stopOptions)
#iis6.Website.stopOptions=uploadClasspathResources
# Order at which the stop script will be executed. (inherited from: iis.Website.stopOrder)
#iis6.Website.stopOrder=10
# PowerShell script invoked to stop a resource or an artifact on Windows.
#iis6.Website.stopScript=iis6/stop-website.ps1
# Verb that is used to prefix the description for the stop step. (inherited from: iis.Website.stopVerb)
#iis6.Website.stopVerb=Stop
# Whether to use a sidecar '.ini' file to transfer the powershell variable values. (inherited from: iis.Website.useSidecarIniFile)
#iis6.Website.useSidecarIniFile=false
# The set of CI templates. (inherited from: iis.WebsiteSpec.boundTemplates)
#iis6.WebsiteSpec.boundTemplates=null
# The set of created CIs. (inherited from: generic.CopiedArtifact.boundConfigurationItems)
#jbossas.Artifact.boundConfigurationItems=null
# If set to true, files are directly copied to the target directory without first being uploaded to the staging or temporary directory (like versions of XL Deploy prior to 4.0.0) (inherited from: generic.CopiedArtifact.copyDirectlyToTargetPath)
#jbossas.Artifact.copyDirectlyToTargetPath=false
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.createOptions)
#jbossas.Artifact.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation.
#jbossas.Artifact.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: generic.CopiedArtifact.createTargetDirectory)
#jbossas.Artifact.createTargetDirectory=false
# Create Verb
#jbossas.Artifact.createVerb=Deploy
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.destroyOptions)
#jbossas.Artifact.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation.
#jbossas.Artifact.destroyOrder=40
# Destroy Verb
#jbossas.Artifact.destroyVerb=Undeploy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.CopiedArtifact.inspectClasspathResources)
#jbossas.Artifact.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.CopiedArtifact.inspectScript)
#jbossas.Artifact.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.CopiedArtifact.inspectTemplateClasspathResources)
#jbossas.Artifact.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.modifyOptions)
#jbossas.Artifact.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: generic.CopiedArtifact.modifyOrder)
#jbossas.Artifact.modifyOrder=50
# Modify Verb
#jbossas.Artifact.modifyVerb=Update
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.noopOptions)
#jbossas.Artifact.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: generic.CopiedArtifact.noopOrder)
#jbossas.Artifact.noopOrder=50
# Noop Verb (inherited from: generic.CopiedArtifact.noopVerb)
#jbossas.Artifact.noopVerb=Modify
# If set to true, preserve the existing files on the remote host (do not delete the copied files during the destroy operation).  (inherited from: generic.CopiedArtifact.preserveExistingFiles)
#jbossas.Artifact.preserveExistingFiles=false
# The generic container requires a restart for the action performed by this deployed.
#jbossas.Artifact.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: generic.CopiedArtifact.restartRequiredForNoop)
#jbossas.Artifact.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server.
#jbossas.Artifact.targetDirectory=${deployed.container.home}/server/${deployed.container.serverName}/deploy
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: generic.CopiedArtifact.targetDirectoryShared)
#jbossas.Artifact.targetDirectoryShared=true
# If set to true, the sub directories on the target machine are not deleted if files other than that copied by XL Deploy are present. Please note that setting this option to true will cause the removal process to be a slower.  (inherited from: generic.CopiedArtifact.targetPathSharedSubDirectories)
#jbossas.Artifact.targetPathSharedSubDirectories=false
# AJP connector port
#jbossas.BaseServer.ajpPort=8009
# Address where to bind the server on starting.
#jbossas.BaseServer.bindAddress=0.0.0.0
# Connector control port
#jbossas.BaseServer.controlPort=1099
# HTTP/1.1 connector port
#jbossas.BaseServer.httpPort=8080
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.Container.inspectClasspathResources)
#jbossas.BaseServer.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.Container.inspectScript)
#jbossas.BaseServer.inspectScript=null
# Script (a freemarker template) used to inspect the server
#jbossas.BaseServer.inspectTemplate=jboss/container/inspect
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory.
#jbossas.BaseServer.inspectTemplateClasspathResources=twiddle-invoker.ftl,jboss/container/inspect.bat,jboss/container/inspect.sh,jboss/container/query.sh,jboss/container/query.bat
# Jms Resource File Suffix
#jbossas.BaseServer.jmsResourceFileSuffix=service
# Script (a freemarker template) used to query a mbean value from the server
#jbossas.BaseServer.queryTemplate=jboss/container/query
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: generic.Container.restartClasspathResources)
#jbossas.BaseServer.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: generic.Container.restartOrder)
#jbossas.BaseServer.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: generic.Container.restartScript)
#jbossas.BaseServer.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.Container.restartTemplateClasspathResources)
#jbossas.BaseServer.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: generic.Container.restartWaitTime)
#jbossas.BaseServer.restartWaitTime=0
# Server configuration name e.g. default or minimal
#jbossas.BaseServer.serverName=default
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: generic.Container.startClasspathResources)
#jbossas.BaseServer.startClasspathResources=null
# Optional command line arguments to pass to the JBoss startup script.
#jbossas.BaseServer.startOptions=
# The order of the start container step in the step list. (inherited from: generic.Container.startOrder)
#jbossas.BaseServer.startOrder=90
# Script used to start the server
#jbossas.BaseServer.startScript=jboss/container/start
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.Container.startTemplateClasspathResources)
#jbossas.BaseServer.startTemplateClasspathResources=null
# Duration (in secs) to wait after the start server step has been executed
#jbossas.BaseServer.startWaitTime=30
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: generic.Container.stopClasspathResources)
#jbossas.BaseServer.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: generic.Container.stopOrder)
#jbossas.BaseServer.stopOrder=10
# Script used to stop the server
#jbossas.BaseServer.stopScript=jboss/container/stop
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.Container.stopTemplateClasspathResources)
#jbossas.BaseServer.stopTemplateClasspathResources=null
# Duration (in secs) to wait after the stop server step has been executed
#jbossas.BaseServer.stopWaitTime=10
# The set of created CIs. (inherited from: jbossas.Artifact.boundConfigurationItems)
#jbossas.Configuration.boundConfigurationItems=null
# If set to true, files are directly copied to the target directory without first being uploaded to the staging or temporary directory (like versions of XL Deploy prior to 4.0.0) (inherited from: jbossas.Artifact.copyDirectlyToTargetPath)
#jbossas.Configuration.copyDirectlyToTargetPath=false
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Artifact.createOptions)
#jbossas.Configuration.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: jbossas.Artifact.createOrder)
#jbossas.Configuration.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: jbossas.Artifact.createTargetDirectory)
#jbossas.Configuration.createTargetDirectory=false
# Create Verb (inherited from: jbossas.Artifact.createVerb)
#jbossas.Configuration.createVerb=Deploy
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Artifact.destroyOptions)
#jbossas.Configuration.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: jbossas.Artifact.destroyOrder)
#jbossas.Configuration.destroyOrder=40
# Destroy Verb (inherited from: jbossas.Artifact.destroyVerb)
#jbossas.Configuration.destroyVerb=Undeploy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: jbossas.Artifact.inspectClasspathResources)
#jbossas.Configuration.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: jbossas.Artifact.inspectScript)
#jbossas.Configuration.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.Artifact.inspectTemplateClasspathResources)
#jbossas.Configuration.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Artifact.modifyOptions)
#jbossas.Configuration.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: jbossas.Artifact.modifyOrder)
#jbossas.Configuration.modifyOrder=50
# Modify Verb (inherited from: jbossas.Artifact.modifyVerb)
#jbossas.Configuration.modifyVerb=Update
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Artifact.noopOptions)
#jbossas.Configuration.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: jbossas.Artifact.noopOrder)
#jbossas.Configuration.noopOrder=50
# Noop Verb (inherited from: jbossas.Artifact.noopVerb)
#jbossas.Configuration.noopVerb=Modify
# If set to true, preserve the existing files on the remote host (do not delete the copied files during the destroy operation).  (inherited from: jbossas.Artifact.preserveExistingFiles)
#jbossas.Configuration.preserveExistingFiles=false
# The generic container requires a restart for the action performed by this deployed. (inherited from: jbossas.Artifact.restartRequired)
#jbossas.Configuration.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: jbossas.Artifact.restartRequiredForNoop)
#jbossas.Configuration.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server.
#jbossas.Configuration.targetDirectory=${deployed.container.home}/server/${deployed.container.serverName}/conf
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: jbossas.Artifact.targetDirectoryShared)
#jbossas.Configuration.targetDirectoryShared=true
# If set to true, the sub directories on the target machine are not deleted if files other than that copied by XL Deploy are present. Please note that setting this option to true will cause the removal process to be a slower.  (inherited from: jbossas.Artifact.targetPathSharedSubDirectories)
#jbossas.Configuration.targetPathSharedSubDirectories=false
# The set of CI templates. (inherited from: generic.File.boundTemplates)
#jbossas.ConfigurationFile.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: generic.File.delimiters)
#jbossas.ConfigurationFile.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: generic.File.textFileNamesRegex)
#jbossas.ConfigurationFile.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of CI templates. (inherited from: generic.Folder.boundTemplates)
#jbossas.ConfigurationFolder.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: generic.Folder.delimiters)
#jbossas.ConfigurationFolder.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: generic.Folder.textFileNamesRegex)
#jbossas.ConfigurationFolder.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: jbossas.Resource.boundConfigurationItems)
#jbossas.Datasource.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Resource.createOptions)
#jbossas.Datasource.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: jbossas.Resource.createOrder)
#jbossas.Datasource.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: jbossas.Resource.createTargetDirectory)
#jbossas.Datasource.createTargetDirectory=false
# Create Verb (inherited from: jbossas.Resource.createVerb)
#jbossas.Datasource.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Resource.destroyOptions)
#jbossas.Datasource.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: jbossas.Resource.destroyOrder)
#jbossas.Datasource.destroyOrder=40
# Destroy Verb (inherited from: jbossas.Resource.destroyVerb)
#jbossas.Datasource.destroyVerb=Destroy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: jbossas.Resource.inspectClasspathResources)
#jbossas.Datasource.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: jbossas.Resource.inspectScript)
#jbossas.Datasource.inspectScript=null
# Inspect Template
#jbossas.Datasource.inspectTemplate=jboss/datasource/inspect.sh.ftl
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.Resource.inspectTemplateClasspathResources)
#jbossas.Datasource.inspectTemplateClasspathResources=null
# Max Pool Size
#jbossas.Datasource.maxPoolSize=20
# Min Pool Size
#jbossas.Datasource.minPoolSize=0
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Resource.modifyOptions)
#jbossas.Datasource.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: jbossas.Resource.modifyOrder)
#jbossas.Datasource.modifyOrder=50
# Modify Verb (inherited from: jbossas.Resource.modifyVerb)
#jbossas.Datasource.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Resource.noopOptions)
#jbossas.Datasource.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: jbossas.Resource.noopOrder)
#jbossas.Datasource.noopOrder=50
# Noop Verb (inherited from: jbossas.Resource.noopVerb)
#jbossas.Datasource.noopVerb=Modify
# The generic container requires a restart for the action performed by this deployed. (inherited from: jbossas.Resource.restartRequired)
#jbossas.Datasource.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: jbossas.Resource.restartRequiredForNoop)
#jbossas.Datasource.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: jbossas.Resource.targetDirectory)
#jbossas.Datasource.targetDirectory=${deployed.container.home}/server/${deployed.container.serverName}/deploy
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: jbossas.Resource.targetDirectoryShared)
#jbossas.Datasource.targetDirectoryShared=true
# Name of the artifact on the generic server.
#jbossas.Datasource.targetFile=${deployed.deployable.name}-ds.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact.
#jbossas.Datasource.template=jboss/datasource/template.xml.ftl
# Use Java Context
#jbossas.Datasource.useJavaContext=true
# The set of created CIs. (inherited from: jbossas.Configuration.boundConfigurationItems)
#jbossas.DeployedConfigurationFile.boundConfigurationItems=null
# If set to true, files are directly copied to the target directory without first being uploaded to the staging or temporary directory (like versions of XL Deploy prior to 4.0.0) (inherited from: jbossas.Configuration.copyDirectlyToTargetPath)
#jbossas.DeployedConfigurationFile.copyDirectlyToTargetPath=false
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Configuration.createOptions)
#jbossas.DeployedConfigurationFile.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: jbossas.Configuration.createOrder)
#jbossas.DeployedConfigurationFile.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: jbossas.Configuration.createTargetDirectory)
#jbossas.DeployedConfigurationFile.createTargetDirectory=false
# Create Verb (inherited from: jbossas.Configuration.createVerb)
#jbossas.DeployedConfigurationFile.createVerb=Deploy
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Configuration.destroyOptions)
#jbossas.DeployedConfigurationFile.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: jbossas.Configuration.destroyOrder)
#jbossas.DeployedConfigurationFile.destroyOrder=40
# Destroy Verb (inherited from: jbossas.Configuration.destroyVerb)
#jbossas.DeployedConfigurationFile.destroyVerb=Undeploy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: jbossas.Configuration.inspectClasspathResources)
#jbossas.DeployedConfigurationFile.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: jbossas.Configuration.inspectScript)
#jbossas.DeployedConfigurationFile.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.Configuration.inspectTemplateClasspathResources)
#jbossas.DeployedConfigurationFile.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Configuration.modifyOptions)
#jbossas.DeployedConfigurationFile.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: jbossas.Configuration.modifyOrder)
#jbossas.DeployedConfigurationFile.modifyOrder=50
# Modify Verb (inherited from: jbossas.Configuration.modifyVerb)
#jbossas.DeployedConfigurationFile.modifyVerb=Update
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Configuration.noopOptions)
#jbossas.DeployedConfigurationFile.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: jbossas.Configuration.noopOrder)
#jbossas.DeployedConfigurationFile.noopOrder=50
# Noop Verb (inherited from: jbossas.Configuration.noopVerb)
#jbossas.DeployedConfigurationFile.noopVerb=Modify
# If set to true, preserve the existing files on the remote host (do not delete the copied files during the destroy operation).  (inherited from: jbossas.Configuration.preserveExistingFiles)
#jbossas.DeployedConfigurationFile.preserveExistingFiles=false
# The generic container requires a restart for the action performed by this deployed. (inherited from: jbossas.Configuration.restartRequired)
#jbossas.DeployedConfigurationFile.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: jbossas.Configuration.restartRequiredForNoop)
#jbossas.DeployedConfigurationFile.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: jbossas.Configuration.targetDirectory)
#jbossas.DeployedConfigurationFile.targetDirectory=${deployed.container.home}/server/${deployed.container.serverName}/conf
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: jbossas.Configuration.targetDirectoryShared)
#jbossas.DeployedConfigurationFile.targetDirectoryShared=true
# If set to true, the sub directories on the target machine are not deleted if files other than that copied by XL Deploy are present. Please note that setting this option to true will cause the removal process to be a slower.  (inherited from: jbossas.Configuration.targetPathSharedSubDirectories)
#jbossas.DeployedConfigurationFile.targetPathSharedSubDirectories=false
# The set of created CIs. (inherited from: jbossas.Configuration.boundConfigurationItems)
#jbossas.DeployedConfigurationFolder.boundConfigurationItems=null
# If set to true, files are directly copied to the target directory without first being uploaded to the staging or temporary directory (like versions of XL Deploy prior to 4.0.0) (inherited from: jbossas.Configuration.copyDirectlyToTargetPath)
#jbossas.DeployedConfigurationFolder.copyDirectlyToTargetPath=false
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Configuration.createOptions)
#jbossas.DeployedConfigurationFolder.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: jbossas.Configuration.createOrder)
#jbossas.DeployedConfigurationFolder.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: jbossas.Configuration.createTargetDirectory)
#jbossas.DeployedConfigurationFolder.createTargetDirectory=false
# Create Verb (inherited from: jbossas.Configuration.createVerb)
#jbossas.DeployedConfigurationFolder.createVerb=Deploy
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Configuration.destroyOptions)
#jbossas.DeployedConfigurationFolder.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: jbossas.Configuration.destroyOrder)
#jbossas.DeployedConfigurationFolder.destroyOrder=40
# Destroy Verb (inherited from: jbossas.Configuration.destroyVerb)
#jbossas.DeployedConfigurationFolder.destroyVerb=Undeploy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: jbossas.Configuration.inspectClasspathResources)
#jbossas.DeployedConfigurationFolder.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: jbossas.Configuration.inspectScript)
#jbossas.DeployedConfigurationFolder.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.Configuration.inspectTemplateClasspathResources)
#jbossas.DeployedConfigurationFolder.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Configuration.modifyOptions)
#jbossas.DeployedConfigurationFolder.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: jbossas.Configuration.modifyOrder)
#jbossas.DeployedConfigurationFolder.modifyOrder=50
# Modify Verb (inherited from: jbossas.Configuration.modifyVerb)
#jbossas.DeployedConfigurationFolder.modifyVerb=Update
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Configuration.noopOptions)
#jbossas.DeployedConfigurationFolder.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: jbossas.Configuration.noopOrder)
#jbossas.DeployedConfigurationFolder.noopOrder=50
# Noop Verb (inherited from: jbossas.Configuration.noopVerb)
#jbossas.DeployedConfigurationFolder.noopVerb=Modify
# If set to true, preserve the existing files on the remote host (do not delete the copied files during the destroy operation).  (inherited from: jbossas.Configuration.preserveExistingFiles)
#jbossas.DeployedConfigurationFolder.preserveExistingFiles=false
# The generic container requires a restart for the action performed by this deployed. (inherited from: jbossas.Configuration.restartRequired)
#jbossas.DeployedConfigurationFolder.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: jbossas.Configuration.restartRequiredForNoop)
#jbossas.DeployedConfigurationFolder.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: jbossas.Configuration.targetDirectory)
#jbossas.DeployedConfigurationFolder.targetDirectory=${deployed.container.home}/server/${deployed.container.serverName}/conf
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: jbossas.Configuration.targetDirectoryShared)
#jbossas.DeployedConfigurationFolder.targetDirectoryShared=true
# If set to true, the sub directories on the target machine are not deleted if files other than that copied by XL Deploy are present. Please note that setting this option to true will cause the removal process to be a slower.  (inherited from: jbossas.Configuration.targetPathSharedSubDirectories)
#jbossas.DeployedConfigurationFolder.targetPathSharedSubDirectories=false
# The set of created CIs. (inherited from: jbossas.Artifact.boundConfigurationItems)
#jbossas.DeployedLibrary.boundConfigurationItems=null
# If set to true, files are directly copied to the target directory without first being uploaded to the staging or temporary directory (like versions of XL Deploy prior to 4.0.0) (inherited from: jbossas.Artifact.copyDirectlyToTargetPath)
#jbossas.DeployedLibrary.copyDirectlyToTargetPath=false
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Artifact.createOptions)
#jbossas.DeployedLibrary.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: jbossas.Artifact.createOrder)
#jbossas.DeployedLibrary.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: jbossas.Artifact.createTargetDirectory)
#jbossas.DeployedLibrary.createTargetDirectory=false
# Create Verb (inherited from: jbossas.Artifact.createVerb)
#jbossas.DeployedLibrary.createVerb=Deploy
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Artifact.destroyOptions)
#jbossas.DeployedLibrary.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: jbossas.Artifact.destroyOrder)
#jbossas.DeployedLibrary.destroyOrder=40
# Destroy Verb (inherited from: jbossas.Artifact.destroyVerb)
#jbossas.DeployedLibrary.destroyVerb=Undeploy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: jbossas.Artifact.inspectClasspathResources)
#jbossas.DeployedLibrary.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: jbossas.Artifact.inspectScript)
#jbossas.DeployedLibrary.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.Artifact.inspectTemplateClasspathResources)
#jbossas.DeployedLibrary.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Artifact.modifyOptions)
#jbossas.DeployedLibrary.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: jbossas.Artifact.modifyOrder)
#jbossas.DeployedLibrary.modifyOrder=50
# Modify Verb (inherited from: jbossas.Artifact.modifyVerb)
#jbossas.DeployedLibrary.modifyVerb=Update
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Artifact.noopOptions)
#jbossas.DeployedLibrary.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: jbossas.Artifact.noopOrder)
#jbossas.DeployedLibrary.noopOrder=50
# Noop Verb (inherited from: jbossas.Artifact.noopVerb)
#jbossas.DeployedLibrary.noopVerb=Modify
# If set to true, preserve the existing files on the remote host (do not delete the copied files during the destroy operation).  (inherited from: jbossas.Artifact.preserveExistingFiles)
#jbossas.DeployedLibrary.preserveExistingFiles=false
# The generic container requires a restart for the action performed by this deployed. (inherited from: jbossas.Artifact.restartRequired)
#jbossas.DeployedLibrary.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: jbossas.Artifact.restartRequiredForNoop)
#jbossas.DeployedLibrary.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server.
#jbossas.DeployedLibrary.targetDirectory=${deployed.container.home}/server/${deployed.container.serverName}/lib
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: jbossas.Artifact.targetDirectoryShared)
#jbossas.DeployedLibrary.targetDirectoryShared=true
# If set to true, the sub directories on the target machine are not deleted if files other than that copied by XL Deploy are present. Please note that setting this option to true will cause the removal process to be a slower.  (inherited from: jbossas.Artifact.targetPathSharedSubDirectories)
#jbossas.DeployedLibrary.targetPathSharedSubDirectories=false
# The set of CI templates. (inherited from: jee.Ear.boundTemplates)
#jbossas.Ear.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: jee.Ear.delimiters)
#jbossas.Ear.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: jee.Ear.textFileNamesRegex)
#jbossas.Ear.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: jbossas.Artifact.boundConfigurationItems)
#jbossas.EarModule.boundConfigurationItems=null
# If set to true, files are directly copied to the target directory without first being uploaded to the staging or temporary directory (like versions of XL Deploy prior to 4.0.0) (inherited from: jbossas.Artifact.copyDirectlyToTargetPath)
#jbossas.EarModule.copyDirectlyToTargetPath=false
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Artifact.createOptions)
#jbossas.EarModule.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: jbossas.Artifact.createOrder)
#jbossas.EarModule.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: jbossas.Artifact.createTargetDirectory)
#jbossas.EarModule.createTargetDirectory=false
# Create Verb (inherited from: jbossas.Artifact.createVerb)
#jbossas.EarModule.createVerb=Deploy
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Artifact.destroyOptions)
#jbossas.EarModule.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: jbossas.Artifact.destroyOrder)
#jbossas.EarModule.destroyOrder=40
# Destroy Verb (inherited from: jbossas.Artifact.destroyVerb)
#jbossas.EarModule.destroyVerb=Undeploy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: jbossas.Artifact.inspectClasspathResources)
#jbossas.EarModule.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: jbossas.Artifact.inspectScript)
#jbossas.EarModule.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.Artifact.inspectTemplateClasspathResources)
#jbossas.EarModule.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Artifact.modifyOptions)
#jbossas.EarModule.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: jbossas.Artifact.modifyOrder)
#jbossas.EarModule.modifyOrder=50
# Modify Verb (inherited from: jbossas.Artifact.modifyVerb)
#jbossas.EarModule.modifyVerb=Update
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Artifact.noopOptions)
#jbossas.EarModule.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: jbossas.Artifact.noopOrder)
#jbossas.EarModule.noopOrder=50
# Noop Verb (inherited from: jbossas.Artifact.noopVerb)
#jbossas.EarModule.noopVerb=Modify
# If set to true, preserve the existing files on the remote host (do not delete the copied files during the destroy operation).  (inherited from: jbossas.Artifact.preserveExistingFiles)
#jbossas.EarModule.preserveExistingFiles=false
# The generic container requires a restart for the action performed by this deployed. (inherited from: jbossas.Artifact.restartRequired)
#jbossas.EarModule.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: jbossas.Artifact.restartRequiredForNoop)
#jbossas.EarModule.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: jbossas.Artifact.targetDirectory)
#jbossas.EarModule.targetDirectory=${deployed.container.home}/server/${deployed.container.serverName}/deploy
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: jbossas.Artifact.targetDirectoryShared)
#jbossas.EarModule.targetDirectoryShared=true
# Name of the artifact on the generic server.
#jbossas.EarModule.targetFile=${deployed.deployable.name}.ear
# If set to true, the sub directories on the target machine are not deleted if files other than that copied by XL Deploy are present. Please note that setting this option to true will cause the removal process to be a slower.  (inherited from: jbossas.Artifact.targetPathSharedSubDirectories)
#jbossas.EarModule.targetPathSharedSubDirectories=false
# The set of CI templates. (inherited from: jee.EjbJar.boundTemplates)
#jbossas.EjbJar.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: jee.EjbJar.delimiters)
#jbossas.EjbJar.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: jee.EjbJar.textFileNamesRegex)
#jbossas.EjbJar.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: jbossas.Artifact.boundConfigurationItems)
#jbossas.EjbJarModule.boundConfigurationItems=null
# If set to true, files are directly copied to the target directory without first being uploaded to the staging or temporary directory (like versions of XL Deploy prior to 4.0.0) (inherited from: jbossas.Artifact.copyDirectlyToTargetPath)
#jbossas.EjbJarModule.copyDirectlyToTargetPath=false
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Artifact.createOptions)
#jbossas.EjbJarModule.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: jbossas.Artifact.createOrder)
#jbossas.EjbJarModule.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: jbossas.Artifact.createTargetDirectory)
#jbossas.EjbJarModule.createTargetDirectory=false
# Create Verb (inherited from: jbossas.Artifact.createVerb)
#jbossas.EjbJarModule.createVerb=Deploy
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Artifact.destroyOptions)
#jbossas.EjbJarModule.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: jbossas.Artifact.destroyOrder)
#jbossas.EjbJarModule.destroyOrder=40
# Destroy Verb (inherited from: jbossas.Artifact.destroyVerb)
#jbossas.EjbJarModule.destroyVerb=Undeploy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: jbossas.Artifact.inspectClasspathResources)
#jbossas.EjbJarModule.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: jbossas.Artifact.inspectScript)
#jbossas.EjbJarModule.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.Artifact.inspectTemplateClasspathResources)
#jbossas.EjbJarModule.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Artifact.modifyOptions)
#jbossas.EjbJarModule.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: jbossas.Artifact.modifyOrder)
#jbossas.EjbJarModule.modifyOrder=50
# Modify Verb (inherited from: jbossas.Artifact.modifyVerb)
#jbossas.EjbJarModule.modifyVerb=Update
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Artifact.noopOptions)
#jbossas.EjbJarModule.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: jbossas.Artifact.noopOrder)
#jbossas.EjbJarModule.noopOrder=50
# Noop Verb (inherited from: jbossas.Artifact.noopVerb)
#jbossas.EjbJarModule.noopVerb=Modify
# If set to true, preserve the existing files on the remote host (do not delete the copied files during the destroy operation).  (inherited from: jbossas.Artifact.preserveExistingFiles)
#jbossas.EjbJarModule.preserveExistingFiles=false
# The generic container requires a restart for the action performed by this deployed. (inherited from: jbossas.Artifact.restartRequired)
#jbossas.EjbJarModule.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: jbossas.Artifact.restartRequiredForNoop)
#jbossas.EjbJarModule.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: jbossas.Artifact.targetDirectory)
#jbossas.EjbJarModule.targetDirectory=${deployed.container.home}/server/${deployed.container.serverName}/deploy
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: jbossas.Artifact.targetDirectoryShared)
#jbossas.EjbJarModule.targetDirectoryShared=true
# Name of the artifact on the generic server.
#jbossas.EjbJarModule.targetFile=${deployed.deployable.name}.jar
# If set to true, the sub directories on the target machine are not deleted if files other than that copied by XL Deploy are present. Please note that setting this option to true will cause the removal process to be a slower.  (inherited from: jbossas.Artifact.targetPathSharedSubDirectories)
#jbossas.EjbJarModule.targetPathSharedSubDirectories=false
# The set of CI templates. (inherited from: generic.File.boundTemplates)
#jbossas.Library.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: generic.File.delimiters)
#jbossas.Library.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: generic.File.textFileNamesRegex)
#jbossas.Library.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: jbossas.Datasource.boundConfigurationItems)
#jbossas.NonTransactionalDatasource.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Datasource.createOptions)
#jbossas.NonTransactionalDatasource.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: jbossas.Datasource.createOrder)
#jbossas.NonTransactionalDatasource.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: jbossas.Datasource.createTargetDirectory)
#jbossas.NonTransactionalDatasource.createTargetDirectory=false
# Create Verb (inherited from: jbossas.Datasource.createVerb)
#jbossas.NonTransactionalDatasource.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Datasource.destroyOptions)
#jbossas.NonTransactionalDatasource.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: jbossas.Datasource.destroyOrder)
#jbossas.NonTransactionalDatasource.destroyOrder=40
# Destroy Verb (inherited from: jbossas.Datasource.destroyVerb)
#jbossas.NonTransactionalDatasource.destroyVerb=Destroy
# Ds Type
#jbossas.NonTransactionalDatasource.dsType=no-tx-datasource
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: jbossas.Datasource.inspectClasspathResources)
#jbossas.NonTransactionalDatasource.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: jbossas.Datasource.inspectScript)
#jbossas.NonTransactionalDatasource.inspectScript=null
# Inspect Template (inherited from: jbossas.Datasource.inspectTemplate)
#jbossas.NonTransactionalDatasource.inspectTemplate=jboss/datasource/inspect.sh.ftl
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.Datasource.inspectTemplateClasspathResources)
#jbossas.NonTransactionalDatasource.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Datasource.modifyOptions)
#jbossas.NonTransactionalDatasource.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: jbossas.Datasource.modifyOrder)
#jbossas.NonTransactionalDatasource.modifyOrder=50
# Modify Verb (inherited from: jbossas.Datasource.modifyVerb)
#jbossas.NonTransactionalDatasource.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Datasource.noopOptions)
#jbossas.NonTransactionalDatasource.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: jbossas.Datasource.noopOrder)
#jbossas.NonTransactionalDatasource.noopOrder=50
# Noop Verb (inherited from: jbossas.Datasource.noopVerb)
#jbossas.NonTransactionalDatasource.noopVerb=Modify
# The generic container requires a restart for the action performed by this deployed. (inherited from: jbossas.Datasource.restartRequired)
#jbossas.NonTransactionalDatasource.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: jbossas.Datasource.restartRequiredForNoop)
#jbossas.NonTransactionalDatasource.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: jbossas.Datasource.targetDirectory)
#jbossas.NonTransactionalDatasource.targetDirectory=${deployed.container.home}/server/${deployed.container.serverName}/deploy
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: jbossas.Datasource.targetDirectoryShared)
#jbossas.NonTransactionalDatasource.targetDirectoryShared=true
# Name of the artifact on the generic server. (inherited from: jbossas.Datasource.targetFile)
#jbossas.NonTransactionalDatasource.targetFile=${deployed.deployable.name}-ds.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact. (inherited from: jbossas.Datasource.template)
#jbossas.NonTransactionalDatasource.template=jboss/datasource/template.xml.ftl
# The set of CI templates. (inherited from: jee.DataSourceSpec.boundTemplates)
#jbossas.NonTransactionalDatasourceSpec.boundTemplates=null
# The set of created CIs. (inherited from: jbossas.Resource.boundConfigurationItems)
#jbossas.Queue.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Resource.createOptions)
#jbossas.Queue.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: jbossas.Resource.createOrder)
#jbossas.Queue.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: jbossas.Resource.createTargetDirectory)
#jbossas.Queue.createTargetDirectory=false
# Create Verb (inherited from: jbossas.Resource.createVerb)
#jbossas.Queue.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Resource.destroyOptions)
#jbossas.Queue.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: jbossas.Resource.destroyOrder)
#jbossas.Queue.destroyOrder=40
# Destroy Verb (inherited from: jbossas.Resource.destroyVerb)
#jbossas.Queue.destroyVerb=Destroy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: jbossas.Resource.inspectClasspathResources)
#jbossas.Queue.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: jbossas.Resource.inspectScript)
#jbossas.Queue.inspectScript=null
# Inspect Template
#jbossas.Queue.inspectTemplate=jboss/queue/inspect.sh.ftl
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.Resource.inspectTemplateClasspathResources)
#jbossas.Queue.inspectTemplateClasspathResources=null
# Max Depth
#jbossas.Queue.maxDepth=0
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Resource.modifyOptions)
#jbossas.Queue.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: jbossas.Resource.modifyOrder)
#jbossas.Queue.modifyOrder=50
# Modify Verb (inherited from: jbossas.Resource.modifyVerb)
#jbossas.Queue.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Resource.noopOptions)
#jbossas.Queue.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: jbossas.Resource.noopOrder)
#jbossas.Queue.noopOrder=50
# Noop Verb (inherited from: jbossas.Resource.noopVerb)
#jbossas.Queue.noopVerb=Modify
# The generic container requires a restart for the action performed by this deployed. (inherited from: jbossas.Resource.restartRequired)
#jbossas.Queue.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: jbossas.Resource.restartRequiredForNoop)
#jbossas.Queue.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: jbossas.Resource.targetDirectory)
#jbossas.Queue.targetDirectory=${deployed.container.home}/server/${deployed.container.serverName}/deploy
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: jbossas.Resource.targetDirectoryShared)
#jbossas.Queue.targetDirectoryShared=true
# Name of the artifact on the generic server.
#jbossas.Queue.targetFile=${deployed.deployable.name}-${deployed.container.jmsResourceFileSuffix}.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact.
#jbossas.Queue.template=jboss/queue/template${deployed.container.version}.xml.ftl
# The set of CI templates. (inherited from: jee.QueueSpec.boundTemplates)
#jbossas.QueueSpec.boundTemplates=null
# The set of created CIs. (inherited from: generic.ProcessedTemplate.boundConfigurationItems)
#jbossas.Resource.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.ProcessedTemplate.createOptions)
#jbossas.Resource.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation.
#jbossas.Resource.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: generic.ProcessedTemplate.createTargetDirectory)
#jbossas.Resource.createTargetDirectory=false
# Create Verb (inherited from: generic.ProcessedTemplate.createVerb)
#jbossas.Resource.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.ProcessedTemplate.destroyOptions)
#jbossas.Resource.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation.
#jbossas.Resource.destroyOrder=40
# Destroy Verb (inherited from: generic.ProcessedTemplate.destroyVerb)
#jbossas.Resource.destroyVerb=Destroy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.ProcessedTemplate.inspectClasspathResources)
#jbossas.Resource.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.ProcessedTemplate.inspectScript)
#jbossas.Resource.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.ProcessedTemplate.inspectTemplateClasspathResources)
#jbossas.Resource.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.ProcessedTemplate.modifyOptions)
#jbossas.Resource.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: generic.ProcessedTemplate.modifyOrder)
#jbossas.Resource.modifyOrder=50
# Modify Verb (inherited from: generic.ProcessedTemplate.modifyVerb)
#jbossas.Resource.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.ProcessedTemplate.noopOptions)
#jbossas.Resource.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: generic.ProcessedTemplate.noopOrder)
#jbossas.Resource.noopOrder=50
# Noop Verb (inherited from: generic.ProcessedTemplate.noopVerb)
#jbossas.Resource.noopVerb=Modify
# The generic container requires a restart for the action performed by this deployed.
#jbossas.Resource.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: generic.ProcessedTemplate.restartRequiredForNoop)
#jbossas.Resource.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server.
#jbossas.Resource.targetDirectory=${deployed.container.home}/server/${deployed.container.serverName}/deploy
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: generic.ProcessedTemplate.targetDirectoryShared)
#jbossas.Resource.targetDirectoryShared=true
# Classpath to the freemarker template used to generate the content of the final text base artifact. (inherited from: generic.ProcessedTemplate.template)
#jbossas.Resource.template=null
# Address where to bind the server on starting. (inherited from: jbossas.BaseServer.bindAddress)
#jbossas.ServerV4.bindAddress=0.0.0.0
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: jbossas.BaseServer.inspectClasspathResources)
#jbossas.ServerV4.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: jbossas.BaseServer.inspectScript)
#jbossas.ServerV4.inspectScript=null
# Script (a freemarker template) used to inspect the server (inherited from: jbossas.BaseServer.inspectTemplate)
#jbossas.ServerV4.inspectTemplate=jboss/container/inspect
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.BaseServer.inspectTemplateClasspathResources)
#jbossas.ServerV4.inspectTemplateClasspathResources=twiddle-invoker.ftl,jboss/container/inspect.bat,jboss/container/inspect.sh,jboss/container/query.sh,jboss/container/query.bat
# Jms Resource File Suffix (inherited from: jbossas.BaseServer.jmsResourceFileSuffix)
#jbossas.ServerV4.jmsResourceFileSuffix=service
# Script (a freemarker template) used to query a mbean value from the server (inherited from: jbossas.BaseServer.queryTemplate)
#jbossas.ServerV4.queryTemplate=jboss/container/query
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: jbossas.BaseServer.restartClasspathResources)
#jbossas.ServerV4.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: jbossas.BaseServer.restartOrder)
#jbossas.ServerV4.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: jbossas.BaseServer.restartScript)
#jbossas.ServerV4.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.BaseServer.restartTemplateClasspathResources)
#jbossas.ServerV4.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: jbossas.BaseServer.restartWaitTime)
#jbossas.ServerV4.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: jbossas.BaseServer.startClasspathResources)
#jbossas.ServerV4.startClasspathResources=null
# Optional command line arguments to pass to the JBoss startup script. (inherited from: jbossas.BaseServer.startOptions)
#jbossas.ServerV4.startOptions=
# The order of the start container step in the step list. (inherited from: jbossas.BaseServer.startOrder)
#jbossas.ServerV4.startOrder=90
# Script used to start the server (inherited from: jbossas.BaseServer.startScript)
#jbossas.ServerV4.startScript=jboss/container/start
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.BaseServer.startTemplateClasspathResources)
#jbossas.ServerV4.startTemplateClasspathResources=null
# Duration (in secs) to wait after the start server step has been executed (inherited from: jbossas.BaseServer.startWaitTime)
#jbossas.ServerV4.startWaitTime=30
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: jbossas.BaseServer.stopClasspathResources)
#jbossas.ServerV4.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: jbossas.BaseServer.stopOrder)
#jbossas.ServerV4.stopOrder=10
# Script used to stop the server (inherited from: jbossas.BaseServer.stopScript)
#jbossas.ServerV4.stopScript=jboss/container/stop
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.BaseServer.stopTemplateClasspathResources)
#jbossas.ServerV4.stopTemplateClasspathResources=null
# Duration (in secs) to wait after the stop server step has been executed (inherited from: jbossas.BaseServer.stopWaitTime)
#jbossas.ServerV4.stopWaitTime=10
# Version
#jbossas.ServerV4.version=4
# Address where to bind the server on starting. (inherited from: jbossas.BaseServer.bindAddress)
#jbossas.ServerV5.bindAddress=0.0.0.0
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: jbossas.BaseServer.inspectClasspathResources)
#jbossas.ServerV5.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: jbossas.BaseServer.inspectScript)
#jbossas.ServerV5.inspectScript=null
# Script (a freemarker template) used to inspect the server (inherited from: jbossas.BaseServer.inspectTemplate)
#jbossas.ServerV5.inspectTemplate=jboss/container/inspect
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.BaseServer.inspectTemplateClasspathResources)
#jbossas.ServerV5.inspectTemplateClasspathResources=twiddle-invoker.ftl,jboss/container/inspect.bat,jboss/container/inspect.sh,jboss/container/query.sh,jboss/container/query.bat
# Jms Resource File Suffix (inherited from: jbossas.BaseServer.jmsResourceFileSuffix)
#jbossas.ServerV5.jmsResourceFileSuffix=service
# Script (a freemarker template) used to query a mbean value from the server (inherited from: jbossas.BaseServer.queryTemplate)
#jbossas.ServerV5.queryTemplate=jboss/container/query
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: jbossas.BaseServer.restartClasspathResources)
#jbossas.ServerV5.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: jbossas.BaseServer.restartOrder)
#jbossas.ServerV5.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: jbossas.BaseServer.restartScript)
#jbossas.ServerV5.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.BaseServer.restartTemplateClasspathResources)
#jbossas.ServerV5.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: jbossas.BaseServer.restartWaitTime)
#jbossas.ServerV5.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: jbossas.BaseServer.startClasspathResources)
#jbossas.ServerV5.startClasspathResources=null
# Optional command line arguments to pass to the JBoss startup script. (inherited from: jbossas.BaseServer.startOptions)
#jbossas.ServerV5.startOptions=
# The order of the start container step in the step list. (inherited from: jbossas.BaseServer.startOrder)
#jbossas.ServerV5.startOrder=90
# Script used to start the server (inherited from: jbossas.BaseServer.startScript)
#jbossas.ServerV5.startScript=jboss/container/start
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.BaseServer.startTemplateClasspathResources)
#jbossas.ServerV5.startTemplateClasspathResources=null
# Duration (in secs) to wait after the start server step has been executed (inherited from: jbossas.BaseServer.startWaitTime)
#jbossas.ServerV5.startWaitTime=30
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: jbossas.BaseServer.stopClasspathResources)
#jbossas.ServerV5.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: jbossas.BaseServer.stopOrder)
#jbossas.ServerV5.stopOrder=10
# Script used to stop the server (inherited from: jbossas.BaseServer.stopScript)
#jbossas.ServerV5.stopScript=jboss/container/stop
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.BaseServer.stopTemplateClasspathResources)
#jbossas.ServerV5.stopTemplateClasspathResources=null
# Duration (in secs) to wait after the stop server step has been executed (inherited from: jbossas.BaseServer.stopWaitTime)
#jbossas.ServerV5.stopWaitTime=10
# Version
#jbossas.ServerV5.version=5
# Address where to bind the server on starting. (inherited from: jbossas.BaseServer.bindAddress)
#jbossas.ServerV6.bindAddress=0.0.0.0
# Connector control port
#jbossas.ServerV6.controlPort=1090
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: jbossas.BaseServer.inspectClasspathResources)
#jbossas.ServerV6.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: jbossas.BaseServer.inspectScript)
#jbossas.ServerV6.inspectScript=null
# Script (a freemarker template) used to inspect the server (inherited from: jbossas.BaseServer.inspectTemplate)
#jbossas.ServerV6.inspectTemplate=jboss/container/inspect
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.BaseServer.inspectTemplateClasspathResources)
#jbossas.ServerV6.inspectTemplateClasspathResources=twiddle-invoker.ftl,jboss/container/inspect.bat,jboss/container/inspect.sh,jboss/container/query.sh,jboss/container/query.bat
# Jms Resource File Suffix
#jbossas.ServerV6.jmsResourceFileSuffix=hornetq-jms
# Script (a freemarker template) used to query a mbean value from the server (inherited from: jbossas.BaseServer.queryTemplate)
#jbossas.ServerV6.queryTemplate=jboss/container/query
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: jbossas.BaseServer.restartClasspathResources)
#jbossas.ServerV6.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: jbossas.BaseServer.restartOrder)
#jbossas.ServerV6.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: jbossas.BaseServer.restartScript)
#jbossas.ServerV6.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.BaseServer.restartTemplateClasspathResources)
#jbossas.ServerV6.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: jbossas.BaseServer.restartWaitTime)
#jbossas.ServerV6.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: jbossas.BaseServer.startClasspathResources)
#jbossas.ServerV6.startClasspathResources=null
# Optional command line arguments to pass to the JBoss startup script. (inherited from: jbossas.BaseServer.startOptions)
#jbossas.ServerV6.startOptions=
# The order of the start container step in the step list. (inherited from: jbossas.BaseServer.startOrder)
#jbossas.ServerV6.startOrder=90
# Script used to start the server (inherited from: jbossas.BaseServer.startScript)
#jbossas.ServerV6.startScript=jboss/container/start
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.BaseServer.startTemplateClasspathResources)
#jbossas.ServerV6.startTemplateClasspathResources=null
# Duration (in secs) to wait after the start server step has been executed (inherited from: jbossas.BaseServer.startWaitTime)
#jbossas.ServerV6.startWaitTime=30
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: jbossas.BaseServer.stopClasspathResources)
#jbossas.ServerV6.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: jbossas.BaseServer.stopOrder)
#jbossas.ServerV6.stopOrder=10
# Script used to stop the server (inherited from: jbossas.BaseServer.stopScript)
#jbossas.ServerV6.stopScript=jboss/container/stop
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.BaseServer.stopTemplateClasspathResources)
#jbossas.ServerV6.stopTemplateClasspathResources=null
# Duration (in secs) to wait after the stop server step has been executed (inherited from: jbossas.BaseServer.stopWaitTime)
#jbossas.ServerV6.stopWaitTime=10
# Version
#jbossas.ServerV6.version=6
# The set of created CIs. (inherited from: jbossas.Resource.boundConfigurationItems)
#jbossas.Topic.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Resource.createOptions)
#jbossas.Topic.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: jbossas.Resource.createOrder)
#jbossas.Topic.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: jbossas.Resource.createTargetDirectory)
#jbossas.Topic.createTargetDirectory=false
# Create Verb (inherited from: jbossas.Resource.createVerb)
#jbossas.Topic.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Resource.destroyOptions)
#jbossas.Topic.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: jbossas.Resource.destroyOrder)
#jbossas.Topic.destroyOrder=40
# Destroy Verb (inherited from: jbossas.Resource.destroyVerb)
#jbossas.Topic.destroyVerb=Destroy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: jbossas.Resource.inspectClasspathResources)
#jbossas.Topic.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: jbossas.Resource.inspectScript)
#jbossas.Topic.inspectScript=null
# Inspect Template
#jbossas.Topic.inspectTemplate=jboss/topic/inspect.sh.ftl
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.Resource.inspectTemplateClasspathResources)
#jbossas.Topic.inspectTemplateClasspathResources=null
# Max Depth
#jbossas.Topic.maxDepth=0
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Resource.modifyOptions)
#jbossas.Topic.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: jbossas.Resource.modifyOrder)
#jbossas.Topic.modifyOrder=50
# Modify Verb (inherited from: jbossas.Resource.modifyVerb)
#jbossas.Topic.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Resource.noopOptions)
#jbossas.Topic.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: jbossas.Resource.noopOrder)
#jbossas.Topic.noopOrder=50
# Noop Verb (inherited from: jbossas.Resource.noopVerb)
#jbossas.Topic.noopVerb=Modify
# The generic container requires a restart for the action performed by this deployed. (inherited from: jbossas.Resource.restartRequired)
#jbossas.Topic.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: jbossas.Resource.restartRequiredForNoop)
#jbossas.Topic.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: jbossas.Resource.targetDirectory)
#jbossas.Topic.targetDirectory=${deployed.container.home}/server/${deployed.container.serverName}/deploy
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: jbossas.Resource.targetDirectoryShared)
#jbossas.Topic.targetDirectoryShared=true
# Name of the artifact on the generic server.
#jbossas.Topic.targetFile=${deployed.deployable.name}-${deployed.container.jmsResourceFileSuffix}.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact.
#jbossas.Topic.template=jboss/topic/template${deployed.container.version}.xml.ftl
# The set of CI templates. (inherited from: jee.TopicSpec.boundTemplates)
#jbossas.TopicSpec.boundTemplates=null
# The set of created CIs. (inherited from: jbossas.Datasource.boundConfigurationItems)
#jbossas.TransactionalDatasource.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Datasource.createOptions)
#jbossas.TransactionalDatasource.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: jbossas.Datasource.createOrder)
#jbossas.TransactionalDatasource.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: jbossas.Datasource.createTargetDirectory)
#jbossas.TransactionalDatasource.createTargetDirectory=false
# Create Verb (inherited from: jbossas.Datasource.createVerb)
#jbossas.TransactionalDatasource.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Datasource.destroyOptions)
#jbossas.TransactionalDatasource.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: jbossas.Datasource.destroyOrder)
#jbossas.TransactionalDatasource.destroyOrder=40
# Destroy Verb (inherited from: jbossas.Datasource.destroyVerb)
#jbossas.TransactionalDatasource.destroyVerb=Destroy
# Ds Type
#jbossas.TransactionalDatasource.dsType=local-tx-datasource
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: jbossas.Datasource.inspectClasspathResources)
#jbossas.TransactionalDatasource.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: jbossas.Datasource.inspectScript)
#jbossas.TransactionalDatasource.inspectScript=null
# Inspect Template (inherited from: jbossas.Datasource.inspectTemplate)
#jbossas.TransactionalDatasource.inspectTemplate=jboss/datasource/inspect.sh.ftl
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.Datasource.inspectTemplateClasspathResources)
#jbossas.TransactionalDatasource.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Datasource.modifyOptions)
#jbossas.TransactionalDatasource.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: jbossas.Datasource.modifyOrder)
#jbossas.TransactionalDatasource.modifyOrder=50
# Modify Verb (inherited from: jbossas.Datasource.modifyVerb)
#jbossas.TransactionalDatasource.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Datasource.noopOptions)
#jbossas.TransactionalDatasource.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: jbossas.Datasource.noopOrder)
#jbossas.TransactionalDatasource.noopOrder=50
# Noop Verb (inherited from: jbossas.Datasource.noopVerb)
#jbossas.TransactionalDatasource.noopVerb=Modify
# The generic container requires a restart for the action performed by this deployed. (inherited from: jbossas.Datasource.restartRequired)
#jbossas.TransactionalDatasource.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: jbossas.Datasource.restartRequiredForNoop)
#jbossas.TransactionalDatasource.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: jbossas.Datasource.targetDirectory)
#jbossas.TransactionalDatasource.targetDirectory=${deployed.container.home}/server/${deployed.container.serverName}/deploy
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: jbossas.Datasource.targetDirectoryShared)
#jbossas.TransactionalDatasource.targetDirectoryShared=true
# Name of the artifact on the generic server. (inherited from: jbossas.Datasource.targetFile)
#jbossas.TransactionalDatasource.targetFile=${deployed.deployable.name}-ds.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact. (inherited from: jbossas.Datasource.template)
#jbossas.TransactionalDatasource.template=jboss/datasource/template.xml.ftl
# The set of CI templates. (inherited from: jee.DataSourceSpec.boundTemplates)
#jbossas.TransactionalDatasourceSpec.boundTemplates=null
# The set of created CIs. (inherited from: jbossas.Datasource.boundConfigurationItems)
#jbossas.TransactionalXADatasource.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Datasource.createOptions)
#jbossas.TransactionalXADatasource.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: jbossas.Datasource.createOrder)
#jbossas.TransactionalXADatasource.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: jbossas.Datasource.createTargetDirectory)
#jbossas.TransactionalXADatasource.createTargetDirectory=false
# Create Verb (inherited from: jbossas.Datasource.createVerb)
#jbossas.TransactionalXADatasource.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Datasource.destroyOptions)
#jbossas.TransactionalXADatasource.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: jbossas.Datasource.destroyOrder)
#jbossas.TransactionalXADatasource.destroyOrder=40
# Destroy Verb (inherited from: jbossas.Datasource.destroyVerb)
#jbossas.TransactionalXADatasource.destroyVerb=Destroy
# Ds Type
#jbossas.TransactionalXADatasource.dsType=xa-datasource
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: jbossas.Datasource.inspectClasspathResources)
#jbossas.TransactionalXADatasource.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: jbossas.Datasource.inspectScript)
#jbossas.TransactionalXADatasource.inspectScript=null
# Inspect Template (inherited from: jbossas.Datasource.inspectTemplate)
#jbossas.TransactionalXADatasource.inspectTemplate=jboss/datasource/inspect.sh.ftl
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.Datasource.inspectTemplateClasspathResources)
#jbossas.TransactionalXADatasource.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Datasource.modifyOptions)
#jbossas.TransactionalXADatasource.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: jbossas.Datasource.modifyOrder)
#jbossas.TransactionalXADatasource.modifyOrder=50
# Modify Verb (inherited from: jbossas.Datasource.modifyVerb)
#jbossas.TransactionalXADatasource.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Datasource.noopOptions)
#jbossas.TransactionalXADatasource.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: jbossas.Datasource.noopOrder)
#jbossas.TransactionalXADatasource.noopOrder=50
# Noop Verb (inherited from: jbossas.Datasource.noopVerb)
#jbossas.TransactionalXADatasource.noopVerb=Modify
# The generic container requires a restart for the action performed by this deployed. (inherited from: jbossas.Datasource.restartRequired)
#jbossas.TransactionalXADatasource.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: jbossas.Datasource.restartRequiredForNoop)
#jbossas.TransactionalXADatasource.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: jbossas.Datasource.targetDirectory)
#jbossas.TransactionalXADatasource.targetDirectory=${deployed.container.home}/server/${deployed.container.serverName}/deploy
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: jbossas.Datasource.targetDirectoryShared)
#jbossas.TransactionalXADatasource.targetDirectoryShared=true
# Name of the artifact on the generic server. (inherited from: jbossas.Datasource.targetFile)
#jbossas.TransactionalXADatasource.targetFile=${deployed.deployable.name}-ds.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact. (inherited from: jbossas.Datasource.template)
#jbossas.TransactionalXADatasource.template=jboss/datasource/template.xml.ftl
# set to fix problems with Oracle (not necessarily in JBoss-5.x where it is enabled by default and the element is deprecated)
#jbossas.TransactionalXADatasource.trackConnectionByTx=true
# The set of CI templates. (inherited from: jee.DataSourceSpec.boundTemplates)
#jbossas.TransactionalXADatasourceSpec.boundTemplates=null
# The set of CI templates. (inherited from: jee.War.boundTemplates)
#jbossas.War.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: jee.War.delimiters)
#jbossas.War.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: jee.War.textFileNamesRegex)
#jbossas.War.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: jbossas.Artifact.boundConfigurationItems)
#jbossas.WarModule.boundConfigurationItems=null
# If set to true, files are directly copied to the target directory without first being uploaded to the staging or temporary directory (like versions of XL Deploy prior to 4.0.0) (inherited from: jbossas.Artifact.copyDirectlyToTargetPath)
#jbossas.WarModule.copyDirectlyToTargetPath=false
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Artifact.createOptions)
#jbossas.WarModule.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: jbossas.Artifact.createOrder)
#jbossas.WarModule.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: jbossas.Artifact.createTargetDirectory)
#jbossas.WarModule.createTargetDirectory=false
# Create Verb (inherited from: jbossas.Artifact.createVerb)
#jbossas.WarModule.createVerb=Deploy
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Artifact.destroyOptions)
#jbossas.WarModule.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: jbossas.Artifact.destroyOrder)
#jbossas.WarModule.destroyOrder=40
# Destroy Verb (inherited from: jbossas.Artifact.destroyVerb)
#jbossas.WarModule.destroyVerb=Undeploy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: jbossas.Artifact.inspectClasspathResources)
#jbossas.WarModule.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: jbossas.Artifact.inspectScript)
#jbossas.WarModule.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.Artifact.inspectTemplateClasspathResources)
#jbossas.WarModule.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Artifact.modifyOptions)
#jbossas.WarModule.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: jbossas.Artifact.modifyOrder)
#jbossas.WarModule.modifyOrder=50
# Modify Verb (inherited from: jbossas.Artifact.modifyVerb)
#jbossas.WarModule.modifyVerb=Update
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: jbossas.Artifact.noopOptions)
#jbossas.WarModule.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: jbossas.Artifact.noopOrder)
#jbossas.WarModule.noopOrder=50
# Noop Verb (inherited from: jbossas.Artifact.noopVerb)
#jbossas.WarModule.noopVerb=Modify
# If set to true, preserve the existing files on the remote host (do not delete the copied files during the destroy operation).  (inherited from: jbossas.Artifact.preserveExistingFiles)
#jbossas.WarModule.preserveExistingFiles=false
# The generic container requires a restart for the action performed by this deployed. (inherited from: jbossas.Artifact.restartRequired)
#jbossas.WarModule.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: jbossas.Artifact.restartRequiredForNoop)
#jbossas.WarModule.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: jbossas.Artifact.targetDirectory)
#jbossas.WarModule.targetDirectory=${deployed.container.home}/server/${deployed.container.serverName}/deploy
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: jbossas.Artifact.targetDirectoryShared)
#jbossas.WarModule.targetDirectoryShared=true
# Name of the artifact on the generic server.
#jbossas.WarModule.targetFile=${deployed.deployable.name}.war
# If set to true, the sub directories on the target machine are not deleted if files other than that copied by XL Deploy are present. Please note that setting this option to true will cause the removal process to be a slower.  (inherited from: jbossas.Artifact.targetPathSharedSubDirectories)
#jbossas.WarModule.targetPathSharedSubDirectories=false
# An element to specify that connections should be validated on a background thread versus being validated prior to use. Changing this value can be done only on disabled datasource, requires a server restart otherwise.
#jbossdm.BaseDataSource.backgroundValidation=false
# The set of created CIs. (inherited from: jbossdm.CliManagedDeployed.boundConfigurationItems)
#jbossdm.BaseDataSource.boundConfigurationItems=null
# The order of the step in the step list for the create operation. (inherited from: jbossdm.CliManagedDeployed.createOrder)
#jbossdm.BaseDataSource.createOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the create operation. (inherited from: jbossdm.CliManagedDeployed.createScript)
#jbossdm.BaseDataSource.createScript=null
# Create Verb (inherited from: jbossdm.CliManagedDeployed.createVerb)
#jbossdm.BaseDataSource.createVerb=Create
# The order of the step in the step list for the destroy operation. (inherited from: jbossdm.CliManagedDeployed.destroyOrder)
#jbossdm.BaseDataSource.destroyOrder=40
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation. (inherited from: jbossdm.CliManagedDeployed.destroyScript)
#jbossdm.BaseDataSource.destroyScript=null
# Destroy Verb (inherited from: jbossdm.CliManagedDeployed.destroyVerb)
#jbossdm.BaseDataSource.destroyVerb=Destroy
# Classpath to the script used to inspect the generic container. (inherited from: jbossdm.CliManagedDeployed.inspectScript)
#jbossdm.BaseDataSource.inspectScript=null
# List of python library scripts that should be automatically loaded when using a JBoss CLI script.
#jbossdm.BaseDataSource.libraries=jboss/dm/ds/datasource-lib.py
# The order of the step in the step list for the modify operation. (inherited from: jbossdm.CliManagedDeployed.modifyOrder)
#jbossdm.BaseDataSource.modifyOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the modify operation. (inherited from: jbossdm.CliManagedDeployed.modifyScript)
#jbossdm.BaseDataSource.modifyScript=null
# Modify Verb (inherited from: jbossdm.CliManagedDeployed.modifyVerb)
#jbossdm.BaseDataSource.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: jbossdm.CliManagedDeployed.noopOrder)
#jbossdm.BaseDataSource.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: jbossdm.CliManagedDeployed.noopScript)
#jbossdm.BaseDataSource.noopScript=null
# Noop Verb (inherited from: jbossdm.CliManagedDeployed.noopVerb)
#jbossdm.BaseDataSource.noopVerb=Modify
# Should the pool be prefilled. Changing this value can be done only on disabled datasource, requires a server restart otherwise.
#jbossdm.BaseDataSource.prefillEnabled=false
# The number of prepared statements per connection in an LRU cache
#jbossdm.BaseDataSource.statementCacheSize=-1
# Specifies if the min-pool-size should be considered strictly
#jbossdm.BaseDataSource.strictMinimum=false
# The validate-on-match element specifies if connection validation should be done when a connection factory attempts to match a managed connection. This is typically exclusive to the use of background validation
#jbossdm.BaseDataSource.validateOnMatch=false
# The background-validation-millis element specifies the amount of time, in milliseconds, that background validation will run. Changing this value can be done only on disabled datasource, requires a server restart otherwise
#jbossdm.BaseDataSource.validationMillis=-1
# Host which is used to login to JBoss Native Administration, default is localhost
#jbossdm.CliBasedContainer.adminHostAddress=localhost
# JBoss CLI script prefix. Depending on the host, either an '.sh' or '.bat' will be appended to get the cli script name.
#jbossdm.CliBasedContainer.cliScriptPrefix=jboss-cli
# Command execution mode when daemon is disabled. Commands can be executed directly against remote jboss CLI process using --commands option (CLI_COMMANDS) or they can be uploaded to a temporary file and executed using --file option (CLI_FILE). By default it is set to CLI_COMMANDS, but if you have special characters like '{}[]=@()' set it to the CLI_FILE value
#jbossdm.CliBasedContainer.commandExecutionMode=CLI_COMMANDS
# Connection read timeout for CLI daemon boot up.
#jbossdm.CliBasedContainer.daemonConnectTimeout=null
# Connection to CLI is setup using a daemon. Set it to false if connection to the host does not support streaming.
#jbossdm.CliBasedContainer.enableDaemon=true
# List of python library scripts that should be automatically loaded when using a JBoss CLI script
#jbossdm.CliBasedContainer.libraries=jboss/dm/library/runtime.py
# TCP port which is used to login to JBoss Native Administration, default is 9999
#jbossdm.CliBasedContainer.port=9999
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#jbossdm.CliManagedDeployed.boundConfigurationItems=null
# The order of the step in the step list for the create operation.
#jbossdm.CliManagedDeployed.createOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the create operation.
#jbossdm.CliManagedDeployed.createScript=null
# Create Verb
#jbossdm.CliManagedDeployed.createVerb=Create
# The order of the step in the step list for the destroy operation.
#jbossdm.CliManagedDeployed.destroyOrder=40
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation.
#jbossdm.CliManagedDeployed.destroyScript=null
# Destroy Verb
#jbossdm.CliManagedDeployed.destroyVerb=Destroy
# Classpath to the script used to inspect the generic container.
#jbossdm.CliManagedDeployed.inspectScript=null
# List of python library scripts that should be automatically loaded when using a JBoss CLI script.
#jbossdm.CliManagedDeployed.libraries=null
# The order of the step in the step list for the modify operation.
#jbossdm.CliManagedDeployed.modifyOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the modify operation.
#jbossdm.CliManagedDeployed.modifyScript=null
# Modify Verb
#jbossdm.CliManagedDeployed.modifyVerb=Modify
# The order of the step in the step list for the noop operation.
#jbossdm.CliManagedDeployed.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation.
#jbossdm.CliManagedDeployed.noopScript=null
# Noop Verb
#jbossdm.CliManagedDeployed.noopVerb=Modify
# The set of created CIs. (inherited from: jbossdm.CliManagedDeployed.boundConfigurationItems)
#jbossdm.CliManagedDeployedArtifact.boundConfigurationItems=null
# The order of the step in the step list for the create operation.
#jbossdm.CliManagedDeployedArtifact.createOrder=70
# Classpath to the script that is uploaded and executed on the generic container for the create operation. (inherited from: jbossdm.CliManagedDeployed.createScript)
#jbossdm.CliManagedDeployedArtifact.createScript=null
# Create Verb (inherited from: jbossdm.CliManagedDeployed.createVerb)
#jbossdm.CliManagedDeployedArtifact.createVerb=Create
# The order of the step in the step list for the destroy operation.
#jbossdm.CliManagedDeployedArtifact.destroyOrder=30
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation. (inherited from: jbossdm.CliManagedDeployed.destroyScript)
#jbossdm.CliManagedDeployedArtifact.destroyScript=null
# Destroy Verb (inherited from: jbossdm.CliManagedDeployed.destroyVerb)
#jbossdm.CliManagedDeployedArtifact.destroyVerb=Destroy
# Classpath to the script used to inspect the generic container. (inherited from: jbossdm.CliManagedDeployed.inspectScript)
#jbossdm.CliManagedDeployedArtifact.inspectScript=null
# List of python library scripts that should be automatically loaded when using a JBoss CLI script. (inherited from: jbossdm.CliManagedDeployed.libraries)
#jbossdm.CliManagedDeployedArtifact.libraries=null
# The order of the step in the step list for the modify operation.
#jbossdm.CliManagedDeployedArtifact.modifyOrder=70
# Classpath to the script that is uploaded and executed on the generic container for the modify operation. (inherited from: jbossdm.CliManagedDeployed.modifyScript)
#jbossdm.CliManagedDeployedArtifact.modifyScript=null
# Modify Verb (inherited from: jbossdm.CliManagedDeployed.modifyVerb)
#jbossdm.CliManagedDeployedArtifact.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: jbossdm.CliManagedDeployed.noopOrder)
#jbossdm.CliManagedDeployedArtifact.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: jbossdm.CliManagedDeployed.noopScript)
#jbossdm.CliManagedDeployedArtifact.noopScript=null
# Noop Verb (inherited from: jbossdm.CliManagedDeployed.noopVerb)
#jbossdm.CliManagedDeployedArtifact.noopVerb=Modify
# The set of created CIs. (inherited from: jbossdm.JeeDataSource.boundConfigurationItems)
#jbossdm.DataSource.boundConfigurationItems=null
# The order of the step in the step list for the create operation. (inherited from: jbossdm.JeeDataSource.createOrder)
#jbossdm.DataSource.createOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the create operation. (inherited from: jbossdm.JeeDataSource.createScript)
#jbossdm.DataSource.createScript=jboss/dm/ds/create-datasource.py
# Create Verb (inherited from: jbossdm.JeeDataSource.createVerb)
#jbossdm.DataSource.createVerb=Create
# The order of the step in the step list for the destroy operation. (inherited from: jbossdm.JeeDataSource.destroyOrder)
#jbossdm.DataSource.destroyOrder=40
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation. (inherited from: jbossdm.JeeDataSource.destroyScript)
#jbossdm.DataSource.destroyScript=jboss/dm/ds/destroy-datasource.py
# Destroy Verb (inherited from: jbossdm.JeeDataSource.destroyVerb)
#jbossdm.DataSource.destroyVerb=Destroy
# Classpath to the script used to inspect the generic container. (inherited from: jbossdm.JeeDataSource.inspectScript)
#jbossdm.DataSource.inspectScript=jboss/dm/ds/inspect-datasource.py
# List of python library scripts that should be automatically loaded when using a JBoss CLI script. (inherited from: jbossdm.JeeDataSource.libraries)
#jbossdm.DataSource.libraries=jboss/dm/ds/datasource-lib.py
# The order of the step in the step list for the modify operation. (inherited from: jbossdm.JeeDataSource.modifyOrder)
#jbossdm.DataSource.modifyOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the modify operation. (inherited from: jbossdm.JeeDataSource.modifyScript)
#jbossdm.DataSource.modifyScript=null
# Modify Verb (inherited from: jbossdm.JeeDataSource.modifyVerb)
#jbossdm.DataSource.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: jbossdm.JeeDataSource.noopOrder)
#jbossdm.DataSource.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: jbossdm.JeeDataSource.noopScript)
#jbossdm.DataSource.noopScript=null
# Noop Verb (inherited from: jbossdm.JeeDataSource.noopVerb)
#jbossdm.DataSource.noopVerb=Modify
# The set of CI templates. (inherited from: jee.DataSourceSpec.boundTemplates)
#jbossdm.DataSourceSpec.boundTemplates=null
# Connection read timeout for CLI daemon boot up.
#jbossdm.Domain.daemonConnectTimeout=300000
# List of python library scripts that should be automatically loaded when using a JBoss CLI script (inherited from: jbossdm.CliBasedContainer.libraries)
#jbossdm.Domain.libraries=jboss/dm/library/runtime.py
# The set of CI templates. (inherited from: jee.Ear.boundTemplates)
#jbossdm.Ear.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: jee.Ear.delimiters)
#jbossdm.Ear.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: jee.Ear.textFileNamesRegex)
#jbossdm.Ear.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: jbossdm.CliManagedDeployedArtifact.boundConfigurationItems)
#jbossdm.EarModule.boundConfigurationItems=null
# The order of the step in the step list for the create operation. (inherited from: jbossdm.CliManagedDeployedArtifact.createOrder)
#jbossdm.EarModule.createOrder=70
# Classpath to the script that is uploaded and executed on the generic container for the create operation.
#jbossdm.EarModule.createScript=jboss/dm/application/install-ear.py
# Create Verb (inherited from: jbossdm.CliManagedDeployedArtifact.createVerb)
#jbossdm.EarModule.createVerb=Create
# The order of the step in the step list for the destroy operation. (inherited from: jbossdm.CliManagedDeployedArtifact.destroyOrder)
#jbossdm.EarModule.destroyOrder=30
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation.
#jbossdm.EarModule.destroyScript=jboss/dm/application/uninstall-ear.py
# Destroy Verb (inherited from: jbossdm.CliManagedDeployedArtifact.destroyVerb)
#jbossdm.EarModule.destroyVerb=Destroy
# Classpath to the script used to inspect the generic container.
#jbossdm.EarModule.inspectScript=jboss/dm/application/inspect-ear.py
# List of python library scripts that should be automatically loaded when using a JBoss CLI script.
#jbossdm.EarModule.libraries=jboss/dm/application/application-lib.py
# The order of the step in the step list for the modify operation. (inherited from: jbossdm.CliManagedDeployedArtifact.modifyOrder)
#jbossdm.EarModule.modifyOrder=70
# Classpath to the script that is uploaded and executed on the generic container for the modify operation. (inherited from: jbossdm.CliManagedDeployedArtifact.modifyScript)
#jbossdm.EarModule.modifyScript=null
# Modify Verb (inherited from: jbossdm.CliManagedDeployedArtifact.modifyVerb)
#jbossdm.EarModule.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: jbossdm.CliManagedDeployedArtifact.noopOrder)
#jbossdm.EarModule.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: jbossdm.CliManagedDeployedArtifact.noopScript)
#jbossdm.EarModule.noopScript=null
# Noop Verb (inherited from: jbossdm.CliManagedDeployedArtifact.noopVerb)
#jbossdm.EarModule.noopVerb=Modify
# The set of CI templates. (inherited from: jee.EjbJar.boundTemplates)
#jbossdm.EjbJar.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: jee.EjbJar.delimiters)
#jbossdm.EjbJar.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: jee.EjbJar.textFileNamesRegex)
#jbossdm.EjbJar.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: jbossdm.CliManagedDeployedArtifact.boundConfigurationItems)
#jbossdm.EjbJarModule.boundConfigurationItems=null
# The order of the step in the step list for the create operation. (inherited from: jbossdm.CliManagedDeployedArtifact.createOrder)
#jbossdm.EjbJarModule.createOrder=70
# Classpath to the script that is uploaded and executed on the generic container for the create operation.
#jbossdm.EjbJarModule.createScript=jboss/dm/application/install-ejbjar.py
# Create Verb (inherited from: jbossdm.CliManagedDeployedArtifact.createVerb)
#jbossdm.EjbJarModule.createVerb=Create
# The order of the step in the step list for the destroy operation. (inherited from: jbossdm.CliManagedDeployedArtifact.destroyOrder)
#jbossdm.EjbJarModule.destroyOrder=30
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation.
#jbossdm.EjbJarModule.destroyScript=jboss/dm/application/uninstall-ejbjar.py
# Destroy Verb (inherited from: jbossdm.CliManagedDeployedArtifact.destroyVerb)
#jbossdm.EjbJarModule.destroyVerb=Destroy
# Classpath to the script used to inspect the generic container.
#jbossdm.EjbJarModule.inspectScript=jboss/dm/application/inspect-ejbjar.py
# List of python library scripts that should be automatically loaded when using a JBoss CLI script.
#jbossdm.EjbJarModule.libraries=jboss/dm/application/application-lib.py
# The order of the step in the step list for the modify operation. (inherited from: jbossdm.CliManagedDeployedArtifact.modifyOrder)
#jbossdm.EjbJarModule.modifyOrder=70
# Classpath to the script that is uploaded and executed on the generic container for the modify operation. (inherited from: jbossdm.CliManagedDeployedArtifact.modifyScript)
#jbossdm.EjbJarModule.modifyScript=null
# Modify Verb (inherited from: jbossdm.CliManagedDeployedArtifact.modifyVerb)
#jbossdm.EjbJarModule.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: jbossdm.CliManagedDeployedArtifact.noopOrder)
#jbossdm.EjbJarModule.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: jbossdm.CliManagedDeployedArtifact.noopScript)
#jbossdm.EjbJarModule.noopScript=null
# Noop Verb (inherited from: jbossdm.CliManagedDeployedArtifact.noopVerb)
#jbossdm.EjbJarModule.noopVerb=Modify
# The set of created CIs. (inherited from: jbossdm.BaseDataSource.boundConfigurationItems)
#jbossdm.JeeDataSource.boundConfigurationItems=null
# The order of the step in the step list for the create operation. (inherited from: jbossdm.BaseDataSource.createOrder)
#jbossdm.JeeDataSource.createOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the create operation.
#jbossdm.JeeDataSource.createScript=jboss/dm/ds/create-datasource.py
# Create Verb (inherited from: jbossdm.BaseDataSource.createVerb)
#jbossdm.JeeDataSource.createVerb=Create
# The order of the step in the step list for the destroy operation. (inherited from: jbossdm.BaseDataSource.destroyOrder)
#jbossdm.JeeDataSource.destroyOrder=40
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation.
#jbossdm.JeeDataSource.destroyScript=jboss/dm/ds/destroy-datasource.py
# Destroy Verb (inherited from: jbossdm.BaseDataSource.destroyVerb)
#jbossdm.JeeDataSource.destroyVerb=Destroy
# Classpath to the script used to inspect the generic container.
#jbossdm.JeeDataSource.inspectScript=jboss/dm/ds/inspect-datasource.py
# List of python library scripts that should be automatically loaded when using a JBoss CLI script. (inherited from: jbossdm.BaseDataSource.libraries)
#jbossdm.JeeDataSource.libraries=jboss/dm/ds/datasource-lib.py
# The order of the step in the step list for the modify operation. (inherited from: jbossdm.BaseDataSource.modifyOrder)
#jbossdm.JeeDataSource.modifyOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the modify operation. (inherited from: jbossdm.BaseDataSource.modifyScript)
#jbossdm.JeeDataSource.modifyScript=null
# Modify Verb (inherited from: jbossdm.BaseDataSource.modifyVerb)
#jbossdm.JeeDataSource.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: jbossdm.BaseDataSource.noopOrder)
#jbossdm.JeeDataSource.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: jbossdm.BaseDataSource.noopScript)
#jbossdm.JeeDataSource.noopScript=null
# Noop Verb (inherited from: jbossdm.BaseDataSource.noopVerb)
#jbossdm.JeeDataSource.noopVerb=Modify
# Enable the use of a cached connection manager
#jbossdm.JeeDataSource.useCcm=false
# Enable JTA integration
#jbossdm.JeeDataSource.useJta=false
# The set of CI templates. (inherited from: jee.DataSourceSpec.boundTemplates)
#jbossdm.JeeDataSourceSpec.boundTemplates=null
# The set of created CIs. (inherited from: jbossdm.BaseDataSource.boundConfigurationItems)
#jbossdm.JeeXaDataSource.boundConfigurationItems=null
# The order of the step in the step list for the create operation. (inherited from: jbossdm.BaseDataSource.createOrder)
#jbossdm.JeeXaDataSource.createOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the create operation.
#jbossdm.JeeXaDataSource.createScript=jboss/dm/ds/create-xa-datasource.py
# Create Verb (inherited from: jbossdm.BaseDataSource.createVerb)
#jbossdm.JeeXaDataSource.createVerb=Create
# The order of the step in the step list for the destroy operation. (inherited from: jbossdm.BaseDataSource.destroyOrder)
#jbossdm.JeeXaDataSource.destroyOrder=40
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation.
#jbossdm.JeeXaDataSource.destroyScript=jboss/dm/ds/destroy-xa-datasource.py
# Destroy Verb (inherited from: jbossdm.BaseDataSource.destroyVerb)
#jbossdm.JeeXaDataSource.destroyVerb=Destroy
# Classpath to the script used to inspect the generic container.
#jbossdm.JeeXaDataSource.inspectScript=jboss/dm/ds/inspect-xa-datasource.py
# An element to enable interleaving for XA connections
#jbossdm.JeeXaDataSource.interleave=false
# List of python library scripts that should be automatically loaded when using a JBoss CLI script. (inherited from: jbossdm.BaseDataSource.libraries)
#jbossdm.JeeXaDataSource.libraries=jboss/dm/ds/datasource-lib.py
# The order of the step in the step list for the modify operation. (inherited from: jbossdm.BaseDataSource.modifyOrder)
#jbossdm.JeeXaDataSource.modifyOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the modify operation. (inherited from: jbossdm.BaseDataSource.modifyScript)
#jbossdm.JeeXaDataSource.modifyScript=null
# Modify Verb (inherited from: jbossdm.BaseDataSource.modifyVerb)
#jbossdm.JeeXaDataSource.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: jbossdm.BaseDataSource.noopOrder)
#jbossdm.JeeXaDataSource.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: jbossdm.BaseDataSource.noopScript)
#jbossdm.JeeXaDataSource.noopScript=null
# Noop Verb (inherited from: jbossdm.BaseDataSource.noopVerb)
#jbossdm.JeeXaDataSource.noopVerb=Modify
# Should the Xid be padded
#jbossdm.JeeXaDataSource.padXid=false
# The is-same-rm-override element allows one to unconditionally set whether the javax.transaction.xa.XAResource.isSameRM(XAResource) returns true or false
#jbossdm.JeeXaDataSource.sameRmOverride=false
# Should the XAResource instances be wrapped in a org.jboss.tm.XAResourceWrapper instance
#jbossdm.JeeXaDataSource.wrapXa=false
# The set of created CIs. (inherited from: jbossdm.CliManagedDeployed.boundConfigurationItems)
#jbossdm.Queue.boundConfigurationItems=null
# The order of the step in the step list for the create operation. (inherited from: jbossdm.CliManagedDeployed.createOrder)
#jbossdm.Queue.createOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the create operation.
#jbossdm.Queue.createScript=jboss/dm/jms/create-queue.py
# Create Verb (inherited from: jbossdm.CliManagedDeployed.createVerb)
#jbossdm.Queue.createVerb=Create
# The order of the step in the step list for the destroy operation. (inherited from: jbossdm.CliManagedDeployed.destroyOrder)
#jbossdm.Queue.destroyOrder=40
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation.
#jbossdm.Queue.destroyScript=jboss/dm/jms/destroy-queue.py
# Destroy Verb (inherited from: jbossdm.CliManagedDeployed.destroyVerb)
#jbossdm.Queue.destroyVerb=Destroy
# Whether the queue is durable or not
#jbossdm.Queue.durable=true
# Classpath to the script used to inspect the generic container.
#jbossdm.Queue.inspectScript=jboss/dm/jms/inspect-queue.py
# List of python library scripts that should be automatically loaded when using a JBoss CLI script. (inherited from: jbossdm.CliManagedDeployed.libraries)
#jbossdm.Queue.libraries=null
# The order of the step in the step list for the modify operation. (inherited from: jbossdm.CliManagedDeployed.modifyOrder)
#jbossdm.Queue.modifyOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the modify operation. (inherited from: jbossdm.CliManagedDeployed.modifyScript)
#jbossdm.Queue.modifyScript=null
# Modify Verb (inherited from: jbossdm.CliManagedDeployed.modifyVerb)
#jbossdm.Queue.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: jbossdm.CliManagedDeployed.noopOrder)
#jbossdm.Queue.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: jbossdm.CliManagedDeployed.noopScript)
#jbossdm.Queue.noopScript=null
# Noop Verb (inherited from: jbossdm.CliManagedDeployed.noopVerb)
#jbossdm.Queue.noopVerb=Modify
# The set of CI templates. (inherited from: jee.QueueSpec.boundTemplates)
#jbossdm.QueueSpec.boundTemplates=null
# Connection read timeout for CLI daemon boot up.
#jbossdm.StandaloneServer.daemonConnectTimeout=300000
# List of python library scripts that should be automatically loaded when using a JBoss CLI script (inherited from: jbossdm.CliBasedContainer.libraries)
#jbossdm.StandaloneServer.libraries=jboss/dm/library/runtime.py
# The set of created CIs. (inherited from: jbossdm.CliManagedDeployed.boundConfigurationItems)
#jbossdm.Topic.boundConfigurationItems=null
# The order of the step in the step list for the create operation. (inherited from: jbossdm.CliManagedDeployed.createOrder)
#jbossdm.Topic.createOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the create operation.
#jbossdm.Topic.createScript=jboss/dm/jms/create-topic.py
# Create Verb (inherited from: jbossdm.CliManagedDeployed.createVerb)
#jbossdm.Topic.createVerb=Create
# The order of the step in the step list for the destroy operation. (inherited from: jbossdm.CliManagedDeployed.destroyOrder)
#jbossdm.Topic.destroyOrder=40
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation.
#jbossdm.Topic.destroyScript=jboss/dm/jms/destroy-topic.py
# Destroy Verb (inherited from: jbossdm.CliManagedDeployed.destroyVerb)
#jbossdm.Topic.destroyVerb=Destroy
# Classpath to the script used to inspect the generic container.
#jbossdm.Topic.inspectScript=jboss/dm/jms/inspect-topic.py
# List of python library scripts that should be automatically loaded when using a JBoss CLI script. (inherited from: jbossdm.CliManagedDeployed.libraries)
#jbossdm.Topic.libraries=null
# The order of the step in the step list for the modify operation. (inherited from: jbossdm.CliManagedDeployed.modifyOrder)
#jbossdm.Topic.modifyOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the modify operation. (inherited from: jbossdm.CliManagedDeployed.modifyScript)
#jbossdm.Topic.modifyScript=null
# Modify Verb (inherited from: jbossdm.CliManagedDeployed.modifyVerb)
#jbossdm.Topic.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: jbossdm.CliManagedDeployed.noopOrder)
#jbossdm.Topic.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: jbossdm.CliManagedDeployed.noopScript)
#jbossdm.Topic.noopScript=null
# Noop Verb (inherited from: jbossdm.CliManagedDeployed.noopVerb)
#jbossdm.Topic.noopVerb=Modify
# The set of CI templates. (inherited from: jee.TopicSpec.boundTemplates)
#jbossdm.TopicSpec.boundTemplates=null
# The set of CI templates. (inherited from: jee.War.boundTemplates)
#jbossdm.War.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: jee.War.delimiters)
#jbossdm.War.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: jee.War.textFileNamesRegex)
#jbossdm.War.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: jbossdm.CliManagedDeployedArtifact.boundConfigurationItems)
#jbossdm.WarModule.boundConfigurationItems=null
# The order of the step in the step list for the create operation. (inherited from: jbossdm.CliManagedDeployedArtifact.createOrder)
#jbossdm.WarModule.createOrder=70
# Classpath to the script that is uploaded and executed on the generic container for the create operation.
#jbossdm.WarModule.createScript=jboss/dm/application/install-war.py
# Create Verb (inherited from: jbossdm.CliManagedDeployedArtifact.createVerb)
#jbossdm.WarModule.createVerb=Create
# The order of the step in the step list for the destroy operation. (inherited from: jbossdm.CliManagedDeployedArtifact.destroyOrder)
#jbossdm.WarModule.destroyOrder=30
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation.
#jbossdm.WarModule.destroyScript=jboss/dm/application/uninstall-war.py
# Destroy Verb (inherited from: jbossdm.CliManagedDeployedArtifact.destroyVerb)
#jbossdm.WarModule.destroyVerb=Destroy
# Classpath to the script used to inspect the generic container.
#jbossdm.WarModule.inspectScript=jboss/dm/application/inspect-war.py
# List of python library scripts that should be automatically loaded when using a JBoss CLI script.
#jbossdm.WarModule.libraries=jboss/dm/application/application-lib.py
# The order of the step in the step list for the modify operation. (inherited from: jbossdm.CliManagedDeployedArtifact.modifyOrder)
#jbossdm.WarModule.modifyOrder=70
# Classpath to the script that is uploaded and executed on the generic container for the modify operation. (inherited from: jbossdm.CliManagedDeployedArtifact.modifyScript)
#jbossdm.WarModule.modifyScript=null
# Modify Verb (inherited from: jbossdm.CliManagedDeployedArtifact.modifyVerb)
#jbossdm.WarModule.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: jbossdm.CliManagedDeployedArtifact.noopOrder)
#jbossdm.WarModule.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: jbossdm.CliManagedDeployedArtifact.noopScript)
#jbossdm.WarModule.noopScript=null
# Noop Verb (inherited from: jbossdm.CliManagedDeployedArtifact.noopVerb)
#jbossdm.WarModule.noopVerb=Modify
# The set of created CIs. (inherited from: jbossdm.JeeXaDataSource.boundConfigurationItems)
#jbossdm.XaDataSource.boundConfigurationItems=null
# The order of the step in the step list for the create operation. (inherited from: jbossdm.JeeXaDataSource.createOrder)
#jbossdm.XaDataSource.createOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the create operation. (inherited from: jbossdm.JeeXaDataSource.createScript)
#jbossdm.XaDataSource.createScript=jboss/dm/ds/create-xa-datasource.py
# Create Verb (inherited from: jbossdm.JeeXaDataSource.createVerb)
#jbossdm.XaDataSource.createVerb=Create
# The order of the step in the step list for the destroy operation. (inherited from: jbossdm.JeeXaDataSource.destroyOrder)
#jbossdm.XaDataSource.destroyOrder=40
# Classpath to the script that is uploaded and executed on the generic container for the destroy operation. (inherited from: jbossdm.JeeXaDataSource.destroyScript)
#jbossdm.XaDataSource.destroyScript=jboss/dm/ds/destroy-xa-datasource.py
# Destroy Verb (inherited from: jbossdm.JeeXaDataSource.destroyVerb)
#jbossdm.XaDataSource.destroyVerb=Destroy
# Classpath to the script used to inspect the generic container. (inherited from: jbossdm.JeeXaDataSource.inspectScript)
#jbossdm.XaDataSource.inspectScript=jboss/dm/ds/inspect-xa-datasource.py
# List of python library scripts that should be automatically loaded when using a JBoss CLI script. (inherited from: jbossdm.JeeXaDataSource.libraries)
#jbossdm.XaDataSource.libraries=jboss/dm/ds/datasource-lib.py
# The order of the step in the step list for the modify operation. (inherited from: jbossdm.JeeXaDataSource.modifyOrder)
#jbossdm.XaDataSource.modifyOrder=60
# Classpath to the script that is uploaded and executed on the generic container for the modify operation. (inherited from: jbossdm.JeeXaDataSource.modifyScript)
#jbossdm.XaDataSource.modifyScript=null
# Modify Verb (inherited from: jbossdm.JeeXaDataSource.modifyVerb)
#jbossdm.XaDataSource.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: jbossdm.JeeXaDataSource.noopOrder)
#jbossdm.XaDataSource.noopOrder=50
# Classpath to the script that is uploaded and executed on the generic container for the noop operation. (inherited from: jbossdm.JeeXaDataSource.noopScript)
#jbossdm.XaDataSource.noopScript=null
# Noop Verb (inherited from: jbossdm.JeeXaDataSource.noopVerb)
#jbossdm.XaDataSource.noopVerb=Modify
# The set of CI templates. (inherited from: jbossdm.JeeDataSourceSpec.boundTemplates)
#jbossdm.XaDataSourceSpec.boundTemplates=null
# The set of CI templates. (inherited from: jee.JndiResourceSpec.boundTemplates)
#jee.DataSourceSpec.boundTemplates=null
# The set of CI templates. (inherited from: udm.BaseDeployableArchiveArtifact.boundTemplates)
#jee.Ear.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableArchiveArtifact.delimiters)
#jee.Ear.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableArchiveArtifact.textFileNamesRegex)
#jee.Ear.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of CI templates. (inherited from: udm.BaseDeployableArchiveArtifact.boundTemplates)
#jee.EjbJar.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableArchiveArtifact.delimiters)
#jee.EjbJar.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableArchiveArtifact.textFileNamesRegex)
#jee.EjbJar.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of CI templates. (inherited from: jee.ResourceSpec.boundTemplates)
#jee.JndiResourceSpec.boundTemplates=null
# The set of CI templates. (inherited from: jee.JndiResourceSpec.boundTemplates)
#jee.MailSessionSpec.boundTemplates=null
# The set of CI templates. (inherited from: jee.JndiResourceSpec.boundTemplates)
#jee.QueueConnectionFactorySpec.boundTemplates=null
# The set of CI templates. (inherited from: jee.JndiResourceSpec.boundTemplates)
#jee.QueueSpec.boundTemplates=null
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#jee.ResourceSpec.boundTemplates=null
# The set of CI templates. (inherited from: jee.JndiResourceSpec.boundTemplates)
#jee.TopicConnectionFactorySpec.boundTemplates=null
# The set of CI templates. (inherited from: jee.JndiResourceSpec.boundTemplates)
#jee.TopicSpec.boundTemplates=null
# The set of CI templates. (inherited from: udm.BaseDeployableArchiveArtifact.boundTemplates)
#jee.War.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableArchiveArtifact.delimiters)
#jee.War.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableArchiveArtifact.textFileNamesRegex)
#jee.War.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: k8s.OrderedBaseDeployed.boundConfigurationItems)
#k8s.AbstractPod.boundConfigurationItems=null
# Host networking requested for this Pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. The default is 'false'.
#k8s.AbstractPod.hostNetwork=false
# Number of retries to check if pod is created or deleted.
#k8s.AbstractPod.podCreateDeleteRetryCount=20
# Restart if referenced config map changes.
#k8s.AbstractPod.restartOnConfigMapChanges=false
# Restart policy for all containers within the pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy.
#k8s.AbstractPod.restartPolicy=Always
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#k8s.AbstractPodSpec.boundTemplates=null
# The set of created CIs. (inherited from: udm.BaseDeployedArtifact.boundConfigurationItems)
#k8s.AbstractResources.boundConfigurationItems=null
# Number of bytes to read from the container logs.
#k8s.AbstractResources.bytesToReadFromContainerLogs=4000
# Capture output properties for resources like Ingress
#k8s.AbstractResources.captureOutputProperties=false
# The order of the step in the step list for the create operation.
#k8s.AbstractResources.createOrder=60
# The order of the step in the step list for the destroy operation.
#k8s.AbstractResources.destroyOrder=40
# Log the resource specification while waiting for it to be ready.
#k8s.AbstractResources.displayResourceOnLogs=false
# Merge patch type, see https://kubernetes.io/docs/tasks/run-application/update-api-object-kubectl-patch/#alternate-forms-of-the-kubectl-patch-command
#k8s.AbstractResources.mergePatchType=strategic
# The order of the step in the step list for the modify operation.
#k8s.AbstractResources.modifyOrder=50
# Propagation policy at the moment of deletion, see https://kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/
#k8s.AbstractResources.propagationPolicy=Foreground
# Number of retries until readiness probe check passes. The interval between each try is 5 seconds
#k8s.AbstractResources.readinessProbeRetry=36
# Show the container logs when describing resource. Resource is described at the end of the 'Wait' step.
#k8s.AbstractResources.showContainerLogs=false
# k8s update method; patch updates might not remove certain fields from deployment.
#k8s.AbstractResources.updateMethod=patch
# Check that pods are ready and running after deployment.
#k8s.AbstractResources.validatePodsCreation=true
# Wait Service Load Balancer Ingress
#k8s.AbstractResources.waitServiceLoadBalancerIngress=true
# The set of CI templates. (inherited from: udm.BaseDeployableArtifact.boundTemplates)
#k8s.AbstractResourcesFile.boundTemplates=null
# Number of bytes to read from the container logs. (integer) default(4000)
#k8s.AbstractResourcesFile.bytesToReadFromContainerLogs=4000
# Capture output properties for resources like Ingress (boolean) default(false)
#k8s.AbstractResourcesFile.captureOutputProperties=false
# The order of the step in the step list for the create operation. (integer) default(60)
#k8s.AbstractResourcesFile.createOrder=60
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter
#k8s.AbstractResourcesFile.delimiters={{ }}
# The order of the step in the step list for the destroy operation. (integer) default(40)
#k8s.AbstractResourcesFile.destroyOrder=40
# Log the resource specification while waiting for it to be ready. (boolean) default(false)
#k8s.AbstractResourcesFile.displayResourceOnLogs=false
# Merge patch type, see https://kubernetes.io/docs/tasks/run-application/update-api-object-kubectl-patch/#alternate-forms-of-the-kubectl-patch-command (enum) values(json, merge, strategic) default(strategic)
#k8s.AbstractResourcesFile.mergePatchType=strategic
# The order of the step in the step list for the modify operation. (integer) default(50)
#k8s.AbstractResourcesFile.modifyOrder=50
# Propagation policy at the moment of deletion, see https://kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ (enum) values(Foreground, Background, Orphan) default(Foreground)
#k8s.AbstractResourcesFile.propagationPolicy=Foreground
# Show the container logs when describing resource. Resource is described at the end of the 'Wait' step. (boolean) default(false)
#k8s.AbstractResourcesFile.showContainerLogs=false
# Regular expression that matches file names of text files
#k8s.AbstractResourcesFile.textFileNamesRegex=.+\.( json | yml | yaml )
# k8s update method; patch updates might not remove certain fields from deployment. (enum) values(apply, patch, replace) default(patch)
#k8s.AbstractResourcesFile.updateMethod=patch
# The set of created CIs. (inherited from: udm.BaseDeployedContainer.boundConfigurationItems)
#k8s.BasePodContainer.boundConfigurationItems=null
# The order of the step in the step list for the create operation.
#k8s.BasePodContainer.createOrder=60
# The order of the step in the step list for the destroy operation.
#k8s.BasePodContainer.destroyOrder=40
# The order of the step in the step list for the modify operation.
#k8s.BasePodContainer.modifyOrder=50
# The set of created CIs. (inherited from: k8s.OrderedBaseDeployed.boundConfigurationItems)
#k8s.ConfigMap.boundConfigurationItems=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.EmbeddedDeployableArtifact.delimiters)
#k8s.ConfigMapFileSpec.delimiters={{ }}
# A map that maps regular expressions matching the full path of file(s) in the artifact to character set encodings (inherited from: udm.EmbeddedDeployableArtifact.fileEncodings)
#k8s.ConfigMapFileSpec.fileEncodings=.+\.properties:ISO-8859-1
# Regular expression that matches file names of text files (inherited from: udm.EmbeddedDeployableArtifact.textFileNamesRegex)
#k8s.ConfigMapFileSpec.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.EmbeddedDeployableArtifact.delimiters)
#k8s.ConfigMapFolderSpec.delimiters={{ }}
# A map that maps regular expressions matching the full path of file(s) in the artifact to character set encodings (inherited from: udm.EmbeddedDeployableArtifact.fileEncodings)
#k8s.ConfigMapFolderSpec.fileEncodings=.+\.properties:ISO-8859-1
# Regular expression that matches file names of text files (inherited from: udm.EmbeddedDeployableArtifact.textFileNamesRegex)
#k8s.ConfigMapFolderSpec.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#k8s.ConfigMapSpec.boundTemplates=null
# Pull image policy for all containers. More info: https://kubernetes.io/docs/concepts/containers/images/.
#k8s.Container.imagePullPolicy=IfNotPresent
# Whether to expose the container port as service.
#k8s.ContainerPort.exposeAsService=false
# Protocol for port. Must be UDP or TCP. Defaults to 'TCP'.
#k8s.ContainerPort.protocol=TCP
# Specifies the service type to be created.
#k8s.ContainerPort.serviceType=NodePort
# Minimum consecutive failures for the probe to be considered failed after having succeeded. Minimum value is 1.
#k8s.ContainerProbe.failureThreshold=3
# How often (in seconds) to perform the probe. Minimum value is 1.
#k8s.ContainerProbe.periodSeconds=10
# Type of handler called by kubelet to perform diagnostic.
#k8s.ContainerProbe.probeActionType=null
# Whether it is Readiness probe or Liveness probe
#k8s.ContainerProbe.probeType=null
# Minimum consecutive successes for the probe to be considered successful after having failed. Minimum value is 1.
#k8s.ContainerProbe.successThreshold=1
# Minimum consecutive failures for the probe to be considered failed after having succeeded. Minimum value is 1. (integer) default(3)
#k8s.ContainerProbeSpec.failureThreshold=3
# How often (in seconds) to perform the probe. Minimum value is 1. (integer) default(10)
#k8s.ContainerProbeSpec.periodSeconds=10
# Minimum consecutive successes for the probe to be considered successful after having failed. Minimum value is 1. (integer) default(1)
#k8s.ContainerProbeSpec.successThreshold=1
# Specifies the number of retries before marking this job failed.
#k8s.CronJob.backoffLimit=6
# The set of created CIs. (inherited from: k8s.AbstractPod.boundConfigurationItems)
#k8s.CronJob.boundConfigurationItems=null
# Specifies how to treat concurrent executions of a Job.
#k8s.CronJob.concurrencyPolicy=Allow
# This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.
#k8s.CronJob.suspend=false
# The set of CI templates. (inherited from: k8s.AbstractPodSpec.boundTemplates)
#k8s.CronJobSpec.boundTemplates=null
# Host networking requested for this Pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. The default is 'false'.
#k8s.CronJobSpec.hostNetwork=false
# Specifies the labels for selector match values.
#k8s.CronJobSpec.labels=null
# Number of retries to check if pod is created or deleted.
#k8s.CronJobSpec.podCreateDeleteRetryCount=20
# Pod name after creation.
#k8s.CronJobSpec.podName=podname
# Restart if referenced config map changes.
#k8s.CronJobSpec.restartOnConfigMapChanges=false
# Restart policy for all containers within the pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy.
#k8s.CronJobSpec.restartPolicy=OnFailure
# The set of created CIs. (inherited from: k8s.AbstractPod.boundConfigurationItems)
#k8s.Deployment.boundConfigurationItems=null
# Specifies the deployment to wait for given number of pods to be created.
#k8s.Deployment.minimumPodCount=1
# Specifies the deployment minimum ready time in seconds.
#k8s.Deployment.minimumReadySeconds=0
# Specifies the deployment progress deadline time in seconds.
#k8s.Deployment.progressDeadlineSeconds=600
# Specifies the deployment replica count.
#k8s.Deployment.replicasCount=1
# Specifies the deployment revision history limit.
#k8s.Deployment.revisionHistoryLimit=2
# Specifies the deployment update strategy type.
#k8s.Deployment.strategyType=RollingUpdate
# The set of CI templates. (inherited from: k8s.AbstractPodSpec.boundTemplates)
#k8s.DeploymentSpec.boundTemplates=null
# Pod name after creation.
#k8s.DeploymentSpec.podName=podname
# Type of handler called by kubelet to perform diagnostic.
#k8s.ExecProbe.probeActionType=Exec
# Whether it is Readiness probe or Liveness probe (inherited from: k8s.ContainerProbe.probeType)
#k8s.ExecProbe.probeType=null
# Type of handler called by kubelet to perform diagnostic.
#k8s.HTTPGetProbe.probeActionType=HTTPGet
# Whether it is Readiness probe or Liveness probe (inherited from: k8s.ContainerProbe.probeType)
#k8s.HTTPGetProbe.probeType=null
# Scheme to use for connecting to the host.
#k8s.HTTPGetProbe.scheme=HTTP
# The set of created CIs. (inherited from: k8s.OrderedBaseDeployed.boundConfigurationItems)
#k8s.Ingress.boundConfigurationItems=null
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#k8s.IngressSpec.boundTemplates=null
# Type of handler called by kubelet to perform diagnostic. (inherited from: k8s.ExecProbe.probeActionType)
#k8s.LivenessExecProbe.probeActionType=Exec
# Whether it is Readiness probe or Liveness probe
#k8s.LivenessExecProbe.probeType=Liveness
# Minimum consecutive successes for the probe to be considered successful after having failed. Must be 1 for liveness. Minimum value is 1.
#k8s.LivenessExecProbe.successThreshold=1
# Type of handler called by kubelet to perform diagnostic. (inherited from: k8s.HTTPGetProbe.probeActionType)
#k8s.LivenessHTTPGetProbe.probeActionType=HTTPGet
# Whether it is Readiness probe or Liveness probe
#k8s.LivenessHTTPGetProbe.probeType=Liveness
# Minimum consecutive successes for the probe to be considered successful after having failed. Must be 1 for liveness. Minimum value is 1.
#k8s.LivenessHTTPGetProbe.successThreshold=1
# Type of handler called by kubelet to perform diagnostic. (inherited from: k8s.TCPSocketProbe.probeActionType)
#k8s.LivenessTCPSocketProbe.probeActionType=TCPSocket
# Whether it is Readiness probe or Liveness probe
#k8s.LivenessTCPSocketProbe.probeType=Liveness
# Minimum consecutive successes for the probe to be considered successful after having failed. Must be 1 for liveness. Minimum value is 1.
#k8s.LivenessTCPSocketProbe.successThreshold=1
# Client Factory
#k8s.Master.clientFactory=xld.kubernetes.factories.client_factory.KubernetesClientFactory
# Container Helper
#k8s.Master.containerHelper=xld.kubernetes.k8s_master_helper.K8sMasterHelper
# Dump request/response for troubleshooting purposes.
#k8s.Master.debug=false
# If the k8s cluster is an AWS EKS cluster, fill access key and access secret instead of credentials
#k8s.Master.isEKS=false
# AWS STS enabled region name to use, only needed when k8s cluster is an EKS cluster, defaults to 'us-east-1', leave blank if global STS is used
#k8s.Master.regionName=us-east-1
# Do not verify using TLS/SSL
#k8s.Master.skipTLS=false
# Use global STS endpoint or regional for token generation
#k8s.Master.useGlobal=true
# The set of created CIs. (inherited from: k8s.BasePodContainer.boundConfigurationItems)
#k8s.Namespace.boundConfigurationItems=null
# Container Helper
#k8s.Namespace.containerHelper=xld.kubernetes.namespace.namespace_helper.NamespaceHelper
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#k8s.NamespaceSpec.boundTemplates=null
# The order of the step in the step list for the create operation. (integer) default(60)
#k8s.NamespaceSpec.createOrder=60
# The order of the step in the step list for the destroy operation. (integer) default(40)
#k8s.NamespaceSpec.destroyOrder=40
# The order of the step in the step list for the modify operation. (integer) default(50)
#k8s.NamespaceSpec.modifyOrder=50
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#k8s.OrderedBaseDeployed.boundConfigurationItems=null
# The order of the step in the step list for the create operation.
#k8s.OrderedBaseDeployed.createOrder=60
# The order of the step in the step list for the destroy operation.
#k8s.OrderedBaseDeployed.destroyOrder=40
# The order of the step in the step list for the modify operation.
#k8s.OrderedBaseDeployed.modifyOrder=50
# The set of created CIs. (inherited from: k8s.OrderedBaseDeployed.boundConfigurationItems)
#k8s.PersistentVolume.boundConfigurationItems=null
# Reference to PV Claim
#k8s.PersistentVolume.claimRef=null
#k8s.PersistentVolume.persistentVolumeReclaimPolicy=Retain
# The set of created CIs. (inherited from: k8s.OrderedBaseDeployed.boundConfigurationItems)
#k8s.PersistentVolumeClaim.boundConfigurationItems=null
# Number of retries to check if claim is bound.
#k8s.PersistentVolumeClaim.createRetryCount=10
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#k8s.PersistentVolumeClaimSpec.boundTemplates=null
# Number of retries to check if claim is bound.
#k8s.PersistentVolumeClaimTemplate.createRetryCount=10
# The maximum amount of compute resources allowed.
#k8s.PersistentVolumeClaimTemplate.limits=1Gi
# The minimum amount of compute resources required.
#k8s.PersistentVolumeClaimTemplate.requests=1Gi
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#k8s.PersistentVolumeSpec.boundTemplates=null
# The set of created CIs. (inherited from: k8s.AbstractPod.boundConfigurationItems)
#k8s.Pod.boundConfigurationItems=null
# The set of CI templates. (inherited from: k8s.AbstractPodSpec.boundTemplates)
#k8s.PodSpec.boundTemplates=null
# Type of handler called by kubelet to perform diagnostic. (inherited from: k8s.ExecProbe.probeActionType)
#k8s.ReadinessExecProbe.probeActionType=Exec
# Whether it is Readiness probe or Liveness probe
#k8s.ReadinessExecProbe.probeType=Readiness
# Type of handler called by kubelet to perform diagnostic. (inherited from: k8s.HTTPGetProbe.probeActionType)
#k8s.ReadinessHTTPGetProbe.probeActionType=HTTPGet
# Whether it is Readiness probe or Liveness probe
#k8s.ReadinessHTTPGetProbe.probeType=Readiness
# Type of handler called by kubelet to perform diagnostic. (inherited from: k8s.TCPSocketProbe.probeActionType)
#k8s.ReadinessTCPSocketProbe.probeActionType=TCPSocket
# Whether it is Readiness probe or Liveness probe
#k8s.ReadinessTCPSocketProbe.probeType=Readiness
# The set of created CIs. (inherited from: k8s.AbstractResources.boundConfigurationItems)
#k8s.Resources.boundConfigurationItems=null
# Resource Factory
#k8s.Resources.resourceFactory=xld.kubernetes.resource.factory.K8SResourceFactory
# Resource Wait Time
#k8s.Resources.resourceWaitTime=50
# The set of CI templates. (inherited from: k8s.AbstractResourcesFile.boundTemplates)
#k8s.ResourcesFile.boundTemplates=null
# Regular expression that matches file names of text files (inherited from: k8s.AbstractResourcesFile.textFileNamesRegex)
#k8s.ResourcesFile.textFileNamesRegex=.+\.( json | yml | yaml )
# The set of created CIs. (inherited from: k8s.OrderedBaseDeployed.boundConfigurationItems)
#k8s.Secret.boundConfigurationItems=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.EmbeddedDeployableArtifact.delimiters)
#k8s.SecretFileSpec.delimiters={{ }}
# A map that maps regular expressions matching the full path of file(s) in the artifact to character set encodings (inherited from: udm.EmbeddedDeployableArtifact.fileEncodings)
#k8s.SecretFileSpec.fileEncodings=.+\.properties:ISO-8859-1
# Regular expression that matches file names of text files (inherited from: udm.EmbeddedDeployableArtifact.textFileNamesRegex)
#k8s.SecretFileSpec.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#k8s.SecretSpec.boundTemplates=null
# The set of created CIs. (inherited from: k8s.OrderedBaseDeployed.boundConfigurationItems)
#k8s.Service.boundConfigurationItems=null
# Type determines how the Service is exposed.
#k8s.Service.serviceType=ClusterIP
# Supports TCP and UDP.
#k8s.ServicePort.protocol=TCP
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#k8s.ServiceSpec.boundTemplates=null
# Cluster IP (string)
#k8s.ServiceSpec.outputClusterIP=null
# External IPs (list_of_string)
#k8s.ServiceSpec.outputExternalIPs=null
# Load Balancer IP (string)
#k8s.ServiceSpec.outputLoadBalancerIP=null
# Resource Version (string)
#k8s.ServiceSpec.resourceVersion=null
# The set of created CIs. (inherited from: k8s.AbstractPod.boundConfigurationItems)
#k8s.StatefulSet.boundConfigurationItems=null
# Specifies the StatefulSet to wait for given number of pods to be created.
#k8s.StatefulSet.minimumPodCount=1
# Specifies the ordinal at which the stateful set should be partitioned.
#k8s.StatefulSet.partition=0
# Specifies the StatefulSet pod management policy.
#k8s.StatefulSet.podManagementPolicy=OrderedReady
# Specifies the StatefulSet replica count.
#k8s.StatefulSet.replicasCount=1
# Specifies the StatefulSet revision history limit.
#k8s.StatefulSet.revisionHistoryLimit=2
# Specifies the StatefulSet update strategy type.
#k8s.StatefulSet.strategyType=RollingUpdate
# The set of CI templates. (inherited from: k8s.AbstractPodSpec.boundTemplates)
#k8s.StatefulSetSpec.boundTemplates=null
# Pod name after creation.
#k8s.StatefulSetSpec.podName=podname
# List of volumes that can be mounted by containers belonging to the pod.
#k8s.StatefulSetSpec.volumes=null
# The set of created CIs. (inherited from: k8s.OrderedBaseDeployed.boundConfigurationItems)
#k8s.StorageClass.boundConfigurationItems=null
# The reclaim policy for the dynamically provisioned PersistentVolumes of this class.
#k8s.StorageClass.reclaimPolicy=Delete
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#k8s.StorageClassSpec.boundTemplates=null
# Type of handler called by kubelet to perform diagnostic.
#k8s.TCPSocketProbe.probeActionType=TCPSocket
# Whether it is Readiness probe or Liveness probe (inherited from: k8s.ContainerProbe.probeType)
#k8s.TCPSocketProbe.probeType=null
# Allow encrypted entries for non password properties.
#lookup.SimpleLookupValueProvider.allowEncryptedForNonPassword=false
# SMTP port
#mail.SmtpServer.port=25
# The set of created CIs. (inherited from: k8s.OrderedBaseDeployed.boundConfigurationItems)
#openshift.DeploymentConfig.boundConfigurationItems=null
# Indicates that the deployment config is paused resulting in no new deployments on template changes or changes in the template caused by other triggers.
#openshift.DeploymentConfig.paused=false
# Number of retries until readiness probe check passes. The interval between each try is 5 seconds
#openshift.DeploymentConfig.readinessProbeRetry=36
# Test ensures that this deployment config will have zero replicas except while a deployment is running.
#openshift.DeploymentConfig.test=false
# Check that pods are ready and running after deployment.
#openshift.DeploymentConfig.validatePodsCreation=true
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#openshift.DeploymentConfigSpec.boundTemplates=null
# Automatic means that the detection of a new tag value should result in an image update inside the pod template.
#openshift.DeploymentTriggerPolicy.automatic=false
# The set of created CIs. (inherited from: k8s.OrderedBaseDeployed.boundConfigurationItems)
#openshift.ImageStream.boundConfigurationItems=null
# Validate certificates?
#openshift.ImageStream.verifyCertificates=false
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#openshift.ImageStreamSpec.boundTemplates=null
# The order of the step in the step list for the create operation. (integer) default(60)
#openshift.ImageStreamSpec.createOrder=60
# The order of the step in the step list for the destroy operation. (integer) default(40)
#openshift.ImageStreamSpec.destroyOrder=40
# The order of the step in the step list for the modify operation. (integer) default(50)
#openshift.ImageStreamSpec.modifyOrder=50
# Validate certificates? (boolean) default(false)
#openshift.ImageStreamSpec.verifyCertificates=false
# The set of created CIs. (inherited from: k8s.BasePodContainer.boundConfigurationItems)
#openshift.Project.boundConfigurationItems=null
# Container Helper
#openshift.Project.containerHelper=xld.openshift.project.helper.ProjectHelper
# The set of CI templates. (inherited from: udm.BaseDeployableContainer.boundTemplates)
#openshift.ProjectSpec.boundTemplates=null
# The order of the step in the step list for the create operation. (integer) default(60)
#openshift.ProjectSpec.createOrder=60
# The order of the step in the step list for the destroy operation. (integer) default(40)
#openshift.ProjectSpec.destroyOrder=40
# The order of the step in the step list for the modify operation. (integer) default(50)
#openshift.ProjectSpec.modifyOrder=50
# The set of created CIs. (inherited from: k8s.AbstractResources.boundConfigurationItems)
#openshift.Resources.boundConfigurationItems=null
# Resource Factory
#openshift.Resources.resourceFactory=xld.openshift.resource.factory.OpenShiftResourceFactory
# Resource Wait Time
#openshift.Resources.resourceWaitTime=50
# The set of CI templates. (inherited from: k8s.AbstractResourcesFile.boundTemplates)
#openshift.ResourcesFile.boundTemplates=null
# Regular expression that matches file names of text files (inherited from: k8s.AbstractResourcesFile.textFileNamesRegex)
#openshift.ResourcesFile.textFileNamesRegex=.+\.( json | yml | yaml )
# The set of created CIs. (inherited from: k8s.OrderedBaseDeployed.boundConfigurationItems)
#openshift.Route.boundConfigurationItems=null
# Primary service weight determines the relative traffic to be routed to this service.
#openshift.Route.serviceWeight=256
# Termination type specifies how the TLS termination occurs.
#openshift.Route.terminationType=None
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#openshift.RouteSpec.boundTemplates=null
# The order of the step in the step list for the create operation. (integer) default(60)
#openshift.RouteSpec.createOrder=60
# The order of the step in the step list for the destroy operation. (integer) default(40)
#openshift.RouteSpec.destroyOrder=40
# The order of the step in the step list for the modify operation. (integer) default(50)
#openshift.RouteSpec.modifyOrder=50
# Primary service weight determines the relative traffic to be routed to this service. (integer) default(256)
#openshift.RouteSpec.serviceWeight=256
# Termination type specifies how the TLS termination occurs. (enum) values(None, Edge, Passthrough, ReEncrypt) default(None)
#openshift.RouteSpec.terminationType=None
# Client Factory
#openshift.Server.clientFactory=xld.openshift.factories.client_factory.OpenShiftClientFactory
# Container Helper
#openshift.Server.containerHelper=xld.openshift.server_helper.ServerHelper
# Dump request/response for troubleshooting purposes.
#openshift.Server.debug=false
# Validate certificates?
#openshift.Server.verifyCertificates=true
# The set of created CIs. (inherited from: openshift.Resources.boundConfigurationItems)
#openshift.TemplateResources.boundConfigurationItems=null
# Resource Factory (inherited from: openshift.Resources.resourceFactory)
#openshift.TemplateResources.resourceFactory=xld.openshift.resource.factory.OpenShiftResourceFactory
# Resource Wait Time (inherited from: openshift.Resources.resourceWaitTime)
#openshift.TemplateResources.resourceWaitTime=50
# The set of CI templates. (inherited from: openshift.ResourcesFile.boundTemplates)
#openshift.TemplateResourcesFile.boundTemplates=null
# Json (string)
#openshift.TemplateResourcesFile.json=null
# Regular expression that matches file names of text files (inherited from: openshift.ResourcesFile.textFileNamesRegex)
#openshift.TemplateResourcesFile.textFileNamesRegex=.+\.( json | yml | yaml )
# Number of milliseconds Overthere waits for a connection to a remote host to be established (inherited from: overthere.RemoteHost.connectionTimeoutMillis)
#overthere.BaseSmbHost.connectionTimeoutMillis=120000
# Type of CIFS connection to create
#overthere.BaseSmbHost.connectionType=WINRM_INTERNAL
# Operating system the host runs
#overthere.BaseSmbHost.os=WINDOWS
# Protocol to use when connecting to this host (inherited from: overthere.RemoteHost.protocol)
#overthere.BaseSmbHost.protocol=null
# Executable shell program (inherited from: overthere.RemoteHost.shell)
#overthere.BaseSmbHost.shell=null
# If true, delete the temporary connection directory when the connection is closed (inherited from: overthere.RemoteHost.tmpDeleteOnDisconnect)
#overthere.BaseSmbHost.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: overthere.RemoteHost.tmpFileCreationRetries)
#overthere.BaseSmbHost.tmpFileCreationRetries=1000
# Context used by the WinRM server (WINRM only)
#overthere.BaseSmbHost.winrmContext=/wsman
# Enable SSL communication to the WinRM server
#overthere.BaseSmbHost.winrmEnableHttps=false
# Envelop size for WinRM messages (WINRM only)
#overthere.BaseSmbHost.winrmEnvelopSize=153600
# HTTPS certifiacte trust strategy for WinRM over HTTPS (WINRM_INTERNAL only)
#overthere.BaseSmbHost.winrmHttpsCertificateTrustStrategy=STRICT
# HTTPS host name verification strategy for WinRM over HTTPS (WINRM_INTERNAL only)
#overthere.BaseSmbHost.winrmHttpsHostnameVerificationStrategy=STRICT
# Add the port number (e.g. 5985) to the service principal name (SPN) for which a Kerberos ticket is requested (WINRM_INTERNAL only)
#overthere.BaseSmbHost.winrmKerberosAddPortToSpn=false
# Enable Kerberos debug messages (WINRM only)
#overthere.BaseSmbHost.winrmKerberosDebug=false
# Use the HTTP protocol in the service principal name (SPN) for which a Kerberos ticket is requested, instead of the default WSMAN protocol (WINRM_INTERNAL only)
#overthere.BaseSmbHost.winrmKerberosUseHttpSpn=false
# Locale to use for WinRM messages (WINRM only)
#overthere.BaseSmbHost.winrmLocale=en-US
# Timeout to use for WinRM messages in XML schema duration format
#overthere.BaseSmbHost.winrmTimeout=PT60.000S
# Specifies that the user's credentials can be used to access a remote share, for example, found on a different machine than the target endpoint (WINRM_NATIVE only)
#overthere.BaseSmbHost.winrsAllowDelegate=false
# Turn on compression. Older installations on remote machines may not support compression so it is off by default (WINRM_NATIVE only)
#overthere.BaseSmbHost.winrsCompression=false
# Specifies that echo should be disabled. This may be necessary to ensure that user's answers to remote prompts are not displayed locally (WINRM_NATIVE only)
#overthere.BaseSmbHost.winrsNoecho=false
# Specifies that the user's profile should not be loaded. By default the server will attempt to load the user profile. If the remote user is not a local administrator on the target system then this option will be required (the default willresult in error) (WINRM_NATIVE only)
#overthere.BaseSmbHost.winrsNoprofile=false
# Disable encryption. Requires the remote host to have been configured to allow that (WINRM_NATIVE only)
#overthere.BaseSmbHost.winrsUnencrypted=false
# Port on which the CIFS server runs
#overthere.CifsHost.cifsPort=445
# Number of milliseconds Overthere waits for a connection to a remote host to be established (inherited from: overthere.BaseSmbHost.connectionTimeoutMillis)
#overthere.CifsHost.connectionTimeoutMillis=120000
# Protocol to use when connecting to this host
#overthere.CifsHost.protocol=cifs
# Executable shell program (inherited from: overthere.BaseSmbHost.shell)
#overthere.CifsHost.shell=null
# If true, delete the temporary connection directory when the connection is closed (inherited from: overthere.BaseSmbHost.tmpDeleteOnDisconnect)
#overthere.CifsHost.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: overthere.BaseSmbHost.tmpFileCreationRetries)
#overthere.CifsHost.tmpFileCreationRetries=1000
# Context used by the WinRM server (WINRM only) (inherited from: overthere.BaseSmbHost.winrmContext)
#overthere.CifsHost.winrmContext=/wsman
# Envelop size for WinRM messages (WINRM only) (inherited from: overthere.BaseSmbHost.winrmEnvelopSize)
#overthere.CifsHost.winrmEnvelopSize=153600
# HTTPS certifiacte trust strategy for WinRM over HTTPS (WINRM_INTERNAL only) (inherited from: overthere.BaseSmbHost.winrmHttpsCertificateTrustStrategy)
#overthere.CifsHost.winrmHttpsCertificateTrustStrategy=STRICT
# HTTPS host name verification strategy for WinRM over HTTPS (WINRM_INTERNAL only) (inherited from: overthere.BaseSmbHost.winrmHttpsHostnameVerificationStrategy)
#overthere.CifsHost.winrmHttpsHostnameVerificationStrategy=STRICT
# Add the port number (e.g. 5985) to the service principal name (SPN) for which a Kerberos ticket is requested (WINRM_INTERNAL only) (inherited from: overthere.BaseSmbHost.winrmKerberosAddPortToSpn)
#overthere.CifsHost.winrmKerberosAddPortToSpn=false
# Enable Kerberos debug messages (WINRM only) (inherited from: overthere.BaseSmbHost.winrmKerberosDebug)
#overthere.CifsHost.winrmKerberosDebug=false
# Use the HTTP protocol in the service principal name (SPN) for which a Kerberos ticket is requested, instead of the default WSMAN protocol (WINRM_INTERNAL only) (inherited from: overthere.BaseSmbHost.winrmKerberosUseHttpSpn)
#overthere.CifsHost.winrmKerberosUseHttpSpn=false
# Locale to use for WinRM messages (WINRM only) (inherited from: overthere.BaseSmbHost.winrmLocale)
#overthere.CifsHost.winrmLocale=en-US
# Timeout to use for WinRM messages in XML schema duration format (inherited from: overthere.BaseSmbHost.winrmTimeout)
#overthere.CifsHost.winrmTimeout=PT60.000S
# Turn on compression. Older installations on remote machines may not support compression so it is off by default (WINRM_NATIVE only) (inherited from: overthere.BaseSmbHost.winrsCompression)
#overthere.CifsHost.winrsCompression=false
# Specifies that echo should be disabled. This may be necessary to ensure that user's answers to remote prompts are not displayed locally (WINRM_NATIVE only) (inherited from: overthere.BaseSmbHost.winrsNoecho)
#overthere.CifsHost.winrsNoecho=false
# Specifies that the user's profile should not be loaded. By default the server will attempt to load the user profile. If the remote user is not a local administrator on the target system then this option will be required (the default willresult in error) (WINRM_NATIVE only) (inherited from: overthere.BaseSmbHost.winrsNoprofile)
#overthere.CifsHost.winrsNoprofile=false
# Disable encryption. Requires the remote host to have been configured to allow that (WINRM_NATIVE only) (inherited from: overthere.BaseSmbHost.winrsUnencrypted)
#overthere.CifsHost.winrsUnencrypted=false
# Protocol to use when connecting to this host
#overthere.Host.protocol=null
# Puppet binary directory path. For example, /usr/local/bin
#overthere.Host.puppetPath=/usr/local/bin
# Executable shell program
#overthere.Host.shell=null
# If true, delete the temporary connection directory when the connection is closed
#overthere.Host.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name
#overthere.Host.tmpFileCreationRetries=1000
# Number of milliseconds Overthere waits for a connection to a remote host to be established (inherited from: overthere.Jumpstation.connectionTimeoutMillis)
#overthere.HttpProxy.connectionTimeoutMillis=120000
# Jumpstations and proxies are assumed to run on UNIX. XLD won't access files or run commmands on them anyway (inherited from: overthere.Jumpstation.os)
#overthere.HttpProxy.os=UNIX
# Port on which the proxy server runs
#overthere.HttpProxy.port=8080
# Protocol to use when connecting to this host
#overthere.HttpProxy.protocol=proxy
# Proxy Type
#overthere.HttpProxy.proxyType=HTTP
# Executable shell program (inherited from: overthere.Jumpstation.shell)
#overthere.HttpProxy.shell=null
# Temporary directory is not needed for jumpstations and proxies (inherited from: overthere.Jumpstation.temporaryDirectoryPath)
#overthere.HttpProxy.temporaryDirectoryPath=null
# If true, delete the temporary connection directory when the connection is closed (inherited from: overthere.Jumpstation.tmpDeleteOnDisconnect)
#overthere.HttpProxy.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: overthere.Jumpstation.tmpFileCreationRetries)
#overthere.HttpProxy.tmpFileCreationRetries=1000
# Number of milliseconds Overthere waits for a connection to a remote host to be established
#overthere.Jumpstation.connectionTimeoutMillis=120000
# Jumpstations and proxies are assumed to run on UNIX. XLD won't access files or run commmands on them anyway
#overthere.Jumpstation.os=UNIX
# Protocol to use when connecting to this host (inherited from: overthere.Host.protocol)
#overthere.Jumpstation.protocol=null
# Executable shell program (inherited from: overthere.Host.shell)
#overthere.Jumpstation.shell=null
# Temporary directory is not needed for jumpstations and proxies
#overthere.Jumpstation.temporaryDirectoryPath=null
# If true, delete the temporary connection directory when the connection is closed (inherited from: overthere.Host.tmpDeleteOnDisconnect)
#overthere.Jumpstation.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: overthere.Host.tmpFileCreationRetries)
#overthere.Jumpstation.tmpFileCreationRetries=1000
# Protocol to use when connecting to this host
#overthere.LocalHost.protocol=local
# Executable shell program (inherited from: overthere.Host.shell)
#overthere.LocalHost.shell=null
# If true, delete the temporary connection directory when the connection is closed (inherited from: overthere.Host.tmpDeleteOnDisconnect)
#overthere.LocalHost.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: overthere.Host.tmpFileCreationRetries)
#overthere.LocalHost.tmpFileCreationRetries=1000
# Number of milliseconds Overthere waits for a connection to a remote host to be established
#overthere.RemoteHost.connectionTimeoutMillis=120000
# Protocol to use when connecting to this host (inherited from: overthere.Host.protocol)
#overthere.RemoteHost.protocol=null
# Executable shell program (inherited from: overthere.Host.shell)
#overthere.RemoteHost.shell=null
# If true, delete the temporary connection directory when the connection is closed (inherited from: overthere.Host.tmpDeleteOnDisconnect)
#overthere.RemoteHost.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: overthere.Host.tmpFileCreationRetries)
#overthere.RemoteHost.tmpFileCreationRetries=1000
# Number of milliseconds Overthere waits for a connection to a remote host to be established (inherited from: overthere.BaseSmbHost.connectionTimeoutMillis)
#overthere.SmbHost.connectionTimeoutMillis=120000
# Protocol to use when connecting to this host
#overthere.SmbHost.protocol=smb
# Executable shell program (inherited from: overthere.BaseSmbHost.shell)
#overthere.SmbHost.shell=null
# Port on which the SMB2 server runs
#overthere.SmbHost.smbPort=445
# If true, delete the temporary connection directory when the connection is closed (inherited from: overthere.BaseSmbHost.tmpDeleteOnDisconnect)
#overthere.SmbHost.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: overthere.BaseSmbHost.tmpFileCreationRetries)
#overthere.SmbHost.tmpFileCreationRetries=1000
# Context used by the WinRM server (WINRM only) (inherited from: overthere.BaseSmbHost.winrmContext)
#overthere.SmbHost.winrmContext=/wsman
# Envelop size for WinRM messages (WINRM only) (inherited from: overthere.BaseSmbHost.winrmEnvelopSize)
#overthere.SmbHost.winrmEnvelopSize=153600
# HTTPS certifiacte trust strategy for WinRM over HTTPS (WINRM_INTERNAL only) (inherited from: overthere.BaseSmbHost.winrmHttpsCertificateTrustStrategy)
#overthere.SmbHost.winrmHttpsCertificateTrustStrategy=STRICT
# HTTPS host name verification strategy for WinRM over HTTPS (WINRM_INTERNAL only) (inherited from: overthere.BaseSmbHost.winrmHttpsHostnameVerificationStrategy)
#overthere.SmbHost.winrmHttpsHostnameVerificationStrategy=STRICT
# Add the port number (e.g. 5985) to the service principal name (SPN) for which a Kerberos ticket is requested (WINRM_INTERNAL only) (inherited from: overthere.BaseSmbHost.winrmKerberosAddPortToSpn)
#overthere.SmbHost.winrmKerberosAddPortToSpn=false
# Enable Kerberos debug messages (WINRM only) (inherited from: overthere.BaseSmbHost.winrmKerberosDebug)
#overthere.SmbHost.winrmKerberosDebug=false
# Use the HTTP protocol in the service principal name (SPN) for which a Kerberos ticket is requested, instead of the default WSMAN protocol (WINRM_INTERNAL only) (inherited from: overthere.BaseSmbHost.winrmKerberosUseHttpSpn)
#overthere.SmbHost.winrmKerberosUseHttpSpn=false
# Locale to use for WinRM messages (WINRM only) (inherited from: overthere.BaseSmbHost.winrmLocale)
#overthere.SmbHost.winrmLocale=en-US
# Timeout to use for WinRM messages in XML schema duration format (inherited from: overthere.BaseSmbHost.winrmTimeout)
#overthere.SmbHost.winrmTimeout=PT60.000S
# Turn on compression. Older installations on remote machines may not support compression so it is off by default (WINRM_NATIVE only) (inherited from: overthere.BaseSmbHost.winrsCompression)
#overthere.SmbHost.winrsCompression=false
# Specifies that echo should be disabled. This may be necessary to ensure that user's answers to remote prompts are not displayed locally (WINRM_NATIVE only) (inherited from: overthere.BaseSmbHost.winrsNoecho)
#overthere.SmbHost.winrsNoecho=false
# Specifies that the user's profile should not be loaded. By default the server will attempt to load the user profile. If the remote user is not a local administrator on the target system then this option will be required (the default willresult in error) (WINRM_NATIVE only) (inherited from: overthere.BaseSmbHost.winrsNoprofile)
#overthere.SmbHost.winrsNoprofile=false
# Disable encryption. Requires the remote host to have been configured to allow that (WINRM_NATIVE only) (inherited from: overthere.BaseSmbHost.winrsUnencrypted)
#overthere.SmbHost.winrsUnencrypted=false
# If true, a default PTY (dummy:80:24:0:0) is allocated when executing a command
#overthere.SshHost.allocateDefaultPty=false
# Specification for the PTY to be allocated when executing a command. The format is TERM:COLS:ROWS:WIDTH:HEIGHT, e.g. xterm:80:24:0:0
#overthere.SshHost.allocatePty=null
# Number of milliseconds Overthere waits for a connection to a remote host to be established (inherited from: overthere.RemoteHost.connectionTimeoutMillis)
#overthere.SshHost.connectionTimeoutMillis=120000
# Type of SSH connection to create
#overthere.SshHost.connectionType=SFTP
# Regular expression to look for in keyboard-interactive authentication before sending the password
#overthere.SshHost.interactiveKeyboardAuthRegex=.*Password:[ ]?
# Port on which the SSH server runs
#overthere.SshHost.port=22
# Protocol to use when connecting to this host
#overthere.SshHost.protocol=ssh
# Executable shell program (inherited from: overthere.RemoteHost.shell)
#overthere.SshHost.shell=null
# Su command to prefix to the original command. The placeholder {0} is replaced with the sudoUsername
#overthere.SshHost.suCommandPrefix=su - {0} -c
# If true, permissions are explicitly changed with chmod -R go+rX after uploading a file or directory
#overthere.SshHost.suOverrideUmask=true
# Regular expression to look for before sending the password
#overthere.SshHost.suPasswordPromptRegex=.*[Pp]assword.*:
# If true, files are copied from the connection temporary directory using the -p flag to the cp command
#overthere.SshHost.suPreserveAttributesOnCopyFromTempFile=true
# If true, files are copied to the connection temporary directory using the -p flag to the cp command
#overthere.SshHost.suPreserveAttributesOnCopyToTempFile=true
# If true, the original command is quoted when it is prefixed with suCommandPrefix
#overthere.SshHost.suQuoteCommand=true
# Sudo command to prefix to the original command. The placeholder {0} is replaced with the sudoUsername
#overthere.SshHost.sudoCommandPrefix=sudo -u {0}
# If true, permissions are explicitly changed with chmod -R go+rX after uploading a file or directory
#overthere.SshHost.sudoOverrideUmask=true
# Regular expression to look for in interactive sudo before sending the password
#overthere.SshHost.sudoPasswordPromptRegex=.*[Pp]assword.*:
# If true, files are copied from the connection temporary directory using the -p flag to the cp command
#overthere.SshHost.sudoPreserveAttributesOnCopyFromTempFile=true
# If true, files are copied to the connection temporary directory using the -p flag to the cp command
#overthere.SshHost.sudoPreserveAttributesOnCopyToTempFile=true
# If true, the original command is quoted when it is prefixed with sudoCommandPrefix
#overthere.SshHost.sudoQuoteCommand=false
# If true, delete the temporary connection directory when the connection is closed (inherited from: overthere.RemoteHost.tmpDeleteOnDisconnect)
#overthere.SshHost.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: overthere.RemoteHost.tmpFileCreationRetries)
#overthere.SshHost.tmpFileCreationRetries=1000
# Number of milliseconds Overthere waits for a connection to a remote host to be established (inherited from: overthere.Jumpstation.connectionTimeoutMillis)
#overthere.SshJumpstation.connectionTimeoutMillis=120000
# Regular expression to look for in keyboard-interactive authentication before sending the password
#overthere.SshJumpstation.interactiveKeyboardAuthRegex=.*Password:[ ]?
# Jumpstations and proxies are assumed to run on UNIX. XLD won't access files or run commmands on them anyway (inherited from: overthere.Jumpstation.os)
#overthere.SshJumpstation.os=UNIX
# Port on which the SSH server runs
#overthere.SshJumpstation.port=22
# Port from where to start looking for freely available ports to use as the local part of an SSH port forward
#overthere.SshJumpstation.portAllocationRangeStart=1025
# Protocol to use when connecting to this host
#overthere.SshJumpstation.protocol=ssh-jumpstation
# Executable shell program (inherited from: overthere.Jumpstation.shell)
#overthere.SshJumpstation.shell=null
# Temporary directory is not needed for jumpstations and proxies (inherited from: overthere.Jumpstation.temporaryDirectoryPath)
#overthere.SshJumpstation.temporaryDirectoryPath=null
# If true, delete the temporary connection directory when the connection is closed (inherited from: overthere.Jumpstation.tmpDeleteOnDisconnect)
#overthere.SshJumpstation.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: overthere.Jumpstation.tmpFileCreationRetries)
#overthere.SshJumpstation.tmpFileCreationRetries=1000
# If true, a default PTY (dummy:80:24:0:0) is allocated when executing a command
#overthere.gcp.MetadataSshHost.allocateDefaultPty=false
# Specification for the PTY to be allocated when executing a command. The format is TERM:COLS:ROWS:WIDTH:HEIGHT, e.g. xterm:80:24:0:0
#overthere.gcp.MetadataSshHost.allocatePty=null
# Number of milliseconds Overthere waits for a connection to a remote host to be established (inherited from: overthere.RemoteHost.connectionTimeoutMillis)
#overthere.gcp.MetadataSshHost.connectionTimeoutMillis=120000
# Type of SSH connection to create
#overthere.gcp.MetadataSshHost.connectionType=SFTP
# Gcp Key Management Type
#overthere.gcp.MetadataSshHost.gcpKeyManagementType=Metadata
# Port on which the SSH server runs
#overthere.gcp.MetadataSshHost.port=22
# Protocol to use when connecting to this host
#overthere.gcp.MetadataSshHost.protocol=gcp_ssh
# Executable shell program (inherited from: overthere.RemoteHost.shell)
#overthere.gcp.MetadataSshHost.shell=null
# If true, delete the temporary connection directory when the connection is closed (inherited from: overthere.RemoteHost.tmpDeleteOnDisconnect)
#overthere.gcp.MetadataSshHost.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: overthere.RemoteHost.tmpFileCreationRetries)
#overthere.gcp.MetadataSshHost.tmpFileCreationRetries=1000
# If true, a default PTY (dummy:80:24:0:0) is allocated when executing a command
#overthere.gcp.OsLoginSshHost.allocateDefaultPty=false
# Specification for the PTY to be allocated when executing a command. The format is TERM:COLS:ROWS:WIDTH:HEIGHT, e.g. xterm:80:24:0:0
#overthere.gcp.OsLoginSshHost.allocatePty=null
# Number of milliseconds Overthere waits for a connection to a remote host to be established (inherited from: overthere.RemoteHost.connectionTimeoutMillis)
#overthere.gcp.OsLoginSshHost.connectionTimeoutMillis=120000
# Type of SSH connection to create
#overthere.gcp.OsLoginSshHost.connectionType=SFTP
# Gcp Key Management Type
#overthere.gcp.OsLoginSshHost.gcpKeyManagementType=OsLogin
# Port on which the SSH server runs
#overthere.gcp.OsLoginSshHost.port=22
# Protocol to use when connecting to this host
#overthere.gcp.OsLoginSshHost.protocol=gcp_ssh
# Executable shell program (inherited from: overthere.RemoteHost.shell)
#overthere.gcp.OsLoginSshHost.shell=null
# If true, delete the temporary connection directory when the connection is closed (inherited from: overthere.RemoteHost.tmpDeleteOnDisconnect)
#overthere.gcp.OsLoginSshHost.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: overthere.RemoteHost.tmpFileCreationRetries)
#overthere.gcp.OsLoginSshHost.tmpFileCreationRetries=1000
# The JSON activation entries as JSON Array
#patch.JsonPatchDictionary.activators=
# The type of the sample
#patch.JsonPatchDictionary.customFileType=JSON
# The text of the sample
#patch.JsonPatchDictionary.customSample=
# Regular expression to identify which types of files the patch entries will be applied to
#patch.JsonPatchDictionary.jsonFileRegex=.+\.(json)
# The patch entries that have been created
#patch.JsonPatchDictionary.patches=
# Selected artifact for creating patches and/or activators
#patch.JsonPatchDictionary.selectedArtifact=
# Selected YAML document for creating patches and/or activators
#patch.JsonPatchDictionary.selectedDocument=
# The source of the sample that will be provided for patching
#patch.JsonPatchDictionary.sourceType=Packages
# Regular expression to identify which types of files the patch entries will be applied to
#patch.JsonPatchDictionary.yamlFileRegex=.+\.(yaml|yml)
# Activation by filename (Regex)
#patch.RegexPatchDictionary.activationFileRegex=.*
# The Regex patch
#patch.RegexPatchDictionary.regex=
# The substitution
#patch.RegexPatchDictionary.substitution=
# Optional map of parameters to pass to the steps (inherited from: schedule.StepJob.controlTaskParams)
#policy.JythonStepJob.controlTaskParams=null
# Optional map of parameters to pass to the steps (inherited from: policy.JythonStepJob.controlTaskParams)
#policy.PackageRetentionPolicy.controlTaskParams=null
# Description of this step, as it should appear in generated deployment plans
#policy.PackageRetentionPolicy.description=Execute package removal job according to policy
# Execute the policy without removing packages.
#policy.PackageRetentionPolicy.dryRun=false
# Policy Type
#policy.PackageRetentionPolicy.policyType=LAST_N_ALL_ENV
# Specify the daily crontab schedule to execute this policy. The pattern is a list of six fields separated by a single space. The fields represent the second, minute, hour, day, month, and weekday. Month and weekday names can be entered as the first three letters of the English names. Example patterns: '0 0 * * * *' = the top of every hour of every day, '0 0 14 * * SAT,SUN' = 14 o'clock on each weekend day, '0 0 9-17 * * MON-FRI' = on the hour nine-to-five weekdays, '0 0 0 1 * *' = every 1st of month at midnight.
#policy.PackageRetentionPolicy.schedule=0 0 18 * * *
# Path to the Python script to execute (relative to XL Deploy's classpath)
#policy.PackageRetentionPolicy.scriptPath=policy/scripts/purge-packages.py
# Optional map of parameters to pass to the steps (inherited from: policy.JythonStepJob.controlTaskParams)
#policy.TaskArchivePolicy.controlTaskParams=null
# Description of this step, as it should appear in generated deployment plans
#policy.TaskArchivePolicy.description=Execute task archiving job according to policy
# Execute the policy without archiving tasks.
#policy.TaskArchivePolicy.dryRun=false
# Policy should be applied to executed tasks.
#policy.TaskArchivePolicy.includeExecutedTasks=true
# Policy should be applied to failed tasks.
#policy.TaskArchivePolicy.includeFailedTasks=true
# Specify the daily crontab schedule to execute this policy. The pattern is a list of six fields separated by a single space. The fields represent the second, minute, hour, day, month, and weekday. Month and weekday names can be entered as the first three letters of the English names. Example patterns: '0 0 * * * *' = the top of every hour of every day, '0 0 14 * * SAT,SUN' = 14 o'clock on each weekend day, '0 0 9-17 * * MON-FRI' = on the hour nine-to-five weekdays, '0 0 0 1 * *' = every 1st of month at midnight.
#policy.TaskArchivePolicy.schedule=0 30 18 * * *
# Path to the Python script to execute (relative to XL Deploy's classpath)
#policy.TaskArchivePolicy.scriptPath=policy/scripts/archive-tasks.py
# Path of the exported ZIP file. The property accepts ${ } placeholders where valid keys are CI properties with 'execDate' and 'execTime'added. For example: export/task_export_${execDate}_${execTime}.zip.
#policy.TaskRetentionPolicy.archivePath=export/task_export_${execDate}_${execTime}.zip
# Optional map of parameters to pass to the steps (inherited from: policy.JythonStepJob.controlTaskParams)
#policy.TaskRetentionPolicy.controlTaskParams=null
# Description of this step, as it should appear in generated deployment plans
#policy.TaskRetentionPolicy.description=Execute task removal job according to policy
# Execute the policy without removing tasks.
#policy.TaskRetentionPolicy.dryRun=false
# Tasks will be exported to a ZIP file before being purged from the repository.
#policy.TaskRetentionPolicy.exportTasks=true
# Specify the daily crontab schedule to execute this policy. The pattern is a list of six fields separated by a single space. The fields represent the second, minute, hour, day, month, and weekday. Month and weekday names can be entered as the first three letters of the English names. Example patterns: '0 0 * * * *' = the top of every hour of every day, '0 0 14 * * SAT,SUN' = 14 o'clock on each weekend day, '0 0 9-17 * * MON-FRI' = on the hour nine-to-five weekdays, '0 0 0 1 * *' = every 1st of month at midnight.
#policy.TaskRetentionPolicy.schedule=0 30 18 * * *
# Path to the Python script to execute (relative to XL Deploy's classpath)
#policy.TaskRetentionPolicy.scriptPath=policy/scripts/purge-tasks.py
# If set to true, multiple steps at the same order will be batched together in one batch to improve performance over high-latency WinRM connections
#powershell.BaseExtensiblePowerShellDeployed.batchSteps=false
# The set of created CIs. (inherited from: powershell.BasePowerShellDeployed.boundConfigurationItems)
#powershell.BaseExtensiblePowerShellDeployed.boundConfigurationItems=null
# Additional classpath resources that should be uploaded to the working directory before executing the script. (inherited from: powershell.BasePowerShellDeployed.classpathResources)
#powershell.BaseExtensiblePowerShellDeployed.classpathResources=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed).
#powershell.BaseExtensiblePowerShellDeployed.createOptions=uploadArtifactData,uploadClasspathResources
# Order at which the create step will be executed.
#powershell.BaseExtensiblePowerShellDeployed.createOrder=60
# PowerShell script invoked to create a resource (or deploy an artifact) on Windows.
#powershell.BaseExtensiblePowerShellDeployed.createScript=null
# Verb that is used to prefix the description for the create step.
#powershell.BaseExtensiblePowerShellDeployed.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed).
#powershell.BaseExtensiblePowerShellDeployed.destroyOptions=uploadClasspathResources
# Order at which the destroy step will be executed.
#powershell.BaseExtensiblePowerShellDeployed.destroyOrder=40
# PowerShell script invoked to destroy a resource (or undeploy an artifact) on Windows.
#powershell.BaseExtensiblePowerShellDeployed.destroyScript=null
# Verb that is used to prefix the description for the destroy step.
#powershell.BaseExtensiblePowerShellDeployed.destroyVerb=Destroy
# Order at which the discover step will be executed. (inherited from: powershell.BasePowerShellDeployed.discoverOrder)
#powershell.BaseExtensiblePowerShellDeployed.discoverOrder=50
# Script invoked to discover and inspect deployeds of this type. (inherited from: powershell.BasePowerShellDeployed.discoverScript)
#powershell.BaseExtensiblePowerShellDeployed.discoverScript=null
# Whether to add the host password to the powershell variable values. (inherited from: powershell.BasePowerShellDeployed.exposePasswordPropertiesOnHosts)
#powershell.BaseExtensiblePowerShellDeployed.exposePasswordPropertiesOnHosts=false
# List of scripts to append to the the step script. (inherited from: powershell.BasePowerShellDeployed.libraryScripts)
#powershell.BaseExtensiblePowerShellDeployed.libraryScripts=null
# Maximum number of steps in a batch.
#powershell.BaseExtensiblePowerShellDeployed.maxBatchSize=100
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed).
#powershell.BaseExtensiblePowerShellDeployed.modifyOptions=uploadArtifactData,uploadClasspathResources
# Order at which the modify step will be executed.
#powershell.BaseExtensiblePowerShellDeployed.modifyOrder=60
# PowerShell script invoked to modify a resource (or an artifact) on Windows.
#powershell.BaseExtensiblePowerShellDeployed.modifyScript=null
# Verb that is used to prefix the description for the modify step.
#powershell.BaseExtensiblePowerShellDeployed.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed).
#powershell.BaseExtensiblePowerShellDeployed.noopOptions=uploadClasspathResources
# Order at which the noop step will be executed.
#powershell.BaseExtensiblePowerShellDeployed.noopOrder=50
# PowerShell script invoked to noop a resource or an artifact on Windows.
#powershell.BaseExtensiblePowerShellDeployed.noopScript=null
# Verb that is used to prefix the description for the noop step.
#powershell.BaseExtensiblePowerShellDeployed.noopVerb=Noop
# If set to true, the start script will be executed if this deployed is being created.
#powershell.BaseExtensiblePowerShellDeployed.startOnCreate=true
# Options for the start step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed).
#powershell.BaseExtensiblePowerShellDeployed.startOptions=uploadClasspathResources
# Order at which the start step will be executed.
#powershell.BaseExtensiblePowerShellDeployed.startOrder=90
# PowerShell script invoked to start a resource of an artifact on Windows.
#powershell.BaseExtensiblePowerShellDeployed.startScript=null
# Verb that is used to prefix the description for the start step.
#powershell.BaseExtensiblePowerShellDeployed.startVerb=Start
# If set to true, the stop script will be executed if this deployed is being destroyed.
#powershell.BaseExtensiblePowerShellDeployed.stopOnDestroy=true
# Options for the stop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed).
#powershell.BaseExtensiblePowerShellDeployed.stopOptions=uploadClasspathResources
# Order at which the stop script will be executed.
#powershell.BaseExtensiblePowerShellDeployed.stopOrder=10
# PowerShell script invoked to stop a resource or an artifact on Windows.
#powershell.BaseExtensiblePowerShellDeployed.stopScript=null
# If set to true, the stop and start scripts will be executed if this deployed is being modified.
#powershell.BaseExtensiblePowerShellDeployed.stopStartOnModify=true
# If set to true, the stop and start scripts will be executed if this deployable is not being modified.
#powershell.BaseExtensiblePowerShellDeployed.stopStartOnNoop=true
# Verb that is used to prefix the description for the stop step.
#powershell.BaseExtensiblePowerShellDeployed.stopVerb=Stop
# Whether to use a sidecar '.ini' file to transfer the powershell variable values. (inherited from: powershell.BasePowerShellDeployed.useSidecarIniFile)
#powershell.BaseExtensiblePowerShellDeployed.useSidecarIniFile=false
# Deployeds To Discover
#powershell.BasePowerShellContainer.deployedsToDiscover=null
# Order at which the discover step will be executed.
#powershell.BasePowerShellContainer.discoverOrder=0
# Script invoked to inspect this container and discover deployeds on it.
#powershell.BasePowerShellContainer.discoverScript=null
# List of scripts to append to the the step script.
#powershell.BasePowerShellContainer.libraryScripts=powershell/runtime/base.ps1
# Power Shell Path
#powershell.BasePowerShellContainer.powerShellPath=powershell
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#powershell.BasePowerShellDeployable.boundTemplates=null
# The set of CI templates. (inherited from: udm.BaseDeployableArchiveArtifact.boundTemplates)
#powershell.BasePowerShellDeployableArchiveArtifact.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableArchiveArtifact.delimiters)
#powershell.BasePowerShellDeployableArchiveArtifact.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableArchiveArtifact.textFileNamesRegex)
#powershell.BasePowerShellDeployableArchiveArtifact.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of CI templates. (inherited from: udm.BaseDeployableFileArtifact.boundTemplates)
#powershell.BasePowerShellDeployableFileArtifact.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableFileArtifact.delimiters)
#powershell.BasePowerShellDeployableFileArtifact.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableFileArtifact.textFileNamesRegex)
#powershell.BasePowerShellDeployableFileArtifact.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of CI templates. (inherited from: udm.BaseDeployableFolderArtifact.boundTemplates)
#powershell.BasePowerShellDeployableFolderArtifact.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableFolderArtifact.delimiters)
#powershell.BasePowerShellDeployableFolderArtifact.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableFolderArtifact.textFileNamesRegex)
#powershell.BasePowerShellDeployableFolderArtifact.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#powershell.BasePowerShellDeployed.boundConfigurationItems=null
# Additional classpath resources that should be uploaded to the working directory before executing the script.
#powershell.BasePowerShellDeployed.classpathResources=null
# Order at which the discover step will be executed.
#powershell.BasePowerShellDeployed.discoverOrder=50
# Script invoked to discover and inspect deployeds of this type.
#powershell.BasePowerShellDeployed.discoverScript=null
# Whether to add the host password to the powershell variable values.
#powershell.BasePowerShellDeployed.exposePasswordPropertiesOnHosts=false
# List of scripts to append to the the step script.
#powershell.BasePowerShellDeployed.libraryScripts=null
# Whether to use a sidecar '.ini' file to transfer the powershell variable values.
#powershell.BasePowerShellDeployed.useSidecarIniFile=false
# If set to true, multiple steps at the same order will be batched together in one batch to improve performance over high-latency WinRM connections (inherited from: powershell.BaseExtensiblePowerShellDeployed.batchSteps)
#powershell.ExtensiblePowerShellDeployed.batchSteps=false
# The set of created CIs. (inherited from: powershell.BaseExtensiblePowerShellDeployed.boundConfigurationItems)
#powershell.ExtensiblePowerShellDeployed.boundConfigurationItems=null
# Additional classpath resources that should be uploaded to the working directory before executing the script. (inherited from: powershell.BaseExtensiblePowerShellDeployed.classpathResources)
#powershell.ExtensiblePowerShellDeployed.classpathResources=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.BaseExtensiblePowerShellDeployed.createOptions)
#powershell.ExtensiblePowerShellDeployed.createOptions=uploadArtifactData,uploadClasspathResources
# Order at which the create step will be executed. (inherited from: powershell.BaseExtensiblePowerShellDeployed.createOrder)
#powershell.ExtensiblePowerShellDeployed.createOrder=60
# PowerShell script invoked to create a resource (or deploy an artifact) on Windows. (inherited from: powershell.BaseExtensiblePowerShellDeployed.createScript)
#powershell.ExtensiblePowerShellDeployed.createScript=null
# Verb that is used to prefix the description for the create step. (inherited from: powershell.BaseExtensiblePowerShellDeployed.createVerb)
#powershell.ExtensiblePowerShellDeployed.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.BaseExtensiblePowerShellDeployed.destroyOptions)
#powershell.ExtensiblePowerShellDeployed.destroyOptions=uploadClasspathResources
# Order at which the destroy step will be executed. (inherited from: powershell.BaseExtensiblePowerShellDeployed.destroyOrder)
#powershell.ExtensiblePowerShellDeployed.destroyOrder=40
# PowerShell script invoked to destroy a resource (or undeploy an artifact) on Windows. (inherited from: powershell.BaseExtensiblePowerShellDeployed.destroyScript)
#powershell.ExtensiblePowerShellDeployed.destroyScript=null
# Verb that is used to prefix the description for the destroy step. (inherited from: powershell.BaseExtensiblePowerShellDeployed.destroyVerb)
#powershell.ExtensiblePowerShellDeployed.destroyVerb=Destroy
# Order at which the discover step will be executed. (inherited from: powershell.BaseExtensiblePowerShellDeployed.discoverOrder)
#powershell.ExtensiblePowerShellDeployed.discoverOrder=50
# Script invoked to discover and inspect deployeds of this type. (inherited from: powershell.BaseExtensiblePowerShellDeployed.discoverScript)
#powershell.ExtensiblePowerShellDeployed.discoverScript=null
# Whether to add the host password to the powershell variable values. (inherited from: powershell.BaseExtensiblePowerShellDeployed.exposePasswordPropertiesOnHosts)
#powershell.ExtensiblePowerShellDeployed.exposePasswordPropertiesOnHosts=false
# List of scripts to append to the the step script. (inherited from: powershell.BaseExtensiblePowerShellDeployed.libraryScripts)
#powershell.ExtensiblePowerShellDeployed.libraryScripts=null
# Maximum number of steps in a batch. (inherited from: powershell.BaseExtensiblePowerShellDeployed.maxBatchSize)
#powershell.ExtensiblePowerShellDeployed.maxBatchSize=100
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.BaseExtensiblePowerShellDeployed.modifyOptions)
#powershell.ExtensiblePowerShellDeployed.modifyOptions=uploadArtifactData,uploadClasspathResources
# Order at which the modify step will be executed. (inherited from: powershell.BaseExtensiblePowerShellDeployed.modifyOrder)
#powershell.ExtensiblePowerShellDeployed.modifyOrder=60
# PowerShell script invoked to modify a resource (or an artifact) on Windows. (inherited from: powershell.BaseExtensiblePowerShellDeployed.modifyScript)
#powershell.ExtensiblePowerShellDeployed.modifyScript=null
# Verb that is used to prefix the description for the modify step. (inherited from: powershell.BaseExtensiblePowerShellDeployed.modifyVerb)
#powershell.ExtensiblePowerShellDeployed.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.BaseExtensiblePowerShellDeployed.noopOptions)
#powershell.ExtensiblePowerShellDeployed.noopOptions=uploadClasspathResources
# Order at which the noop step will be executed. (inherited from: powershell.BaseExtensiblePowerShellDeployed.noopOrder)
#powershell.ExtensiblePowerShellDeployed.noopOrder=50
# PowerShell script invoked to noop a resource or an artifact on Windows. (inherited from: powershell.BaseExtensiblePowerShellDeployed.noopScript)
#powershell.ExtensiblePowerShellDeployed.noopScript=null
# Verb that is used to prefix the description for the noop step. (inherited from: powershell.BaseExtensiblePowerShellDeployed.noopVerb)
#powershell.ExtensiblePowerShellDeployed.noopVerb=Noop
# Options for the start step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.BaseExtensiblePowerShellDeployed.startOptions)
#powershell.ExtensiblePowerShellDeployed.startOptions=uploadClasspathResources
# Order at which the start step will be executed. (inherited from: powershell.BaseExtensiblePowerShellDeployed.startOrder)
#powershell.ExtensiblePowerShellDeployed.startOrder=90
# PowerShell script invoked to start a resource of an artifact on Windows. (inherited from: powershell.BaseExtensiblePowerShellDeployed.startScript)
#powershell.ExtensiblePowerShellDeployed.startScript=null
# Verb that is used to prefix the description for the start step. (inherited from: powershell.BaseExtensiblePowerShellDeployed.startVerb)
#powershell.ExtensiblePowerShellDeployed.startVerb=Start
# Options for the stop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.BaseExtensiblePowerShellDeployed.stopOptions)
#powershell.ExtensiblePowerShellDeployed.stopOptions=uploadClasspathResources
# Order at which the stop script will be executed. (inherited from: powershell.BaseExtensiblePowerShellDeployed.stopOrder)
#powershell.ExtensiblePowerShellDeployed.stopOrder=10
# PowerShell script invoked to stop a resource or an artifact on Windows. (inherited from: powershell.BaseExtensiblePowerShellDeployed.stopScript)
#powershell.ExtensiblePowerShellDeployed.stopScript=null
# Verb that is used to prefix the description for the stop step. (inherited from: powershell.BaseExtensiblePowerShellDeployed.stopVerb)
#powershell.ExtensiblePowerShellDeployed.stopVerb=Stop
# Whether to use a sidecar '.ini' file to transfer the powershell variable values. (inherited from: powershell.BaseExtensiblePowerShellDeployed.useSidecarIniFile)
#powershell.ExtensiblePowerShellDeployed.useSidecarIniFile=false
# If set to true, multiple steps at the same order will be batched together in one batch to improve performance over high-latency WinRM connections (inherited from: powershell.BaseExtensiblePowerShellDeployed.batchSteps)
#powershell.ExtensiblePowerShellDeployedArtifact.batchSteps=false
# The set of created CIs. (inherited from: powershell.BaseExtensiblePowerShellDeployed.boundConfigurationItems)
#powershell.ExtensiblePowerShellDeployedArtifact.boundConfigurationItems=null
# Additional classpath resources that should be uploaded to the working directory before executing the script. (inherited from: powershell.BaseExtensiblePowerShellDeployed.classpathResources)
#powershell.ExtensiblePowerShellDeployedArtifact.classpathResources=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.BaseExtensiblePowerShellDeployed.createOptions)
#powershell.ExtensiblePowerShellDeployedArtifact.createOptions=uploadArtifactData,uploadClasspathResources
# Order at which the create step will be executed. (inherited from: powershell.BaseExtensiblePowerShellDeployed.createOrder)
#powershell.ExtensiblePowerShellDeployedArtifact.createOrder=60
# PowerShell script invoked to create a resource (or deploy an artifact) on Windows. (inherited from: powershell.BaseExtensiblePowerShellDeployed.createScript)
#powershell.ExtensiblePowerShellDeployedArtifact.createScript=null
# Verb that is used to prefix the description for the create step. (inherited from: powershell.BaseExtensiblePowerShellDeployed.createVerb)
#powershell.ExtensiblePowerShellDeployedArtifact.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.BaseExtensiblePowerShellDeployed.destroyOptions)
#powershell.ExtensiblePowerShellDeployedArtifact.destroyOptions=uploadClasspathResources
# Order at which the destroy step will be executed. (inherited from: powershell.BaseExtensiblePowerShellDeployed.destroyOrder)
#powershell.ExtensiblePowerShellDeployedArtifact.destroyOrder=40
# PowerShell script invoked to destroy a resource (or undeploy an artifact) on Windows. (inherited from: powershell.BaseExtensiblePowerShellDeployed.destroyScript)
#powershell.ExtensiblePowerShellDeployedArtifact.destroyScript=null
# Verb that is used to prefix the description for the destroy step. (inherited from: powershell.BaseExtensiblePowerShellDeployed.destroyVerb)
#powershell.ExtensiblePowerShellDeployedArtifact.destroyVerb=Destroy
# Order at which the discover step will be executed. (inherited from: powershell.BaseExtensiblePowerShellDeployed.discoverOrder)
#powershell.ExtensiblePowerShellDeployedArtifact.discoverOrder=50
# Script invoked to discover and inspect deployeds of this type. (inherited from: powershell.BaseExtensiblePowerShellDeployed.discoverScript)
#powershell.ExtensiblePowerShellDeployedArtifact.discoverScript=null
# Whether to add the host password to the powershell variable values. (inherited from: powershell.BaseExtensiblePowerShellDeployed.exposePasswordPropertiesOnHosts)
#powershell.ExtensiblePowerShellDeployedArtifact.exposePasswordPropertiesOnHosts=false
# List of scripts to append to the the step script. (inherited from: powershell.BaseExtensiblePowerShellDeployed.libraryScripts)
#powershell.ExtensiblePowerShellDeployedArtifact.libraryScripts=null
# Maximum number of steps in a batch. (inherited from: powershell.BaseExtensiblePowerShellDeployed.maxBatchSize)
#powershell.ExtensiblePowerShellDeployedArtifact.maxBatchSize=100
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.BaseExtensiblePowerShellDeployed.modifyOptions)
#powershell.ExtensiblePowerShellDeployedArtifact.modifyOptions=uploadArtifactData,uploadClasspathResources
# Order at which the modify step will be executed. (inherited from: powershell.BaseExtensiblePowerShellDeployed.modifyOrder)
#powershell.ExtensiblePowerShellDeployedArtifact.modifyOrder=60
# PowerShell script invoked to modify a resource (or an artifact) on Windows. (inherited from: powershell.BaseExtensiblePowerShellDeployed.modifyScript)
#powershell.ExtensiblePowerShellDeployedArtifact.modifyScript=null
# Verb that is used to prefix the description for the modify step. (inherited from: powershell.BaseExtensiblePowerShellDeployed.modifyVerb)
#powershell.ExtensiblePowerShellDeployedArtifact.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.BaseExtensiblePowerShellDeployed.noopOptions)
#powershell.ExtensiblePowerShellDeployedArtifact.noopOptions=uploadClasspathResources
# Order at which the noop step will be executed. (inherited from: powershell.BaseExtensiblePowerShellDeployed.noopOrder)
#powershell.ExtensiblePowerShellDeployedArtifact.noopOrder=50
# PowerShell script invoked to noop a resource or an artifact on Windows. (inherited from: powershell.BaseExtensiblePowerShellDeployed.noopScript)
#powershell.ExtensiblePowerShellDeployedArtifact.noopScript=null
# Verb that is used to prefix the description for the noop step. (inherited from: powershell.BaseExtensiblePowerShellDeployed.noopVerb)
#powershell.ExtensiblePowerShellDeployedArtifact.noopVerb=Noop
# Options for the start step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.BaseExtensiblePowerShellDeployed.startOptions)
#powershell.ExtensiblePowerShellDeployedArtifact.startOptions=uploadClasspathResources
# Order at which the start step will be executed. (inherited from: powershell.BaseExtensiblePowerShellDeployed.startOrder)
#powershell.ExtensiblePowerShellDeployedArtifact.startOrder=90
# PowerShell script invoked to start a resource of an artifact on Windows. (inherited from: powershell.BaseExtensiblePowerShellDeployed.startScript)
#powershell.ExtensiblePowerShellDeployedArtifact.startScript=null
# Verb that is used to prefix the description for the start step. (inherited from: powershell.BaseExtensiblePowerShellDeployed.startVerb)
#powershell.ExtensiblePowerShellDeployedArtifact.startVerb=Start
# Options for the stop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.BaseExtensiblePowerShellDeployed.stopOptions)
#powershell.ExtensiblePowerShellDeployedArtifact.stopOptions=uploadClasspathResources
# Order at which the stop script will be executed. (inherited from: powershell.BaseExtensiblePowerShellDeployed.stopOrder)
#powershell.ExtensiblePowerShellDeployedArtifact.stopOrder=10
# PowerShell script invoked to stop a resource or an artifact on Windows. (inherited from: powershell.BaseExtensiblePowerShellDeployed.stopScript)
#powershell.ExtensiblePowerShellDeployedArtifact.stopScript=null
# Verb that is used to prefix the description for the stop step. (inherited from: powershell.BaseExtensiblePowerShellDeployed.stopVerb)
#powershell.ExtensiblePowerShellDeployedArtifact.stopVerb=Stop
# Whether to use a sidecar '.ini' file to transfer the powershell variable values. (inherited from: powershell.BaseExtensiblePowerShellDeployed.useSidecarIniFile)
#powershell.ExtensiblePowerShellDeployedArtifact.useSidecarIniFile=false
# Apply the manifest on NOOP state.
#puppet.AppliedManifest.applyOnNoop=false
# Order at which the puppet provisioning of the manifest should happen.
#puppet.AppliedManifest.applyOrder=50
# The set of created CIs. (inherited from: udm.BaseDeployedArtifact.boundConfigurationItems)
#puppet.AppliedManifest.boundConfigurationItems=null
# Apply the manifests on NOOP state.
#puppet.AppliedManifestFolder.applyOnNoop=false
# Order at which the Puppet provisioning of the manifest should happen.
#puppet.AppliedManifestFolder.applyOrder=50
# The set of created CIs. (inherited from: udm.BaseDeployedArtifact.boundConfigurationItems)
#puppet.AppliedManifestFolder.boundConfigurationItems=null
# Enable debug mode.
#puppet.AppliedManifestFolder.debug=false
# Enable trace mode.
#puppet.AppliedManifestFolder.trace=false
# Enable verbose mode.
#puppet.AppliedManifestFolder.verbose=false
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#puppet.InstalledModule.boundConfigurationItems=null
# Enable debug mode.
#puppet.InstalledModule.debug=false
# Force overwrite of existing module, if any. Implies --force.
#puppet.InstalledModule.force=false
# Do not attempt to install dependencies. Implied by --ignore-dependencies.
#puppet.InstalledModule.ignoreDependencies=false
# Order at which the Puppet module should be installed.
#puppet.InstalledModule.installOrder=50
# Order at which the installed Puppet module should be uninstalled.
#puppet.InstalledModule.uninstallOrder=49
# The set of created CIs. (inherited from: udm.BaseDeployedArtifact.boundConfigurationItems)
#puppet.InstalledTarBallModule.boundConfigurationItems=null
# Enable debug mode.
#puppet.InstalledTarBallModule.debug=false
# Order at which the Puppet module should be installed.
#puppet.InstalledTarBallModule.installOrder=50
# Order at which the installed Puppet module should be uninstalled.
#puppet.InstalledTarBallModule.uninstallOrder=49
# The set of CI templates. (inherited from: udm.BaseDeployableFileArtifact.boundTemplates)
#puppet.Manifest.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableFileArtifact.delimiters)
#puppet.Manifest.delimiters={{ }}
# Regular expression that matches file names of text files
#puppet.Manifest.textFileNamesRegex=.+\.(properties | pp)
# The set of CI templates. (inherited from: udm.BaseDeployableFolderArtifact.boundTemplates)
#puppet.ManifestFolder.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableFolderArtifact.delimiters)
#puppet.ManifestFolder.delimiters={{ }}
# Regular expression that matches file names of text files
#puppet.ManifestFolder.textFileNamesRegex=.+\.(properties | pp)
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#puppet.Module.boundTemplates=null
# The set of CI templates. (inherited from: udm.BaseDeployableFileArtifact.boundTemplates)
#puppet.TarBallModule.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableFileArtifact.delimiters)
#puppet.TarBallModule.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableFileArtifact.textFileNamesRegex)
#puppet.TarBallModule.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# Enable debug mode.
#puppet.provisioner.InstalledModule.debug=false
# Force overwrite of existing module, if any. Implies --force.
#puppet.provisioner.InstalledModule.force=false
# Do not attempt to install dependencies. Implied by --ignore-dependencies.
#puppet.provisioner.InstalledModule.ignoreDependencies=false
# Order at which the Puppet module should be installed.
#puppet.provisioner.InstalledModule.installOrder=50
# Enable debug mode.
#puppet.provisioner.InstalledTarBallModule.debug=false
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseProvisionerArtifact.delimiters)
#puppet.provisioner.Manifest.delimiters={{ }}
# A map that maps regular expressions matching the full path of file(s) in the artifact to character set encodings (inherited from: udm.BaseProvisionerArtifact.fileEncodings)
#puppet.provisioner.Manifest.fileEncodings=.+\.properties:ISO-8859-1
# Regular expression that matches file names of text files
#puppet.provisioner.Manifest.textFileNamesRegex=.+\.pp
# Enable debug mode.
#puppet.provisioner.Module.debug=false
# Force overwrite of existing module, if any. Implies --force.
#puppet.provisioner.Module.force=false
# Do not attempt to install dependencies. Implied by --ignore-dependencies.
#puppet.provisioner.Module.ignoreDependencies=false
# Order at which the Puppet module should be installed.
#puppet.provisioner.Module.installOrder=50
# Enable debug mode.
#puppet.provisioner.TarBallModule.debug=false
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseProvisionerArtifact.delimiters)
#puppet.provisioner.TarBallModule.delimiters={{ }}
# A map that maps regular expressions matching the full path of file(s) in the artifact to character set encodings (inherited from: udm.BaseProvisionerArtifact.fileEncodings)
#puppet.provisioner.TarBallModule.fileEncodings=.+\.properties:ISO-8859-1
# Regular expression that matches file names of text files (inherited from: udm.BaseProvisionerArtifact.textFileNamesRegex)
#puppet.provisioner.TarBallModule.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#python.PythonManagedDeployed.boundConfigurationItems=null
# The order in which a discover step will be executed.
#python.PythonManagedDeployed.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context.
#python.PythonManagedDeployed.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#python.PythonManagedDeployed.libraryScripts=null
# The set of created CIs. (inherited from: udm.BaseDeployedContainer.boundConfigurationItems)
#python.PythonManagedDeployedContainer.boundConfigurationItems=null
# The order in which a discover step will be executed.
#python.PythonManagedDeployedContainer.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context.
#python.PythonManagedDeployedContainer.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#python.PythonManagedDeployedContainer.libraryScripts=null
# Optional map of parameters to pass to the steps (inherited from: schedule.StepJob.controlTaskParams)
#schedule.GarbageCollectionJob.controlTaskParams=null
# Enables or disables triggering of the administration job
#schedule.ScheduledJob.enabled=true
# Optional map of parameters to pass to the steps
#schedule.StepJob.controlTaskParams=null
# The set of created CIs. (inherited from: udm.BaseDeployedArtifact.boundConfigurationItems)
#script.ExecutedScript.boundConfigurationItems=null
# Execute the script on NOOP state.
#script.ExecutedScript.executeOnNoop=false
# Order at which the script execution should happen.
#script.ExecutedScript.executeOrder=50
# The set of CI templates. (inherited from: udm.BaseDeployableFileArtifact.boundTemplates)
#script.Script.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableFileArtifact.delimiters)
#script.Script.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableFileArtifact.textFileNamesRegex)
#script.Script.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseProvisionerArtifact.delimiters)
#script.provisioner.Script.delimiters={{ }}
# A map that maps regular expressions matching the full path of file(s) in the artifact to character set encodings (inherited from: udm.BaseProvisionerArtifact.fileEncodings)
#script.provisioner.Script.fileEncodings=.+\.properties:ISO-8859-1
# Regular expression that matches file names of text files (inherited from: udm.BaseProvisionerArtifact.textFileNamesRegex)
#script.provisioner.Script.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# Key-Value Backend Version of the Hashicorp KV Secret Engine.
#secrets.hashicorp.vault.SecretEngine.kvBackendVersion=VERSIONED
# Allow individual users to opt-out from anonymous usage analytics and guidance
#settings.PendoAnalytics.allowUsersToOptOut=false
# Documentation Page
#settings.PendoAnalytics.documentationPage=deploy/how-to/analytics-and-guidance.html
# Enable the analytics and guidance feature in this Deploy environment
#settings.PendoAnalytics.enabled=true
# The OS-specific wrapper script that calls the SQL client
#sql.Db2Client.clientWrapperScript=sql/Db2Client
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: sql.SqlClient.inspectClasspathResources)
#sql.Db2Client.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: sql.SqlClient.inspectScript)
#sql.Db2Client.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.SqlClient.inspectTemplateClasspathResources)
#sql.Db2Client.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: sql.SqlClient.restartClasspathResources)
#sql.Db2Client.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: sql.SqlClient.restartOrder)
#sql.Db2Client.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: sql.SqlClient.restartScript)
#sql.Db2Client.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.SqlClient.restartTemplateClasspathResources)
#sql.Db2Client.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: sql.SqlClient.restartWaitTime)
#sql.Db2Client.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: sql.SqlClient.startClasspathResources)
#sql.Db2Client.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: sql.SqlClient.startOrder)
#sql.Db2Client.startOrder=90
# Classpath to the script used to start the generic container. (inherited from: sql.SqlClient.startScript)
#sql.Db2Client.startScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.SqlClient.startTemplateClasspathResources)
#sql.Db2Client.startTemplateClasspathResources=null
# The time to wait in seconds for a container start action. (inherited from: sql.SqlClient.startWaitTime)
#sql.Db2Client.startWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: sql.SqlClient.stopClasspathResources)
#sql.Db2Client.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: sql.SqlClient.stopOrder)
#sql.Db2Client.stopOrder=10
# Classpath to the script used to stop the generic container. (inherited from: sql.SqlClient.stopScript)
#sql.Db2Client.stopScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.SqlClient.stopTemplateClasspathResources)
#sql.Db2Client.stopTemplateClasspathResources=null
# The time to wait in seconds for a container stop action. (inherited from: sql.SqlClient.stopWaitTime)
#sql.Db2Client.stopWaitTime=0
# The set of created CIs. (inherited from: generic.ExecutedFolder.boundConfigurationItems)
#sql.ExecutedSqlScripts.boundConfigurationItems=null
# If set to true, the checkpoint is set after the first script in a folder has been executed. Otherwise the checkpoint is set after the last script in a folder has been executed. (inherited from: generic.ExecutedFolder.checkpointAfterFirstScript)
#sql.ExecutedSqlScripts.checkpointAfterFirstScript=true
# Additional classpath resources that should be uploaded to the working directory before executing the script. (inherited from: generic.ExecutedFolder.classpathResources)
#sql.ExecutedSqlScripts.classpathResources=null
# Common folder that should be uploaded to the working directory. (inherited from: generic.ExecutedFolder.commonScriptFolderName)
#sql.ExecutedSqlScripts.commonScriptFolderName=common
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.ExecutedFolder.createOptions)
#sql.ExecutedSqlScripts.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: generic.ExecutedFolder.createOrder)
#sql.ExecutedSqlScripts.createOrder=50
# Create Verb
#sql.ExecutedSqlScripts.createVerb=Run
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.ExecutedFolder.destroyOptions)
#sql.ExecutedSqlScripts.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: generic.ExecutedFolder.destroyOrder)
#sql.ExecutedSqlScripts.destroyOrder=40
# Destroy Verb
#sql.ExecutedSqlScripts.destroyVerb=Rollback
# If set to true, modified scripts are also executed on a MODIFY or a NOOP. (inherited from: generic.ExecutedFolder.executeModifiedScripts)
#sql.ExecutedSqlScripts.executeModifiedScripts=true
# If set to true, rollback scripts for modified scripts are also executed on a MODIFY or a NOOP. (inherited from: generic.ExecutedFolder.executeRollbackForModifiedScripts)
#sql.ExecutedSqlScripts.executeRollbackForModifiedScripts=true
# Name of the executor script that will be executed for each script found in the folder.
#sql.ExecutedSqlScripts.executorScript=${deployed.container.clientWrapperScript}
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.ExecutedFolder.inspectClasspathResources)
#sql.ExecutedSqlScripts.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.ExecutedFolder.inspectScript)
#sql.ExecutedSqlScripts.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.ExecutedFolder.inspectTemplateClasspathResources)
#sql.ExecutedSqlScripts.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.ExecutedFolder.modifyOptions)
#sql.ExecutedSqlScripts.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: generic.ExecutedFolder.modifyOrder)
#sql.ExecutedSqlScripts.modifyOrder=50
# Modify Verb (inherited from: generic.ExecutedFolder.modifyVerb)
#sql.ExecutedSqlScripts.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.ExecutedFolder.noopOptions)
#sql.ExecutedSqlScripts.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: generic.ExecutedFolder.noopOrder)
#sql.ExecutedSqlScripts.noopOrder=50
# Noop Verb (inherited from: generic.ExecutedFolder.noopVerb)
#sql.ExecutedSqlScripts.noopVerb=Modify
# The generic container requires a restart for the action performed by this deployed. (inherited from: generic.ExecutedFolder.restartRequired)
#sql.ExecutedSqlScripts.restartRequired=false
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: generic.ExecutedFolder.restartRequiredForNoop)
#sql.ExecutedSqlScripts.restartRequiredForNoop=false
# A script's associated rollback script is derived by using the 1st group identified by the scriptRecognitionRegex and then appending this postfix to it. e.g give name '01-myscript.sql', regex '([0-9]*-.*)\.sql' and rollback script postfix '-rollback.sql', we can derive the name of the associated rollback script  to be '01-myscript-rollback.sql'
#sql.ExecutedSqlScripts.rollbackScriptPostfix=-rollback.sql
# Regular expression used to identify a rollback script in the folder. A successful match should returns a single group, ie the logical script name. e.g. [0-9]*-.*-rollback\.sql
#sql.ExecutedSqlScripts.rollbackScriptRecognitionRegex=([0-9]*-.*-rollback)\.sql
# Regular expression used to identify a script in the folder.  A successful match should returns a single group to which the rollbackScriptPostfix can be appended in order to find the associated rollback script or the script's dependent subfolder.  e.g.([0-9]*-.*)\.sql
#sql.ExecutedSqlScripts.scriptRecognitionRegex=(?!.*-rollback\.sql)([0-9]*-.*)\.sql
# Additional template classpath resources that should be uploaded to the working directory before executing the script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.ExecutedFolder.templateClasspathResources)
#sql.ExecutedSqlScripts.templateClasspathResources=null
# The OS-specific wrapper script that calls the SQL client
#sql.MsSqlClient.clientWrapperScript=sql/MsSqlClient
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: sql.SqlClient.inspectClasspathResources)
#sql.MsSqlClient.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: sql.SqlClient.inspectScript)
#sql.MsSqlClient.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.SqlClient.inspectTemplateClasspathResources)
#sql.MsSqlClient.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: sql.SqlClient.restartClasspathResources)
#sql.MsSqlClient.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: sql.SqlClient.restartOrder)
#sql.MsSqlClient.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: sql.SqlClient.restartScript)
#sql.MsSqlClient.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.SqlClient.restartTemplateClasspathResources)
#sql.MsSqlClient.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: sql.SqlClient.restartWaitTime)
#sql.MsSqlClient.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: sql.SqlClient.startClasspathResources)
#sql.MsSqlClient.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: sql.SqlClient.startOrder)
#sql.MsSqlClient.startOrder=90
# Classpath to the script used to start the generic container. (inherited from: sql.SqlClient.startScript)
#sql.MsSqlClient.startScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.SqlClient.startTemplateClasspathResources)
#sql.MsSqlClient.startTemplateClasspathResources=null
# The time to wait in seconds for a container start action. (inherited from: sql.SqlClient.startWaitTime)
#sql.MsSqlClient.startWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: sql.SqlClient.stopClasspathResources)
#sql.MsSqlClient.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: sql.SqlClient.stopOrder)
#sql.MsSqlClient.stopOrder=10
# Classpath to the script used to stop the generic container. (inherited from: sql.SqlClient.stopScript)
#sql.MsSqlClient.stopScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.SqlClient.stopTemplateClasspathResources)
#sql.MsSqlClient.stopTemplateClasspathResources=null
# The time to wait in seconds for a container stop action. (inherited from: sql.SqlClient.stopWaitTime)
#sql.MsSqlClient.stopWaitTime=0
# The OS-specific wrapper script that calls the SQL client
#sql.MySqlClient.clientWrapperScript=sql/MySqlClient
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: sql.SqlClient.inspectClasspathResources)
#sql.MySqlClient.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: sql.SqlClient.inspectScript)
#sql.MySqlClient.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.SqlClient.inspectTemplateClasspathResources)
#sql.MySqlClient.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: sql.SqlClient.restartClasspathResources)
#sql.MySqlClient.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: sql.SqlClient.restartOrder)
#sql.MySqlClient.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: sql.SqlClient.restartScript)
#sql.MySqlClient.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.SqlClient.restartTemplateClasspathResources)
#sql.MySqlClient.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: sql.SqlClient.restartWaitTime)
#sql.MySqlClient.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: sql.SqlClient.startClasspathResources)
#sql.MySqlClient.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: sql.SqlClient.startOrder)
#sql.MySqlClient.startOrder=90
# Classpath to the script used to start the generic container. (inherited from: sql.SqlClient.startScript)
#sql.MySqlClient.startScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.SqlClient.startTemplateClasspathResources)
#sql.MySqlClient.startTemplateClasspathResources=null
# The time to wait in seconds for a container start action. (inherited from: sql.SqlClient.startWaitTime)
#sql.MySqlClient.startWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: sql.SqlClient.stopClasspathResources)
#sql.MySqlClient.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: sql.SqlClient.stopOrder)
#sql.MySqlClient.stopOrder=10
# Classpath to the script used to stop the generic container. (inherited from: sql.SqlClient.stopScript)
#sql.MySqlClient.stopScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.SqlClient.stopTemplateClasspathResources)
#sql.MySqlClient.stopTemplateClasspathResources=null
# The time to wait in seconds for a container stop action. (inherited from: sql.SqlClient.stopWaitTime)
#sql.MySqlClient.stopWaitTime=0
# The OS-specific wrapper script that calls the SQL client
#sql.OracleClient.clientWrapperScript=sql/OracleClient
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: sql.SqlClient.inspectClasspathResources)
#sql.OracleClient.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: sql.SqlClient.inspectScript)
#sql.OracleClient.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.SqlClient.inspectTemplateClasspathResources)
#sql.OracleClient.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: sql.SqlClient.restartClasspathResources)
#sql.OracleClient.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: sql.SqlClient.restartOrder)
#sql.OracleClient.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: sql.SqlClient.restartScript)
#sql.OracleClient.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.SqlClient.restartTemplateClasspathResources)
#sql.OracleClient.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: sql.SqlClient.restartWaitTime)
#sql.OracleClient.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: sql.SqlClient.startClasspathResources)
#sql.OracleClient.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: sql.SqlClient.startOrder)
#sql.OracleClient.startOrder=90
# Classpath to the script used to start the generic container. (inherited from: sql.SqlClient.startScript)
#sql.OracleClient.startScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.SqlClient.startTemplateClasspathResources)
#sql.OracleClient.startTemplateClasspathResources=null
# The time to wait in seconds for a container start action. (inherited from: sql.SqlClient.startWaitTime)
#sql.OracleClient.startWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: sql.SqlClient.stopClasspathResources)
#sql.OracleClient.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: sql.SqlClient.stopOrder)
#sql.OracleClient.stopOrder=10
# Classpath to the script used to stop the generic container. (inherited from: sql.SqlClient.stopScript)
#sql.OracleClient.stopScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.SqlClient.stopTemplateClasspathResources)
#sql.OracleClient.stopTemplateClasspathResources=null
# The time to wait in seconds for a container stop action. (inherited from: sql.SqlClient.stopWaitTime)
#sql.OracleClient.stopWaitTime=0
# The OS-specific wrapper script that calls the SQL client
#sql.PostgreSqlClient.clientWrapperScript=sql/PostgreSqlClient
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: sql.SqlClient.inspectClasspathResources)
#sql.PostgreSqlClient.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: sql.SqlClient.inspectScript)
#sql.PostgreSqlClient.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.SqlClient.inspectTemplateClasspathResources)
#sql.PostgreSqlClient.inspectTemplateClasspathResources=null
# The port of the PostgreSQL server to connect to
#sql.PostgreSqlClient.port=5432
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: sql.SqlClient.restartClasspathResources)
#sql.PostgreSqlClient.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: sql.SqlClient.restartOrder)
#sql.PostgreSqlClient.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: sql.SqlClient.restartScript)
#sql.PostgreSqlClient.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.SqlClient.restartTemplateClasspathResources)
#sql.PostgreSqlClient.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: sql.SqlClient.restartWaitTime)
#sql.PostgreSqlClient.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: sql.SqlClient.startClasspathResources)
#sql.PostgreSqlClient.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: sql.SqlClient.startOrder)
#sql.PostgreSqlClient.startOrder=90
# Classpath to the script used to start the generic container. (inherited from: sql.SqlClient.startScript)
#sql.PostgreSqlClient.startScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.SqlClient.startTemplateClasspathResources)
#sql.PostgreSqlClient.startTemplateClasspathResources=null
# The time to wait in seconds for a container start action. (inherited from: sql.SqlClient.startWaitTime)
#sql.PostgreSqlClient.startWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: sql.SqlClient.stopClasspathResources)
#sql.PostgreSqlClient.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: sql.SqlClient.stopOrder)
#sql.PostgreSqlClient.stopOrder=10
# Classpath to the script used to stop the generic container. (inherited from: sql.SqlClient.stopScript)
#sql.PostgreSqlClient.stopScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.SqlClient.stopTemplateClasspathResources)
#sql.PostgreSqlClient.stopTemplateClasspathResources=null
# The time to wait in seconds for a container stop action. (inherited from: sql.SqlClient.stopWaitTime)
#sql.PostgreSqlClient.stopWaitTime=0
# Use localhost as the hostname to connect to
#sql.PostgreSqlClient.useLocalhost=true
# SQL statement to test the connection to the PostgreSQL server
#sql.PostgreSqlClient_testConnection.testSqlStatement=SELECT 1;
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.Container.inspectClasspathResources)
#sql.SqlClient.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.Container.inspectScript)
#sql.SqlClient.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.Container.inspectTemplateClasspathResources)
#sql.SqlClient.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: generic.Container.restartClasspathResources)
#sql.SqlClient.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: generic.Container.restartOrder)
#sql.SqlClient.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: generic.Container.restartScript)
#sql.SqlClient.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.Container.restartTemplateClasspathResources)
#sql.SqlClient.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: generic.Container.restartWaitTime)
#sql.SqlClient.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: generic.Container.startClasspathResources)
#sql.SqlClient.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: generic.Container.startOrder)
#sql.SqlClient.startOrder=90
# Classpath to the script used to start the generic container. (inherited from: generic.Container.startScript)
#sql.SqlClient.startScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.Container.startTemplateClasspathResources)
#sql.SqlClient.startTemplateClasspathResources=null
# The time to wait in seconds for a container start action. (inherited from: generic.Container.startWaitTime)
#sql.SqlClient.startWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: generic.Container.stopClasspathResources)
#sql.SqlClient.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: generic.Container.stopOrder)
#sql.SqlClient.stopOrder=10
# Classpath to the script used to stop the generic container. (inherited from: generic.Container.stopScript)
#sql.SqlClient.stopScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.Container.stopTemplateClasspathResources)
#sql.SqlClient.stopTemplateClasspathResources=null
# The time to wait in seconds for a container stop action. (inherited from: generic.Container.stopWaitTime)
#sql.SqlClient.stopWaitTime=0
# The set of CI templates. (inherited from: generic.Folder.boundTemplates)
#sql.SqlScripts.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: generic.Folder.delimiters)
#sql.SqlScripts.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: generic.Folder.textFileNamesRegex)
#sql.SqlScripts.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# Process failed tasks on CI according to the defined policy.
#stitch.BaseSource.onFailurePolicy=CANCEL_AND_ARCHIVE
# Process successful tasks on CI according to the defined policy.
#stitch.BaseSource.onSuccessPolicy=ARCHIVE
# Process failed tasks on CI according to the defined policy. (inherited from: stitch.BaseSource.onFailurePolicy)
#stitch.BaseSourceWithPath.onFailurePolicy=CANCEL_AND_ARCHIVE
# Process successful tasks on CI according to the defined policy. (inherited from: stitch.BaseSource.onSuccessPolicy)
#stitch.BaseSourceWithPath.onSuccessPolicy=ARCHIVE
# Process failed tasks on CI according to the defined policy. (inherited from: stitch.BaseSource.onFailurePolicy)
#stitch.ClasspathSource.onFailurePolicy=CANCEL_AND_ARCHIVE
# Process successful tasks on CI according to the defined policy. (inherited from: stitch.BaseSource.onSuccessPolicy)
#stitch.ClasspathSource.onSuccessPolicy=ARCHIVE
# Process failed tasks on CI according to the defined policy. (inherited from: stitch.BaseSourceWithPath.onFailurePolicy)
#stitch.FolderSource.onFailurePolicy=CANCEL_AND_ARCHIVE
# Process successful tasks on CI according to the defined policy. (inherited from: stitch.BaseSourceWithPath.onSuccessPolicy)
#stitch.FolderSource.onSuccessPolicy=ARCHIVE
# Filters shown change set branches.
#stitch.GitSource.branchRegex=.+
# Enables periodical automatic sync of branches for the source
#stitch.GitSource.branchSyncAutomatically=true
# Git repository master branch name (main or master).
#stitch.GitSource.masterBranchName=master
# Process failed tasks on CI according to the defined policy. (inherited from: stitch.BaseSource.onFailurePolicy)
#stitch.GitSource.onFailurePolicy=CANCEL_AND_ARCHIVE
# Process successful tasks on CI according to the defined policy. (inherited from: stitch.BaseSource.onSuccessPolicy)
#stitch.GitSource.onSuccessPolicy=ARCHIVE
# Enables periodical automatic syncs for the source
#stitch.GitSource.syncAutomatically=true
# Process failed tasks on CI according to the defined policy. (inherited from: stitch.BaseSourceWithPath.onFailurePolicy)
#stitch.ZipSource.onFailurePolicy=CANCEL_AND_ARCHIVE
# Process successful tasks on CI according to the defined policy. (inherited from: stitch.BaseSourceWithPath.onSuccessPolicy)
#stitch.ZipSource.onSuccessPolicy=ARCHIVE
# The set of created CIs. (inherited from: aws.ecs.Cluster.boundConfigurationItems)
#template.aws.ecs.Cluster.boundConfigurationItems=null
# The set of created CIs. (inherited from: aws.s3.Bucket.boundConfigurationItems)
#template.aws.s3.Bucket.boundConfigurationItems=null
# The set of created CIs. (inherited from: azure.ArtifactsFeed.boundConfigurationItems)
#template.azure.ArtifactsFeed.boundConfigurationItems=null
# The set of created CIs. (inherited from: azure.ResourceGroup.boundConfigurationItems)
#template.azure.ResourceGroup.boundConfigurationItems=null
# The set of created CIs. (inherited from: azure.blob.Container.boundConfigurationItems)
#template.azure.blob.Container.boundConfigurationItems=null
# Inspection Script (inherited from: cloudFoundry.Organization.inspectionScript)
#template.cloudFoundry.Organization.inspectionScript=cf/discovery/discover-spaces.py
# The set of created CIs. (inherited from: cloudFoundry.Space.boundConfigurationItems)
#template.cloudFoundry.Space.boundConfigurationItems=null
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.BaseGenericContainer.inspectClasspathResources)
#template.generic.BaseGenericContainer.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.BaseGenericContainer.inspectScript)
#template.generic.BaseGenericContainer.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.BaseGenericContainer.inspectTemplateClasspathResources)
#template.generic.BaseGenericContainer.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: generic.BaseGenericContainer.restartClasspathResources)
#template.generic.BaseGenericContainer.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: generic.BaseGenericContainer.restartOrder)
#template.generic.BaseGenericContainer.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: generic.BaseGenericContainer.restartScript)
#template.generic.BaseGenericContainer.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.BaseGenericContainer.restartTemplateClasspathResources)
#template.generic.BaseGenericContainer.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: generic.BaseGenericContainer.restartWaitTime)
#template.generic.BaseGenericContainer.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: generic.BaseGenericContainer.startClasspathResources)
#template.generic.BaseGenericContainer.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: generic.BaseGenericContainer.startOrder)
#template.generic.BaseGenericContainer.startOrder=90
# Classpath to the script used to start the generic container. (inherited from: generic.BaseGenericContainer.startScript)
#template.generic.BaseGenericContainer.startScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.BaseGenericContainer.startTemplateClasspathResources)
#template.generic.BaseGenericContainer.startTemplateClasspathResources=null
# The time to wait in seconds for a container start action. (inherited from: generic.BaseGenericContainer.startWaitTime)
#template.generic.BaseGenericContainer.startWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: generic.BaseGenericContainer.stopClasspathResources)
#template.generic.BaseGenericContainer.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: generic.BaseGenericContainer.stopOrder)
#template.generic.BaseGenericContainer.stopOrder=10
# Classpath to the script used to stop the generic container. (inherited from: generic.BaseGenericContainer.stopScript)
#template.generic.BaseGenericContainer.stopScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.BaseGenericContainer.stopTemplateClasspathResources)
#template.generic.BaseGenericContainer.stopTemplateClasspathResources=null
# The time to wait in seconds for a container stop action. (inherited from: generic.BaseGenericContainer.stopWaitTime)
#template.generic.BaseGenericContainer.stopWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.Container.inspectClasspathResources)
#template.generic.Container.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.Container.inspectScript)
#template.generic.Container.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.Container.inspectTemplateClasspathResources)
#template.generic.Container.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: generic.Container.restartClasspathResources)
#template.generic.Container.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: generic.Container.restartOrder)
#template.generic.Container.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: generic.Container.restartScript)
#template.generic.Container.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.Container.restartTemplateClasspathResources)
#template.generic.Container.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: generic.Container.restartWaitTime)
#template.generic.Container.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: generic.Container.startClasspathResources)
#template.generic.Container.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: generic.Container.startOrder)
#template.generic.Container.startOrder=90
# Classpath to the script used to start the generic container. (inherited from: generic.Container.startScript)
#template.generic.Container.startScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.Container.startTemplateClasspathResources)
#template.generic.Container.startTemplateClasspathResources=null
# The time to wait in seconds for a container start action. (inherited from: generic.Container.startWaitTime)
#template.generic.Container.startWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: generic.Container.stopClasspathResources)
#template.generic.Container.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: generic.Container.stopOrder)
#template.generic.Container.stopOrder=10
# Classpath to the script used to stop the generic container. (inherited from: generic.Container.stopScript)
#template.generic.Container.stopScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.Container.stopTemplateClasspathResources)
#template.generic.Container.stopTemplateClasspathResources=null
# The time to wait in seconds for a container stop action. (inherited from: generic.Container.stopWaitTime)
#template.generic.Container.stopWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.NestedContainer.inspectClasspathResources)
#template.generic.NestedContainer.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.NestedContainer.inspectScript)
#template.generic.NestedContainer.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.NestedContainer.inspectTemplateClasspathResources)
#template.generic.NestedContainer.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: generic.NestedContainer.restartClasspathResources)
#template.generic.NestedContainer.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: generic.NestedContainer.restartOrder)
#template.generic.NestedContainer.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: generic.NestedContainer.restartScript)
#template.generic.NestedContainer.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.NestedContainer.restartTemplateClasspathResources)
#template.generic.NestedContainer.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: generic.NestedContainer.restartWaitTime)
#template.generic.NestedContainer.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: generic.NestedContainer.startClasspathResources)
#template.generic.NestedContainer.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: generic.NestedContainer.startOrder)
#template.generic.NestedContainer.startOrder=90
# Classpath to the script used to start the generic container. (inherited from: generic.NestedContainer.startScript)
#template.generic.NestedContainer.startScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.NestedContainer.startTemplateClasspathResources)
#template.generic.NestedContainer.startTemplateClasspathResources=null
# The time to wait in seconds for a container start action. (inherited from: generic.NestedContainer.startWaitTime)
#template.generic.NestedContainer.startWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: generic.NestedContainer.stopClasspathResources)
#template.generic.NestedContainer.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: generic.NestedContainer.stopOrder)
#template.generic.NestedContainer.stopOrder=10
# Classpath to the script used to stop the generic container. (inherited from: generic.NestedContainer.stopScript)
#template.generic.NestedContainer.stopScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.NestedContainer.stopTemplateClasspathResources)
#template.generic.NestedContainer.stopTemplateClasspathResources=null
# The time to wait in seconds for a container stop action. (inherited from: generic.NestedContainer.stopWaitTime)
#template.generic.NestedContainer.stopWaitTime=0
# List of python library scripts that should be automatically loaded when using a GlassFish CLI script. (inherited from: glassfish.CliBasedContainer.libraryScripts)
#template.glassfish.CliBasedContainer.libraryScripts=glassfish/library/runtime.py,glassfish/library/commandHelper.py
# Restart Order (inherited from: glassfish.Cluster.restartOrder)
#template.glassfish.Cluster.restartOrder=80
# Start Order (inherited from: glassfish.Cluster.startOrder)
#template.glassfish.Cluster.startOrder=80
# Start Script (inherited from: glassfish.Cluster.startScript)
#template.glassfish.Cluster.startScript=glassfish/container/start-cluster.py
# Stop Order (inherited from: glassfish.Cluster.stopOrder)
#template.glassfish.Cluster.stopOrder=20
# Stop Script (inherited from: glassfish.Cluster.stopScript)
#template.glassfish.Cluster.stopScript=glassfish/container/stop-cluster.py
# Classpath to the script used to inspect the domain. (inherited from: glassfish.Domain.inspectScript)
#template.glassfish.Domain.inspectScript=glassfish/container/inspect-domain.py
# List of python library scripts that should be automatically loaded when using a GlassFish CLI script. (inherited from: glassfish.Domain.libraryScripts)
#template.glassfish.Domain.libraryScripts=glassfish/library/runtime.py,glassfish/library/commandHelper.py
# Restart Order (inherited from: glassfish.StandaloneServer.restartOrder)
#template.glassfish.StandaloneServer.restartOrder=80
# Start Order (inherited from: glassfish.StandaloneServer.startOrder)
#template.glassfish.StandaloneServer.startOrder=80
# Start Script (inherited from: glassfish.StandaloneServer.startScript)
#template.glassfish.StandaloneServer.startScript=glassfish/container/start-instance.py
# Stop Order (inherited from: glassfish.StandaloneServer.stopOrder)
#template.glassfish.StandaloneServer.stopOrder=20
# Stop Script (inherited from: glassfish.StandaloneServer.stopScript)
#template.glassfish.StandaloneServer.stopScript=glassfish/container/stop-instance.py
# Deployeds To Discover (inherited from: iis.Server.deployedsToDiscover)
#template.iis.Server.deployedsToDiscover=null
# Order at which the discover step will be executed. (inherited from: iis.Server.discoverOrder)
#template.iis.Server.discoverOrder=0
# Script invoked to inspect this container and discover deployeds on it. (inherited from: iis.Server.discoverScript)
#template.iis.Server.discoverScript=null
# List of scripts to append to the the step script. (inherited from: iis.Server.libraryScripts)
#template.iis.Server.libraryScripts=iis/runtime/assert.ps1,iis/runtime/load-webadministration.ps1
# Power Shell Path (inherited from: iis.Server.powerShellPath)
#template.iis.Server.powerShellPath=powershell
# Deployeds To Discover (inherited from: iis6.Server.deployedsToDiscover)
#template.iis6.Server.deployedsToDiscover=null
# Order at which the discover step will be executed. (inherited from: iis6.Server.discoverOrder)
#template.iis6.Server.discoverOrder=0
# Script invoked to inspect this container and discover deployeds on it. (inherited from: iis6.Server.discoverScript)
#template.iis6.Server.discoverScript=null
# List of scripts to append to the the step script. (inherited from: iis6.Server.libraryScripts)
#template.iis6.Server.libraryScripts=powershell/runtime/base.ps1,iis/runtime/assert.ps1,iis6/runtime/iis6-admin.ps1
# Power Shell Path (inherited from: iis6.Server.powerShellPath)
#template.iis6.Server.powerShellPath=powershell
# NOT USED (inherited from: iis6.Server.sleepAfterAppPoolCreate)
#template.iis6.Server.sleepAfterAppPoolCreate=null
# Address where to bind the server on starting. (inherited from: jbossas.BaseServer.bindAddress)
#template.jbossas.BaseServer.bindAddress=0.0.0.0
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: jbossas.BaseServer.inspectClasspathResources)
#template.jbossas.BaseServer.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: jbossas.BaseServer.inspectScript)
#template.jbossas.BaseServer.inspectScript=null
# Script (a freemarker template) used to inspect the server (inherited from: jbossas.BaseServer.inspectTemplate)
#template.jbossas.BaseServer.inspectTemplate=jboss/container/inspect
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.BaseServer.inspectTemplateClasspathResources)
#template.jbossas.BaseServer.inspectTemplateClasspathResources=twiddle-invoker.ftl,jboss/container/inspect.bat,jboss/container/inspect.sh,jboss/container/query.sh,jboss/container/query.bat
# Jms Resource File Suffix (inherited from: jbossas.BaseServer.jmsResourceFileSuffix)
#template.jbossas.BaseServer.jmsResourceFileSuffix=service
# Script (a freemarker template) used to query a mbean value from the server (inherited from: jbossas.BaseServer.queryTemplate)
#template.jbossas.BaseServer.queryTemplate=jboss/container/query
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: jbossas.BaseServer.restartClasspathResources)
#template.jbossas.BaseServer.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: jbossas.BaseServer.restartOrder)
#template.jbossas.BaseServer.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: jbossas.BaseServer.restartScript)
#template.jbossas.BaseServer.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.BaseServer.restartTemplateClasspathResources)
#template.jbossas.BaseServer.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: jbossas.BaseServer.restartWaitTime)
#template.jbossas.BaseServer.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: jbossas.BaseServer.startClasspathResources)
#template.jbossas.BaseServer.startClasspathResources=null
# Optional command line arguments to pass to the JBoss startup script. (inherited from: jbossas.BaseServer.startOptions)
#template.jbossas.BaseServer.startOptions=
# The order of the start container step in the step list. (inherited from: jbossas.BaseServer.startOrder)
#template.jbossas.BaseServer.startOrder=90
# Script used to start the server (inherited from: jbossas.BaseServer.startScript)
#template.jbossas.BaseServer.startScript=jboss/container/start
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.BaseServer.startTemplateClasspathResources)
#template.jbossas.BaseServer.startTemplateClasspathResources=null
# Duration (in secs) to wait after the start server step has been executed (inherited from: jbossas.BaseServer.startWaitTime)
#template.jbossas.BaseServer.startWaitTime=30
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: jbossas.BaseServer.stopClasspathResources)
#template.jbossas.BaseServer.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: jbossas.BaseServer.stopOrder)
#template.jbossas.BaseServer.stopOrder=10
# Script used to stop the server (inherited from: jbossas.BaseServer.stopScript)
#template.jbossas.BaseServer.stopScript=jboss/container/stop
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.BaseServer.stopTemplateClasspathResources)
#template.jbossas.BaseServer.stopTemplateClasspathResources=null
# Duration (in secs) to wait after the stop server step has been executed (inherited from: jbossas.BaseServer.stopWaitTime)
#template.jbossas.BaseServer.stopWaitTime=10
# Address where to bind the server on starting. (inherited from: jbossas.ServerV4.bindAddress)
#template.jbossas.ServerV4.bindAddress=0.0.0.0
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: jbossas.ServerV4.inspectClasspathResources)
#template.jbossas.ServerV4.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: jbossas.ServerV4.inspectScript)
#template.jbossas.ServerV4.inspectScript=null
# Script (a freemarker template) used to inspect the server (inherited from: jbossas.ServerV4.inspectTemplate)
#template.jbossas.ServerV4.inspectTemplate=jboss/container/inspect
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.ServerV4.inspectTemplateClasspathResources)
#template.jbossas.ServerV4.inspectTemplateClasspathResources=twiddle-invoker.ftl,jboss/container/inspect.bat,jboss/container/inspect.sh,jboss/container/query.sh,jboss/container/query.bat
# Jms Resource File Suffix (inherited from: jbossas.ServerV4.jmsResourceFileSuffix)
#template.jbossas.ServerV4.jmsResourceFileSuffix=service
# Script (a freemarker template) used to query a mbean value from the server (inherited from: jbossas.ServerV4.queryTemplate)
#template.jbossas.ServerV4.queryTemplate=jboss/container/query
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: jbossas.ServerV4.restartClasspathResources)
#template.jbossas.ServerV4.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: jbossas.ServerV4.restartOrder)
#template.jbossas.ServerV4.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: jbossas.ServerV4.restartScript)
#template.jbossas.ServerV4.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.ServerV4.restartTemplateClasspathResources)
#template.jbossas.ServerV4.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: jbossas.ServerV4.restartWaitTime)
#template.jbossas.ServerV4.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: jbossas.ServerV4.startClasspathResources)
#template.jbossas.ServerV4.startClasspathResources=null
# Optional command line arguments to pass to the JBoss startup script. (inherited from: jbossas.ServerV4.startOptions)
#template.jbossas.ServerV4.startOptions=
# The order of the start container step in the step list. (inherited from: jbossas.ServerV4.startOrder)
#template.jbossas.ServerV4.startOrder=90
# Script used to start the server (inherited from: jbossas.ServerV4.startScript)
#template.jbossas.ServerV4.startScript=jboss/container/start
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.ServerV4.startTemplateClasspathResources)
#template.jbossas.ServerV4.startTemplateClasspathResources=null
# Duration (in secs) to wait after the start server step has been executed (inherited from: jbossas.ServerV4.startWaitTime)
#template.jbossas.ServerV4.startWaitTime=30
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: jbossas.ServerV4.stopClasspathResources)
#template.jbossas.ServerV4.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: jbossas.ServerV4.stopOrder)
#template.jbossas.ServerV4.stopOrder=10
# Script used to stop the server (inherited from: jbossas.ServerV4.stopScript)
#template.jbossas.ServerV4.stopScript=jboss/container/stop
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.ServerV4.stopTemplateClasspathResources)
#template.jbossas.ServerV4.stopTemplateClasspathResources=null
# Duration (in secs) to wait after the stop server step has been executed (inherited from: jbossas.ServerV4.stopWaitTime)
#template.jbossas.ServerV4.stopWaitTime=10
# Version (inherited from: jbossas.ServerV4.version)
#template.jbossas.ServerV4.version=4
# Address where to bind the server on starting. (inherited from: jbossas.ServerV5.bindAddress)
#template.jbossas.ServerV5.bindAddress=0.0.0.0
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: jbossas.ServerV5.inspectClasspathResources)
#template.jbossas.ServerV5.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: jbossas.ServerV5.inspectScript)
#template.jbossas.ServerV5.inspectScript=null
# Script (a freemarker template) used to inspect the server (inherited from: jbossas.ServerV5.inspectTemplate)
#template.jbossas.ServerV5.inspectTemplate=jboss/container/inspect
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.ServerV5.inspectTemplateClasspathResources)
#template.jbossas.ServerV5.inspectTemplateClasspathResources=twiddle-invoker.ftl,jboss/container/inspect.bat,jboss/container/inspect.sh,jboss/container/query.sh,jboss/container/query.bat
# Jms Resource File Suffix (inherited from: jbossas.ServerV5.jmsResourceFileSuffix)
#template.jbossas.ServerV5.jmsResourceFileSuffix=service
# Script (a freemarker template) used to query a mbean value from the server (inherited from: jbossas.ServerV5.queryTemplate)
#template.jbossas.ServerV5.queryTemplate=jboss/container/query
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: jbossas.ServerV5.restartClasspathResources)
#template.jbossas.ServerV5.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: jbossas.ServerV5.restartOrder)
#template.jbossas.ServerV5.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: jbossas.ServerV5.restartScript)
#template.jbossas.ServerV5.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.ServerV5.restartTemplateClasspathResources)
#template.jbossas.ServerV5.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: jbossas.ServerV5.restartWaitTime)
#template.jbossas.ServerV5.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: jbossas.ServerV5.startClasspathResources)
#template.jbossas.ServerV5.startClasspathResources=null
# Optional command line arguments to pass to the JBoss startup script. (inherited from: jbossas.ServerV5.startOptions)
#template.jbossas.ServerV5.startOptions=
# The order of the start container step in the step list. (inherited from: jbossas.ServerV5.startOrder)
#template.jbossas.ServerV5.startOrder=90
# Script used to start the server (inherited from: jbossas.ServerV5.startScript)
#template.jbossas.ServerV5.startScript=jboss/container/start
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.ServerV5.startTemplateClasspathResources)
#template.jbossas.ServerV5.startTemplateClasspathResources=null
# Duration (in secs) to wait after the start server step has been executed (inherited from: jbossas.ServerV5.startWaitTime)
#template.jbossas.ServerV5.startWaitTime=30
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: jbossas.ServerV5.stopClasspathResources)
#template.jbossas.ServerV5.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: jbossas.ServerV5.stopOrder)
#template.jbossas.ServerV5.stopOrder=10
# Script used to stop the server (inherited from: jbossas.ServerV5.stopScript)
#template.jbossas.ServerV5.stopScript=jboss/container/stop
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.ServerV5.stopTemplateClasspathResources)
#template.jbossas.ServerV5.stopTemplateClasspathResources=null
# Duration (in secs) to wait after the stop server step has been executed (inherited from: jbossas.ServerV5.stopWaitTime)
#template.jbossas.ServerV5.stopWaitTime=10
# Version (inherited from: jbossas.ServerV5.version)
#template.jbossas.ServerV5.version=5
# Address where to bind the server on starting. (inherited from: jbossas.ServerV6.bindAddress)
#template.jbossas.ServerV6.bindAddress=0.0.0.0
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: jbossas.ServerV6.inspectClasspathResources)
#template.jbossas.ServerV6.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: jbossas.ServerV6.inspectScript)
#template.jbossas.ServerV6.inspectScript=null
# Script (a freemarker template) used to inspect the server (inherited from: jbossas.ServerV6.inspectTemplate)
#template.jbossas.ServerV6.inspectTemplate=jboss/container/inspect
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.ServerV6.inspectTemplateClasspathResources)
#template.jbossas.ServerV6.inspectTemplateClasspathResources=twiddle-invoker.ftl,jboss/container/inspect.bat,jboss/container/inspect.sh,jboss/container/query.sh,jboss/container/query.bat
# Jms Resource File Suffix (inherited from: jbossas.ServerV6.jmsResourceFileSuffix)
#template.jbossas.ServerV6.jmsResourceFileSuffix=hornetq-jms
# Script (a freemarker template) used to query a mbean value from the server (inherited from: jbossas.ServerV6.queryTemplate)
#template.jbossas.ServerV6.queryTemplate=jboss/container/query
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: jbossas.ServerV6.restartClasspathResources)
#template.jbossas.ServerV6.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: jbossas.ServerV6.restartOrder)
#template.jbossas.ServerV6.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: jbossas.ServerV6.restartScript)
#template.jbossas.ServerV6.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.ServerV6.restartTemplateClasspathResources)
#template.jbossas.ServerV6.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: jbossas.ServerV6.restartWaitTime)
#template.jbossas.ServerV6.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: jbossas.ServerV6.startClasspathResources)
#template.jbossas.ServerV6.startClasspathResources=null
# Optional command line arguments to pass to the JBoss startup script. (inherited from: jbossas.ServerV6.startOptions)
#template.jbossas.ServerV6.startOptions=
# The order of the start container step in the step list. (inherited from: jbossas.ServerV6.startOrder)
#template.jbossas.ServerV6.startOrder=90
# Script used to start the server (inherited from: jbossas.ServerV6.startScript)
#template.jbossas.ServerV6.startScript=jboss/container/start
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.ServerV6.startTemplateClasspathResources)
#template.jbossas.ServerV6.startTemplateClasspathResources=null
# Duration (in secs) to wait after the start server step has been executed (inherited from: jbossas.ServerV6.startWaitTime)
#template.jbossas.ServerV6.startWaitTime=30
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: jbossas.ServerV6.stopClasspathResources)
#template.jbossas.ServerV6.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: jbossas.ServerV6.stopOrder)
#template.jbossas.ServerV6.stopOrder=10
# Script used to stop the server (inherited from: jbossas.ServerV6.stopScript)
#template.jbossas.ServerV6.stopScript=jboss/container/stop
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: jbossas.ServerV6.stopTemplateClasspathResources)
#template.jbossas.ServerV6.stopTemplateClasspathResources=null
# Duration (in secs) to wait after the stop server step has been executed (inherited from: jbossas.ServerV6.stopWaitTime)
#template.jbossas.ServerV6.stopWaitTime=10
# Version (inherited from: jbossas.ServerV6.version)
#template.jbossas.ServerV6.version=6
# Connection read timeout for CLI daemon boot up. (inherited from: jbossdm.CliBasedContainer.daemonConnectTimeout)
#template.jbossdm.CliBasedContainer.daemonConnectTimeout=null
# List of python library scripts that should be automatically loaded when using a JBoss CLI script (inherited from: jbossdm.CliBasedContainer.libraries)
#template.jbossdm.CliBasedContainer.libraries=jboss/dm/library/runtime.py
# Connection read timeout for CLI daemon boot up. (inherited from: jbossdm.Domain.daemonConnectTimeout)
#template.jbossdm.Domain.daemonConnectTimeout=300000
# List of python library scripts that should be automatically loaded when using a JBoss CLI script (inherited from: jbossdm.Domain.libraries)
#template.jbossdm.Domain.libraries=jboss/dm/library/runtime.py
# Connection read timeout for CLI daemon boot up. (inherited from: jbossdm.StandaloneServer.daemonConnectTimeout)
#template.jbossdm.StandaloneServer.daemonConnectTimeout=300000
# List of python library scripts that should be automatically loaded when using a JBoss CLI script (inherited from: jbossdm.StandaloneServer.libraries)
#template.jbossdm.StandaloneServer.libraries=jboss/dm/library/runtime.py
# The set of created CIs. (inherited from: k8s.BasePodContainer.boundConfigurationItems)
#template.k8s.BasePodContainer.boundConfigurationItems=null
# Client Factory (inherited from: k8s.Master.clientFactory)
#template.k8s.Master.clientFactory=xld.kubernetes.factories.client_factory.KubernetesClientFactory
# Container Helper (inherited from: k8s.Master.containerHelper)
#template.k8s.Master.containerHelper=xld.kubernetes.k8s_master_helper.K8sMasterHelper
# The set of created CIs. (inherited from: k8s.Namespace.boundConfigurationItems)
#template.k8s.Namespace.boundConfigurationItems=null
# Container Helper (inherited from: k8s.Namespace.containerHelper)
#template.k8s.Namespace.containerHelper=xld.kubernetes.namespace.namespace_helper.NamespaceHelper
# The set of created CIs. (inherited from: openshift.Project.boundConfigurationItems)
#template.openshift.Project.boundConfigurationItems=null
# Container Helper (inherited from: openshift.Project.containerHelper)
#template.openshift.Project.containerHelper=xld.openshift.project.helper.ProjectHelper
# Client Factory (inherited from: openshift.Server.clientFactory)
#template.openshift.Server.clientFactory=xld.openshift.factories.client_factory.OpenShiftClientFactory
# Container Helper (inherited from: openshift.Server.containerHelper)
#template.openshift.Server.containerHelper=xld.openshift.server_helper.ServerHelper
# Number of milliseconds Overthere waits for a connection to a remote host to be established (inherited from: overthere.BaseSmbHost.connectionTimeoutMillis)
#template.overthere.BaseSmbHost.connectionTimeoutMillis=120000
# Protocol to use when connecting to this host (inherited from: overthere.BaseSmbHost.protocol)
#template.overthere.BaseSmbHost.protocol=null
# Executable shell program (inherited from: overthere.BaseSmbHost.shell)
#template.overthere.BaseSmbHost.shell=null
# If true, delete the temporary connection directory when the connection is closed (inherited from: overthere.BaseSmbHost.tmpDeleteOnDisconnect)
#template.overthere.BaseSmbHost.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: overthere.BaseSmbHost.tmpFileCreationRetries)
#template.overthere.BaseSmbHost.tmpFileCreationRetries=1000
# Context used by the WinRM server (WINRM only) (inherited from: overthere.BaseSmbHost.winrmContext)
#template.overthere.BaseSmbHost.winrmContext=/wsman
# Envelop size for WinRM messages (WINRM only) (inherited from: overthere.BaseSmbHost.winrmEnvelopSize)
#template.overthere.BaseSmbHost.winrmEnvelopSize=153600
# HTTPS certifiacte trust strategy for WinRM over HTTPS (WINRM_INTERNAL only) (inherited from: overthere.BaseSmbHost.winrmHttpsCertificateTrustStrategy)
#template.overthere.BaseSmbHost.winrmHttpsCertificateTrustStrategy=STRICT
# HTTPS host name verification strategy for WinRM over HTTPS (WINRM_INTERNAL only) (inherited from: overthere.BaseSmbHost.winrmHttpsHostnameVerificationStrategy)
#template.overthere.BaseSmbHost.winrmHttpsHostnameVerificationStrategy=STRICT
# Add the port number (e.g. 5985) to the service principal name (SPN) for which a Kerberos ticket is requested (WINRM_INTERNAL only) (inherited from: overthere.BaseSmbHost.winrmKerberosAddPortToSpn)
#template.overthere.BaseSmbHost.winrmKerberosAddPortToSpn=false
# Enable Kerberos debug messages (WINRM only) (inherited from: overthere.BaseSmbHost.winrmKerberosDebug)
#template.overthere.BaseSmbHost.winrmKerberosDebug=false
# Use the HTTP protocol in the service principal name (SPN) for which a Kerberos ticket is requested, instead of the default WSMAN protocol (WINRM_INTERNAL only) (inherited from: overthere.BaseSmbHost.winrmKerberosUseHttpSpn)
#template.overthere.BaseSmbHost.winrmKerberosUseHttpSpn=false
# Locale to use for WinRM messages (WINRM only) (inherited from: overthere.BaseSmbHost.winrmLocale)
#template.overthere.BaseSmbHost.winrmLocale=en-US
# Timeout to use for WinRM messages in XML schema duration format (inherited from: overthere.BaseSmbHost.winrmTimeout)
#template.overthere.BaseSmbHost.winrmTimeout=PT60.000S
# Turn on compression. Older installations on remote machines may not support compression so it is off by default (WINRM_NATIVE only) (inherited from: overthere.BaseSmbHost.winrsCompression)
#template.overthere.BaseSmbHost.winrsCompression=false
# Specifies that echo should be disabled. This may be necessary to ensure that user's answers to remote prompts are not displayed locally (WINRM_NATIVE only) (inherited from: overthere.BaseSmbHost.winrsNoecho)
#template.overthere.BaseSmbHost.winrsNoecho=false
# Specifies that the user's profile should not be loaded. By default the server will attempt to load the user profile. If the remote user is not a local administrator on the target system then this option will be required (the default willresult in error) (WINRM_NATIVE only) (inherited from: overthere.BaseSmbHost.winrsNoprofile)
#template.overthere.BaseSmbHost.winrsNoprofile=false
# Disable encryption. Requires the remote host to have been configured to allow that (WINRM_NATIVE only) (inherited from: overthere.BaseSmbHost.winrsUnencrypted)
#template.overthere.BaseSmbHost.winrsUnencrypted=false
# Number of milliseconds Overthere waits for a connection to a remote host to be established (inherited from: overthere.CifsHost.connectionTimeoutMillis)
#template.overthere.CifsHost.connectionTimeoutMillis=120000
# Protocol to use when connecting to this host (inherited from: overthere.CifsHost.protocol)
#template.overthere.CifsHost.protocol=cifs
# Executable shell program (inherited from: overthere.CifsHost.shell)
#template.overthere.CifsHost.shell=null
# If true, delete the temporary connection directory when the connection is closed (inherited from: overthere.CifsHost.tmpDeleteOnDisconnect)
#template.overthere.CifsHost.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: overthere.CifsHost.tmpFileCreationRetries)
#template.overthere.CifsHost.tmpFileCreationRetries=1000
# Context used by the WinRM server (WINRM only) (inherited from: overthere.CifsHost.winrmContext)
#template.overthere.CifsHost.winrmContext=/wsman
# Envelop size for WinRM messages (WINRM only) (inherited from: overthere.CifsHost.winrmEnvelopSize)
#template.overthere.CifsHost.winrmEnvelopSize=153600
# HTTPS certifiacte trust strategy for WinRM over HTTPS (WINRM_INTERNAL only) (inherited from: overthere.CifsHost.winrmHttpsCertificateTrustStrategy)
#template.overthere.CifsHost.winrmHttpsCertificateTrustStrategy=STRICT
# HTTPS host name verification strategy for WinRM over HTTPS (WINRM_INTERNAL only) (inherited from: overthere.CifsHost.winrmHttpsHostnameVerificationStrategy)
#template.overthere.CifsHost.winrmHttpsHostnameVerificationStrategy=STRICT
# Add the port number (e.g. 5985) to the service principal name (SPN) for which a Kerberos ticket is requested (WINRM_INTERNAL only) (inherited from: overthere.CifsHost.winrmKerberosAddPortToSpn)
#template.overthere.CifsHost.winrmKerberosAddPortToSpn=false
# Enable Kerberos debug messages (WINRM only) (inherited from: overthere.CifsHost.winrmKerberosDebug)
#template.overthere.CifsHost.winrmKerberosDebug=false
# Use the HTTP protocol in the service principal name (SPN) for which a Kerberos ticket is requested, instead of the default WSMAN protocol (WINRM_INTERNAL only) (inherited from: overthere.CifsHost.winrmKerberosUseHttpSpn)
#template.overthere.CifsHost.winrmKerberosUseHttpSpn=false
# Locale to use for WinRM messages (WINRM only) (inherited from: overthere.CifsHost.winrmLocale)
#template.overthere.CifsHost.winrmLocale=en-US
# Timeout to use for WinRM messages in XML schema duration format (inherited from: overthere.CifsHost.winrmTimeout)
#template.overthere.CifsHost.winrmTimeout=PT60.000S
# Turn on compression. Older installations on remote machines may not support compression so it is off by default (WINRM_NATIVE only) (inherited from: overthere.CifsHost.winrsCompression)
#template.overthere.CifsHost.winrsCompression=false
# Specifies that echo should be disabled. This may be necessary to ensure that user's answers to remote prompts are not displayed locally (WINRM_NATIVE only) (inherited from: overthere.CifsHost.winrsNoecho)
#template.overthere.CifsHost.winrsNoecho=false
# Specifies that the user's profile should not be loaded. By default the server will attempt to load the user profile. If the remote user is not a local administrator on the target system then this option will be required (the default willresult in error) (WINRM_NATIVE only) (inherited from: overthere.CifsHost.winrsNoprofile)
#template.overthere.CifsHost.winrsNoprofile=false
# Disable encryption. Requires the remote host to have been configured to allow that (WINRM_NATIVE only) (inherited from: overthere.CifsHost.winrsUnencrypted)
#template.overthere.CifsHost.winrsUnencrypted=false
# Protocol to use when connecting to this host (inherited from: overthere.Host.protocol)
#template.overthere.Host.protocol=null
# Executable shell program (inherited from: overthere.Host.shell)
#template.overthere.Host.shell=null
# If true, delete the temporary connection directory when the connection is closed (inherited from: overthere.Host.tmpDeleteOnDisconnect)
#template.overthere.Host.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: overthere.Host.tmpFileCreationRetries)
#template.overthere.Host.tmpFileCreationRetries=1000
# Number of milliseconds Overthere waits for a connection to a remote host to be established (inherited from: overthere.HttpProxy.connectionTimeoutMillis)
#template.overthere.HttpProxy.connectionTimeoutMillis=120000
# Jumpstations and proxies are assumed to run on UNIX. XLD won't access files or run commmands on them anyway (inherited from: overthere.HttpProxy.os)
#template.overthere.HttpProxy.os=UNIX
# Protocol to use when connecting to this host (inherited from: overthere.HttpProxy.protocol)
#template.overthere.HttpProxy.protocol=proxy
# Proxy Type (inherited from: overthere.HttpProxy.proxyType)
#template.overthere.HttpProxy.proxyType=HTTP
# Executable shell program (inherited from: overthere.HttpProxy.shell)
#template.overthere.HttpProxy.shell=null
# Temporary directory is not needed for jumpstations and proxies (inherited from: overthere.HttpProxy.temporaryDirectoryPath)
#template.overthere.HttpProxy.temporaryDirectoryPath=null
# If true, delete the temporary connection directory when the connection is closed (inherited from: overthere.HttpProxy.tmpDeleteOnDisconnect)
#template.overthere.HttpProxy.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: overthere.HttpProxy.tmpFileCreationRetries)
#template.overthere.HttpProxy.tmpFileCreationRetries=1000
# Number of milliseconds Overthere waits for a connection to a remote host to be established (inherited from: overthere.Jumpstation.connectionTimeoutMillis)
#template.overthere.Jumpstation.connectionTimeoutMillis=120000
# Jumpstations and proxies are assumed to run on UNIX. XLD won't access files or run commmands on them anyway (inherited from: overthere.Jumpstation.os)
#template.overthere.Jumpstation.os=UNIX
# Protocol to use when connecting to this host (inherited from: overthere.Jumpstation.protocol)
#template.overthere.Jumpstation.protocol=null
# Executable shell program (inherited from: overthere.Jumpstation.shell)
#template.overthere.Jumpstation.shell=null
# Temporary directory is not needed for jumpstations and proxies (inherited from: overthere.Jumpstation.temporaryDirectoryPath)
#template.overthere.Jumpstation.temporaryDirectoryPath=null
# If true, delete the temporary connection directory when the connection is closed (inherited from: overthere.Jumpstation.tmpDeleteOnDisconnect)
#template.overthere.Jumpstation.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: overthere.Jumpstation.tmpFileCreationRetries)
#template.overthere.Jumpstation.tmpFileCreationRetries=1000
# Protocol to use when connecting to this host (inherited from: overthere.LocalHost.protocol)
#template.overthere.LocalHost.protocol=local
# Executable shell program (inherited from: overthere.LocalHost.shell)
#template.overthere.LocalHost.shell=null
# If true, delete the temporary connection directory when the connection is closed (inherited from: overthere.LocalHost.tmpDeleteOnDisconnect)
#template.overthere.LocalHost.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: overthere.LocalHost.tmpFileCreationRetries)
#template.overthere.LocalHost.tmpFileCreationRetries=1000
# Number of milliseconds Overthere waits for a connection to a remote host to be established (inherited from: overthere.RemoteHost.connectionTimeoutMillis)
#template.overthere.RemoteHost.connectionTimeoutMillis=120000
# Protocol to use when connecting to this host (inherited from: overthere.RemoteHost.protocol)
#template.overthere.RemoteHost.protocol=null
# Executable shell program (inherited from: overthere.RemoteHost.shell)
#template.overthere.RemoteHost.shell=null
# If true, delete the temporary connection directory when the connection is closed (inherited from: overthere.RemoteHost.tmpDeleteOnDisconnect)
#template.overthere.RemoteHost.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: overthere.RemoteHost.tmpFileCreationRetries)
#template.overthere.RemoteHost.tmpFileCreationRetries=1000
# Number of milliseconds Overthere waits for a connection to a remote host to be established (inherited from: overthere.SmbHost.connectionTimeoutMillis)
#template.overthere.SmbHost.connectionTimeoutMillis=120000
# Protocol to use when connecting to this host (inherited from: overthere.SmbHost.protocol)
#template.overthere.SmbHost.protocol=smb
# Executable shell program (inherited from: overthere.SmbHost.shell)
#template.overthere.SmbHost.shell=null
# If true, delete the temporary connection directory when the connection is closed (inherited from: overthere.SmbHost.tmpDeleteOnDisconnect)
#template.overthere.SmbHost.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: overthere.SmbHost.tmpFileCreationRetries)
#template.overthere.SmbHost.tmpFileCreationRetries=1000
# Context used by the WinRM server (WINRM only) (inherited from: overthere.SmbHost.winrmContext)
#template.overthere.SmbHost.winrmContext=/wsman
# Envelop size for WinRM messages (WINRM only) (inherited from: overthere.SmbHost.winrmEnvelopSize)
#template.overthere.SmbHost.winrmEnvelopSize=153600
# HTTPS certifiacte trust strategy for WinRM over HTTPS (WINRM_INTERNAL only) (inherited from: overthere.SmbHost.winrmHttpsCertificateTrustStrategy)
#template.overthere.SmbHost.winrmHttpsCertificateTrustStrategy=STRICT
# HTTPS host name verification strategy for WinRM over HTTPS (WINRM_INTERNAL only) (inherited from: overthere.SmbHost.winrmHttpsHostnameVerificationStrategy)
#template.overthere.SmbHost.winrmHttpsHostnameVerificationStrategy=STRICT
# Add the port number (e.g. 5985) to the service principal name (SPN) for which a Kerberos ticket is requested (WINRM_INTERNAL only) (inherited from: overthere.SmbHost.winrmKerberosAddPortToSpn)
#template.overthere.SmbHost.winrmKerberosAddPortToSpn=false
# Enable Kerberos debug messages (WINRM only) (inherited from: overthere.SmbHost.winrmKerberosDebug)
#template.overthere.SmbHost.winrmKerberosDebug=false
# Use the HTTP protocol in the service principal name (SPN) for which a Kerberos ticket is requested, instead of the default WSMAN protocol (WINRM_INTERNAL only) (inherited from: overthere.SmbHost.winrmKerberosUseHttpSpn)
#template.overthere.SmbHost.winrmKerberosUseHttpSpn=false
# Locale to use for WinRM messages (WINRM only) (inherited from: overthere.SmbHost.winrmLocale)
#template.overthere.SmbHost.winrmLocale=en-US
# Timeout to use for WinRM messages in XML schema duration format (inherited from: overthere.SmbHost.winrmTimeout)
#template.overthere.SmbHost.winrmTimeout=PT60.000S
# Turn on compression. Older installations on remote machines may not support compression so it is off by default (WINRM_NATIVE only) (inherited from: overthere.SmbHost.winrsCompression)
#template.overthere.SmbHost.winrsCompression=false
# Specifies that echo should be disabled. This may be necessary to ensure that user's answers to remote prompts are not displayed locally (WINRM_NATIVE only) (inherited from: overthere.SmbHost.winrsNoecho)
#template.overthere.SmbHost.winrsNoecho=false
# Specifies that the user's profile should not be loaded. By default the server will attempt to load the user profile. If the remote user is not a local administrator on the target system then this option will be required (the default willresult in error) (WINRM_NATIVE only) (inherited from: overthere.SmbHost.winrsNoprofile)
#template.overthere.SmbHost.winrsNoprofile=false
# Disable encryption. Requires the remote host to have been configured to allow that (WINRM_NATIVE only) (inherited from: overthere.SmbHost.winrsUnencrypted)
#template.overthere.SmbHost.winrsUnencrypted=false
# If true, a default PTY (dummy:80:24:0:0) is allocated when executing a command (inherited from: overthere.SshHost.allocateDefaultPty)
#template.overthere.SshHost.allocateDefaultPty=false
# Specification for the PTY to be allocated when executing a command. The format is TERM:COLS:ROWS:WIDTH:HEIGHT, e.g. xterm:80:24:0:0 (inherited from: overthere.SshHost.allocatePty)
#template.overthere.SshHost.allocatePty=null
# Number of milliseconds Overthere waits for a connection to a remote host to be established (inherited from: overthere.SshHost.connectionTimeoutMillis)
#template.overthere.SshHost.connectionTimeoutMillis=120000
# Regular expression to look for in keyboard-interactive authentication before sending the password (inherited from: overthere.SshHost.interactiveKeyboardAuthRegex)
#template.overthere.SshHost.interactiveKeyboardAuthRegex=.*Password:[ ]?
# Protocol to use when connecting to this host (inherited from: overthere.SshHost.protocol)
#template.overthere.SshHost.protocol=ssh
# Executable shell program (inherited from: overthere.SshHost.shell)
#template.overthere.SshHost.shell=null
# Su command to prefix to the original command. The placeholder {0} is replaced with the sudoUsername (inherited from: overthere.SshHost.suCommandPrefix)
#template.overthere.SshHost.suCommandPrefix=su - {0} -c
# If true, permissions are explicitly changed with chmod -R go+rX after uploading a file or directory (inherited from: overthere.SshHost.suOverrideUmask)
#template.overthere.SshHost.suOverrideUmask=true
# Regular expression to look for before sending the password (inherited from: overthere.SshHost.suPasswordPromptRegex)
#template.overthere.SshHost.suPasswordPromptRegex=.*[Pp]assword.*:
# If true, files are copied from the connection temporary directory using the -p flag to the cp command (inherited from: overthere.SshHost.suPreserveAttributesOnCopyFromTempFile)
#template.overthere.SshHost.suPreserveAttributesOnCopyFromTempFile=true
# If true, files are copied to the connection temporary directory using the -p flag to the cp command (inherited from: overthere.SshHost.suPreserveAttributesOnCopyToTempFile)
#template.overthere.SshHost.suPreserveAttributesOnCopyToTempFile=true
# If true, the original command is quoted when it is prefixed with suCommandPrefix (inherited from: overthere.SshHost.suQuoteCommand)
#template.overthere.SshHost.suQuoteCommand=true
# Sudo command to prefix to the original command. The placeholder {0} is replaced with the sudoUsername (inherited from: overthere.SshHost.sudoCommandPrefix)
#template.overthere.SshHost.sudoCommandPrefix=sudo -u {0}
# If true, permissions are explicitly changed with chmod -R go+rX after uploading a file or directory (inherited from: overthere.SshHost.sudoOverrideUmask)
#template.overthere.SshHost.sudoOverrideUmask=true
# Regular expression to look for in interactive sudo before sending the password (inherited from: overthere.SshHost.sudoPasswordPromptRegex)
#template.overthere.SshHost.sudoPasswordPromptRegex=.*[Pp]assword.*:
# If true, files are copied from the connection temporary directory using the -p flag to the cp command (inherited from: overthere.SshHost.sudoPreserveAttributesOnCopyFromTempFile)
#template.overthere.SshHost.sudoPreserveAttributesOnCopyFromTempFile=true
# If true, files are copied to the connection temporary directory using the -p flag to the cp command (inherited from: overthere.SshHost.sudoPreserveAttributesOnCopyToTempFile)
#template.overthere.SshHost.sudoPreserveAttributesOnCopyToTempFile=true
# If true, the original command is quoted when it is prefixed with sudoCommandPrefix (inherited from: overthere.SshHost.sudoQuoteCommand)
#template.overthere.SshHost.sudoQuoteCommand=false
# If true, delete the temporary connection directory when the connection is closed (inherited from: overthere.SshHost.tmpDeleteOnDisconnect)
#template.overthere.SshHost.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: overthere.SshHost.tmpFileCreationRetries)
#template.overthere.SshHost.tmpFileCreationRetries=1000
# Number of milliseconds Overthere waits for a connection to a remote host to be established (inherited from: overthere.SshJumpstation.connectionTimeoutMillis)
#template.overthere.SshJumpstation.connectionTimeoutMillis=120000
# Regular expression to look for in keyboard-interactive authentication before sending the password (inherited from: overthere.SshJumpstation.interactiveKeyboardAuthRegex)
#template.overthere.SshJumpstation.interactiveKeyboardAuthRegex=.*Password:[ ]?
# Jumpstations and proxies are assumed to run on UNIX. XLD won't access files or run commmands on them anyway (inherited from: overthere.SshJumpstation.os)
#template.overthere.SshJumpstation.os=UNIX
# Port from where to start looking for freely available ports to use as the local part of an SSH port forward (inherited from: overthere.SshJumpstation.portAllocationRangeStart)
#template.overthere.SshJumpstation.portAllocationRangeStart=1025
# Protocol to use when connecting to this host (inherited from: overthere.SshJumpstation.protocol)
#template.overthere.SshJumpstation.protocol=ssh-jumpstation
# Executable shell program (inherited from: overthere.SshJumpstation.shell)
#template.overthere.SshJumpstation.shell=null
# Temporary directory is not needed for jumpstations and proxies (inherited from: overthere.SshJumpstation.temporaryDirectoryPath)
#template.overthere.SshJumpstation.temporaryDirectoryPath=null
# If true, delete the temporary connection directory when the connection is closed (inherited from: overthere.SshJumpstation.tmpDeleteOnDisconnect)
#template.overthere.SshJumpstation.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: overthere.SshJumpstation.tmpFileCreationRetries)
#template.overthere.SshJumpstation.tmpFileCreationRetries=1000
# If true, a default PTY (dummy:80:24:0:0) is allocated when executing a command (inherited from: overthere.gcp.MetadataSshHost.allocateDefaultPty)
#template.overthere.gcp.MetadataSshHost.allocateDefaultPty=false
# Specification for the PTY to be allocated when executing a command. The format is TERM:COLS:ROWS:WIDTH:HEIGHT, e.g. xterm:80:24:0:0 (inherited from: overthere.gcp.MetadataSshHost.allocatePty)
#template.overthere.gcp.MetadataSshHost.allocatePty=null
# Number of milliseconds Overthere waits for a connection to a remote host to be established (inherited from: overthere.gcp.MetadataSshHost.connectionTimeoutMillis)
#template.overthere.gcp.MetadataSshHost.connectionTimeoutMillis=120000
# Gcp Key Management Type (inherited from: overthere.gcp.MetadataSshHost.gcpKeyManagementType)
#template.overthere.gcp.MetadataSshHost.gcpKeyManagementType=Metadata
# Protocol to use when connecting to this host (inherited from: overthere.gcp.MetadataSshHost.protocol)
#template.overthere.gcp.MetadataSshHost.protocol=gcp_ssh
# Executable shell program (inherited from: overthere.gcp.MetadataSshHost.shell)
#template.overthere.gcp.MetadataSshHost.shell=null
# If true, delete the temporary connection directory when the connection is closed (inherited from: overthere.gcp.MetadataSshHost.tmpDeleteOnDisconnect)
#template.overthere.gcp.MetadataSshHost.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: overthere.gcp.MetadataSshHost.tmpFileCreationRetries)
#template.overthere.gcp.MetadataSshHost.tmpFileCreationRetries=1000
# If true, a default PTY (dummy:80:24:0:0) is allocated when executing a command (inherited from: overthere.gcp.OsLoginSshHost.allocateDefaultPty)
#template.overthere.gcp.OsLoginSshHost.allocateDefaultPty=false
# Specification for the PTY to be allocated when executing a command. The format is TERM:COLS:ROWS:WIDTH:HEIGHT, e.g. xterm:80:24:0:0 (inherited from: overthere.gcp.OsLoginSshHost.allocatePty)
#template.overthere.gcp.OsLoginSshHost.allocatePty=null
# Number of milliseconds Overthere waits for a connection to a remote host to be established (inherited from: overthere.gcp.OsLoginSshHost.connectionTimeoutMillis)
#template.overthere.gcp.OsLoginSshHost.connectionTimeoutMillis=120000
# Gcp Key Management Type (inherited from: overthere.gcp.OsLoginSshHost.gcpKeyManagementType)
#template.overthere.gcp.OsLoginSshHost.gcpKeyManagementType=OsLogin
# Protocol to use when connecting to this host (inherited from: overthere.gcp.OsLoginSshHost.protocol)
#template.overthere.gcp.OsLoginSshHost.protocol=gcp_ssh
# Executable shell program (inherited from: overthere.gcp.OsLoginSshHost.shell)
#template.overthere.gcp.OsLoginSshHost.shell=null
# If true, delete the temporary connection directory when the connection is closed (inherited from: overthere.gcp.OsLoginSshHost.tmpDeleteOnDisconnect)
#template.overthere.gcp.OsLoginSshHost.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: overthere.gcp.OsLoginSshHost.tmpFileCreationRetries)
#template.overthere.gcp.OsLoginSshHost.tmpFileCreationRetries=1000
# Regular expression to identify which types of files the patch entries will be applied to (inherited from: patch.JsonPatchDictionary.jsonFileRegex)
#template.patch.JsonPatchDictionary.jsonFileRegex=.+\.(json)
# Regular expression to identify which types of files the patch entries will be applied to (inherited from: patch.JsonPatchDictionary.yamlFileRegex)
#template.patch.JsonPatchDictionary.yamlFileRegex=.+\.(yaml|yml)
# Optional map of parameters to pass to the steps (inherited from: policy.JythonStepJob.controlTaskParams)
#template.policy.JythonStepJob.controlTaskParams=null
# Optional map of parameters to pass to the steps (inherited from: policy.PackageRetentionPolicy.controlTaskParams)
#template.policy.PackageRetentionPolicy.controlTaskParams=null
# Description of this step, as it should appear in generated deployment plans (inherited from: policy.PackageRetentionPolicy.description)
#template.policy.PackageRetentionPolicy.description=Execute package removal job according to policy
# Policy Type (inherited from: policy.PackageRetentionPolicy.policyType)
#template.policy.PackageRetentionPolicy.policyType=LAST_N_ALL_ENV
# Path to the Python script to execute (relative to XL Deploy's classpath) (inherited from: policy.PackageRetentionPolicy.scriptPath)
#template.policy.PackageRetentionPolicy.scriptPath=policy/scripts/purge-packages.py
# Optional map of parameters to pass to the steps (inherited from: policy.TaskArchivePolicy.controlTaskParams)
#template.policy.TaskArchivePolicy.controlTaskParams=null
# Description of this step, as it should appear in generated deployment plans (inherited from: policy.TaskArchivePolicy.description)
#template.policy.TaskArchivePolicy.description=Execute task archiving job according to policy
# Path to the Python script to execute (relative to XL Deploy's classpath) (inherited from: policy.TaskArchivePolicy.scriptPath)
#template.policy.TaskArchivePolicy.scriptPath=policy/scripts/archive-tasks.py
# Optional map of parameters to pass to the steps (inherited from: policy.TaskRetentionPolicy.controlTaskParams)
#template.policy.TaskRetentionPolicy.controlTaskParams=null
# Description of this step, as it should appear in generated deployment plans (inherited from: policy.TaskRetentionPolicy.description)
#template.policy.TaskRetentionPolicy.description=Execute task removal job according to policy
# Path to the Python script to execute (relative to XL Deploy's classpath) (inherited from: policy.TaskRetentionPolicy.scriptPath)
#template.policy.TaskRetentionPolicy.scriptPath=policy/scripts/purge-tasks.py
# Deployeds To Discover (inherited from: powershell.BasePowerShellContainer.deployedsToDiscover)
#template.powershell.BasePowerShellContainer.deployedsToDiscover=null
# Order at which the discover step will be executed. (inherited from: powershell.BasePowerShellContainer.discoverOrder)
#template.powershell.BasePowerShellContainer.discoverOrder=0
# Script invoked to inspect this container and discover deployeds on it. (inherited from: powershell.BasePowerShellContainer.discoverScript)
#template.powershell.BasePowerShellContainer.discoverScript=null
# List of scripts to append to the the step script. (inherited from: powershell.BasePowerShellContainer.libraryScripts)
#template.powershell.BasePowerShellContainer.libraryScripts=powershell/runtime/base.ps1
# Power Shell Path (inherited from: powershell.BasePowerShellContainer.powerShellPath)
#template.powershell.BasePowerShellContainer.powerShellPath=powershell
# The set of created CIs. (inherited from: python.PythonManagedDeployedContainer.boundConfigurationItems)
#template.python.PythonManagedDeployedContainer.boundConfigurationItems=null
# The order in which a discover step will be executed. (inherited from: python.PythonManagedDeployedContainer.discoverOrder)
#template.python.PythonManagedDeployedContainer.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: python.PythonManagedDeployedContainer.exposeDeployedApplication)
#template.python.PythonManagedDeployedContainer.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: python.PythonManagedDeployedContainer.libraryScripts)
#template.python.PythonManagedDeployedContainer.libraryScripts=null
# Optional map of parameters to pass to the steps (inherited from: schedule.GarbageCollectionJob.controlTaskParams)
#template.schedule.GarbageCollectionJob.controlTaskParams=null
# Optional map of parameters to pass to the steps (inherited from: schedule.StepJob.controlTaskParams)
#template.schedule.StepJob.controlTaskParams=null
# The OS-specific wrapper script that calls the SQL client (inherited from: sql.Db2Client.clientWrapperScript)
#template.sql.Db2Client.clientWrapperScript=sql/Db2Client
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: sql.Db2Client.inspectClasspathResources)
#template.sql.Db2Client.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: sql.Db2Client.inspectScript)
#template.sql.Db2Client.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.Db2Client.inspectTemplateClasspathResources)
#template.sql.Db2Client.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: sql.Db2Client.restartClasspathResources)
#template.sql.Db2Client.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: sql.Db2Client.restartOrder)
#template.sql.Db2Client.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: sql.Db2Client.restartScript)
#template.sql.Db2Client.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.Db2Client.restartTemplateClasspathResources)
#template.sql.Db2Client.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: sql.Db2Client.restartWaitTime)
#template.sql.Db2Client.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: sql.Db2Client.startClasspathResources)
#template.sql.Db2Client.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: sql.Db2Client.startOrder)
#template.sql.Db2Client.startOrder=90
# Classpath to the script used to start the generic container. (inherited from: sql.Db2Client.startScript)
#template.sql.Db2Client.startScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.Db2Client.startTemplateClasspathResources)
#template.sql.Db2Client.startTemplateClasspathResources=null
# The time to wait in seconds for a container start action. (inherited from: sql.Db2Client.startWaitTime)
#template.sql.Db2Client.startWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: sql.Db2Client.stopClasspathResources)
#template.sql.Db2Client.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: sql.Db2Client.stopOrder)
#template.sql.Db2Client.stopOrder=10
# Classpath to the script used to stop the generic container. (inherited from: sql.Db2Client.stopScript)
#template.sql.Db2Client.stopScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.Db2Client.stopTemplateClasspathResources)
#template.sql.Db2Client.stopTemplateClasspathResources=null
# The time to wait in seconds for a container stop action. (inherited from: sql.Db2Client.stopWaitTime)
#template.sql.Db2Client.stopWaitTime=0
# The OS-specific wrapper script that calls the SQL client (inherited from: sql.MsSqlClient.clientWrapperScript)
#template.sql.MsSqlClient.clientWrapperScript=sql/MsSqlClient
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: sql.MsSqlClient.inspectClasspathResources)
#template.sql.MsSqlClient.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: sql.MsSqlClient.inspectScript)
#template.sql.MsSqlClient.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.MsSqlClient.inspectTemplateClasspathResources)
#template.sql.MsSqlClient.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: sql.MsSqlClient.restartClasspathResources)
#template.sql.MsSqlClient.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: sql.MsSqlClient.restartOrder)
#template.sql.MsSqlClient.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: sql.MsSqlClient.restartScript)
#template.sql.MsSqlClient.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.MsSqlClient.restartTemplateClasspathResources)
#template.sql.MsSqlClient.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: sql.MsSqlClient.restartWaitTime)
#template.sql.MsSqlClient.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: sql.MsSqlClient.startClasspathResources)
#template.sql.MsSqlClient.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: sql.MsSqlClient.startOrder)
#template.sql.MsSqlClient.startOrder=90
# Classpath to the script used to start the generic container. (inherited from: sql.MsSqlClient.startScript)
#template.sql.MsSqlClient.startScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.MsSqlClient.startTemplateClasspathResources)
#template.sql.MsSqlClient.startTemplateClasspathResources=null
# The time to wait in seconds for a container start action. (inherited from: sql.MsSqlClient.startWaitTime)
#template.sql.MsSqlClient.startWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: sql.MsSqlClient.stopClasspathResources)
#template.sql.MsSqlClient.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: sql.MsSqlClient.stopOrder)
#template.sql.MsSqlClient.stopOrder=10
# Classpath to the script used to stop the generic container. (inherited from: sql.MsSqlClient.stopScript)
#template.sql.MsSqlClient.stopScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.MsSqlClient.stopTemplateClasspathResources)
#template.sql.MsSqlClient.stopTemplateClasspathResources=null
# The time to wait in seconds for a container stop action. (inherited from: sql.MsSqlClient.stopWaitTime)
#template.sql.MsSqlClient.stopWaitTime=0
# The OS-specific wrapper script that calls the SQL client (inherited from: sql.MySqlClient.clientWrapperScript)
#template.sql.MySqlClient.clientWrapperScript=sql/MySqlClient
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: sql.MySqlClient.inspectClasspathResources)
#template.sql.MySqlClient.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: sql.MySqlClient.inspectScript)
#template.sql.MySqlClient.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.MySqlClient.inspectTemplateClasspathResources)
#template.sql.MySqlClient.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: sql.MySqlClient.restartClasspathResources)
#template.sql.MySqlClient.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: sql.MySqlClient.restartOrder)
#template.sql.MySqlClient.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: sql.MySqlClient.restartScript)
#template.sql.MySqlClient.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.MySqlClient.restartTemplateClasspathResources)
#template.sql.MySqlClient.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: sql.MySqlClient.restartWaitTime)
#template.sql.MySqlClient.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: sql.MySqlClient.startClasspathResources)
#template.sql.MySqlClient.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: sql.MySqlClient.startOrder)
#template.sql.MySqlClient.startOrder=90
# Classpath to the script used to start the generic container. (inherited from: sql.MySqlClient.startScript)
#template.sql.MySqlClient.startScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.MySqlClient.startTemplateClasspathResources)
#template.sql.MySqlClient.startTemplateClasspathResources=null
# The time to wait in seconds for a container start action. (inherited from: sql.MySqlClient.startWaitTime)
#template.sql.MySqlClient.startWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: sql.MySqlClient.stopClasspathResources)
#template.sql.MySqlClient.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: sql.MySqlClient.stopOrder)
#template.sql.MySqlClient.stopOrder=10
# Classpath to the script used to stop the generic container. (inherited from: sql.MySqlClient.stopScript)
#template.sql.MySqlClient.stopScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.MySqlClient.stopTemplateClasspathResources)
#template.sql.MySqlClient.stopTemplateClasspathResources=null
# The time to wait in seconds for a container stop action. (inherited from: sql.MySqlClient.stopWaitTime)
#template.sql.MySqlClient.stopWaitTime=0
# The OS-specific wrapper script that calls the SQL client (inherited from: sql.OracleClient.clientWrapperScript)
#template.sql.OracleClient.clientWrapperScript=sql/OracleClient
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: sql.OracleClient.inspectClasspathResources)
#template.sql.OracleClient.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: sql.OracleClient.inspectScript)
#template.sql.OracleClient.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.OracleClient.inspectTemplateClasspathResources)
#template.sql.OracleClient.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: sql.OracleClient.restartClasspathResources)
#template.sql.OracleClient.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: sql.OracleClient.restartOrder)
#template.sql.OracleClient.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: sql.OracleClient.restartScript)
#template.sql.OracleClient.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.OracleClient.restartTemplateClasspathResources)
#template.sql.OracleClient.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: sql.OracleClient.restartWaitTime)
#template.sql.OracleClient.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: sql.OracleClient.startClasspathResources)
#template.sql.OracleClient.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: sql.OracleClient.startOrder)
#template.sql.OracleClient.startOrder=90
# Classpath to the script used to start the generic container. (inherited from: sql.OracleClient.startScript)
#template.sql.OracleClient.startScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.OracleClient.startTemplateClasspathResources)
#template.sql.OracleClient.startTemplateClasspathResources=null
# The time to wait in seconds for a container start action. (inherited from: sql.OracleClient.startWaitTime)
#template.sql.OracleClient.startWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: sql.OracleClient.stopClasspathResources)
#template.sql.OracleClient.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: sql.OracleClient.stopOrder)
#template.sql.OracleClient.stopOrder=10
# Classpath to the script used to stop the generic container. (inherited from: sql.OracleClient.stopScript)
#template.sql.OracleClient.stopScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.OracleClient.stopTemplateClasspathResources)
#template.sql.OracleClient.stopTemplateClasspathResources=null
# The time to wait in seconds for a container stop action. (inherited from: sql.OracleClient.stopWaitTime)
#template.sql.OracleClient.stopWaitTime=0
# The OS-specific wrapper script that calls the SQL client (inherited from: sql.PostgreSqlClient.clientWrapperScript)
#template.sql.PostgreSqlClient.clientWrapperScript=sql/PostgreSqlClient
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: sql.PostgreSqlClient.inspectClasspathResources)
#template.sql.PostgreSqlClient.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: sql.PostgreSqlClient.inspectScript)
#template.sql.PostgreSqlClient.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.PostgreSqlClient.inspectTemplateClasspathResources)
#template.sql.PostgreSqlClient.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: sql.PostgreSqlClient.restartClasspathResources)
#template.sql.PostgreSqlClient.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: sql.PostgreSqlClient.restartOrder)
#template.sql.PostgreSqlClient.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: sql.PostgreSqlClient.restartScript)
#template.sql.PostgreSqlClient.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.PostgreSqlClient.restartTemplateClasspathResources)
#template.sql.PostgreSqlClient.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: sql.PostgreSqlClient.restartWaitTime)
#template.sql.PostgreSqlClient.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: sql.PostgreSqlClient.startClasspathResources)
#template.sql.PostgreSqlClient.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: sql.PostgreSqlClient.startOrder)
#template.sql.PostgreSqlClient.startOrder=90
# Classpath to the script used to start the generic container. (inherited from: sql.PostgreSqlClient.startScript)
#template.sql.PostgreSqlClient.startScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.PostgreSqlClient.startTemplateClasspathResources)
#template.sql.PostgreSqlClient.startTemplateClasspathResources=null
# The time to wait in seconds for a container start action. (inherited from: sql.PostgreSqlClient.startWaitTime)
#template.sql.PostgreSqlClient.startWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: sql.PostgreSqlClient.stopClasspathResources)
#template.sql.PostgreSqlClient.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: sql.PostgreSqlClient.stopOrder)
#template.sql.PostgreSqlClient.stopOrder=10
# Classpath to the script used to stop the generic container. (inherited from: sql.PostgreSqlClient.stopScript)
#template.sql.PostgreSqlClient.stopScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.PostgreSqlClient.stopTemplateClasspathResources)
#template.sql.PostgreSqlClient.stopTemplateClasspathResources=null
# The time to wait in seconds for a container stop action. (inherited from: sql.PostgreSqlClient.stopWaitTime)
#template.sql.PostgreSqlClient.stopWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: sql.SqlClient.inspectClasspathResources)
#template.sql.SqlClient.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: sql.SqlClient.inspectScript)
#template.sql.SqlClient.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.SqlClient.inspectTemplateClasspathResources)
#template.sql.SqlClient.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: sql.SqlClient.restartClasspathResources)
#template.sql.SqlClient.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: sql.SqlClient.restartOrder)
#template.sql.SqlClient.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: sql.SqlClient.restartScript)
#template.sql.SqlClient.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.SqlClient.restartTemplateClasspathResources)
#template.sql.SqlClient.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: sql.SqlClient.restartWaitTime)
#template.sql.SqlClient.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: sql.SqlClient.startClasspathResources)
#template.sql.SqlClient.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: sql.SqlClient.startOrder)
#template.sql.SqlClient.startOrder=90
# Classpath to the script used to start the generic container. (inherited from: sql.SqlClient.startScript)
#template.sql.SqlClient.startScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.SqlClient.startTemplateClasspathResources)
#template.sql.SqlClient.startTemplateClasspathResources=null
# The time to wait in seconds for a container start action. (inherited from: sql.SqlClient.startWaitTime)
#template.sql.SqlClient.startWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: sql.SqlClient.stopClasspathResources)
#template.sql.SqlClient.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: sql.SqlClient.stopOrder)
#template.sql.SqlClient.stopOrder=10
# Classpath to the script used to stop the generic container. (inherited from: sql.SqlClient.stopScript)
#template.sql.SqlClient.stopScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: sql.SqlClient.stopTemplateClasspathResources)
#template.sql.SqlClient.stopTemplateClasspathResources=null
# The time to wait in seconds for a container stop action. (inherited from: sql.SqlClient.stopWaitTime)
#template.sql.SqlClient.stopWaitTime=0
# Process failed tasks on CI according to the defined policy. (inherited from: stitch.BaseSource.onFailurePolicy)
#template.stitch.BaseSource.onFailurePolicy=CANCEL_AND_ARCHIVE
# Process successful tasks on CI according to the defined policy. (inherited from: stitch.BaseSource.onSuccessPolicy)
#template.stitch.BaseSource.onSuccessPolicy=ARCHIVE
# Process failed tasks on CI according to the defined policy. (inherited from: stitch.BaseSourceWithPath.onFailurePolicy)
#template.stitch.BaseSourceWithPath.onFailurePolicy=CANCEL_AND_ARCHIVE
# Process successful tasks on CI according to the defined policy. (inherited from: stitch.BaseSourceWithPath.onSuccessPolicy)
#template.stitch.BaseSourceWithPath.onSuccessPolicy=ARCHIVE
# Process failed tasks on CI according to the defined policy. (inherited from: stitch.ClasspathSource.onFailurePolicy)
#template.stitch.ClasspathSource.onFailurePolicy=CANCEL_AND_ARCHIVE
# Process successful tasks on CI according to the defined policy. (inherited from: stitch.ClasspathSource.onSuccessPolicy)
#template.stitch.ClasspathSource.onSuccessPolicy=ARCHIVE
# Process failed tasks on CI according to the defined policy. (inherited from: stitch.FolderSource.onFailurePolicy)
#template.stitch.FolderSource.onFailurePolicy=CANCEL_AND_ARCHIVE
# Process successful tasks on CI according to the defined policy. (inherited from: stitch.FolderSource.onSuccessPolicy)
#template.stitch.FolderSource.onSuccessPolicy=ARCHIVE
# Process failed tasks on CI according to the defined policy. (inherited from: stitch.GitSource.onFailurePolicy)
#template.stitch.GitSource.onFailurePolicy=CANCEL_AND_ARCHIVE
# Process successful tasks on CI according to the defined policy. (inherited from: stitch.GitSource.onSuccessPolicy)
#template.stitch.GitSource.onSuccessPolicy=ARCHIVE
# Process failed tasks on CI according to the defined policy. (inherited from: stitch.ZipSource.onFailurePolicy)
#template.stitch.ZipSource.onFailurePolicy=CANCEL_AND_ARCHIVE
# Process successful tasks on CI according to the defined policy. (inherited from: stitch.ZipSource.onSuccessPolicy)
#template.stitch.ZipSource.onSuccessPolicy=ARCHIVE
# Context Directory (inherited from: tomcat.CommonContext.contextDirectory)
#template.tomcat.CommonContext.contextDirectory=${container.server.home}/conf
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.CommonContext.inspectClasspathResources)
#template.tomcat.CommonContext.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.CommonContext.inspectScript)
#template.tomcat.CommonContext.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.CommonContext.inspectTemplateClasspathResources)
#template.tomcat.CommonContext.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: tomcat.CommonContext.restartClasspathResources)
#template.tomcat.CommonContext.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: tomcat.CommonContext.restartOrder)
#template.tomcat.CommonContext.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: tomcat.CommonContext.restartScript)
#template.tomcat.CommonContext.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.CommonContext.restartTemplateClasspathResources)
#template.tomcat.CommonContext.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: tomcat.CommonContext.restartWaitTime)
#template.tomcat.CommonContext.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: tomcat.CommonContext.startClasspathResources)
#template.tomcat.CommonContext.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: tomcat.CommonContext.startOrder)
#template.tomcat.CommonContext.startOrder=90
# Classpath to the script used to start the generic container. (inherited from: tomcat.CommonContext.startScript)
#template.tomcat.CommonContext.startScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.CommonContext.startTemplateClasspathResources)
#template.tomcat.CommonContext.startTemplateClasspathResources=null
# The time to wait in seconds for a container start action. (inherited from: tomcat.CommonContext.startWaitTime)
#template.tomcat.CommonContext.startWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: tomcat.CommonContext.stopClasspathResources)
#template.tomcat.CommonContext.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: tomcat.CommonContext.stopOrder)
#template.tomcat.CommonContext.stopOrder=10
# Classpath to the script used to stop the generic container. (inherited from: tomcat.CommonContext.stopScript)
#template.tomcat.CommonContext.stopScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.CommonContext.stopTemplateClasspathResources)
#template.tomcat.CommonContext.stopTemplateClasspathResources=null
# The time to wait in seconds for a container stop action. (inherited from: tomcat.CommonContext.stopWaitTime)
#template.tomcat.CommonContext.stopWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.ContextContainer.inspectClasspathResources)
#template.tomcat.ContextContainer.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.ContextContainer.inspectScript)
#template.tomcat.ContextContainer.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.ContextContainer.inspectTemplateClasspathResources)
#template.tomcat.ContextContainer.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: tomcat.ContextContainer.restartClasspathResources)
#template.tomcat.ContextContainer.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: tomcat.ContextContainer.restartOrder)
#template.tomcat.ContextContainer.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: tomcat.ContextContainer.restartScript)
#template.tomcat.ContextContainer.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.ContextContainer.restartTemplateClasspathResources)
#template.tomcat.ContextContainer.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: tomcat.ContextContainer.restartWaitTime)
#template.tomcat.ContextContainer.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: tomcat.ContextContainer.startClasspathResources)
#template.tomcat.ContextContainer.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: tomcat.ContextContainer.startOrder)
#template.tomcat.ContextContainer.startOrder=90
# Classpath to the script used to start the generic container. (inherited from: tomcat.ContextContainer.startScript)
#template.tomcat.ContextContainer.startScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.ContextContainer.startTemplateClasspathResources)
#template.tomcat.ContextContainer.startTemplateClasspathResources=null
# The time to wait in seconds for a container start action. (inherited from: tomcat.ContextContainer.startWaitTime)
#template.tomcat.ContextContainer.startWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: tomcat.ContextContainer.stopClasspathResources)
#template.tomcat.ContextContainer.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: tomcat.ContextContainer.stopOrder)
#template.tomcat.ContextContainer.stopOrder=10
# Classpath to the script used to stop the generic container. (inherited from: tomcat.ContextContainer.stopScript)
#template.tomcat.ContextContainer.stopScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.ContextContainer.stopTemplateClasspathResources)
#template.tomcat.ContextContainer.stopTemplateClasspathResources=null
# The time to wait in seconds for a container stop action. (inherited from: tomcat.ContextContainer.stopWaitTime)
#template.tomcat.ContextContainer.stopWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.Server.inspectClasspathResources)
#template.tomcat.Server.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.Server.inspectScript)
#template.tomcat.Server.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.Server.inspectTemplateClasspathResources)
#template.tomcat.Server.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: tomcat.Server.restartClasspathResources)
#template.tomcat.Server.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: tomcat.Server.restartOrder)
#template.tomcat.Server.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: tomcat.Server.restartScript)
#template.tomcat.Server.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.Server.restartTemplateClasspathResources)
#template.tomcat.Server.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: tomcat.Server.restartWaitTime)
#template.tomcat.Server.restartWaitTime=0
# Server Xml (inherited from: tomcat.Server.serverXml)
#template.tomcat.Server.serverXml=${container.home}/conf/server.xml
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: tomcat.Server.startClasspathResources)
#template.tomcat.Server.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: tomcat.Server.startOrder)
#template.tomcat.Server.startOrder=90
# Classpath to the script used to start the generic container. (inherited from: tomcat.Server.startScript)
#template.tomcat.Server.startScript=tc/server/start-tc
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.Server.startTemplateClasspathResources)
#template.tomcat.Server.startTemplateClasspathResources=null
# Status Script (inherited from: tomcat.Server.statusScript)
#template.tomcat.Server.statusScript=tc/server/status-tc
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: tomcat.Server.stopClasspathResources)
#template.tomcat.Server.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: tomcat.Server.stopOrder)
#template.tomcat.Server.stopOrder=10
# Classpath to the script used to stop the generic container. (inherited from: tomcat.Server.stopScript)
#template.tomcat.Server.stopScript=tc/server/stop-tc
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.Server.stopTemplateClasspathResources)
#template.tomcat.Server.stopTemplateClasspathResources=null
# App Base Absolute Path (inherited from: tomcat.VirtualHost.appBaseAbsolutePath)
#template.tomcat.VirtualHost.appBaseAbsolutePath=${container.server.home}/${container.appBase}
# Context Directory (inherited from: tomcat.VirtualHost.contextDirectory)
#template.tomcat.VirtualHost.contextDirectory=${container.server.home}/conf/Catalina/${container.hostName}
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.VirtualHost.inspectClasspathResources)
#template.tomcat.VirtualHost.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.VirtualHost.inspectScript)
#template.tomcat.VirtualHost.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.VirtualHost.inspectTemplateClasspathResources)
#template.tomcat.VirtualHost.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: tomcat.VirtualHost.restartClasspathResources)
#template.tomcat.VirtualHost.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: tomcat.VirtualHost.restartOrder)
#template.tomcat.VirtualHost.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: tomcat.VirtualHost.restartScript)
#template.tomcat.VirtualHost.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.VirtualHost.restartTemplateClasspathResources)
#template.tomcat.VirtualHost.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: tomcat.VirtualHost.restartWaitTime)
#template.tomcat.VirtualHost.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: tomcat.VirtualHost.startClasspathResources)
#template.tomcat.VirtualHost.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: tomcat.VirtualHost.startOrder)
#template.tomcat.VirtualHost.startOrder=90
# Classpath to the script used to start the generic container. (inherited from: tomcat.VirtualHost.startScript)
#template.tomcat.VirtualHost.startScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.VirtualHost.startTemplateClasspathResources)
#template.tomcat.VirtualHost.startTemplateClasspathResources=null
# The time to wait in seconds for a container start action. (inherited from: tomcat.VirtualHost.startWaitTime)
#template.tomcat.VirtualHost.startWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: tomcat.VirtualHost.stopClasspathResources)
#template.tomcat.VirtualHost.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: tomcat.VirtualHost.stopOrder)
#template.tomcat.VirtualHost.stopOrder=10
# Classpath to the script used to stop the generic container. (inherited from: tomcat.VirtualHost.stopScript)
#template.tomcat.VirtualHost.stopScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.VirtualHost.stopTemplateClasspathResources)
#template.tomcat.VirtualHost.stopTemplateClasspathResources=null
# The time to wait in seconds for a container stop action. (inherited from: tomcat.VirtualHost.stopWaitTime)
#template.tomcat.VirtualHost.stopWaitTime=0
# If true, permissions for changing checklist requirements will be checked on import (inherited from: udm.Application.verifyChecklistPermissionsOnCreate)
#template.udm.Application.verifyChecklistPermissionsOnCreate=null
# The set of created CIs. (inherited from: udm.BaseDeployedContainer.boundConfigurationItems)
#template.udm.BaseDeployedContainer.boundConfigurationItems=null
# The index of the cardinality amount created provisioneds. (inherited from: udm.BaseProvisionedContainer.ordinal)
#template.udm.BaseProvisionedContainer.ordinal=1
# If this is true, all password properties are exported as plaintext while exporting the package. If false, exportOnlyPasswordPlaceholders is considered. (inherited from: udm.CompositePackage.exportAllPasswords)
#template.udm.CompositePackage.exportAllPasswords=false
# If this is true, all password properties whose value starts and ends with double curly braces are exported as plaintext. Else, the password values are discarded while exporting the package. (inherited from: udm.CompositePackage.exportOnlyPasswordPlaceholders)
#template.udm.CompositePackage.exportOnlyPasswordPlaceholders=true
# Whether to ignore all the undefined properties used in the manifest or to raise an error, while importing a package. (inherited from: udm.CompositePackage.ignoreUndefinedPropertiesInManifest)
#template.udm.CompositePackage.ignoreUndefinedPropertiesInManifest=true
# If this is true, all password properties are exported as plaintext while exporting the package. If false, exportOnlyPasswordPlaceholders is considered. (inherited from: udm.DeploymentPackage.exportAllPasswords)
#template.udm.DeploymentPackage.exportAllPasswords=false
# If this is true, all password properties whose value starts and ends with double curly braces are exported as plaintext. Else, the password values are discarded while exporting the package. (inherited from: udm.DeploymentPackage.exportOnlyPasswordPlaceholders)
#template.udm.DeploymentPackage.exportOnlyPasswordPlaceholders=true
# Whether to ignore all the undefined properties used in the manifest or to raise an error, while importing a package. (inherited from: udm.DeploymentPackage.ignoreUndefinedPropertiesInManifest)
#template.udm.DeploymentPackage.ignoreUndefinedPropertiesInManifest=true
# The encrypted dictionary entries (inherited from: udm.EncryptedDictionary.encryptedEntries)
#template.udm.EncryptedDictionary.encryptedEntries=null
# If set, release conditions are not just verified before planning begins, an equivalent step is also added to the task (inherited from: udm.Environment.recheckConditionsAtDeploymentTime)
#template.udm.Environment.recheckConditionsAtDeploymentTime=true
# Recheck Conditions At Deployment Time Order (inherited from: udm.Environment.recheckConditionsAtDeploymentTimeOrder)
#template.udm.Environment.recheckConditionsAtDeploymentTimeOrder=9
# Protocol to use when connecting to this host (inherited from: udm.LazyHost.protocol)
#template.udm.LazyHost.protocol=null
# Executable shell program (inherited from: udm.LazyHost.shell)
#template.udm.LazyHost.shell=null
# If true, delete the temporary connection directory when the connection is closed (inherited from: udm.LazyHost.tmpDeleteOnDisconnect)
#template.udm.LazyHost.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: udm.LazyHost.tmpFileCreationRetries)
#template.udm.LazyHost.tmpFileCreationRetries=1000
# If this is true, all password properties are exported as plaintext while exporting the package. If false, exportOnlyPasswordPlaceholders is considered. (inherited from: udm.ProvisioningPackage.exportAllPasswords)
#template.udm.ProvisioningPackage.exportAllPasswords=false
# If this is true, all password properties whose value starts and ends with double curly braces are exported as plaintext. Else, the password values are discarded while exporting the package. (inherited from: udm.ProvisioningPackage.exportOnlyPasswordPlaceholders)
#template.udm.ProvisioningPackage.exportOnlyPasswordPlaceholders=true
# Whether to ignore all the undefined properties used in the manifest or to raise an error, while importing a package. (inherited from: udm.ProvisioningPackage.ignoreUndefinedPropertiesInManifest)
#template.udm.ProvisioningPackage.ignoreUndefinedPropertiesInManifest=true
# If this is true, all password properties are exported as plaintext while exporting the package. If false, exportOnlyPasswordPlaceholders is considered. (inherited from: udm.Version.exportAllPasswords)
#template.udm.Version.exportAllPasswords=false
# If this is true, all password properties whose value starts and ends with double curly braces are exported as plaintext. Else, the password values are discarded while exporting the package. (inherited from: udm.Version.exportOnlyPasswordPlaceholders)
#template.udm.Version.exportOnlyPasswordPlaceholders=true
# Whether to ignore all the undefined properties used in the manifest or to raise an error, while importing a package. (inherited from: udm.Version.ignoreUndefinedPropertiesInManifest)
#template.udm.Version.ignoreUndefinedPropertiesInManifest=true
# Config directory name of WebSphere Application Server. (inherited from: was.BaseCell.configDirName)
#template.was.BaseCell.configDirName=config
# Deployeds To Discover (inherited from: was.BaseCell.deployedsToDiscover)
#template.was.BaseCell.deployedsToDiscover=was.VirtualHost,was.SharedLibrary
# Inspect script for Cell (inherited from: was.BaseCell.inspectScript)
#template.was.BaseCell.inspectScript=was/container/discover-inspect-topology.py
# List of scripts to appended to runtime script (inherited from: was.BaseCell.libraryScripts)
#template.was.BaseCell.libraryScripts=was/container/discover-inspect-topology-lib.py, was/container/container-lib.py
# Set to true to execute commands with the Python daemon (inherited from: was.BaseCell.runWithDaemon)
#template.was.BaseCell.runWithDaemon=true
# Translated text of "Name" used to resolve version of WebSphere Application Server running in a non-English language. (inherited from: was.BaseCell.versionInfoNameField)
#template.was.BaseCell.versionInfoNameField=Name
# The set of created CIs. (inherited from: was.BaseCluster.boundConfigurationItems)
#template.was.BaseCluster.boundConfigurationItems=null
# The order in which a create step will be executed. (inherited from: was.BaseCluster.createOrder)
#template.was.BaseCluster.createOrder=56
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.BaseCluster.createScript)
#template.was.BaseCluster.createScript=null
# The word that is used to prefix a step description for the create operation. (inherited from: was.BaseCluster.createVerb)
#template.was.BaseCluster.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.BaseCluster.destroyOrder)
#template.was.BaseCluster.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.BaseCluster.destroyScript)
#template.was.BaseCluster.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.BaseCluster.destroyVerb)
#template.was.BaseCluster.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.BaseCluster.discoverOrder)
#template.was.BaseCluster.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.BaseCluster.exposeDeployedApplication)
#template.was.BaseCluster.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.BaseCluster.libraryScripts)
#template.was.BaseCluster.libraryScripts=null
# The order in which a modify step will be executed. (inherited from: was.BaseCluster.modifyOrder)
#template.was.BaseCluster.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.BaseCluster.modifyScript)
#template.was.BaseCluster.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.BaseCluster.modifyVerb)
#template.was.BaseCluster.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.BaseCluster.noopOrder)
#template.was.BaseCluster.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.BaseCluster.noopScript)
#template.was.BaseCluster.noopScript=null
# Noop Verb (inherited from: was.BaseCluster.noopVerb)
#template.was.BaseCluster.noopVerb=Noop
# Restart Order (inherited from: was.BaseCluster.restartOrder)
#template.was.BaseCluster.restartOrder=80
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.BaseCluster.standardPropertiesNotToExpose)
#template.was.BaseCluster.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.BaseCluster.startOrder)
#template.was.BaseCluster.startOrder=80
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.BaseCluster.startScript)
#template.was.BaseCluster.startScript=was/container/start-cluster.py
# The word that is used to prefix a step description for the start operation. (inherited from: was.BaseCluster.startVerb)
#template.was.BaseCluster.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.BaseCluster.stopOrder)
#template.was.BaseCluster.stopOrder=20
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.BaseCluster.stopScript)
#template.was.BaseCluster.stopScript=was/container/stop-cluster.py
# The word that is used to prefix a step description for the stop operation. (inherited from: was.BaseCluster.stopVerb)
#template.was.BaseCluster.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.BaseCluster.syncAfterCreateOrder)
#template.was.BaseCluster.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.BaseCluster.syncAfterDestroyOrder)
#template.was.BaseCluster.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.BaseCluster.syncAfterModifyOrder)
#template.was.BaseCluster.syncAfterModifyOrder=65
# The set of created CIs. (inherited from: was.Cluster.boundConfigurationItems)
#template.was.Cluster.boundConfigurationItems=null
# The order in which a create step will be executed. (inherited from: was.Cluster.createOrder)
#template.was.Cluster.createOrder=56
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.Cluster.createScript)
#template.was.Cluster.createScript=null
# The word that is used to prefix a step description for the create operation. (inherited from: was.Cluster.createVerb)
#template.was.Cluster.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.Cluster.destroyOrder)
#template.was.Cluster.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.Cluster.destroyScript)
#template.was.Cluster.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Cluster.destroyVerb)
#template.was.Cluster.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Cluster.discoverOrder)
#template.was.Cluster.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Cluster.exposeDeployedApplication)
#template.was.Cluster.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.Cluster.libraryScripts)
#template.was.Cluster.libraryScripts=null
# The order in which a modify step will be executed. (inherited from: was.Cluster.modifyOrder)
#template.was.Cluster.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.Cluster.modifyScript)
#template.was.Cluster.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Cluster.modifyVerb)
#template.was.Cluster.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Cluster.noopOrder)
#template.was.Cluster.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Cluster.noopScript)
#template.was.Cluster.noopScript=null
# Noop Verb (inherited from: was.Cluster.noopVerb)
#template.was.Cluster.noopVerb=Noop
# Restart Order (inherited from: was.Cluster.restartOrder)
#template.was.Cluster.restartOrder=80
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Cluster.standardPropertiesNotToExpose)
#template.was.Cluster.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Cluster.startOrder)
#template.was.Cluster.startOrder=80
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Cluster.startScript)
#template.was.Cluster.startScript=was/container/start-cluster.py
# The word that is used to prefix a step description for the start operation. (inherited from: was.Cluster.startVerb)
#template.was.Cluster.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Cluster.stopOrder)
#template.was.Cluster.stopOrder=20
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Cluster.stopScript)
#template.was.Cluster.stopScript=was/container/stop-cluster.py
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Cluster.stopVerb)
#template.was.Cluster.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Cluster.syncAfterCreateOrder)
#template.was.Cluster.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Cluster.syncAfterDestroyOrder)
#template.was.Cluster.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Cluster.syncAfterModifyOrder)
#template.was.Cluster.syncAfterModifyOrder=65
# Config directory name of WebSphere Application Server. (inherited from: was.DeploymentManager.configDirName)
#template.was.DeploymentManager.configDirName=config
# Deployeds To Discover (inherited from: was.DeploymentManager.deployedsToDiscover)
#template.was.DeploymentManager.deployedsToDiscover=was.VirtualHost,was.SharedLibrary
# Inspect script for Cell (inherited from: was.DeploymentManager.inspectScript)
#template.was.DeploymentManager.inspectScript=was/container/discover-inspect-topology.py
# List of scripts to appended to runtime script (inherited from: was.DeploymentManager.libraryScripts)
#template.was.DeploymentManager.libraryScripts=was/container/discover-inspect-topology-lib.py, was/container/container-lib.py
# Propagate Global Plugin Order (inherited from: was.DeploymentManager.propagateGlobalPluginOrder)
#template.was.DeploymentManager.propagateGlobalPluginOrder=82
# Set to true to execute commands with the Python daemon (inherited from: was.DeploymentManager.runWithDaemon)
#template.was.DeploymentManager.runWithDaemon=true
# Update Global Plugin Order (inherited from: was.DeploymentManager.updateGlobalPluginOrder)
#template.was.DeploymentManager.updateGlobalPluginOrder=81
# Update Global Plugin Script (inherited from: was.DeploymentManager.updateGlobalPluginScript)
#template.was.DeploymentManager.updateGlobalPluginScript=was/container/generate-global-plugin.py
# Translated text of "Name" used to resolve version of WebSphere Application Server running in a non-English language. (inherited from: was.DeploymentManager.versionInfoNameField)
#template.was.DeploymentManager.versionInfoNameField=Name
# The set of created CIs. (inherited from: was.DynamicCluster.boundConfigurationItems)
#template.was.DynamicCluster.boundConfigurationItems=null
# The order in which a create step will be executed. (inherited from: was.DynamicCluster.createOrder)
#template.was.DynamicCluster.createOrder=56
# Create Python Script (inherited from: was.DynamicCluster.createPythonScript)
#template.was.DynamicCluster.createPythonScript=was/container/create-dynamic-cluster.py
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.DynamicCluster.createScript)
#template.was.DynamicCluster.createScript=null
# The word that is used to prefix a step description for the create operation. (inherited from: was.DynamicCluster.createVerb)
#template.was.DynamicCluster.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.DynamicCluster.destroyOrder)
#template.was.DynamicCluster.destroyOrder=40
# Destroy Python Script (inherited from: was.DynamicCluster.destroyPythonScript)
#template.was.DynamicCluster.destroyPythonScript=was/container/destroy-dynamic-cluster.py
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.DynamicCluster.destroyScript)
#template.was.DynamicCluster.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.DynamicCluster.destroyVerb)
#template.was.DynamicCluster.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.DynamicCluster.discoverOrder)
#template.was.DynamicCluster.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.DynamicCluster.exposeDeployedApplication)
#template.was.DynamicCluster.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.DynamicCluster.libraryScripts)
#template.was.DynamicCluster.libraryScripts=null
# The order in which a modify step will be executed. (inherited from: was.DynamicCluster.modifyOrder)
#template.was.DynamicCluster.modifyOrder=60
# Modify Python Script (inherited from: was.DynamicCluster.modifyPythonScript)
#template.was.DynamicCluster.modifyPythonScript=was/container/modify-dynamic-cluster.py
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.DynamicCluster.modifyScript)
#template.was.DynamicCluster.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.DynamicCluster.modifyVerb)
#template.was.DynamicCluster.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.DynamicCluster.noopOrder)
#template.was.DynamicCluster.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.DynamicCluster.noopScript)
#template.was.DynamicCluster.noopScript=null
# Noop Verb (inherited from: was.DynamicCluster.noopVerb)
#template.was.DynamicCluster.noopVerb=Noop
# Restart Order (inherited from: was.DynamicCluster.restartOrder)
#template.was.DynamicCluster.restartOrder=80
# Servers that are part of this cluster (inherited from: was.DynamicCluster.servers)
#template.was.DynamicCluster.servers=null
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.DynamicCluster.standardPropertiesNotToExpose)
#template.was.DynamicCluster.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.DynamicCluster.startOrder)
#template.was.DynamicCluster.startOrder=80
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.DynamicCluster.startScript)
#template.was.DynamicCluster.startScript=was/container/start-cluster.py
# The word that is used to prefix a step description for the start operation. (inherited from: was.DynamicCluster.startVerb)
#template.was.DynamicCluster.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.DynamicCluster.stopOrder)
#template.was.DynamicCluster.stopOrder=20
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.DynamicCluster.stopScript)
#template.was.DynamicCluster.stopScript=was/container/stop-cluster.py
# The word that is used to prefix a step description for the stop operation. (inherited from: was.DynamicCluster.stopVerb)
#template.was.DynamicCluster.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.DynamicCluster.syncAfterCreateOrder)
#template.was.DynamicCluster.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.DynamicCluster.syncAfterDestroyOrder)
#template.was.DynamicCluster.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.DynamicCluster.syncAfterModifyOrder)
#template.was.DynamicCluster.syncAfterModifyOrder=65
# Create Python Script (inherited from: was.DynamicOdrCluster.createPythonScript)
#template.was.DynamicOdrCluster.createPythonScript=was/container/create-dynamic-odr-cluster.py
# Destroy Python Script (inherited from: was.DynamicOdrCluster.destroyPythonScript)
#template.was.DynamicOdrCluster.destroyPythonScript=was/container/destroy-dynamic-cluster.py
# Modify Python Script (inherited from: was.DynamicOdrCluster.modifyPythonScript)
#template.was.DynamicOdrCluster.modifyPythonScript=was/container/modify-dynamic-cluster.py
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ExtensibleDeployedContainer.applyRestartStrategyOnNoop)
#template.was.ExtensibleDeployedContainer.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ExtensibleDeployedContainer.boundConfigurationItems)
#template.was.ExtensibleDeployedContainer.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ExtensibleDeployedContainer.containerRestartStrategy)
#template.was.ExtensibleDeployedContainer.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ExtensibleDeployedContainer.createOrder)
#template.was.ExtensibleDeployedContainer.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ExtensibleDeployedContainer.createScript)
#template.was.ExtensibleDeployedContainer.createScript=null
# The word that is used to prefix a step description for the create operation. (inherited from: was.ExtensibleDeployedContainer.createVerb)
#template.was.ExtensibleDeployedContainer.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.ExtensibleDeployedContainer.destroyOrder)
#template.was.ExtensibleDeployedContainer.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ExtensibleDeployedContainer.destroyScript)
#template.was.ExtensibleDeployedContainer.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ExtensibleDeployedContainer.destroyVerb)
#template.was.ExtensibleDeployedContainer.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ExtensibleDeployedContainer.discoverOrder)
#template.was.ExtensibleDeployedContainer.discoverOrder=50
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ExtensibleDeployedContainer.enableRippleStart)
#template.was.ExtensibleDeployedContainer.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ExtensibleDeployedContainer.exposeDeployedApplication)
#template.was.ExtensibleDeployedContainer.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ExtensibleDeployedContainer.libraryScripts)
#template.was.ExtensibleDeployedContainer.libraryScripts=null
# The order in which a modify step will be executed. (inherited from: was.ExtensibleDeployedContainer.modifyOrder)
#template.was.ExtensibleDeployedContainer.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ExtensibleDeployedContainer.modifyScript)
#template.was.ExtensibleDeployedContainer.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ExtensibleDeployedContainer.modifyVerb)
#template.was.ExtensibleDeployedContainer.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.ExtensibleDeployedContainer.noopOrder)
#template.was.ExtensibleDeployedContainer.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ExtensibleDeployedContainer.noopScript)
#template.was.ExtensibleDeployedContainer.noopScript=null
# Noop Verb (inherited from: was.ExtensibleDeployedContainer.noopVerb)
#template.was.ExtensibleDeployedContainer.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ExtensibleDeployedContainer.restartStrategy)
#template.was.ExtensibleDeployedContainer.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ExtensibleDeployedContainer.standardPropertiesNotToExpose)
#template.was.ExtensibleDeployedContainer.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ExtensibleDeployedContainer.startOrder)
#template.was.ExtensibleDeployedContainer.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ExtensibleDeployedContainer.startScript)
#template.was.ExtensibleDeployedContainer.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ExtensibleDeployedContainer.startVerb)
#template.was.ExtensibleDeployedContainer.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ExtensibleDeployedContainer.stopOrder)
#template.was.ExtensibleDeployedContainer.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ExtensibleDeployedContainer.stopScript)
#template.was.ExtensibleDeployedContainer.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ExtensibleDeployedContainer.stopVerb)
#template.was.ExtensibleDeployedContainer.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ExtensibleDeployedContainer.syncAfterCreateOrder)
#template.was.ExtensibleDeployedContainer.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ExtensibleDeployedContainer.syncAfterDestroyOrder)
#template.was.ExtensibleDeployedContainer.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ExtensibleDeployedContainer.syncAfterModifyOrder)
#template.was.ExtensibleDeployedContainer.syncAfterModifyOrder=65
# The set of created CIs. (inherited from: was.ManagedServer.boundConfigurationItems)
#template.was.ManagedServer.boundConfigurationItems=null
# The order in which a create step will be executed. (inherited from: was.ManagedServer.createOrder)
#template.was.ManagedServer.createOrder=57
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ManagedServer.createScript)
#template.was.ManagedServer.createScript=null
# The word that is used to prefix a step description for the create operation. (inherited from: was.ManagedServer.createVerb)
#template.was.ManagedServer.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.ManagedServer.destroyOrder)
#template.was.ManagedServer.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ManagedServer.destroyScript)
#template.was.ManagedServer.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ManagedServer.destroyVerb)
#template.was.ManagedServer.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ManagedServer.discoverOrder)
#template.was.ManagedServer.discoverOrder=50
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ManagedServer.enableRippleStart)
#template.was.ManagedServer.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ManagedServer.exposeDeployedApplication)
#template.was.ManagedServer.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ManagedServer.libraryScripts)
#template.was.ManagedServer.libraryScripts=null
# The order in which a modify step will be executed. (inherited from: was.ManagedServer.modifyOrder)
#template.was.ManagedServer.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ManagedServer.modifyScript)
#template.was.ManagedServer.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ManagedServer.modifyVerb)
#template.was.ManagedServer.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.ManagedServer.noopOrder)
#template.was.ManagedServer.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ManagedServer.noopScript)
#template.was.ManagedServer.noopScript=null
# Noop Verb (inherited from: was.ManagedServer.noopVerb)
#template.was.ManagedServer.noopVerb=Noop
# Restart Order (inherited from: was.ManagedServer.restartOrder)
#template.was.ManagedServer.restartOrder=80
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ManagedServer.standardPropertiesNotToExpose)
#template.was.ManagedServer.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ManagedServer.startOrder)
#template.was.ManagedServer.startOrder=80
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ManagedServer.startScript)
#template.was.ManagedServer.startScript=was/container/start-server.py
# The word that is used to prefix a step description for the start operation. (inherited from: was.ManagedServer.startVerb)
#template.was.ManagedServer.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ManagedServer.stopOrder)
#template.was.ManagedServer.stopOrder=20
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ManagedServer.stopScript)
#template.was.ManagedServer.stopScript=was/container/stop-server.py
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ManagedServer.stopVerb)
#template.was.ManagedServer.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ManagedServer.syncAfterCreateOrder)
#template.was.ManagedServer.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ManagedServer.syncAfterDestroyOrder)
#template.was.ManagedServer.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ManagedServer.syncAfterModifyOrder)
#template.was.ManagedServer.syncAfterModifyOrder=65
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ManagedWebServer.applyRestartStrategyOnNoop)
#template.was.ManagedWebServer.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ManagedWebServer.boundConfigurationItems)
#template.was.ManagedWebServer.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ManagedWebServer.containerRestartStrategy)
#template.was.ManagedWebServer.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ManagedWebServer.createOrder)
#template.was.ManagedWebServer.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ManagedWebServer.createScript)
#template.was.ManagedWebServer.createScript=null
# The word that is used to prefix a step description for the create operation. (inherited from: was.ManagedWebServer.createVerb)
#template.was.ManagedWebServer.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.ManagedWebServer.destroyOrder)
#template.was.ManagedWebServer.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ManagedWebServer.destroyScript)
#template.was.ManagedWebServer.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ManagedWebServer.destroyVerb)
#template.was.ManagedWebServer.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ManagedWebServer.discoverOrder)
#template.was.ManagedWebServer.discoverOrder=50
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ManagedWebServer.enableRippleStart)
#template.was.ManagedWebServer.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ManagedWebServer.exposeDeployedApplication)
#template.was.ManagedWebServer.exposeDeployedApplication=false
# Generate Plugin Order (inherited from: was.ManagedWebServer.generatePluginOrder)
#template.was.ManagedWebServer.generatePluginOrder=83
# Generate Plugin Script (inherited from: was.ManagedWebServer.generatePluginScript)
#template.was.ManagedWebServer.generatePluginScript=was/container/generate-webserver-plugin.py
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ManagedWebServer.libraryScripts)
#template.was.ManagedWebServer.libraryScripts=null
# The order in which a modify step will be executed. (inherited from: was.ManagedWebServer.modifyOrder)
#template.was.ManagedWebServer.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ManagedWebServer.modifyScript)
#template.was.ManagedWebServer.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ManagedWebServer.modifyVerb)
#template.was.ManagedWebServer.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.ManagedWebServer.noopOrder)
#template.was.ManagedWebServer.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ManagedWebServer.noopScript)
#template.was.ManagedWebServer.noopScript=null
# Noop Verb (inherited from: was.ManagedWebServer.noopVerb)
#template.was.ManagedWebServer.noopVerb=Noop
# Propagate Plugin Order (inherited from: was.ManagedWebServer.propagatePluginOrder)
#template.was.ManagedWebServer.propagatePluginOrder=84
# Propagate Plugin Script (inherited from: was.ManagedWebServer.propagatePluginScript)
#template.was.ManagedWebServer.propagatePluginScript=was/container/propagate-webserver-plugin.py
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ManagedWebServer.restartStrategy)
#template.was.ManagedWebServer.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ManagedWebServer.standardPropertiesNotToExpose)
#template.was.ManagedWebServer.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ManagedWebServer.startOrder)
#template.was.ManagedWebServer.startOrder=85
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ManagedWebServer.startScript)
#template.was.ManagedWebServer.startScript=was/container/start-webserver.py
# The word that is used to prefix a step description for the start operation. (inherited from: was.ManagedWebServer.startVerb)
#template.was.ManagedWebServer.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ManagedWebServer.stopOrder)
#template.was.ManagedWebServer.stopOrder=15
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ManagedWebServer.stopScript)
#template.was.ManagedWebServer.stopScript=was/container/stop-webserver.py
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ManagedWebServer.stopVerb)
#template.was.ManagedWebServer.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ManagedWebServer.syncAfterCreateOrder)
#template.was.ManagedWebServer.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ManagedWebServer.syncAfterDestroyOrder)
#template.was.ManagedWebServer.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ManagedWebServer.syncAfterModifyOrder)
#template.was.ManagedWebServer.syncAfterModifyOrder=65
# Synchronize Script (inherited from: was.NodeAgent.synchronizeScript)
#template.was.NodeAgent.synchronizeScript=was/base/synchronize-node.py
# The set of created CIs. (inherited from: was.ProxyServerCluster.boundConfigurationItems)
#template.was.ProxyServerCluster.boundConfigurationItems=null
# The order in which a create step will be executed. (inherited from: was.ProxyServerCluster.createOrder)
#template.was.ProxyServerCluster.createOrder=56
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ProxyServerCluster.createScript)
#template.was.ProxyServerCluster.createScript=null
# The word that is used to prefix a step description for the create operation. (inherited from: was.ProxyServerCluster.createVerb)
#template.was.ProxyServerCluster.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.ProxyServerCluster.destroyOrder)
#template.was.ProxyServerCluster.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ProxyServerCluster.destroyScript)
#template.was.ProxyServerCluster.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ProxyServerCluster.destroyVerb)
#template.was.ProxyServerCluster.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ProxyServerCluster.discoverOrder)
#template.was.ProxyServerCluster.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ProxyServerCluster.exposeDeployedApplication)
#template.was.ProxyServerCluster.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ProxyServerCluster.libraryScripts)
#template.was.ProxyServerCluster.libraryScripts=null
# The order in which a modify step will be executed. (inherited from: was.ProxyServerCluster.modifyOrder)
#template.was.ProxyServerCluster.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ProxyServerCluster.modifyScript)
#template.was.ProxyServerCluster.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ProxyServerCluster.modifyVerb)
#template.was.ProxyServerCluster.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.ProxyServerCluster.noopOrder)
#template.was.ProxyServerCluster.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ProxyServerCluster.noopScript)
#template.was.ProxyServerCluster.noopScript=null
# Noop Verb (inherited from: was.ProxyServerCluster.noopVerb)
#template.was.ProxyServerCluster.noopVerb=Noop
# Restart Order (inherited from: was.ProxyServerCluster.restartOrder)
#template.was.ProxyServerCluster.restartOrder=80
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ProxyServerCluster.standardPropertiesNotToExpose)
#template.was.ProxyServerCluster.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ProxyServerCluster.startOrder)
#template.was.ProxyServerCluster.startOrder=80
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ProxyServerCluster.startScript)
#template.was.ProxyServerCluster.startScript=was/container/start-cluster.py
# The word that is used to prefix a step description for the start operation. (inherited from: was.ProxyServerCluster.startVerb)
#template.was.ProxyServerCluster.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ProxyServerCluster.stopOrder)
#template.was.ProxyServerCluster.stopOrder=20
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ProxyServerCluster.stopScript)
#template.was.ProxyServerCluster.stopScript=was/container/stop-cluster.py
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ProxyServerCluster.stopVerb)
#template.was.ProxyServerCluster.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ProxyServerCluster.syncAfterCreateOrder)
#template.was.ProxyServerCluster.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ProxyServerCluster.syncAfterDestroyOrder)
#template.was.ProxyServerCluster.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ProxyServerCluster.syncAfterModifyOrder)
#template.was.ProxyServerCluster.syncAfterModifyOrder=65
# Config directory name of WebSphere Application Server. (inherited from: was.UnmanagedServer.configDirName)
#template.was.UnmanagedServer.configDirName=config
# Deployeds To Discover (inherited from: was.UnmanagedServer.deployedsToDiscover)
#template.was.UnmanagedServer.deployedsToDiscover=was.VirtualHost,was.SharedLibrary
# Inspect script for Cell (inherited from: was.UnmanagedServer.inspectScript)
#template.was.UnmanagedServer.inspectScript=was/container/discover-inspect-topology.py
# List of scripts to appended to runtime script (inherited from: was.UnmanagedServer.libraryScripts)
#template.was.UnmanagedServer.libraryScripts=was/container/discover-inspect-topology-lib.py, was/container/container-lib.py
# Propagate Global Plugin Order (inherited from: was.UnmanagedServer.propagateGlobalPluginOrder)
#template.was.UnmanagedServer.propagateGlobalPluginOrder=82
# Restart Order (inherited from: was.UnmanagedServer.restartOrder)
#template.was.UnmanagedServer.restartOrder=80
# Restart Script (inherited from: was.UnmanagedServer.restartScript)
#template.was.UnmanagedServer.restartScript=was/container/restart-unmanaged-server.py
# Set to true to execute commands with the Python daemon (inherited from: was.UnmanagedServer.runWithDaemon)
#template.was.UnmanagedServer.runWithDaemon=true
# Update Global Plugin Order (inherited from: was.UnmanagedServer.updateGlobalPluginOrder)
#template.was.UnmanagedServer.updateGlobalPluginOrder=81
# Update Global Plugin Script (inherited from: was.UnmanagedServer.updateGlobalPluginScript)
#template.was.UnmanagedServer.updateGlobalPluginScript=was/container/generate-global-plugin.py
# Translated text of "Name" used to resolve version of WebSphere Application Server running in a non-English language. (inherited from: was.UnmanagedServer.versionInfoNameField)
#template.was.UnmanagedServer.versionInfoNameField=Name
# Timeout opening a communications link to the resource, in milliseconds. (inherited from: wlp.Server.connectTimeout)
#template.wlp.Server.connectTimeout=60000
# Timeout reading from Input stream when a connection is established, in milliseconds. (inherited from: wlp.Server.readTimeout)
#template.wlp.Server.readTimeout=60000
# The underlying protocol used for communication, e.g. SSL, SSLv3, TLS, TLSv1.2 etc. (inherited from: wlp.Server.sslProtocol)
#template.wlp.Server.sslProtocol=SSL
# Ignores certificate verification checks, use in development environments only. (inherited from: wlp.Server.trustAllCertificates)
#template.wlp.Server.trustAllCertificates=false
# Ignores host verification checks, use in development environments only. (inherited from: wlp.Server.trustAllHostnames)
#template.wlp.Server.trustAllHostnames=false
# Start Order (inherited from: wls.Cluster.startOrder)
#template.wls.Cluster.startOrder=80
# The time to wait in seconds for a container start action. (inherited from: wls.Cluster.startWaitTime)
#template.wls.Cluster.startWaitTime=1
# Stop Order (inherited from: wls.Cluster.stopOrder)
#template.wls.Cluster.stopOrder=20
# Path containing the custom wlst templates: wlst.sh.ftl (Unix) and wlst.cmd.ftl (Windows) (inherited from: wls.Domain.customWlstTemplatePath)
#template.wls.Domain.customWlstTemplatePath=null
# Deployeds To Discover (inherited from: wls.Domain.deployedsToDiscover)
#template.wls.Domain.deployedsToDiscover=wls.FilePersistentStore
# Order used to trigger the clean of the JMS Modules of the domain (inherited from: wls.Domain.destroyJmsModuleOrder)
#template.wls.Domain.destroyJmsModuleOrder=100
# Set to true to execute commands with the Python daemon (inherited from: wls.Domain.runWithDaemon)
#template.wls.Domain.runWithDaemon=true
# Start Order (inherited from: wls.Domain.startOrder)
#template.wls.Domain.startOrder=80
# Stop Order (inherited from: wls.Domain.stopOrder)
#template.wls.Domain.stopOrder=20
# Start Order (inherited from: wls.Server.startOrder)
#template.wls.Server.startOrder=80
# Start Script (inherited from: wls.Server.startScript)
#template.wls.Server.startScript=wls/server/start-script
# The time to wait in seconds for a container start action. (inherited from: wls.Server.startWaitTime)
#template.wls.Server.startWaitTime=1
# Stop Order (inherited from: wls.Server.stopOrder)
#template.wls.Server.stopOrder=20
# Stop Script (inherited from: wls.Server.stopScript)
#template.wls.Server.stopScript=wls/server/stop-script
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: www.ApacheHttpdServer.inspectClasspathResources)
#template.www.ApacheHttpdServer.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: www.ApacheHttpdServer.inspectScript)
#template.www.ApacheHttpdServer.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: www.ApacheHttpdServer.inspectTemplateClasspathResources)
#template.www.ApacheHttpdServer.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: www.ApacheHttpdServer.restartClasspathResources)
#template.www.ApacheHttpdServer.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: www.ApacheHttpdServer.restartOrder)
#template.www.ApacheHttpdServer.restartOrder=90
# The command to restart or reload Apache. If left blank, the sequence 'stop, start' is used. Arguments containing spaces are not supported (inherited from: www.ApacheHttpdServer.restartScript)
#template.www.ApacheHttpdServer.restartScript=<#assign restart=(container.restartCommand)!''><#if restart != ''>www/apache/restart<#else>www/apache/stopstart</#if>
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: www.ApacheHttpdServer.restartTemplateClasspathResources)
#template.www.ApacheHttpdServer.restartTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: www.ApacheHttpdServer.startClasspathResources)
#template.www.ApacheHttpdServer.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: www.ApacheHttpdServer.startOrder)
#template.www.ApacheHttpdServer.startOrder=90
# The command to start Apache. Arguments containing spaces are not supported (inherited from: www.ApacheHttpdServer.startScript)
#template.www.ApacheHttpdServer.startScript=www/apache/start
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: www.ApacheHttpdServer.startTemplateClasspathResources)
#template.www.ApacheHttpdServer.startTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: www.ApacheHttpdServer.stopClasspathResources)
#template.www.ApacheHttpdServer.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: www.ApacheHttpdServer.stopOrder)
#template.www.ApacheHttpdServer.stopOrder=10
# The command to stop Apache. Arguments containing spaces are not supported (inherited from: www.ApacheHttpdServer.stopScript)
#template.www.ApacheHttpdServer.stopScript=www/apache/stop
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: www.ApacheHttpdServer.stopTemplateClasspathResources)
#template.www.ApacheHttpdServer.stopTemplateClasspathResources=null
# Address where the satellite can be reached. (inherited from: xl.SatelliteGroup.address)
#template.xl.SatelliteGroup.address=none
# Enable encrypted communication. (inherited from: xl.SatelliteGroup.encrypted)
#template.xl.SatelliteGroup.encrypted=null
# Port where the satellite is listening. (inherited from: xl.SatelliteGroup.protocolPort)
#template.xl.SatelliteGroup.protocolPort=0
# Limit the number of parallel resource operations.
#terraform.ExecutedModule.parallelism=10
# The set of CI templates. (inherited from: udm.BaseDeployableFolderArtifact.boundTemplates)
#terraform.Module.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableFolderArtifact.delimiters)
#terraform.Module.delimiters={{ }}
# Output variables captured in deployed. Key is the alias name and value is the terraform output property value for a given resource.
#terraform.Module.outputVariables=null
# Regular expression that matches file names of text files
#terraform.Module.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt | tf)
# Copy command for UNIX systems.
#terraform.TerraformClient.cpCommand=cp -R
# Terraform client installation path.
#terraform.TerraformClient.path=/usr/local/bin
# Auth (inherited from: tomcat.JeeActiveMqConnectionFactory.auth)
#tomcat.ActiveMqConnectionFactory.auth=Container
# The set of created CIs. (inherited from: tomcat.JeeActiveMqConnectionFactory.boundConfigurationItems)
#tomcat.ActiveMqConnectionFactory.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeActiveMqConnectionFactory.createOptions)
#tomcat.ActiveMqConnectionFactory.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: tomcat.JeeActiveMqConnectionFactory.createOrder)
#tomcat.ActiveMqConnectionFactory.createOrder=60
# Create the target directory on the generic server if it does not exist. (inherited from: tomcat.JeeActiveMqConnectionFactory.createTargetDirectory)
#tomcat.ActiveMqConnectionFactory.createTargetDirectory=false
# Create Verb (inherited from: tomcat.JeeActiveMqConnectionFactory.createVerb)
#tomcat.ActiveMqConnectionFactory.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeActiveMqConnectionFactory.destroyOptions)
#tomcat.ActiveMqConnectionFactory.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: tomcat.JeeActiveMqConnectionFactory.destroyOrder)
#tomcat.ActiveMqConnectionFactory.destroyOrder=40
# Destroy Verb (inherited from: tomcat.JeeActiveMqConnectionFactory.destroyVerb)
#tomcat.ActiveMqConnectionFactory.destroyVerb=Destroy
# Element Name (inherited from: tomcat.JeeActiveMqConnectionFactory.elementName)
#tomcat.ActiveMqConnectionFactory.elementName=${deployed.jndiName}
# Mapping of the configuration item (CI) properties to their factory equivalents. Leave this property blank to use the same name as the key. (inherited from: tomcat.JeeActiveMqConnectionFactory.elementPropertyMapping)
#tomcat.ActiveMqConnectionFactory.elementPropertyMapping=jndiName:name, auth:, resourceType:type, description:, factory:,brokerUrl:brokerURL, brokerName:
# Element Tag (inherited from: tomcat.JeeActiveMqConnectionFactory.elementTag)
#tomcat.ActiveMqConnectionFactory.elementTag=Resource
# Factory (inherited from: tomcat.JeeActiveMqConnectionFactory.factory)
#tomcat.ActiveMqConnectionFactory.factory=org.apache.activemq.jndi.JNDIReferenceFactory
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.JeeActiveMqConnectionFactory.inspectClasspathResources)
#tomcat.ActiveMqConnectionFactory.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.JeeActiveMqConnectionFactory.inspectScript)
#tomcat.ActiveMqConnectionFactory.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.JeeActiveMqConnectionFactory.inspectTemplateClasspathResources)
#tomcat.ActiveMqConnectionFactory.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeActiveMqConnectionFactory.modifyOptions)
#tomcat.ActiveMqConnectionFactory.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.JeeActiveMqConnectionFactory.modifyOrder)
#tomcat.ActiveMqConnectionFactory.modifyOrder=50
# Modify Verb (inherited from: tomcat.JeeActiveMqConnectionFactory.modifyVerb)
#tomcat.ActiveMqConnectionFactory.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeActiveMqConnectionFactory.noopOptions)
#tomcat.ActiveMqConnectionFactory.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.JeeActiveMqConnectionFactory.noopOrder)
#tomcat.ActiveMqConnectionFactory.noopOrder=50
# Noop Verb (inherited from: tomcat.JeeActiveMqConnectionFactory.noopVerb)
#tomcat.ActiveMqConnectionFactory.noopVerb=Modify
# Resource Type (inherited from: tomcat.JeeActiveMqConnectionFactory.resourceType)
#tomcat.ActiveMqConnectionFactory.resourceType=org.apache.activemq.ActiveMQConnectionFactory
# The generic container requires a restart for the action performed by this deployed. (inherited from: tomcat.JeeActiveMqConnectionFactory.restartRequired)
#tomcat.ActiveMqConnectionFactory.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.JeeActiveMqConnectionFactory.restartRequiredForNoop)
#tomcat.ActiveMqConnectionFactory.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: tomcat.JeeActiveMqConnectionFactory.targetDirectory)
#tomcat.ActiveMqConnectionFactory.targetDirectory=${deployed.container.contextDirectory}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: tomcat.JeeActiveMqConnectionFactory.targetDirectoryShared)
#tomcat.ActiveMqConnectionFactory.targetDirectoryShared=true
# Name of the artifact on the generic server. (inherited from: tomcat.JeeActiveMqConnectionFactory.targetFile)
#tomcat.ActiveMqConnectionFactory.targetFile=${deployed.context}.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact. (inherited from: tomcat.JeeActiveMqConnectionFactory.template)
#tomcat.ActiveMqConnectionFactory.template=tc/context/context-element.ftl
# The set of CI templates. (inherited from: jee.QueueConnectionFactorySpec.boundTemplates)
#tomcat.ActiveMqConnectionFactorySpec.boundTemplates=null
# Auth (inherited from: tomcat.JeeActiveMqQueue.auth)
#tomcat.ActiveMqQueue.auth=Container
# The set of created CIs. (inherited from: tomcat.JeeActiveMqQueue.boundConfigurationItems)
#tomcat.ActiveMqQueue.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeActiveMqQueue.createOptions)
#tomcat.ActiveMqQueue.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: tomcat.JeeActiveMqQueue.createOrder)
#tomcat.ActiveMqQueue.createOrder=60
# Create the target directory on the generic server if it does not exist. (inherited from: tomcat.JeeActiveMqQueue.createTargetDirectory)
#tomcat.ActiveMqQueue.createTargetDirectory=false
# Create Verb (inherited from: tomcat.JeeActiveMqQueue.createVerb)
#tomcat.ActiveMqQueue.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeActiveMqQueue.destroyOptions)
#tomcat.ActiveMqQueue.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: tomcat.JeeActiveMqQueue.destroyOrder)
#tomcat.ActiveMqQueue.destroyOrder=40
# Destroy Verb (inherited from: tomcat.JeeActiveMqQueue.destroyVerb)
#tomcat.ActiveMqQueue.destroyVerb=Destroy
# Element Name (inherited from: tomcat.JeeActiveMqQueue.elementName)
#tomcat.ActiveMqQueue.elementName=${deployed.jndiName}
# Mapping of the configuration item (CI) properties to their factory equivalents. Leave this property blank to use the same name as the key. (inherited from: tomcat.JeeActiveMqQueue.elementPropertyMapping)
#tomcat.ActiveMqQueue.elementPropertyMapping=jndiName:name, auth:, resourceType:type:, description:, factory:,physicalName:
# Element Tag (inherited from: tomcat.JeeActiveMqQueue.elementTag)
#tomcat.ActiveMqQueue.elementTag=Resource
# Factory (inherited from: tomcat.JeeActiveMqQueue.factory)
#tomcat.ActiveMqQueue.factory=org.apache.activemq.jndi.JNDIReferenceFactory
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.JeeActiveMqQueue.inspectClasspathResources)
#tomcat.ActiveMqQueue.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.JeeActiveMqQueue.inspectScript)
#tomcat.ActiveMqQueue.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.JeeActiveMqQueue.inspectTemplateClasspathResources)
#tomcat.ActiveMqQueue.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeActiveMqQueue.modifyOptions)
#tomcat.ActiveMqQueue.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.JeeActiveMqQueue.modifyOrder)
#tomcat.ActiveMqQueue.modifyOrder=50
# Modify Verb (inherited from: tomcat.JeeActiveMqQueue.modifyVerb)
#tomcat.ActiveMqQueue.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeActiveMqQueue.noopOptions)
#tomcat.ActiveMqQueue.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.JeeActiveMqQueue.noopOrder)
#tomcat.ActiveMqQueue.noopOrder=50
# Noop Verb (inherited from: tomcat.JeeActiveMqQueue.noopVerb)
#tomcat.ActiveMqQueue.noopVerb=Modify
# Resource Type (inherited from: tomcat.JeeActiveMqQueue.resourceType)
#tomcat.ActiveMqQueue.resourceType=org.apache.activemq.command.ActiveMQQueue
# The generic container requires a restart for the action performed by this deployed. (inherited from: tomcat.JeeActiveMqQueue.restartRequired)
#tomcat.ActiveMqQueue.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.JeeActiveMqQueue.restartRequiredForNoop)
#tomcat.ActiveMqQueue.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: tomcat.JeeActiveMqQueue.targetDirectory)
#tomcat.ActiveMqQueue.targetDirectory=${deployed.container.contextDirectory}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: tomcat.JeeActiveMqQueue.targetDirectoryShared)
#tomcat.ActiveMqQueue.targetDirectoryShared=true
# Name of the artifact on the generic server. (inherited from: tomcat.JeeActiveMqQueue.targetFile)
#tomcat.ActiveMqQueue.targetFile=${deployed.context}.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact. (inherited from: tomcat.JeeActiveMqQueue.template)
#tomcat.ActiveMqQueue.template=tc/context/context-element.ftl
# The set of CI templates. (inherited from: jee.QueueSpec.boundTemplates)
#tomcat.ActiveMqQueueSpec.boundTemplates=null
# Auth (inherited from: tomcat.JeeActiveMqTopic.auth)
#tomcat.ActiveMqTopic.auth=Container
# The set of created CIs. (inherited from: tomcat.JeeActiveMqTopic.boundConfigurationItems)
#tomcat.ActiveMqTopic.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeActiveMqTopic.createOptions)
#tomcat.ActiveMqTopic.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: tomcat.JeeActiveMqTopic.createOrder)
#tomcat.ActiveMqTopic.createOrder=60
# Create the target directory on the generic server if it does not exist. (inherited from: tomcat.JeeActiveMqTopic.createTargetDirectory)
#tomcat.ActiveMqTopic.createTargetDirectory=false
# Create Verb (inherited from: tomcat.JeeActiveMqTopic.createVerb)
#tomcat.ActiveMqTopic.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeActiveMqTopic.destroyOptions)
#tomcat.ActiveMqTopic.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: tomcat.JeeActiveMqTopic.destroyOrder)
#tomcat.ActiveMqTopic.destroyOrder=40
# Destroy Verb (inherited from: tomcat.JeeActiveMqTopic.destroyVerb)
#tomcat.ActiveMqTopic.destroyVerb=Destroy
# Element Name (inherited from: tomcat.JeeActiveMqTopic.elementName)
#tomcat.ActiveMqTopic.elementName=${deployed.jndiName}
# Mapping of the configuration item (CI) properties to their factory equivalents. Leave this property blank to use the same name as the key. (inherited from: tomcat.JeeActiveMqTopic.elementPropertyMapping)
#tomcat.ActiveMqTopic.elementPropertyMapping=jndiName:name, auth:, resourceType:type, description:, factory:,physicalName:
# Element Tag (inherited from: tomcat.JeeActiveMqTopic.elementTag)
#tomcat.ActiveMqTopic.elementTag=Resource
# Factory (inherited from: tomcat.JeeActiveMqTopic.factory)
#tomcat.ActiveMqTopic.factory=org.apache.activemq.jndi.JNDIReferenceFactory
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.JeeActiveMqTopic.inspectClasspathResources)
#tomcat.ActiveMqTopic.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.JeeActiveMqTopic.inspectScript)
#tomcat.ActiveMqTopic.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.JeeActiveMqTopic.inspectTemplateClasspathResources)
#tomcat.ActiveMqTopic.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeActiveMqTopic.modifyOptions)
#tomcat.ActiveMqTopic.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.JeeActiveMqTopic.modifyOrder)
#tomcat.ActiveMqTopic.modifyOrder=50
# Modify Verb (inherited from: tomcat.JeeActiveMqTopic.modifyVerb)
#tomcat.ActiveMqTopic.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeActiveMqTopic.noopOptions)
#tomcat.ActiveMqTopic.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.JeeActiveMqTopic.noopOrder)
#tomcat.ActiveMqTopic.noopOrder=50
# Noop Verb (inherited from: tomcat.JeeActiveMqTopic.noopVerb)
#tomcat.ActiveMqTopic.noopVerb=Modify
# Resource Type (inherited from: tomcat.JeeActiveMqTopic.resourceType)
#tomcat.ActiveMqTopic.resourceType=org.apache.activemq.command.ActiveMQTopic
# The generic container requires a restart for the action performed by this deployed. (inherited from: tomcat.JeeActiveMqTopic.restartRequired)
#tomcat.ActiveMqTopic.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.JeeActiveMqTopic.restartRequiredForNoop)
#tomcat.ActiveMqTopic.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: tomcat.JeeActiveMqTopic.targetDirectory)
#tomcat.ActiveMqTopic.targetDirectory=${deployed.container.contextDirectory}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: tomcat.JeeActiveMqTopic.targetDirectoryShared)
#tomcat.ActiveMqTopic.targetDirectoryShared=true
# Name of the artifact on the generic server. (inherited from: tomcat.JeeActiveMqTopic.targetFile)
#tomcat.ActiveMqTopic.targetFile=${deployed.context}.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact. (inherited from: tomcat.JeeActiveMqTopic.template)
#tomcat.ActiveMqTopic.template=tc/context/context-element.ftl
# The set of CI templates. (inherited from: jee.TopicSpec.boundTemplates)
#tomcat.ActiveMqTopicSpec.boundTemplates=null
# Context Directory
#tomcat.CommonContext.contextDirectory=${container.server.home}/conf
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.ContextContainer.inspectClasspathResources)
#tomcat.CommonContext.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.ContextContainer.inspectScript)
#tomcat.CommonContext.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.ContextContainer.inspectTemplateClasspathResources)
#tomcat.CommonContext.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: tomcat.ContextContainer.restartClasspathResources)
#tomcat.CommonContext.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: tomcat.ContextContainer.restartOrder)
#tomcat.CommonContext.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: tomcat.ContextContainer.restartScript)
#tomcat.CommonContext.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.ContextContainer.restartTemplateClasspathResources)
#tomcat.CommonContext.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: tomcat.ContextContainer.restartWaitTime)
#tomcat.CommonContext.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: tomcat.ContextContainer.startClasspathResources)
#tomcat.CommonContext.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: tomcat.ContextContainer.startOrder)
#tomcat.CommonContext.startOrder=90
# Classpath to the script used to start the generic container. (inherited from: tomcat.ContextContainer.startScript)
#tomcat.CommonContext.startScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.ContextContainer.startTemplateClasspathResources)
#tomcat.CommonContext.startTemplateClasspathResources=null
# The time to wait in seconds for a container start action. (inherited from: tomcat.ContextContainer.startWaitTime)
#tomcat.CommonContext.startWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: tomcat.ContextContainer.stopClasspathResources)
#tomcat.CommonContext.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: tomcat.ContextContainer.stopOrder)
#tomcat.CommonContext.stopOrder=10
# Classpath to the script used to stop the generic container. (inherited from: tomcat.ContextContainer.stopScript)
#tomcat.CommonContext.stopScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.ContextContainer.stopTemplateClasspathResources)
#tomcat.CommonContext.stopTemplateClasspathResources=null
# The time to wait in seconds for a container stop action. (inherited from: tomcat.ContextContainer.stopWaitTime)
#tomcat.CommonContext.stopWaitTime=0
# The set of CI templates. (inherited from: generic.File.boundTemplates)
#tomcat.ConfigurationFile.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: generic.File.delimiters)
#tomcat.ConfigurationFile.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: generic.File.textFileNamesRegex)
#tomcat.ConfigurationFile.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of CI templates. (inherited from: generic.Folder.boundTemplates)
#tomcat.ConfigurationFolder.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: generic.Folder.delimiters)
#tomcat.ConfigurationFolder.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: generic.Folder.textFileNamesRegex)
#tomcat.ConfigurationFolder.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.NestedContainer.inspectClasspathResources)
#tomcat.ContextContainer.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.NestedContainer.inspectScript)
#tomcat.ContextContainer.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.NestedContainer.inspectTemplateClasspathResources)
#tomcat.ContextContainer.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: generic.NestedContainer.restartClasspathResources)
#tomcat.ContextContainer.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: generic.NestedContainer.restartOrder)
#tomcat.ContextContainer.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: generic.NestedContainer.restartScript)
#tomcat.ContextContainer.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.NestedContainer.restartTemplateClasspathResources)
#tomcat.ContextContainer.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: generic.NestedContainer.restartWaitTime)
#tomcat.ContextContainer.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: generic.NestedContainer.startClasspathResources)
#tomcat.ContextContainer.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: generic.NestedContainer.startOrder)
#tomcat.ContextContainer.startOrder=90
# Classpath to the script used to start the generic container. (inherited from: generic.NestedContainer.startScript)
#tomcat.ContextContainer.startScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.NestedContainer.startTemplateClasspathResources)
#tomcat.ContextContainer.startTemplateClasspathResources=null
# The time to wait in seconds for a container start action. (inherited from: generic.NestedContainer.startWaitTime)
#tomcat.ContextContainer.startWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: generic.NestedContainer.stopClasspathResources)
#tomcat.ContextContainer.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: generic.NestedContainer.stopOrder)
#tomcat.ContextContainer.stopOrder=10
# Classpath to the script used to stop the generic container. (inherited from: generic.NestedContainer.stopScript)
#tomcat.ContextContainer.stopScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.NestedContainer.stopTemplateClasspathResources)
#tomcat.ContextContainer.stopTemplateClasspathResources=null
# The time to wait in seconds for a container stop action. (inherited from: generic.NestedContainer.stopWaitTime)
#tomcat.ContextContainer.stopWaitTime=0
# The set of created CIs. (inherited from: generic.ProcessedTemplate.boundConfigurationItems)
#tomcat.ContextElement.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.ProcessedTemplate.createOptions)
#tomcat.ContextElement.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: generic.ProcessedTemplate.createOrder)
#tomcat.ContextElement.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: generic.ProcessedTemplate.createTargetDirectory)
#tomcat.ContextElement.createTargetDirectory=false
# Create Verb (inherited from: generic.ProcessedTemplate.createVerb)
#tomcat.ContextElement.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.ProcessedTemplate.destroyOptions)
#tomcat.ContextElement.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: generic.ProcessedTemplate.destroyOrder)
#tomcat.ContextElement.destroyOrder=40
# Destroy Verb (inherited from: generic.ProcessedTemplate.destroyVerb)
#tomcat.ContextElement.destroyVerb=Destroy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.ProcessedTemplate.inspectClasspathResources)
#tomcat.ContextElement.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.ProcessedTemplate.inspectScript)
#tomcat.ContextElement.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.ProcessedTemplate.inspectTemplateClasspathResources)
#tomcat.ContextElement.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.ProcessedTemplate.modifyOptions)
#tomcat.ContextElement.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: generic.ProcessedTemplate.modifyOrder)
#tomcat.ContextElement.modifyOrder=50
# Modify Verb (inherited from: generic.ProcessedTemplate.modifyVerb)
#tomcat.ContextElement.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.ProcessedTemplate.noopOptions)
#tomcat.ContextElement.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: generic.ProcessedTemplate.noopOrder)
#tomcat.ContextElement.noopOrder=50
# Noop Verb (inherited from: generic.ProcessedTemplate.noopVerb)
#tomcat.ContextElement.noopVerb=Modify
# The generic container requires a restart for the action performed by this deployed. (inherited from: generic.ProcessedTemplate.restartRequired)
#tomcat.ContextElement.restartRequired=false
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: generic.ProcessedTemplate.restartRequiredForNoop)
#tomcat.ContextElement.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: generic.ProcessedTemplate.targetDirectory)
#tomcat.ContextElement.targetDirectory=null
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: generic.ProcessedTemplate.targetDirectoryShared)
#tomcat.ContextElement.targetDirectoryShared=true
# Classpath to the freemarker template used to generate the content of the final text base artifact. (inherited from: generic.ProcessedTemplate.template)
#tomcat.ContextElement.template=null
# The set of created CIs. (inherited from: generic.CopiedArtifact.boundConfigurationItems)
#tomcat.ContextWarModule.boundConfigurationItems=null
# Context root under which the web application can be access
#tomcat.ContextWarModule.contextRoot=${deployed.name}
# Context Subject
#tomcat.ContextWarModule.contextSubject=war settings
# Freemarker template used to create the context xml for the War
#tomcat.ContextWarModule.contextTemplate=null
# Target directory to which the context xml must to copied to on the target system
#tomcat.ContextWarModule.contextXmlTargetDirectory=null
# If set to true, files are directly copied to the target directory without first being uploaded to the staging or temporary directory (like versions of XL Deploy prior to 4.0.0) (inherited from: generic.CopiedArtifact.copyDirectlyToTargetPath)
#tomcat.ContextWarModule.copyDirectlyToTargetPath=false
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.createOptions)
#tomcat.ContextWarModule.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: generic.CopiedArtifact.createOrder)
#tomcat.ContextWarModule.createOrder=50
# The order of the create context step in the step list for the create operation.
#tomcat.ContextWarModule.createOrderOfContextXml=60
# Create the target directory on the generic server if it does not exist. (inherited from: generic.CopiedArtifact.createTargetDirectory)
#tomcat.ContextWarModule.createTargetDirectory=false
# Create Verb (inherited from: generic.CopiedArtifact.createVerb)
#tomcat.ContextWarModule.createVerb=Create
# Absolute paths to files on the target system that was generated and must be clean up during a destroy operation
#tomcat.ContextWarModule.deleteGeneratedResources=null
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.destroyOptions)
#tomcat.ContextWarModule.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: generic.CopiedArtifact.destroyOrder)
#tomcat.ContextWarModule.destroyOrder=40
# The order of the destroy context step in the step list for the create operation.
#tomcat.ContextWarModule.destroyOrderOfContextXml=40
# Destroy Verb (inherited from: generic.CopiedArtifact.destroyVerb)
#tomcat.ContextWarModule.destroyVerb=Destroy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.CopiedArtifact.inspectClasspathResources)
#tomcat.ContextWarModule.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.CopiedArtifact.inspectScript)
#tomcat.ContextWarModule.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.CopiedArtifact.inspectTemplateClasspathResources)
#tomcat.ContextWarModule.inspectTemplateClasspathResources=null
# If set to true, create and destroy context.xml files. Set to false to provide your own context.xml file.
#tomcat.ContextWarModule.manageContextXml=true
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.modifyOptions)
#tomcat.ContextWarModule.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: generic.CopiedArtifact.modifyOrder)
#tomcat.ContextWarModule.modifyOrder=50
# The order of the rename context root step in the step list for the modify operation.
#tomcat.ContextWarModule.modifyOrderOfContextXml=60
# Modify Verb (inherited from: generic.CopiedArtifact.modifyVerb)
#tomcat.ContextWarModule.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.noopOptions)
#tomcat.ContextWarModule.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: generic.CopiedArtifact.noopOrder)
#tomcat.ContextWarModule.noopOrder=50
# Noop Verb (inherited from: generic.CopiedArtifact.noopVerb)
#tomcat.ContextWarModule.noopVerb=Modify
# If set to true, preserve the existing files on the remote host (do not delete the copied files during the destroy operation).  (inherited from: generic.CopiedArtifact.preserveExistingFiles)
#tomcat.ContextWarModule.preserveExistingFiles=false
# If set to false, keep context file on destroy. Set to true to destroy the context file.
#tomcat.ContextWarModule.removeContextXml=false
# The generic container requires a restart for the action performed by this deployed. (inherited from: generic.CopiedArtifact.restartRequired)
#tomcat.ContextWarModule.restartRequired=false
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: generic.CopiedArtifact.restartRequiredForNoop)
#tomcat.ContextWarModule.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: generic.CopiedArtifact.targetDirectory)
#tomcat.ContextWarModule.targetDirectory=null
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: generic.CopiedArtifact.targetDirectoryShared)
#tomcat.ContextWarModule.targetDirectoryShared=true
# If set to true, the sub directories on the target machine are not deleted if files other than that copied by XL Deploy are present. Please note that setting this option to true will cause the removal process to be a slower.  (inherited from: generic.CopiedArtifact.targetPathSharedSubDirectories)
#tomcat.ContextWarModule.targetPathSharedSubDirectories=false
# The set of created CIs. (inherited from: generic.CopiedArtifact.boundConfigurationItems)
#tomcat.CopiedArtifact.boundConfigurationItems=null
# If set to true, files are directly copied to the target directory without first being uploaded to the staging or temporary directory (like versions of XL Deploy prior to 4.0.0) (inherited from: generic.CopiedArtifact.copyDirectlyToTargetPath)
#tomcat.CopiedArtifact.copyDirectlyToTargetPath=false
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.createOptions)
#tomcat.CopiedArtifact.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: generic.CopiedArtifact.createOrder)
#tomcat.CopiedArtifact.createOrder=50
# Create the target directory on the generic server if it does not exist.
#tomcat.CopiedArtifact.createTargetDirectory=true
# Create Verb (inherited from: generic.CopiedArtifact.createVerb)
#tomcat.CopiedArtifact.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.destroyOptions)
#tomcat.CopiedArtifact.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: generic.CopiedArtifact.destroyOrder)
#tomcat.CopiedArtifact.destroyOrder=40
# Destroy Verb (inherited from: generic.CopiedArtifact.destroyVerb)
#tomcat.CopiedArtifact.destroyVerb=Destroy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.CopiedArtifact.inspectClasspathResources)
#tomcat.CopiedArtifact.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.CopiedArtifact.inspectScript)
#tomcat.CopiedArtifact.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.CopiedArtifact.inspectTemplateClasspathResources)
#tomcat.CopiedArtifact.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.modifyOptions)
#tomcat.CopiedArtifact.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: generic.CopiedArtifact.modifyOrder)
#tomcat.CopiedArtifact.modifyOrder=50
# Modify Verb (inherited from: generic.CopiedArtifact.modifyVerb)
#tomcat.CopiedArtifact.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.noopOptions)
#tomcat.CopiedArtifact.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: generic.CopiedArtifact.noopOrder)
#tomcat.CopiedArtifact.noopOrder=50
# Noop Verb (inherited from: generic.CopiedArtifact.noopVerb)
#tomcat.CopiedArtifact.noopVerb=Modify
# If set to true, preserve the existing files on the remote host (do not delete the copied files during the destroy operation).  (inherited from: generic.CopiedArtifact.preserveExistingFiles)
#tomcat.CopiedArtifact.preserveExistingFiles=false
# The generic container requires a restart for the action performed by this deployed.
#tomcat.CopiedArtifact.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: generic.CopiedArtifact.restartRequiredForNoop)
#tomcat.CopiedArtifact.restartRequiredForNoop=false
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: generic.CopiedArtifact.targetDirectoryShared)
#tomcat.CopiedArtifact.targetDirectoryShared=true
# If set to true, the sub directories on the target machine are not deleted if files other than that copied by XL Deploy are present. Please note that setting this option to true will cause the removal process to be a slower.  (inherited from: generic.CopiedArtifact.targetPathSharedSubDirectories)
#tomcat.CopiedArtifact.targetPathSharedSubDirectories=false
# Auth
#tomcat.DataSource.auth=Container
# The set of created CIs. (inherited from: tomcat.JndiContextElement.boundConfigurationItems)
#tomcat.DataSource.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.createOptions)
#tomcat.DataSource.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: tomcat.JndiContextElement.createOrder)
#tomcat.DataSource.createOrder=60
# Create the target directory on the generic server if it does not exist. (inherited from: tomcat.JndiContextElement.createTargetDirectory)
#tomcat.DataSource.createTargetDirectory=false
# Create Verb (inherited from: tomcat.JndiContextElement.createVerb)
#tomcat.DataSource.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.destroyOptions)
#tomcat.DataSource.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: tomcat.JndiContextElement.destroyOrder)
#tomcat.DataSource.destroyOrder=40
# Destroy Verb (inherited from: tomcat.JndiContextElement.destroyVerb)
#tomcat.DataSource.destroyVerb=Destroy
# Element Name (inherited from: tomcat.JndiContextElement.elementName)
#tomcat.DataSource.elementName=${deployed.jndiName}
# Mapping of the configuration item (CI) properties to their factory equivalents. Leave this property blank to use the same name as the key.
#tomcat.DataSource.elementPropertyMapping=jndiName:name, auth:, resourceType:type, driverClassName:, url:, username:, password:, maxActive:, maxIdle:, minIdle:,maxWait:,initialSize:, connectionProperties:
# Element Tag (inherited from: tomcat.JndiContextElement.elementTag)
#tomcat.DataSource.elementTag=Resource
# The initial number of connections that are created when the pool is started.
#tomcat.DataSource.initialSize=0
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.JndiContextElement.inspectClasspathResources)
#tomcat.DataSource.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.JndiContextElement.inspectScript)
#tomcat.DataSource.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.JndiContextElement.inspectTemplateClasspathResources)
#tomcat.DataSource.inspectTemplateClasspathResources=null
# The maximum number of active connections that can be allocated from this pool at the same time (negative for no limit).
#tomcat.DataSource.maxActive=8
# The maximum number of connections that can remain idle in the pool without extra connections being released (negative for no limit).
#tomcat.DataSource.maxIdle=8
# The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned before throwing an exception (-1 to wait indefinitely).
#tomcat.DataSource.maxWait=-1
# The minimum number of connections that can remain idle in the pool without extra connections being created (zero to create none).
#tomcat.DataSource.minIdle=0
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.modifyOptions)
#tomcat.DataSource.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.JndiContextElement.modifyOrder)
#tomcat.DataSource.modifyOrder=50
# Modify Verb (inherited from: tomcat.JndiContextElement.modifyVerb)
#tomcat.DataSource.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.noopOptions)
#tomcat.DataSource.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.JndiContextElement.noopOrder)
#tomcat.DataSource.noopOrder=50
# Noop Verb (inherited from: tomcat.JndiContextElement.noopVerb)
#tomcat.DataSource.noopVerb=Modify
# Resource Type
#tomcat.DataSource.resourceType=javax.sql.DataSource
# The generic container requires a restart for the action performed by this deployed. (inherited from: tomcat.JndiContextElement.restartRequired)
#tomcat.DataSource.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.JndiContextElement.restartRequiredForNoop)
#tomcat.DataSource.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: tomcat.JndiContextElement.targetDirectory)
#tomcat.DataSource.targetDirectory=${deployed.container.contextDirectory}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: tomcat.JndiContextElement.targetDirectoryShared)
#tomcat.DataSource.targetDirectoryShared=true
# Name of the artifact on the generic server. (inherited from: tomcat.JndiContextElement.targetFile)
#tomcat.DataSource.targetFile=${deployed.context}.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact. (inherited from: tomcat.JndiContextElement.template)
#tomcat.DataSource.template=tc/context/context-element.ftl
# The set of created CIs. (inherited from: tomcat.ResourceLink.boundConfigurationItems)
#tomcat.DataSourceLink.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.ResourceLink.createOptions)
#tomcat.DataSourceLink.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: tomcat.ResourceLink.createOrder)
#tomcat.DataSourceLink.createOrder=60
# Create the target directory on the generic server if it does not exist. (inherited from: tomcat.ResourceLink.createTargetDirectory)
#tomcat.DataSourceLink.createTargetDirectory=false
# Create Verb (inherited from: tomcat.ResourceLink.createVerb)
#tomcat.DataSourceLink.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.ResourceLink.destroyOptions)
#tomcat.DataSourceLink.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: tomcat.ResourceLink.destroyOrder)
#tomcat.DataSourceLink.destroyOrder=40
# Destroy Verb (inherited from: tomcat.ResourceLink.destroyVerb)
#tomcat.DataSourceLink.destroyVerb=Destroy
# Element Name (inherited from: tomcat.ResourceLink.elementName)
#tomcat.DataSourceLink.elementName=${deployed.jndiName}
# Mapping of the configuration item (CI) properties to their factory equivalents. Leave this property blank to use the same name as the key. (inherited from: tomcat.ResourceLink.elementPropertyMapping)
#tomcat.DataSourceLink.elementPropertyMapping=jndiName:name, resourceType:type, globalName:
# Element Tag (inherited from: tomcat.ResourceLink.elementTag)
#tomcat.DataSourceLink.elementTag=ResourceLink
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.ResourceLink.inspectClasspathResources)
#tomcat.DataSourceLink.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.ResourceLink.inspectScript)
#tomcat.DataSourceLink.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.ResourceLink.inspectTemplateClasspathResources)
#tomcat.DataSourceLink.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.ResourceLink.modifyOptions)
#tomcat.DataSourceLink.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.ResourceLink.modifyOrder)
#tomcat.DataSourceLink.modifyOrder=50
# Modify Verb (inherited from: tomcat.ResourceLink.modifyVerb)
#tomcat.DataSourceLink.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.ResourceLink.noopOptions)
#tomcat.DataSourceLink.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.ResourceLink.noopOrder)
#tomcat.DataSourceLink.noopOrder=50
# Noop Verb (inherited from: tomcat.ResourceLink.noopVerb)
#tomcat.DataSourceLink.noopVerb=Modify
# The fully qualified Java class name that the web application expects when it performs a lookup for this resource link.
#tomcat.DataSourceLink.resourceType=javax.sql.DataSource
# The generic container requires a restart for the action performed by this deployed. (inherited from: tomcat.ResourceLink.restartRequired)
#tomcat.DataSourceLink.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.ResourceLink.restartRequiredForNoop)
#tomcat.DataSourceLink.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: tomcat.ResourceLink.targetDirectory)
#tomcat.DataSourceLink.targetDirectory=${deployed.container.contextDirectory}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: tomcat.ResourceLink.targetDirectoryShared)
#tomcat.DataSourceLink.targetDirectoryShared=true
# Name of the artifact on the generic server. (inherited from: tomcat.ResourceLink.targetFile)
#tomcat.DataSourceLink.targetFile=${deployed.context}.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact. (inherited from: tomcat.ResourceLink.template)
#tomcat.DataSourceLink.template=tc/context/context-element.ftl
# The set of CI templates. (inherited from: tomcat.ResourceLinkSpec.boundTemplates)
#tomcat.DataSourceLinkSpec.boundTemplates=null
# The set of CI templates. (inherited from: jee.DataSourceSpec.boundTemplates)
#tomcat.DataSourceSpec.boundTemplates=null
# The set of created CIs. (inherited from: tomcat.CopiedArtifact.boundConfigurationItems)
#tomcat.DeployedConfigurationFile.boundConfigurationItems=null
# If set to true, files are directly copied to the target directory without first being uploaded to the staging or temporary directory (like versions of XL Deploy prior to 4.0.0) (inherited from: tomcat.CopiedArtifact.copyDirectlyToTargetPath)
#tomcat.DeployedConfigurationFile.copyDirectlyToTargetPath=false
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.CopiedArtifact.createOptions)
#tomcat.DeployedConfigurationFile.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: tomcat.CopiedArtifact.createOrder)
#tomcat.DeployedConfigurationFile.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: tomcat.CopiedArtifact.createTargetDirectory)
#tomcat.DeployedConfigurationFile.createTargetDirectory=true
# Create Verb (inherited from: tomcat.CopiedArtifact.createVerb)
#tomcat.DeployedConfigurationFile.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.CopiedArtifact.destroyOptions)
#tomcat.DeployedConfigurationFile.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: tomcat.CopiedArtifact.destroyOrder)
#tomcat.DeployedConfigurationFile.destroyOrder=40
# Destroy Verb (inherited from: tomcat.CopiedArtifact.destroyVerb)
#tomcat.DeployedConfigurationFile.destroyVerb=Destroy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.CopiedArtifact.inspectClasspathResources)
#tomcat.DeployedConfigurationFile.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.CopiedArtifact.inspectScript)
#tomcat.DeployedConfigurationFile.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.CopiedArtifact.inspectTemplateClasspathResources)
#tomcat.DeployedConfigurationFile.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.CopiedArtifact.modifyOptions)
#tomcat.DeployedConfigurationFile.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.CopiedArtifact.modifyOrder)
#tomcat.DeployedConfigurationFile.modifyOrder=50
# Modify Verb (inherited from: tomcat.CopiedArtifact.modifyVerb)
#tomcat.DeployedConfigurationFile.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.CopiedArtifact.noopOptions)
#tomcat.DeployedConfigurationFile.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.CopiedArtifact.noopOrder)
#tomcat.DeployedConfigurationFile.noopOrder=50
# Noop Verb (inherited from: tomcat.CopiedArtifact.noopVerb)
#tomcat.DeployedConfigurationFile.noopVerb=Modify
# If set to true, preserve the existing files on the remote host (do not delete the copied files during the destroy operation).  (inherited from: tomcat.CopiedArtifact.preserveExistingFiles)
#tomcat.DeployedConfigurationFile.preserveExistingFiles=false
# The generic container requires a restart for the action performed by this deployed. (inherited from: tomcat.CopiedArtifact.restartRequired)
#tomcat.DeployedConfigurationFile.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.CopiedArtifact.restartRequiredForNoop)
#tomcat.DeployedConfigurationFile.restartRequiredForNoop=false
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: tomcat.CopiedArtifact.targetDirectoryShared)
#tomcat.DeployedConfigurationFile.targetDirectoryShared=true
# If set to true, the sub directories on the target machine are not deleted if files other than that copied by XL Deploy are present. Please note that setting this option to true will cause the removal process to be a slower.  (inherited from: tomcat.CopiedArtifact.targetPathSharedSubDirectories)
#tomcat.DeployedConfigurationFile.targetPathSharedSubDirectories=false
# The set of created CIs. (inherited from: tomcat.CopiedArtifact.boundConfigurationItems)
#tomcat.DeployedConfigurationFolder.boundConfigurationItems=null
# If set to true, files are directly copied to the target directory without first being uploaded to the staging or temporary directory (like versions of XL Deploy prior to 4.0.0) (inherited from: tomcat.CopiedArtifact.copyDirectlyToTargetPath)
#tomcat.DeployedConfigurationFolder.copyDirectlyToTargetPath=false
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.CopiedArtifact.createOptions)
#tomcat.DeployedConfigurationFolder.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: tomcat.CopiedArtifact.createOrder)
#tomcat.DeployedConfigurationFolder.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: tomcat.CopiedArtifact.createTargetDirectory)
#tomcat.DeployedConfigurationFolder.createTargetDirectory=true
# Create Verb (inherited from: tomcat.CopiedArtifact.createVerb)
#tomcat.DeployedConfigurationFolder.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.CopiedArtifact.destroyOptions)
#tomcat.DeployedConfigurationFolder.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: tomcat.CopiedArtifact.destroyOrder)
#tomcat.DeployedConfigurationFolder.destroyOrder=40
# Destroy Verb (inherited from: tomcat.CopiedArtifact.destroyVerb)
#tomcat.DeployedConfigurationFolder.destroyVerb=Destroy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.CopiedArtifact.inspectClasspathResources)
#tomcat.DeployedConfigurationFolder.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.CopiedArtifact.inspectScript)
#tomcat.DeployedConfigurationFolder.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.CopiedArtifact.inspectTemplateClasspathResources)
#tomcat.DeployedConfigurationFolder.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.CopiedArtifact.modifyOptions)
#tomcat.DeployedConfigurationFolder.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.CopiedArtifact.modifyOrder)
#tomcat.DeployedConfigurationFolder.modifyOrder=50
# Modify Verb (inherited from: tomcat.CopiedArtifact.modifyVerb)
#tomcat.DeployedConfigurationFolder.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.CopiedArtifact.noopOptions)
#tomcat.DeployedConfigurationFolder.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.CopiedArtifact.noopOrder)
#tomcat.DeployedConfigurationFolder.noopOrder=50
# Noop Verb (inherited from: tomcat.CopiedArtifact.noopVerb)
#tomcat.DeployedConfigurationFolder.noopVerb=Modify
# If set to true, preserve the existing files on the remote host (do not delete the copied files during the destroy operation).  (inherited from: tomcat.CopiedArtifact.preserveExistingFiles)
#tomcat.DeployedConfigurationFolder.preserveExistingFiles=false
# The generic container requires a restart for the action performed by this deployed. (inherited from: tomcat.CopiedArtifact.restartRequired)
#tomcat.DeployedConfigurationFolder.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.CopiedArtifact.restartRequiredForNoop)
#tomcat.DeployedConfigurationFolder.restartRequiredForNoop=false
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: tomcat.CopiedArtifact.targetDirectoryShared)
#tomcat.DeployedConfigurationFolder.targetDirectoryShared=true
# If set to true, the sub directories on the target machine are not deleted if files other than that copied by XL Deploy are present. Please note that setting this option to true will cause the removal process to be a slower.  (inherited from: tomcat.CopiedArtifact.targetPathSharedSubDirectories)
#tomcat.DeployedConfigurationFolder.targetPathSharedSubDirectories=false
# The set of created CIs. (inherited from: tomcat.CopiedArtifact.boundConfigurationItems)
#tomcat.DeployedLibrary.boundConfigurationItems=null
# If set to true, files are directly copied to the target directory without first being uploaded to the staging or temporary directory (like versions of XL Deploy prior to 4.0.0) (inherited from: tomcat.CopiedArtifact.copyDirectlyToTargetPath)
#tomcat.DeployedLibrary.copyDirectlyToTargetPath=false
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.CopiedArtifact.createOptions)
#tomcat.DeployedLibrary.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: tomcat.CopiedArtifact.createOrder)
#tomcat.DeployedLibrary.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: tomcat.CopiedArtifact.createTargetDirectory)
#tomcat.DeployedLibrary.createTargetDirectory=true
# Create Verb (inherited from: tomcat.CopiedArtifact.createVerb)
#tomcat.DeployedLibrary.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.CopiedArtifact.destroyOptions)
#tomcat.DeployedLibrary.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: tomcat.CopiedArtifact.destroyOrder)
#tomcat.DeployedLibrary.destroyOrder=40
# Destroy Verb (inherited from: tomcat.CopiedArtifact.destroyVerb)
#tomcat.DeployedLibrary.destroyVerb=Destroy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.CopiedArtifact.inspectClasspathResources)
#tomcat.DeployedLibrary.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.CopiedArtifact.inspectScript)
#tomcat.DeployedLibrary.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.CopiedArtifact.inspectTemplateClasspathResources)
#tomcat.DeployedLibrary.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.CopiedArtifact.modifyOptions)
#tomcat.DeployedLibrary.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.CopiedArtifact.modifyOrder)
#tomcat.DeployedLibrary.modifyOrder=50
# Modify Verb (inherited from: tomcat.CopiedArtifact.modifyVerb)
#tomcat.DeployedLibrary.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.CopiedArtifact.noopOptions)
#tomcat.DeployedLibrary.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.CopiedArtifact.noopOrder)
#tomcat.DeployedLibrary.noopOrder=50
# Noop Verb (inherited from: tomcat.CopiedArtifact.noopVerb)
#tomcat.DeployedLibrary.noopVerb=Modify
# If set to true, preserve the existing files on the remote host (do not delete the copied files during the destroy operation).  (inherited from: tomcat.CopiedArtifact.preserveExistingFiles)
#tomcat.DeployedLibrary.preserveExistingFiles=false
# The generic container requires a restart for the action performed by this deployed. (inherited from: tomcat.CopiedArtifact.restartRequired)
#tomcat.DeployedLibrary.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.CopiedArtifact.restartRequiredForNoop)
#tomcat.DeployedLibrary.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server.
#tomcat.DeployedLibrary.targetDirectory=${deployed.container.home}/lib
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: tomcat.CopiedArtifact.targetDirectoryShared)
#tomcat.DeployedLibrary.targetDirectoryShared=true
# If set to true, the sub directories on the target machine are not deleted if files other than that copied by XL Deploy are present. Please note that setting this option to true will cause the removal process to be a slower.  (inherited from: tomcat.CopiedArtifact.targetPathSharedSubDirectories)
#tomcat.DeployedLibrary.targetPathSharedSubDirectories=false
# The set of CI templates. (inherited from: generic.Folder.boundTemplates)
#tomcat.ExplodedWar.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: generic.Folder.delimiters)
#tomcat.ExplodedWar.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: generic.Folder.textFileNamesRegex)
#tomcat.ExplodedWar.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# App Base
#tomcat.ExplodedWarModule.appBase=${deployed.container.appBaseAbsolutePath}
# The set of created CIs. (inherited from: tomcat.ContextWarModule.boundConfigurationItems)
#tomcat.ExplodedWarModule.boundConfigurationItems=null
# Mapping of the context attributes. Leave this property blank to use the same name as the key.
#tomcat.ExplodedWarModule.contextElementPropertyMapping=docBase:
# Context Subject (inherited from: tomcat.ContextWarModule.contextSubject)
#tomcat.ExplodedWarModule.contextSubject=war settings
# Freemarker template used to create the context xml for the War
#tomcat.ExplodedWarModule.contextTemplate=tc/context/context-attributes.ftl
# Target directory to which the context xml must to copied to on the target system
#tomcat.ExplodedWarModule.contextXmlTargetDirectory=${deployed.container.contextDirectory}
# If set to true, files are directly copied to the target directory without first being uploaded to the staging or temporary directory (like versions of XL Deploy prior to 4.0.0) (inherited from: tomcat.ContextWarModule.copyDirectlyToTargetPath)
#tomcat.ExplodedWarModule.copyDirectlyToTargetPath=false
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.ContextWarModule.createOptions)
#tomcat.ExplodedWarModule.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation.
#tomcat.ExplodedWarModule.createOrder=70
# The order of the create context step in the step list for the create operation. (inherited from: tomcat.ContextWarModule.createOrderOfContextXml)
#tomcat.ExplodedWarModule.createOrderOfContextXml=60
# Create the target directory on the generic server if it does not exist.
#tomcat.ExplodedWarModule.createTargetDirectory=true
# Create Verb (inherited from: tomcat.ContextWarModule.createVerb)
#tomcat.ExplodedWarModule.createVerb=Create
# Absolute paths to files on the target system that was generated and must be clean up during a destroy operation (inherited from: tomcat.ContextWarModule.deleteGeneratedResources)
#tomcat.ExplodedWarModule.deleteGeneratedResources=null
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.ContextWarModule.destroyOptions)
#tomcat.ExplodedWarModule.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation.
#tomcat.ExplodedWarModule.destroyOrder=30
# The order of the destroy context step in the step list for the create operation. (inherited from: tomcat.ContextWarModule.destroyOrderOfContextXml)
#tomcat.ExplodedWarModule.destroyOrderOfContextXml=40
# Destroy Verb (inherited from: tomcat.ContextWarModule.destroyVerb)
#tomcat.ExplodedWarModule.destroyVerb=Destroy
# Doc Base
#tomcat.ExplodedWarModule.docBase=${deployed.targetDirectory}
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.ContextWarModule.inspectClasspathResources)
#tomcat.ExplodedWarModule.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.ContextWarModule.inspectScript)
#tomcat.ExplodedWarModule.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.ContextWarModule.inspectTemplateClasspathResources)
#tomcat.ExplodedWarModule.inspectTemplateClasspathResources=null
# If set to true, create and destroy context.xml files. Set to false to provide your own context.xml file. (inherited from: tomcat.ContextWarModule.manageContextXml)
#tomcat.ExplodedWarModule.manageContextXml=true
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.ContextWarModule.modifyOptions)
#tomcat.ExplodedWarModule.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.ContextWarModule.modifyOrder)
#tomcat.ExplodedWarModule.modifyOrder=50
# The order of the rename context root step in the step list for the modify operation. (inherited from: tomcat.ContextWarModule.modifyOrderOfContextXml)
#tomcat.ExplodedWarModule.modifyOrderOfContextXml=60
# Modify Verb (inherited from: tomcat.ContextWarModule.modifyVerb)
#tomcat.ExplodedWarModule.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.ContextWarModule.noopOptions)
#tomcat.ExplodedWarModule.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.ContextWarModule.noopOrder)
#tomcat.ExplodedWarModule.noopOrder=50
# Noop Verb (inherited from: tomcat.ContextWarModule.noopVerb)
#tomcat.ExplodedWarModule.noopVerb=Modify
# If set to true, preserve the existing files on the remote host (do not delete the copied files during the destroy operation).  (inherited from: tomcat.ContextWarModule.preserveExistingFiles)
#tomcat.ExplodedWarModule.preserveExistingFiles=false
# If set to false, keep context file on destroy. Set to true to destroy the context file. (inherited from: tomcat.ContextWarModule.removeContextXml)
#tomcat.ExplodedWarModule.removeContextXml=false
# The generic container requires a restart for the action performed by this deployed.
#tomcat.ExplodedWarModule.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.ContextWarModule.restartRequiredForNoop)
#tomcat.ExplodedWarModule.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server.
#tomcat.ExplodedWarModule.targetDirectory=${deployed.appBase}/${deployed.contextRoot}.war
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it.
#tomcat.ExplodedWarModule.targetDirectoryShared=false
# Name of the artifact on the generic server.
#tomcat.ExplodedWarModule.targetFile=NOT_USED
# If set to true, the sub directories on the target machine are not deleted if files other than that copied by XL Deploy are present. Please note that setting this option to true will cause the removal process to be a slower.  (inherited from: tomcat.ContextWarModule.targetPathSharedSubDirectories)
#tomcat.ExplodedWarModule.targetPathSharedSubDirectories=false
# Auth
#tomcat.JeeActiveMqConnectionFactory.auth=Container
# The set of created CIs. (inherited from: tomcat.JndiContextElement.boundConfigurationItems)
#tomcat.JeeActiveMqConnectionFactory.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.createOptions)
#tomcat.JeeActiveMqConnectionFactory.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: tomcat.JndiContextElement.createOrder)
#tomcat.JeeActiveMqConnectionFactory.createOrder=60
# Create the target directory on the generic server if it does not exist. (inherited from: tomcat.JndiContextElement.createTargetDirectory)
#tomcat.JeeActiveMqConnectionFactory.createTargetDirectory=false
# Create Verb (inherited from: tomcat.JndiContextElement.createVerb)
#tomcat.JeeActiveMqConnectionFactory.createVerb=Create
# Description
#tomcat.JeeActiveMqConnectionFactory.description=JMS Connection Factory
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.destroyOptions)
#tomcat.JeeActiveMqConnectionFactory.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: tomcat.JndiContextElement.destroyOrder)
#tomcat.JeeActiveMqConnectionFactory.destroyOrder=40
# Destroy Verb (inherited from: tomcat.JndiContextElement.destroyVerb)
#tomcat.JeeActiveMqConnectionFactory.destroyVerb=Destroy
# Element Name (inherited from: tomcat.JndiContextElement.elementName)
#tomcat.JeeActiveMqConnectionFactory.elementName=${deployed.jndiName}
# Mapping of the configuration item (CI) properties to their factory equivalents. Leave this property blank to use the same name as the key.
#tomcat.JeeActiveMqConnectionFactory.elementPropertyMapping=jndiName:name, auth:, resourceType:type, description:, factory:,brokerUrl:brokerURL, brokerName:
# Element Tag (inherited from: tomcat.JndiContextElement.elementTag)
#tomcat.JeeActiveMqConnectionFactory.elementTag=Resource
# Factory
#tomcat.JeeActiveMqConnectionFactory.factory=org.apache.activemq.jndi.JNDIReferenceFactory
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.JndiContextElement.inspectClasspathResources)
#tomcat.JeeActiveMqConnectionFactory.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.JndiContextElement.inspectScript)
#tomcat.JeeActiveMqConnectionFactory.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.JndiContextElement.inspectTemplateClasspathResources)
#tomcat.JeeActiveMqConnectionFactory.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.modifyOptions)
#tomcat.JeeActiveMqConnectionFactory.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.JndiContextElement.modifyOrder)
#tomcat.JeeActiveMqConnectionFactory.modifyOrder=50
# Modify Verb (inherited from: tomcat.JndiContextElement.modifyVerb)
#tomcat.JeeActiveMqConnectionFactory.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.noopOptions)
#tomcat.JeeActiveMqConnectionFactory.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.JndiContextElement.noopOrder)
#tomcat.JeeActiveMqConnectionFactory.noopOrder=50
# Noop Verb (inherited from: tomcat.JndiContextElement.noopVerb)
#tomcat.JeeActiveMqConnectionFactory.noopVerb=Modify
# Resource Type
#tomcat.JeeActiveMqConnectionFactory.resourceType=org.apache.activemq.ActiveMQConnectionFactory
# The generic container requires a restart for the action performed by this deployed. (inherited from: tomcat.JndiContextElement.restartRequired)
#tomcat.JeeActiveMqConnectionFactory.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.JndiContextElement.restartRequiredForNoop)
#tomcat.JeeActiveMqConnectionFactory.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: tomcat.JndiContextElement.targetDirectory)
#tomcat.JeeActiveMqConnectionFactory.targetDirectory=${deployed.container.contextDirectory}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: tomcat.JndiContextElement.targetDirectoryShared)
#tomcat.JeeActiveMqConnectionFactory.targetDirectoryShared=true
# Name of the artifact on the generic server. (inherited from: tomcat.JndiContextElement.targetFile)
#tomcat.JeeActiveMqConnectionFactory.targetFile=${deployed.context}.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact. (inherited from: tomcat.JndiContextElement.template)
#tomcat.JeeActiveMqConnectionFactory.template=tc/context/context-element.ftl
# Auth
#tomcat.JeeActiveMqQueue.auth=Container
# The set of created CIs. (inherited from: tomcat.JndiContextElement.boundConfigurationItems)
#tomcat.JeeActiveMqQueue.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.createOptions)
#tomcat.JeeActiveMqQueue.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: tomcat.JndiContextElement.createOrder)
#tomcat.JeeActiveMqQueue.createOrder=60
# Create the target directory on the generic server if it does not exist. (inherited from: tomcat.JndiContextElement.createTargetDirectory)
#tomcat.JeeActiveMqQueue.createTargetDirectory=false
# Create Verb (inherited from: tomcat.JndiContextElement.createVerb)
#tomcat.JeeActiveMqQueue.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.destroyOptions)
#tomcat.JeeActiveMqQueue.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: tomcat.JndiContextElement.destroyOrder)
#tomcat.JeeActiveMqQueue.destroyOrder=40
# Destroy Verb (inherited from: tomcat.JndiContextElement.destroyVerb)
#tomcat.JeeActiveMqQueue.destroyVerb=Destroy
# Element Name (inherited from: tomcat.JndiContextElement.elementName)
#tomcat.JeeActiveMqQueue.elementName=${deployed.jndiName}
# Mapping of the configuration item (CI) properties to their factory equivalents. Leave this property blank to use the same name as the key.
#tomcat.JeeActiveMqQueue.elementPropertyMapping=jndiName:name, auth:, resourceType:type:, description:, factory:,physicalName:
# Element Tag (inherited from: tomcat.JndiContextElement.elementTag)
#tomcat.JeeActiveMqQueue.elementTag=Resource
# Factory
#tomcat.JeeActiveMqQueue.factory=org.apache.activemq.jndi.JNDIReferenceFactory
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.JndiContextElement.inspectClasspathResources)
#tomcat.JeeActiveMqQueue.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.JndiContextElement.inspectScript)
#tomcat.JeeActiveMqQueue.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.JndiContextElement.inspectTemplateClasspathResources)
#tomcat.JeeActiveMqQueue.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.modifyOptions)
#tomcat.JeeActiveMqQueue.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.JndiContextElement.modifyOrder)
#tomcat.JeeActiveMqQueue.modifyOrder=50
# Modify Verb (inherited from: tomcat.JndiContextElement.modifyVerb)
#tomcat.JeeActiveMqQueue.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.noopOptions)
#tomcat.JeeActiveMqQueue.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.JndiContextElement.noopOrder)
#tomcat.JeeActiveMqQueue.noopOrder=50
# Noop Verb (inherited from: tomcat.JndiContextElement.noopVerb)
#tomcat.JeeActiveMqQueue.noopVerb=Modify
# Resource Type
#tomcat.JeeActiveMqQueue.resourceType=org.apache.activemq.command.ActiveMQQueue
# The generic container requires a restart for the action performed by this deployed. (inherited from: tomcat.JndiContextElement.restartRequired)
#tomcat.JeeActiveMqQueue.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.JndiContextElement.restartRequiredForNoop)
#tomcat.JeeActiveMqQueue.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: tomcat.JndiContextElement.targetDirectory)
#tomcat.JeeActiveMqQueue.targetDirectory=${deployed.container.contextDirectory}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: tomcat.JndiContextElement.targetDirectoryShared)
#tomcat.JeeActiveMqQueue.targetDirectoryShared=true
# Name of the artifact on the generic server. (inherited from: tomcat.JndiContextElement.targetFile)
#tomcat.JeeActiveMqQueue.targetFile=${deployed.context}.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact. (inherited from: tomcat.JndiContextElement.template)
#tomcat.JeeActiveMqQueue.template=tc/context/context-element.ftl
# Auth
#tomcat.JeeActiveMqTopic.auth=Container
# The set of created CIs. (inherited from: tomcat.JndiContextElement.boundConfigurationItems)
#tomcat.JeeActiveMqTopic.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.createOptions)
#tomcat.JeeActiveMqTopic.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: tomcat.JndiContextElement.createOrder)
#tomcat.JeeActiveMqTopic.createOrder=60
# Create the target directory on the generic server if it does not exist. (inherited from: tomcat.JndiContextElement.createTargetDirectory)
#tomcat.JeeActiveMqTopic.createTargetDirectory=false
# Create Verb (inherited from: tomcat.JndiContextElement.createVerb)
#tomcat.JeeActiveMqTopic.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.destroyOptions)
#tomcat.JeeActiveMqTopic.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: tomcat.JndiContextElement.destroyOrder)
#tomcat.JeeActiveMqTopic.destroyOrder=40
# Destroy Verb (inherited from: tomcat.JndiContextElement.destroyVerb)
#tomcat.JeeActiveMqTopic.destroyVerb=Destroy
# Element Name (inherited from: tomcat.JndiContextElement.elementName)
#tomcat.JeeActiveMqTopic.elementName=${deployed.jndiName}
# Mapping of the configuration item (CI) properties to their factory equivalents. Leave this property blank to use the same name as the key.
#tomcat.JeeActiveMqTopic.elementPropertyMapping=jndiName:name, auth:, resourceType:type, description:, factory:,physicalName:
# Element Tag (inherited from: tomcat.JndiContextElement.elementTag)
#tomcat.JeeActiveMqTopic.elementTag=Resource
# Factory
#tomcat.JeeActiveMqTopic.factory=org.apache.activemq.jndi.JNDIReferenceFactory
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.JndiContextElement.inspectClasspathResources)
#tomcat.JeeActiveMqTopic.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.JndiContextElement.inspectScript)
#tomcat.JeeActiveMqTopic.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.JndiContextElement.inspectTemplateClasspathResources)
#tomcat.JeeActiveMqTopic.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.modifyOptions)
#tomcat.JeeActiveMqTopic.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.JndiContextElement.modifyOrder)
#tomcat.JeeActiveMqTopic.modifyOrder=50
# Modify Verb (inherited from: tomcat.JndiContextElement.modifyVerb)
#tomcat.JeeActiveMqTopic.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.noopOptions)
#tomcat.JeeActiveMqTopic.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.JndiContextElement.noopOrder)
#tomcat.JeeActiveMqTopic.noopOrder=50
# Noop Verb (inherited from: tomcat.JndiContextElement.noopVerb)
#tomcat.JeeActiveMqTopic.noopVerb=Modify
# Resource Type
#tomcat.JeeActiveMqTopic.resourceType=org.apache.activemq.command.ActiveMQTopic
# The generic container requires a restart for the action performed by this deployed. (inherited from: tomcat.JndiContextElement.restartRequired)
#tomcat.JeeActiveMqTopic.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.JndiContextElement.restartRequiredForNoop)
#tomcat.JeeActiveMqTopic.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: tomcat.JndiContextElement.targetDirectory)
#tomcat.JeeActiveMqTopic.targetDirectory=${deployed.container.contextDirectory}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: tomcat.JndiContextElement.targetDirectoryShared)
#tomcat.JeeActiveMqTopic.targetDirectoryShared=true
# Name of the artifact on the generic server. (inherited from: tomcat.JndiContextElement.targetFile)
#tomcat.JeeActiveMqTopic.targetFile=${deployed.context}.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact. (inherited from: tomcat.JndiContextElement.template)
#tomcat.JeeActiveMqTopic.template=tc/context/context-element.ftl
# Auth
#tomcat.JeeWebsphereMqQueue.auth=Container
# The set of created CIs. (inherited from: tomcat.JndiContextElement.boundConfigurationItems)
#tomcat.JeeWebsphereMqQueue.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.createOptions)
#tomcat.JeeWebsphereMqQueue.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: tomcat.JndiContextElement.createOrder)
#tomcat.JeeWebsphereMqQueue.createOrder=60
# Create the target directory on the generic server if it does not exist. (inherited from: tomcat.JndiContextElement.createTargetDirectory)
#tomcat.JeeWebsphereMqQueue.createTargetDirectory=false
# Create Verb (inherited from: tomcat.JndiContextElement.createVerb)
#tomcat.JeeWebsphereMqQueue.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.destroyOptions)
#tomcat.JeeWebsphereMqQueue.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: tomcat.JndiContextElement.destroyOrder)
#tomcat.JeeWebsphereMqQueue.destroyOrder=40
# Destroy Verb (inherited from: tomcat.JndiContextElement.destroyVerb)
#tomcat.JeeWebsphereMqQueue.destroyVerb=Destroy
# Element Name (inherited from: tomcat.JndiContextElement.elementName)
#tomcat.JeeWebsphereMqQueue.elementName=${deployed.jndiName}
# Mapping of the configuration item (CI) properties to their factory equivalents. Leave this property blank to use the same name as the key.
#tomcat.JeeWebsphereMqQueue.elementPropertyMapping=jndiName:name, auth:, resourceType:type, description:, factory:,physicalName:QU
# Element Tag (inherited from: tomcat.JndiContextElement.elementTag)
#tomcat.JeeWebsphereMqQueue.elementTag=Resource
# Factory
#tomcat.JeeWebsphereMqQueue.factory=com.ibm.mq.jms.MQQueueFactory
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.JndiContextElement.inspectClasspathResources)
#tomcat.JeeWebsphereMqQueue.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.JndiContextElement.inspectScript)
#tomcat.JeeWebsphereMqQueue.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.JndiContextElement.inspectTemplateClasspathResources)
#tomcat.JeeWebsphereMqQueue.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.modifyOptions)
#tomcat.JeeWebsphereMqQueue.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.JndiContextElement.modifyOrder)
#tomcat.JeeWebsphereMqQueue.modifyOrder=50
# Modify Verb (inherited from: tomcat.JndiContextElement.modifyVerb)
#tomcat.JeeWebsphereMqQueue.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.noopOptions)
#tomcat.JeeWebsphereMqQueue.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.JndiContextElement.noopOrder)
#tomcat.JeeWebsphereMqQueue.noopOrder=50
# Noop Verb (inherited from: tomcat.JndiContextElement.noopVerb)
#tomcat.JeeWebsphereMqQueue.noopVerb=Modify
# Resource Type
#tomcat.JeeWebsphereMqQueue.resourceType=com.ibm.mq.jms.MQQueue
# The generic container requires a restart for the action performed by this deployed. (inherited from: tomcat.JndiContextElement.restartRequired)
#tomcat.JeeWebsphereMqQueue.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.JndiContextElement.restartRequiredForNoop)
#tomcat.JeeWebsphereMqQueue.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: tomcat.JndiContextElement.targetDirectory)
#tomcat.JeeWebsphereMqQueue.targetDirectory=${deployed.container.contextDirectory}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: tomcat.JndiContextElement.targetDirectoryShared)
#tomcat.JeeWebsphereMqQueue.targetDirectoryShared=true
# Name of the artifact on the generic server. (inherited from: tomcat.JndiContextElement.targetFile)
#tomcat.JeeWebsphereMqQueue.targetFile=${deployed.context}.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact. (inherited from: tomcat.JndiContextElement.template)
#tomcat.JeeWebsphereMqQueue.template=tc/context/context-element.ftl
# Auth
#tomcat.JeeWebsphereMqQueueConnectionFactory.auth=Container
# The set of created CIs. (inherited from: tomcat.JndiContextElement.boundConfigurationItems)
#tomcat.JeeWebsphereMqQueueConnectionFactory.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.createOptions)
#tomcat.JeeWebsphereMqQueueConnectionFactory.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: tomcat.JndiContextElement.createOrder)
#tomcat.JeeWebsphereMqQueueConnectionFactory.createOrder=60
# Create the target directory on the generic server if it does not exist. (inherited from: tomcat.JndiContextElement.createTargetDirectory)
#tomcat.JeeWebsphereMqQueueConnectionFactory.createTargetDirectory=false
# Create Verb (inherited from: tomcat.JndiContextElement.createVerb)
#tomcat.JeeWebsphereMqQueueConnectionFactory.createVerb=Create
# Description
#tomcat.JeeWebsphereMqQueueConnectionFactory.description=JMS Connection Factory
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.destroyOptions)
#tomcat.JeeWebsphereMqQueueConnectionFactory.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: tomcat.JndiContextElement.destroyOrder)
#tomcat.JeeWebsphereMqQueueConnectionFactory.destroyOrder=40
# Destroy Verb (inherited from: tomcat.JndiContextElement.destroyVerb)
#tomcat.JeeWebsphereMqQueueConnectionFactory.destroyVerb=Destroy
# Element Name (inherited from: tomcat.JndiContextElement.elementName)
#tomcat.JeeWebsphereMqQueueConnectionFactory.elementName=${deployed.jndiName}
# Mapping of the configuration item (CI) properties to their factory equivalents. Leave this property blank to use the same name as the key.
#tomcat.JeeWebsphereMqQueueConnectionFactory.elementPropertyMapping=jndiName:name, auth:, resourceType:type,factory:, description:, server:HOST, port:PORT, channel:CHAN, transport:TRAN, queueManager:QMGR
# Element Tag (inherited from: tomcat.JndiContextElement.elementTag)
#tomcat.JeeWebsphereMqQueueConnectionFactory.elementTag=Resource
# Factory
#tomcat.JeeWebsphereMqQueueConnectionFactory.factory=com.ibm.mq.jms.MQQueueConnectionFactoryFactory
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.JndiContextElement.inspectClasspathResources)
#tomcat.JeeWebsphereMqQueueConnectionFactory.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.JndiContextElement.inspectScript)
#tomcat.JeeWebsphereMqQueueConnectionFactory.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.JndiContextElement.inspectTemplateClasspathResources)
#tomcat.JeeWebsphereMqQueueConnectionFactory.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.modifyOptions)
#tomcat.JeeWebsphereMqQueueConnectionFactory.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.JndiContextElement.modifyOrder)
#tomcat.JeeWebsphereMqQueueConnectionFactory.modifyOrder=50
# Modify Verb (inherited from: tomcat.JndiContextElement.modifyVerb)
#tomcat.JeeWebsphereMqQueueConnectionFactory.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.noopOptions)
#tomcat.JeeWebsphereMqQueueConnectionFactory.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.JndiContextElement.noopOrder)
#tomcat.JeeWebsphereMqQueueConnectionFactory.noopOrder=50
# Noop Verb (inherited from: tomcat.JndiContextElement.noopVerb)
#tomcat.JeeWebsphereMqQueueConnectionFactory.noopVerb=Modify
# Resource Type
#tomcat.JeeWebsphereMqQueueConnectionFactory.resourceType=com.ibm.mq.jms.MQQueueConnectionFactory
# The generic container requires a restart for the action performed by this deployed. (inherited from: tomcat.JndiContextElement.restartRequired)
#tomcat.JeeWebsphereMqQueueConnectionFactory.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.JndiContextElement.restartRequiredForNoop)
#tomcat.JeeWebsphereMqQueueConnectionFactory.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: tomcat.JndiContextElement.targetDirectory)
#tomcat.JeeWebsphereMqQueueConnectionFactory.targetDirectory=${deployed.container.contextDirectory}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: tomcat.JndiContextElement.targetDirectoryShared)
#tomcat.JeeWebsphereMqQueueConnectionFactory.targetDirectoryShared=true
# Name of the artifact on the generic server. (inherited from: tomcat.JndiContextElement.targetFile)
#tomcat.JeeWebsphereMqQueueConnectionFactory.targetFile=${deployed.context}.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact. (inherited from: tomcat.JndiContextElement.template)
#tomcat.JeeWebsphereMqQueueConnectionFactory.template=tc/context/context-element.ftl
# Transport
#tomcat.JeeWebsphereMqQueueConnectionFactory.transport=1
# Auth
#tomcat.JeeWebsphereMqTopic.auth=Container
# The set of created CIs. (inherited from: tomcat.JndiContextElement.boundConfigurationItems)
#tomcat.JeeWebsphereMqTopic.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.createOptions)
#tomcat.JeeWebsphereMqTopic.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: tomcat.JndiContextElement.createOrder)
#tomcat.JeeWebsphereMqTopic.createOrder=60
# Create the target directory on the generic server if it does not exist. (inherited from: tomcat.JndiContextElement.createTargetDirectory)
#tomcat.JeeWebsphereMqTopic.createTargetDirectory=false
# Create Verb (inherited from: tomcat.JndiContextElement.createVerb)
#tomcat.JeeWebsphereMqTopic.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.destroyOptions)
#tomcat.JeeWebsphereMqTopic.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: tomcat.JndiContextElement.destroyOrder)
#tomcat.JeeWebsphereMqTopic.destroyOrder=40
# Destroy Verb (inherited from: tomcat.JndiContextElement.destroyVerb)
#tomcat.JeeWebsphereMqTopic.destroyVerb=Destroy
# Element Name (inherited from: tomcat.JndiContextElement.elementName)
#tomcat.JeeWebsphereMqTopic.elementName=${deployed.jndiName}
# Mapping of the configuration item (CI) properties to their factory equivalents. Leave this property blank to use the same name as the key.
#tomcat.JeeWebsphereMqTopic.elementPropertyMapping=jndiName:name, auth:, resourceType:type, description:, factory:,physicalName:TOP
# Element Tag (inherited from: tomcat.JndiContextElement.elementTag)
#tomcat.JeeWebsphereMqTopic.elementTag=Resource
# Factory
#tomcat.JeeWebsphereMqTopic.factory=com.ibm.mq.jms.MQTopicFactory
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.JndiContextElement.inspectClasspathResources)
#tomcat.JeeWebsphereMqTopic.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.JndiContextElement.inspectScript)
#tomcat.JeeWebsphereMqTopic.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.JndiContextElement.inspectTemplateClasspathResources)
#tomcat.JeeWebsphereMqTopic.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.modifyOptions)
#tomcat.JeeWebsphereMqTopic.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.JndiContextElement.modifyOrder)
#tomcat.JeeWebsphereMqTopic.modifyOrder=50
# Modify Verb (inherited from: tomcat.JndiContextElement.modifyVerb)
#tomcat.JeeWebsphereMqTopic.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.noopOptions)
#tomcat.JeeWebsphereMqTopic.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.JndiContextElement.noopOrder)
#tomcat.JeeWebsphereMqTopic.noopOrder=50
# Noop Verb (inherited from: tomcat.JndiContextElement.noopVerb)
#tomcat.JeeWebsphereMqTopic.noopVerb=Modify
# Resource Type
#tomcat.JeeWebsphereMqTopic.resourceType=com.ibm.mq.jms.MQTopic
# The generic container requires a restart for the action performed by this deployed. (inherited from: tomcat.JndiContextElement.restartRequired)
#tomcat.JeeWebsphereMqTopic.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.JndiContextElement.restartRequiredForNoop)
#tomcat.JeeWebsphereMqTopic.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: tomcat.JndiContextElement.targetDirectory)
#tomcat.JeeWebsphereMqTopic.targetDirectory=${deployed.container.contextDirectory}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: tomcat.JndiContextElement.targetDirectoryShared)
#tomcat.JeeWebsphereMqTopic.targetDirectoryShared=true
# Name of the artifact on the generic server. (inherited from: tomcat.JndiContextElement.targetFile)
#tomcat.JeeWebsphereMqTopic.targetFile=${deployed.context}.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact. (inherited from: tomcat.JndiContextElement.template)
#tomcat.JeeWebsphereMqTopic.template=tc/context/context-element.ftl
# Auth
#tomcat.JeeWebsphereMqTopicConnectionFactory.auth=Container
# The set of created CIs. (inherited from: tomcat.JndiContextElement.boundConfigurationItems)
#tomcat.JeeWebsphereMqTopicConnectionFactory.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.createOptions)
#tomcat.JeeWebsphereMqTopicConnectionFactory.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: tomcat.JndiContextElement.createOrder)
#tomcat.JeeWebsphereMqTopicConnectionFactory.createOrder=60
# Create the target directory on the generic server if it does not exist. (inherited from: tomcat.JndiContextElement.createTargetDirectory)
#tomcat.JeeWebsphereMqTopicConnectionFactory.createTargetDirectory=false
# Create Verb (inherited from: tomcat.JndiContextElement.createVerb)
#tomcat.JeeWebsphereMqTopicConnectionFactory.createVerb=Create
# Description
#tomcat.JeeWebsphereMqTopicConnectionFactory.description=JMS Connection Factory
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.destroyOptions)
#tomcat.JeeWebsphereMqTopicConnectionFactory.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: tomcat.JndiContextElement.destroyOrder)
#tomcat.JeeWebsphereMqTopicConnectionFactory.destroyOrder=40
# Destroy Verb (inherited from: tomcat.JndiContextElement.destroyVerb)
#tomcat.JeeWebsphereMqTopicConnectionFactory.destroyVerb=Destroy
# Element Name (inherited from: tomcat.JndiContextElement.elementName)
#tomcat.JeeWebsphereMqTopicConnectionFactory.elementName=${deployed.jndiName}
# Mapping of the configuration item (CI) properties to their factory equivalents. Leave this property blank to use the same name as the key.
#tomcat.JeeWebsphereMqTopicConnectionFactory.elementPropertyMapping=jndiName:name, auth:, resourceType:type,factory:, description:, server:HOST, port:PORT, channel:CHAN, transport:TRAN, queueManager:QMGR
# Element Tag (inherited from: tomcat.JndiContextElement.elementTag)
#tomcat.JeeWebsphereMqTopicConnectionFactory.elementTag=Resource
# Factory
#tomcat.JeeWebsphereMqTopicConnectionFactory.factory=com.ibm.mq.jms.MQTopicConnectionFactoryFactory
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.JndiContextElement.inspectClasspathResources)
#tomcat.JeeWebsphereMqTopicConnectionFactory.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.JndiContextElement.inspectScript)
#tomcat.JeeWebsphereMqTopicConnectionFactory.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.JndiContextElement.inspectTemplateClasspathResources)
#tomcat.JeeWebsphereMqTopicConnectionFactory.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.modifyOptions)
#tomcat.JeeWebsphereMqTopicConnectionFactory.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.JndiContextElement.modifyOrder)
#tomcat.JeeWebsphereMqTopicConnectionFactory.modifyOrder=50
# Modify Verb (inherited from: tomcat.JndiContextElement.modifyVerb)
#tomcat.JeeWebsphereMqTopicConnectionFactory.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.noopOptions)
#tomcat.JeeWebsphereMqTopicConnectionFactory.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.JndiContextElement.noopOrder)
#tomcat.JeeWebsphereMqTopicConnectionFactory.noopOrder=50
# Noop Verb (inherited from: tomcat.JndiContextElement.noopVerb)
#tomcat.JeeWebsphereMqTopicConnectionFactory.noopVerb=Modify
# Resource Type
#tomcat.JeeWebsphereMqTopicConnectionFactory.resourceType=com.ibm.mq.jms.MQTopicConnectionFactory
# The generic container requires a restart for the action performed by this deployed. (inherited from: tomcat.JndiContextElement.restartRequired)
#tomcat.JeeWebsphereMqTopicConnectionFactory.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.JndiContextElement.restartRequiredForNoop)
#tomcat.JeeWebsphereMqTopicConnectionFactory.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: tomcat.JndiContextElement.targetDirectory)
#tomcat.JeeWebsphereMqTopicConnectionFactory.targetDirectory=${deployed.container.contextDirectory}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: tomcat.JndiContextElement.targetDirectoryShared)
#tomcat.JeeWebsphereMqTopicConnectionFactory.targetDirectoryShared=true
# Name of the artifact on the generic server. (inherited from: tomcat.JndiContextElement.targetFile)
#tomcat.JeeWebsphereMqTopicConnectionFactory.targetFile=${deployed.context}.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact. (inherited from: tomcat.JndiContextElement.template)
#tomcat.JeeWebsphereMqTopicConnectionFactory.template=tc/context/context-element.ftl
# Transport
#tomcat.JeeWebsphereMqTopicConnectionFactory.transport=1
# The set of created CIs. (inherited from: tomcat.ContextElement.boundConfigurationItems)
#tomcat.JndiContextElement.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.ContextElement.createOptions)
#tomcat.JndiContextElement.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation.
#tomcat.JndiContextElement.createOrder=60
# Create the target directory on the generic server if it does not exist. (inherited from: tomcat.ContextElement.createTargetDirectory)
#tomcat.JndiContextElement.createTargetDirectory=false
# Create Verb (inherited from: tomcat.ContextElement.createVerb)
#tomcat.JndiContextElement.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.ContextElement.destroyOptions)
#tomcat.JndiContextElement.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation.
#tomcat.JndiContextElement.destroyOrder=40
# Destroy Verb (inherited from: tomcat.ContextElement.destroyVerb)
#tomcat.JndiContextElement.destroyVerb=Destroy
# Element Name
#tomcat.JndiContextElement.elementName=${deployed.jndiName}
# Mapping of the configuration item (CI) properties to their factory equivalents. Leave this property blank to use the same name as the key.
#tomcat.JndiContextElement.elementPropertyMapping=null
# Element Tag
#tomcat.JndiContextElement.elementTag=Resource
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.ContextElement.inspectClasspathResources)
#tomcat.JndiContextElement.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.ContextElement.inspectScript)
#tomcat.JndiContextElement.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.ContextElement.inspectTemplateClasspathResources)
#tomcat.JndiContextElement.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.ContextElement.modifyOptions)
#tomcat.JndiContextElement.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.ContextElement.modifyOrder)
#tomcat.JndiContextElement.modifyOrder=50
# Modify Verb (inherited from: tomcat.ContextElement.modifyVerb)
#tomcat.JndiContextElement.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.ContextElement.noopOptions)
#tomcat.JndiContextElement.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.ContextElement.noopOrder)
#tomcat.JndiContextElement.noopOrder=50
# Noop Verb (inherited from: tomcat.ContextElement.noopVerb)
#tomcat.JndiContextElement.noopVerb=Modify
# The generic container requires a restart for the action performed by this deployed.
#tomcat.JndiContextElement.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.ContextElement.restartRequiredForNoop)
#tomcat.JndiContextElement.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server.
#tomcat.JndiContextElement.targetDirectory=${deployed.container.contextDirectory}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: tomcat.ContextElement.targetDirectoryShared)
#tomcat.JndiContextElement.targetDirectoryShared=true
# Name of the artifact on the generic server.
#tomcat.JndiContextElement.targetFile=${deployed.context}.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact.
#tomcat.JndiContextElement.template=tc/context/context-element.ftl
# The set of CI templates. (inherited from: generic.File.boundTemplates)
#tomcat.Library.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: generic.File.delimiters)
#tomcat.Library.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: generic.File.textFileNamesRegex)
#tomcat.Library.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# Auth
#tomcat.MailSession.auth=Container
# The set of created CIs. (inherited from: tomcat.JndiContextElement.boundConfigurationItems)
#tomcat.MailSession.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.createOptions)
#tomcat.MailSession.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: tomcat.JndiContextElement.createOrder)
#tomcat.MailSession.createOrder=60
# Create the target directory on the generic server if it does not exist. (inherited from: tomcat.JndiContextElement.createTargetDirectory)
#tomcat.MailSession.createTargetDirectory=false
# Create Verb (inherited from: tomcat.JndiContextElement.createVerb)
#tomcat.MailSession.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.destroyOptions)
#tomcat.MailSession.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: tomcat.JndiContextElement.destroyOrder)
#tomcat.MailSession.destroyOrder=40
# Destroy Verb (inherited from: tomcat.JndiContextElement.destroyVerb)
#tomcat.MailSession.destroyVerb=Destroy
# Element Name (inherited from: tomcat.JndiContextElement.elementName)
#tomcat.MailSession.elementName=${deployed.jndiName}
# Mapping of the configuration item (CI) properties to their factory equivalents. Leave this property blank to use the same name as the key.
#tomcat.MailSession.elementPropertyMapping=jndiName:name, auth:, resourceType:type, smtpHost:mail.smtp.host
# Element Tag (inherited from: tomcat.JndiContextElement.elementTag)
#tomcat.MailSession.elementTag=Resource
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.JndiContextElement.inspectClasspathResources)
#tomcat.MailSession.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.JndiContextElement.inspectScript)
#tomcat.MailSession.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.JndiContextElement.inspectTemplateClasspathResources)
#tomcat.MailSession.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.modifyOptions)
#tomcat.MailSession.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.JndiContextElement.modifyOrder)
#tomcat.MailSession.modifyOrder=50
# Modify Verb (inherited from: tomcat.JndiContextElement.modifyVerb)
#tomcat.MailSession.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.noopOptions)
#tomcat.MailSession.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.JndiContextElement.noopOrder)
#tomcat.MailSession.noopOrder=50
# Noop Verb (inherited from: tomcat.JndiContextElement.noopVerb)
#tomcat.MailSession.noopVerb=Modify
# Resource Type
#tomcat.MailSession.resourceType=javax.mail.Session
# The generic container requires a restart for the action performed by this deployed. (inherited from: tomcat.JndiContextElement.restartRequired)
#tomcat.MailSession.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.JndiContextElement.restartRequiredForNoop)
#tomcat.MailSession.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: tomcat.JndiContextElement.targetDirectory)
#tomcat.MailSession.targetDirectory=${deployed.container.contextDirectory}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: tomcat.JndiContextElement.targetDirectoryShared)
#tomcat.MailSession.targetDirectoryShared=true
# Name of the artifact on the generic server. (inherited from: tomcat.JndiContextElement.targetFile)
#tomcat.MailSession.targetFile=${deployed.context}.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact. (inherited from: tomcat.JndiContextElement.template)
#tomcat.MailSession.template=tc/context/context-element.ftl
# The set of CI templates. (inherited from: jee.MailSessionSpec.boundTemplates)
#tomcat.MailSessionSpec.boundTemplates=null
# The set of created CIs. (inherited from: tomcat.JndiContextElement.boundConfigurationItems)
#tomcat.ResourceLink.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.createOptions)
#tomcat.ResourceLink.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: tomcat.JndiContextElement.createOrder)
#tomcat.ResourceLink.createOrder=60
# Create the target directory on the generic server if it does not exist. (inherited from: tomcat.JndiContextElement.createTargetDirectory)
#tomcat.ResourceLink.createTargetDirectory=false
# Create Verb (inherited from: tomcat.JndiContextElement.createVerb)
#tomcat.ResourceLink.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.destroyOptions)
#tomcat.ResourceLink.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: tomcat.JndiContextElement.destroyOrder)
#tomcat.ResourceLink.destroyOrder=40
# Destroy Verb (inherited from: tomcat.JndiContextElement.destroyVerb)
#tomcat.ResourceLink.destroyVerb=Destroy
# Element Name (inherited from: tomcat.JndiContextElement.elementName)
#tomcat.ResourceLink.elementName=${deployed.jndiName}
# Mapping of the configuration item (CI) properties to their factory equivalents. Leave this property blank to use the same name as the key.
#tomcat.ResourceLink.elementPropertyMapping=jndiName:name, resourceType:type, globalName:
# Element Tag
#tomcat.ResourceLink.elementTag=ResourceLink
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.JndiContextElement.inspectClasspathResources)
#tomcat.ResourceLink.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.JndiContextElement.inspectScript)
#tomcat.ResourceLink.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.JndiContextElement.inspectTemplateClasspathResources)
#tomcat.ResourceLink.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.modifyOptions)
#tomcat.ResourceLink.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.JndiContextElement.modifyOrder)
#tomcat.ResourceLink.modifyOrder=50
# Modify Verb (inherited from: tomcat.JndiContextElement.modifyVerb)
#tomcat.ResourceLink.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.noopOptions)
#tomcat.ResourceLink.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.JndiContextElement.noopOrder)
#tomcat.ResourceLink.noopOrder=50
# Noop Verb (inherited from: tomcat.JndiContextElement.noopVerb)
#tomcat.ResourceLink.noopVerb=Modify
# The generic container requires a restart for the action performed by this deployed. (inherited from: tomcat.JndiContextElement.restartRequired)
#tomcat.ResourceLink.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.JndiContextElement.restartRequiredForNoop)
#tomcat.ResourceLink.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: tomcat.JndiContextElement.targetDirectory)
#tomcat.ResourceLink.targetDirectory=${deployed.container.contextDirectory}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: tomcat.JndiContextElement.targetDirectoryShared)
#tomcat.ResourceLink.targetDirectoryShared=true
# Name of the artifact on the generic server. (inherited from: tomcat.JndiContextElement.targetFile)
#tomcat.ResourceLink.targetFile=${deployed.context}.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact. (inherited from: tomcat.JndiContextElement.template)
#tomcat.ResourceLink.template=tc/context/context-element.ftl
# The set of CI templates. (inherited from: jee.JndiResourceSpec.boundTemplates)
#tomcat.ResourceLinkSpec.boundTemplates=null
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.Container.inspectClasspathResources)
#tomcat.Server.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.Container.inspectScript)
#tomcat.Server.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.Container.inspectTemplateClasspathResources)
#tomcat.Server.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: generic.Container.restartClasspathResources)
#tomcat.Server.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: generic.Container.restartOrder)
#tomcat.Server.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: generic.Container.restartScript)
#tomcat.Server.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.Container.restartTemplateClasspathResources)
#tomcat.Server.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: generic.Container.restartWaitTime)
#tomcat.Server.restartWaitTime=0
# Server Xml
#tomcat.Server.serverXml=${container.home}/conf/server.xml
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: generic.Container.startClasspathResources)
#tomcat.Server.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: generic.Container.startOrder)
#tomcat.Server.startOrder=90
# Classpath to the script used to start the generic container.
#tomcat.Server.startScript=tc/server/start-tc
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.Container.startTemplateClasspathResources)
#tomcat.Server.startTemplateClasspathResources=null
# Number of seconds to wait after the step that starts the server is executed
#tomcat.Server.startWaitTime=0
# Status Script
#tomcat.Server.statusScript=tc/server/status-tc
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: generic.Container.stopClasspathResources)
#tomcat.Server.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: generic.Container.stopOrder)
#tomcat.Server.stopOrder=10
# Classpath to the script used to stop the generic container.
#tomcat.Server.stopScript=tc/server/stop-tc
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.Container.stopTemplateClasspathResources)
#tomcat.Server.stopTemplateClasspathResources=null
# Number of seconds to wait after the step that stops the server is executed
#tomcat.Server.stopWaitTime=0
# Auth
#tomcat.TomcatV8DataSource.auth=Container
# The set of created CIs. (inherited from: tomcat.JndiContextElement.boundConfigurationItems)
#tomcat.TomcatV8DataSource.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.createOptions)
#tomcat.TomcatV8DataSource.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: tomcat.JndiContextElement.createOrder)
#tomcat.TomcatV8DataSource.createOrder=60
# Create the target directory on the generic server if it does not exist. (inherited from: tomcat.JndiContextElement.createTargetDirectory)
#tomcat.TomcatV8DataSource.createTargetDirectory=false
# Create Verb (inherited from: tomcat.JndiContextElement.createVerb)
#tomcat.TomcatV8DataSource.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.destroyOptions)
#tomcat.TomcatV8DataSource.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: tomcat.JndiContextElement.destroyOrder)
#tomcat.TomcatV8DataSource.destroyOrder=40
# Destroy Verb (inherited from: tomcat.JndiContextElement.destroyVerb)
#tomcat.TomcatV8DataSource.destroyVerb=Destroy
# Element Name (inherited from: tomcat.JndiContextElement.elementName)
#tomcat.TomcatV8DataSource.elementName=${deployed.jndiName}
# Mapping of the configuration item (CI) properties to their factory equivalents. Leave this property blank to use the same name as the key.
#tomcat.TomcatV8DataSource.elementPropertyMapping=jndiName:name, auth:, resourceType:type, driverClassName:, url:, username:, password:, maxTotal:, maxIdle:, minIdle:,maxWaitMillis:,initialSize:, connectionProperties:
# Element Tag (inherited from: tomcat.JndiContextElement.elementTag)
#tomcat.TomcatV8DataSource.elementTag=Resource
# The initial number of connections that are created when the pool is started.
#tomcat.TomcatV8DataSource.initialSize=0
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.JndiContextElement.inspectClasspathResources)
#tomcat.TomcatV8DataSource.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.JndiContextElement.inspectScript)
#tomcat.TomcatV8DataSource.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.JndiContextElement.inspectTemplateClasspathResources)
#tomcat.TomcatV8DataSource.inspectTemplateClasspathResources=null
# The maximum number of connections that can remain idle in the pool without extra connections being released (negative for no limit).
#tomcat.TomcatV8DataSource.maxIdle=8
# The maximum number of active connections that can be allocated from this pool at the same time (negative for no limit).
#tomcat.TomcatV8DataSource.maxTotal=8
# The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned before throwing an exception (-1 to wait indefinitely).
#tomcat.TomcatV8DataSource.maxWaitMillis=-1
# The minimum number of connections that can remain idle in the pool without extra connections being created (zero to create none).
#tomcat.TomcatV8DataSource.minIdle=0
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.modifyOptions)
#tomcat.TomcatV8DataSource.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.JndiContextElement.modifyOrder)
#tomcat.TomcatV8DataSource.modifyOrder=50
# Modify Verb (inherited from: tomcat.JndiContextElement.modifyVerb)
#tomcat.TomcatV8DataSource.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JndiContextElement.noopOptions)
#tomcat.TomcatV8DataSource.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.JndiContextElement.noopOrder)
#tomcat.TomcatV8DataSource.noopOrder=50
# Noop Verb (inherited from: tomcat.JndiContextElement.noopVerb)
#tomcat.TomcatV8DataSource.noopVerb=Modify
# Resource Type
#tomcat.TomcatV8DataSource.resourceType=javax.sql.DataSource
# The generic container requires a restart for the action performed by this deployed. (inherited from: tomcat.JndiContextElement.restartRequired)
#tomcat.TomcatV8DataSource.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.JndiContextElement.restartRequiredForNoop)
#tomcat.TomcatV8DataSource.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: tomcat.JndiContextElement.targetDirectory)
#tomcat.TomcatV8DataSource.targetDirectory=${deployed.container.contextDirectory}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: tomcat.JndiContextElement.targetDirectoryShared)
#tomcat.TomcatV8DataSource.targetDirectoryShared=true
# Name of the artifact on the generic server. (inherited from: tomcat.JndiContextElement.targetFile)
#tomcat.TomcatV8DataSource.targetFile=${deployed.context}.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact. (inherited from: tomcat.JndiContextElement.template)
#tomcat.TomcatV8DataSource.template=tc/context/context-element.ftl
# The set of CI templates. (inherited from: jee.DataSourceSpec.boundTemplates)
#tomcat.TomcatV8DataSourceSpec.boundTemplates=null
# The application base directory for this virtual host. This is the path name of a directory that contains web applications to be deployed on this virtual host. You can specify a path that is relative to the Tomcat server home directory.
#tomcat.VirtualHost.appBase=webapps
# App Base Absolute Path
#tomcat.VirtualHost.appBaseAbsolutePath=${container.server.home}/${container.appBase}
# Context Directory
#tomcat.VirtualHost.contextDirectory=${container.server.home}/conf/Catalina/${container.hostName}
# Host Name
#tomcat.VirtualHost.hostName=localhost
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.ContextContainer.inspectClasspathResources)
#tomcat.VirtualHost.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.ContextContainer.inspectScript)
#tomcat.VirtualHost.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.ContextContainer.inspectTemplateClasspathResources)
#tomcat.VirtualHost.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: tomcat.ContextContainer.restartClasspathResources)
#tomcat.VirtualHost.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: tomcat.ContextContainer.restartOrder)
#tomcat.VirtualHost.restartOrder=90
# Classpath to the script used to restart the generic container. (inherited from: tomcat.ContextContainer.restartScript)
#tomcat.VirtualHost.restartScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.ContextContainer.restartTemplateClasspathResources)
#tomcat.VirtualHost.restartTemplateClasspathResources=null
# The time to wait in seconds for a container restart action. (inherited from: tomcat.ContextContainer.restartWaitTime)
#tomcat.VirtualHost.restartWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: tomcat.ContextContainer.startClasspathResources)
#tomcat.VirtualHost.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: tomcat.ContextContainer.startOrder)
#tomcat.VirtualHost.startOrder=90
# Classpath to the script used to start the generic container. (inherited from: tomcat.ContextContainer.startScript)
#tomcat.VirtualHost.startScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.ContextContainer.startTemplateClasspathResources)
#tomcat.VirtualHost.startTemplateClasspathResources=null
# The time to wait in seconds for a container start action. (inherited from: tomcat.ContextContainer.startWaitTime)
#tomcat.VirtualHost.startWaitTime=0
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: tomcat.ContextContainer.stopClasspathResources)
#tomcat.VirtualHost.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: tomcat.ContextContainer.stopOrder)
#tomcat.VirtualHost.stopOrder=10
# Classpath to the script used to stop the generic container. (inherited from: tomcat.ContextContainer.stopScript)
#tomcat.VirtualHost.stopScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.ContextContainer.stopTemplateClasspathResources)
#tomcat.VirtualHost.stopTemplateClasspathResources=null
# The time to wait in seconds for a container stop action. (inherited from: tomcat.ContextContainer.stopWaitTime)
#tomcat.VirtualHost.stopWaitTime=0
# The set of CI templates. (inherited from: jee.War.boundTemplates)
#tomcat.War.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: jee.War.delimiters)
#tomcat.War.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: jee.War.textFileNamesRegex)
#tomcat.War.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: tomcat.ContextWarModule.boundConfigurationItems)
#tomcat.WarModule.boundConfigurationItems=null
# Mapping of the context attributes. Leave this property blank to use the same name as the key.
#tomcat.WarModule.contextElementPropertyMapping=unpackWAR:, docBase:
# Context Subject (inherited from: tomcat.ContextWarModule.contextSubject)
#tomcat.WarModule.contextSubject=war settings
# Freemarker template used to create the context xml for the War
#tomcat.WarModule.contextTemplate=tc/context/context-attributes.ftl
# Target directory to which the context xml must to copied to on the target system
#tomcat.WarModule.contextXmlTargetDirectory=${deployed.container.contextDirectory}
# If set to true, files are directly copied to the target directory without first being uploaded to the staging or temporary directory (like versions of XL Deploy prior to 4.0.0) (inherited from: tomcat.ContextWarModule.copyDirectlyToTargetPath)
#tomcat.WarModule.copyDirectlyToTargetPath=false
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.ContextWarModule.createOptions)
#tomcat.WarModule.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation.
#tomcat.WarModule.createOrder=70
# The order of the create context step in the step list for the create operation. (inherited from: tomcat.ContextWarModule.createOrderOfContextXml)
#tomcat.WarModule.createOrderOfContextXml=60
# Create the target directory on the generic server if it does not exist. (inherited from: tomcat.ContextWarModule.createTargetDirectory)
#tomcat.WarModule.createTargetDirectory=false
# Create Verb (inherited from: tomcat.ContextWarModule.createVerb)
#tomcat.WarModule.createVerb=Create
# Absolute paths to files on the target system that was generated and must be clean up during a destroy operation (inherited from: tomcat.ContextWarModule.deleteGeneratedResources)
#tomcat.WarModule.deleteGeneratedResources=null
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.ContextWarModule.destroyOptions)
#tomcat.WarModule.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation.
#tomcat.WarModule.destroyOrder=30
# The order of the destroy context step in the step list for the create operation. (inherited from: tomcat.ContextWarModule.destroyOrderOfContextXml)
#tomcat.WarModule.destroyOrderOfContextXml=40
# Destroy Verb (inherited from: tomcat.ContextWarModule.destroyVerb)
#tomcat.WarModule.destroyVerb=Destroy
# Doc Base
#tomcat.WarModule.docBase=${deployed.targetFile}
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.ContextWarModule.inspectClasspathResources)
#tomcat.WarModule.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.ContextWarModule.inspectScript)
#tomcat.WarModule.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.ContextWarModule.inspectTemplateClasspathResources)
#tomcat.WarModule.inspectTemplateClasspathResources=null
# If set to true, create and destroy context.xml files. Set to false to provide your own context.xml file. (inherited from: tomcat.ContextWarModule.manageContextXml)
#tomcat.WarModule.manageContextXml=true
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.ContextWarModule.modifyOptions)
#tomcat.WarModule.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.ContextWarModule.modifyOrder)
#tomcat.WarModule.modifyOrder=50
# The order of the rename context root step in the step list for the modify operation. (inherited from: tomcat.ContextWarModule.modifyOrderOfContextXml)
#tomcat.WarModule.modifyOrderOfContextXml=60
# Modify Verb (inherited from: tomcat.ContextWarModule.modifyVerb)
#tomcat.WarModule.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.ContextWarModule.noopOptions)
#tomcat.WarModule.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.ContextWarModule.noopOrder)
#tomcat.WarModule.noopOrder=50
# Noop Verb (inherited from: tomcat.ContextWarModule.noopVerb)
#tomcat.WarModule.noopVerb=Modify
# If set to true, preserve the existing files on the remote host (do not delete the copied files during the destroy operation).  (inherited from: tomcat.ContextWarModule.preserveExistingFiles)
#tomcat.WarModule.preserveExistingFiles=false
# If set to false, keep context file on destroy. Set to true to destroy the context file. (inherited from: tomcat.ContextWarModule.removeContextXml)
#tomcat.WarModule.removeContextXml=false
# The generic container requires a restart for the action performed by this deployed.
#tomcat.WarModule.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.ContextWarModule.restartRequiredForNoop)
#tomcat.WarModule.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server.
#tomcat.WarModule.targetDirectory=${deployed.container.appBaseAbsolutePath}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: tomcat.ContextWarModule.targetDirectoryShared)
#tomcat.WarModule.targetDirectoryShared=true
# Name of the artifact on the generic server.
#tomcat.WarModule.targetFile=${deployed.contextRoot}.war
# If set to true, the sub directories on the target machine are not deleted if files other than that copied by XL Deploy are present. Please note that setting this option to true will cause the removal process to be a slower.  (inherited from: tomcat.ContextWarModule.targetPathSharedSubDirectories)
#tomcat.WarModule.targetPathSharedSubDirectories=false
# Unpack W A R
#tomcat.WarModule.unpackWAR=true
# Auth (inherited from: tomcat.JeeWebsphereMqQueue.auth)
#tomcat.WebsphereMqQueue.auth=Container
# The set of created CIs. (inherited from: tomcat.JeeWebsphereMqQueue.boundConfigurationItems)
#tomcat.WebsphereMqQueue.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeWebsphereMqQueue.createOptions)
#tomcat.WebsphereMqQueue.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: tomcat.JeeWebsphereMqQueue.createOrder)
#tomcat.WebsphereMqQueue.createOrder=60
# Create the target directory on the generic server if it does not exist. (inherited from: tomcat.JeeWebsphereMqQueue.createTargetDirectory)
#tomcat.WebsphereMqQueue.createTargetDirectory=false
# Create Verb (inherited from: tomcat.JeeWebsphereMqQueue.createVerb)
#tomcat.WebsphereMqQueue.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeWebsphereMqQueue.destroyOptions)
#tomcat.WebsphereMqQueue.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: tomcat.JeeWebsphereMqQueue.destroyOrder)
#tomcat.WebsphereMqQueue.destroyOrder=40
# Destroy Verb (inherited from: tomcat.JeeWebsphereMqQueue.destroyVerb)
#tomcat.WebsphereMqQueue.destroyVerb=Destroy
# Element Name (inherited from: tomcat.JeeWebsphereMqQueue.elementName)
#tomcat.WebsphereMqQueue.elementName=${deployed.jndiName}
# Mapping of the configuration item (CI) properties to their factory equivalents. Leave this property blank to use the same name as the key. (inherited from: tomcat.JeeWebsphereMqQueue.elementPropertyMapping)
#tomcat.WebsphereMqQueue.elementPropertyMapping=jndiName:name, auth:, resourceType:type, description:, factory:,physicalName:QU
# Element Tag (inherited from: tomcat.JeeWebsphereMqQueue.elementTag)
#tomcat.WebsphereMqQueue.elementTag=Resource
# Factory (inherited from: tomcat.JeeWebsphereMqQueue.factory)
#tomcat.WebsphereMqQueue.factory=com.ibm.mq.jms.MQQueueFactory
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.JeeWebsphereMqQueue.inspectClasspathResources)
#tomcat.WebsphereMqQueue.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.JeeWebsphereMqQueue.inspectScript)
#tomcat.WebsphereMqQueue.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.JeeWebsphereMqQueue.inspectTemplateClasspathResources)
#tomcat.WebsphereMqQueue.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeWebsphereMqQueue.modifyOptions)
#tomcat.WebsphereMqQueue.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.JeeWebsphereMqQueue.modifyOrder)
#tomcat.WebsphereMqQueue.modifyOrder=50
# Modify Verb (inherited from: tomcat.JeeWebsphereMqQueue.modifyVerb)
#tomcat.WebsphereMqQueue.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeWebsphereMqQueue.noopOptions)
#tomcat.WebsphereMqQueue.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.JeeWebsphereMqQueue.noopOrder)
#tomcat.WebsphereMqQueue.noopOrder=50
# Noop Verb (inherited from: tomcat.JeeWebsphereMqQueue.noopVerb)
#tomcat.WebsphereMqQueue.noopVerb=Modify
# Resource Type (inherited from: tomcat.JeeWebsphereMqQueue.resourceType)
#tomcat.WebsphereMqQueue.resourceType=com.ibm.mq.jms.MQQueue
# The generic container requires a restart for the action performed by this deployed. (inherited from: tomcat.JeeWebsphereMqQueue.restartRequired)
#tomcat.WebsphereMqQueue.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.JeeWebsphereMqQueue.restartRequiredForNoop)
#tomcat.WebsphereMqQueue.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: tomcat.JeeWebsphereMqQueue.targetDirectory)
#tomcat.WebsphereMqQueue.targetDirectory=${deployed.container.contextDirectory}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: tomcat.JeeWebsphereMqQueue.targetDirectoryShared)
#tomcat.WebsphereMqQueue.targetDirectoryShared=true
# Name of the artifact on the generic server. (inherited from: tomcat.JeeWebsphereMqQueue.targetFile)
#tomcat.WebsphereMqQueue.targetFile=${deployed.context}.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact. (inherited from: tomcat.JeeWebsphereMqQueue.template)
#tomcat.WebsphereMqQueue.template=tc/context/context-element.ftl
# Auth (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.auth)
#tomcat.WebsphereMqQueueConnectionFactory.auth=Container
# The set of created CIs. (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.boundConfigurationItems)
#tomcat.WebsphereMqQueueConnectionFactory.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.createOptions)
#tomcat.WebsphereMqQueueConnectionFactory.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.createOrder)
#tomcat.WebsphereMqQueueConnectionFactory.createOrder=60
# Create the target directory on the generic server if it does not exist. (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.createTargetDirectory)
#tomcat.WebsphereMqQueueConnectionFactory.createTargetDirectory=false
# Create Verb (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.createVerb)
#tomcat.WebsphereMqQueueConnectionFactory.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.destroyOptions)
#tomcat.WebsphereMqQueueConnectionFactory.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.destroyOrder)
#tomcat.WebsphereMqQueueConnectionFactory.destroyOrder=40
# Destroy Verb (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.destroyVerb)
#tomcat.WebsphereMqQueueConnectionFactory.destroyVerb=Destroy
# Element Name (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.elementName)
#tomcat.WebsphereMqQueueConnectionFactory.elementName=${deployed.jndiName}
# Mapping of the configuration item (CI) properties to their factory equivalents. Leave this property blank to use the same name as the key. (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.elementPropertyMapping)
#tomcat.WebsphereMqQueueConnectionFactory.elementPropertyMapping=jndiName:name, auth:, resourceType:type,factory:, description:, server:HOST, port:PORT, channel:CHAN, transport:TRAN, queueManager:QMGR
# Element Tag (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.elementTag)
#tomcat.WebsphereMqQueueConnectionFactory.elementTag=Resource
# Factory (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.factory)
#tomcat.WebsphereMqQueueConnectionFactory.factory=com.ibm.mq.jms.MQQueueConnectionFactoryFactory
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.inspectClasspathResources)
#tomcat.WebsphereMqQueueConnectionFactory.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.inspectScript)
#tomcat.WebsphereMqQueueConnectionFactory.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.inspectTemplateClasspathResources)
#tomcat.WebsphereMqQueueConnectionFactory.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.modifyOptions)
#tomcat.WebsphereMqQueueConnectionFactory.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.modifyOrder)
#tomcat.WebsphereMqQueueConnectionFactory.modifyOrder=50
# Modify Verb (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.modifyVerb)
#tomcat.WebsphereMqQueueConnectionFactory.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.noopOptions)
#tomcat.WebsphereMqQueueConnectionFactory.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.noopOrder)
#tomcat.WebsphereMqQueueConnectionFactory.noopOrder=50
# Noop Verb (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.noopVerb)
#tomcat.WebsphereMqQueueConnectionFactory.noopVerb=Modify
# Resource Type (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.resourceType)
#tomcat.WebsphereMqQueueConnectionFactory.resourceType=com.ibm.mq.jms.MQQueueConnectionFactory
# The generic container requires a restart for the action performed by this deployed. (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.restartRequired)
#tomcat.WebsphereMqQueueConnectionFactory.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.restartRequiredForNoop)
#tomcat.WebsphereMqQueueConnectionFactory.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.targetDirectory)
#tomcat.WebsphereMqQueueConnectionFactory.targetDirectory=${deployed.container.contextDirectory}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.targetDirectoryShared)
#tomcat.WebsphereMqQueueConnectionFactory.targetDirectoryShared=true
# Name of the artifact on the generic server. (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.targetFile)
#tomcat.WebsphereMqQueueConnectionFactory.targetFile=${deployed.context}.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact. (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.template)
#tomcat.WebsphereMqQueueConnectionFactory.template=tc/context/context-element.ftl
# Transport (inherited from: tomcat.JeeWebsphereMqQueueConnectionFactory.transport)
#tomcat.WebsphereMqQueueConnectionFactory.transport=1
# The set of CI templates. (inherited from: jee.QueueConnectionFactorySpec.boundTemplates)
#tomcat.WebsphereMqQueueConnectionFactorySpec.boundTemplates=null
# The set of CI templates. (inherited from: jee.QueueSpec.boundTemplates)
#tomcat.WebsphereMqQueueSpec.boundTemplates=null
# Auth (inherited from: tomcat.JeeWebsphereMqTopic.auth)
#tomcat.WebsphereMqTopic.auth=Container
# The set of created CIs. (inherited from: tomcat.JeeWebsphereMqTopic.boundConfigurationItems)
#tomcat.WebsphereMqTopic.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeWebsphereMqTopic.createOptions)
#tomcat.WebsphereMqTopic.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: tomcat.JeeWebsphereMqTopic.createOrder)
#tomcat.WebsphereMqTopic.createOrder=60
# Create the target directory on the generic server if it does not exist. (inherited from: tomcat.JeeWebsphereMqTopic.createTargetDirectory)
#tomcat.WebsphereMqTopic.createTargetDirectory=false
# Create Verb (inherited from: tomcat.JeeWebsphereMqTopic.createVerb)
#tomcat.WebsphereMqTopic.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeWebsphereMqTopic.destroyOptions)
#tomcat.WebsphereMqTopic.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: tomcat.JeeWebsphereMqTopic.destroyOrder)
#tomcat.WebsphereMqTopic.destroyOrder=40
# Destroy Verb (inherited from: tomcat.JeeWebsphereMqTopic.destroyVerb)
#tomcat.WebsphereMqTopic.destroyVerb=Destroy
# Element Name (inherited from: tomcat.JeeWebsphereMqTopic.elementName)
#tomcat.WebsphereMqTopic.elementName=${deployed.jndiName}
# Mapping of the configuration item (CI) properties to their factory equivalents. Leave this property blank to use the same name as the key. (inherited from: tomcat.JeeWebsphereMqTopic.elementPropertyMapping)
#tomcat.WebsphereMqTopic.elementPropertyMapping=jndiName:name, auth:, resourceType:type, description:, factory:,physicalName:TOP
# Element Tag (inherited from: tomcat.JeeWebsphereMqTopic.elementTag)
#tomcat.WebsphereMqTopic.elementTag=Resource
# Factory (inherited from: tomcat.JeeWebsphereMqTopic.factory)
#tomcat.WebsphereMqTopic.factory=com.ibm.mq.jms.MQTopicFactory
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.JeeWebsphereMqTopic.inspectClasspathResources)
#tomcat.WebsphereMqTopic.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.JeeWebsphereMqTopic.inspectScript)
#tomcat.WebsphereMqTopic.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.JeeWebsphereMqTopic.inspectTemplateClasspathResources)
#tomcat.WebsphereMqTopic.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeWebsphereMqTopic.modifyOptions)
#tomcat.WebsphereMqTopic.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.JeeWebsphereMqTopic.modifyOrder)
#tomcat.WebsphereMqTopic.modifyOrder=50
# Modify Verb (inherited from: tomcat.JeeWebsphereMqTopic.modifyVerb)
#tomcat.WebsphereMqTopic.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeWebsphereMqTopic.noopOptions)
#tomcat.WebsphereMqTopic.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.JeeWebsphereMqTopic.noopOrder)
#tomcat.WebsphereMqTopic.noopOrder=50
# Noop Verb (inherited from: tomcat.JeeWebsphereMqTopic.noopVerb)
#tomcat.WebsphereMqTopic.noopVerb=Modify
# Resource Type (inherited from: tomcat.JeeWebsphereMqTopic.resourceType)
#tomcat.WebsphereMqTopic.resourceType=com.ibm.mq.jms.MQTopic
# The generic container requires a restart for the action performed by this deployed. (inherited from: tomcat.JeeWebsphereMqTopic.restartRequired)
#tomcat.WebsphereMqTopic.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.JeeWebsphereMqTopic.restartRequiredForNoop)
#tomcat.WebsphereMqTopic.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: tomcat.JeeWebsphereMqTopic.targetDirectory)
#tomcat.WebsphereMqTopic.targetDirectory=${deployed.container.contextDirectory}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: tomcat.JeeWebsphereMqTopic.targetDirectoryShared)
#tomcat.WebsphereMqTopic.targetDirectoryShared=true
# Name of the artifact on the generic server. (inherited from: tomcat.JeeWebsphereMqTopic.targetFile)
#tomcat.WebsphereMqTopic.targetFile=${deployed.context}.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact. (inherited from: tomcat.JeeWebsphereMqTopic.template)
#tomcat.WebsphereMqTopic.template=tc/context/context-element.ftl
# Auth (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.auth)
#tomcat.WebsphereMqTopicConnectionFactory.auth=Container
# The set of created CIs. (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.boundConfigurationItems)
#tomcat.WebsphereMqTopicConnectionFactory.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.createOptions)
#tomcat.WebsphereMqTopicConnectionFactory.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.createOrder)
#tomcat.WebsphereMqTopicConnectionFactory.createOrder=60
# Create the target directory on the generic server if it does not exist. (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.createTargetDirectory)
#tomcat.WebsphereMqTopicConnectionFactory.createTargetDirectory=false
# Create Verb (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.createVerb)
#tomcat.WebsphereMqTopicConnectionFactory.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.destroyOptions)
#tomcat.WebsphereMqTopicConnectionFactory.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.destroyOrder)
#tomcat.WebsphereMqTopicConnectionFactory.destroyOrder=40
# Destroy Verb (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.destroyVerb)
#tomcat.WebsphereMqTopicConnectionFactory.destroyVerb=Destroy
# Element Name (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.elementName)
#tomcat.WebsphereMqTopicConnectionFactory.elementName=${deployed.jndiName}
# Mapping of the configuration item (CI) properties to their factory equivalents. Leave this property blank to use the same name as the key. (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.elementPropertyMapping)
#tomcat.WebsphereMqTopicConnectionFactory.elementPropertyMapping=jndiName:name, auth:, resourceType:type,factory:, description:, server:HOST, port:PORT, channel:CHAN, transport:TRAN, queueManager:QMGR
# Element Tag (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.elementTag)
#tomcat.WebsphereMqTopicConnectionFactory.elementTag=Resource
# Factory (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.factory)
#tomcat.WebsphereMqTopicConnectionFactory.factory=com.ibm.mq.jms.MQTopicConnectionFactoryFactory
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.inspectClasspathResources)
#tomcat.WebsphereMqTopicConnectionFactory.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.inspectScript)
#tomcat.WebsphereMqTopicConnectionFactory.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.inspectTemplateClasspathResources)
#tomcat.WebsphereMqTopicConnectionFactory.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.modifyOptions)
#tomcat.WebsphereMqTopicConnectionFactory.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.modifyOrder)
#tomcat.WebsphereMqTopicConnectionFactory.modifyOrder=50
# Modify Verb (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.modifyVerb)
#tomcat.WebsphereMqTopicConnectionFactory.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.noopOptions)
#tomcat.WebsphereMqTopicConnectionFactory.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.noopOrder)
#tomcat.WebsphereMqTopicConnectionFactory.noopOrder=50
# Noop Verb (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.noopVerb)
#tomcat.WebsphereMqTopicConnectionFactory.noopVerb=Modify
# Resource Type (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.resourceType)
#tomcat.WebsphereMqTopicConnectionFactory.resourceType=com.ibm.mq.jms.MQTopicConnectionFactory
# The generic container requires a restart for the action performed by this deployed. (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.restartRequired)
#tomcat.WebsphereMqTopicConnectionFactory.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.restartRequiredForNoop)
#tomcat.WebsphereMqTopicConnectionFactory.restartRequiredForNoop=false
# Path to which artifact must be copied to on the generic server. (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.targetDirectory)
#tomcat.WebsphereMqTopicConnectionFactory.targetDirectory=${deployed.container.contextDirectory}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.targetDirectoryShared)
#tomcat.WebsphereMqTopicConnectionFactory.targetDirectoryShared=true
# Name of the artifact on the generic server. (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.targetFile)
#tomcat.WebsphereMqTopicConnectionFactory.targetFile=${deployed.context}.xml
# Classpath to the freemarker template used to generate the content of the final text base artifact. (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.template)
#tomcat.WebsphereMqTopicConnectionFactory.template=tc/context/context-element.ftl
# Transport (inherited from: tomcat.JeeWebsphereMqTopicConnectionFactory.transport)
#tomcat.WebsphereMqTopicConnectionFactory.transport=1
# The set of CI templates. (inherited from: jee.TopicConnectionFactorySpec.boundTemplates)
#tomcat.WebsphereMqTopicConnectionFactorySpec.boundTemplates=null
# The set of CI templates. (inherited from: jee.TopicSpec.boundTemplates)
#tomcat.WebsphereMqTopicSpec.boundTemplates=null
# Mail body content should be sent as HTML
#trigger.EmailNotification.sendContentAsHtml=false
# Trigger actions when the Step transitions from this state.
#trigger.StepTrigger.fromState=ANY
# Trigger actions when the Task transitions from this state.
#trigger.TaskTrigger.fromState=ANY
# The latest application version number as the highest udm.Version name sorted in lexicographical ordering.
#udm.Application.lastVersion=
# If true, permissions for changing checklist requirements will be checked on import
#udm.Application.verifyChecklistPermissionsOnCreate=null
# If set, multiple deployments at the same time can be executed, and a 'collision avoidance' check will not be executed
#udm.BaseContainer.allowConcurrentDeployments=true
# The set of CI templates.
#udm.BaseDeployable.boundTemplates=null
# The set of CI templates. (inherited from: udm.BaseDeployableFileArtifact.boundTemplates)
#udm.BaseDeployableArchiveArtifact.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableFileArtifact.delimiters)
#udm.BaseDeployableArchiveArtifact.delimiters={{ }}
# Whether to scan this artifact to replace placeholders when it is imported
#udm.BaseDeployableArchiveArtifact.scanPlaceholders=false
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableFileArtifact.textFileNamesRegex)
#udm.BaseDeployableArchiveArtifact.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#udm.BaseDeployableArtifact.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter
#udm.BaseDeployableArtifact.delimiters={{ }}
# A map that maps regular expressions matching the full path of file(s) in the artifact to character set encodings
#udm.BaseDeployableArtifact.fileEncodings=.+\.properties:ISO-8859-1
# Indicates if the artifact has been rescanned
#udm.BaseDeployableArtifact.isRescanned=false
# Whether this artifact has been pre-scanned by the packager (ie. scanned for placeholders and checksum is set)
#udm.BaseDeployableArtifact.preScannedPlaceholders=false
# Whether to scan this artifact to replace placeholders when it is imported
#udm.BaseDeployableArtifact.scanPlaceholders=true
# Regular expression that matches file names of text files
#udm.BaseDeployableArtifact.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#udm.BaseDeployableContainer.boundTemplates=null
# The set of CI templates. (inherited from: udm.BaseDeployableArtifact.boundTemplates)
#udm.BaseDeployableFileArtifact.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableArtifact.delimiters)
#udm.BaseDeployableFileArtifact.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableArtifact.textFileNamesRegex)
#udm.BaseDeployableFileArtifact.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of CI templates. (inherited from: udm.BaseDeployableArtifact.boundTemplates)
#udm.BaseDeployableFolderArtifact.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableArtifact.delimiters)
#udm.BaseDeployableFolderArtifact.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableArtifact.textFileNamesRegex)
#udm.BaseDeployableFolderArtifact.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs.
#udm.BaseDeployed.boundConfigurationItems=null
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#udm.BaseDeployedArtifact.boundConfigurationItems=null
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#udm.BaseDeployedContainer.boundConfigurationItems=null
# If true, XL Deploy will automatically create a dictionary containing the output variables and add it to the environment.
#udm.BaseDeployedInfrastructureAsCode.automaticDictionary=true
# The set of created CIs. (inherited from: udm.BaseDeployedArtifact.boundConfigurationItems)
#udm.BaseDeployedInfrastructureAsCode.boundConfigurationItems=null
# Path to the dictionary containing the output variables. If empty, the dictionary name will be the name of the template concatenated with -dictionary. If you specify a dictionary name, it will be created in the same folder as the target environment or in the folder specified for the new environment. You can also specify a full path starting with 'Environments/'.
#udm.BaseDeployedInfrastructureAsCode.dictionaryPath=
# Path to the new environment. If empty, the generated CIs will be added to the target environment. If you specify an environment name, the new environment will be created in the same folder as the target environment. If you specify a folder and an environment name, they will be created in the same folder as the target environment. You can also specify a full path starting with 'Environments/'.
#udm.BaseDeployedInfrastructureAsCode.environmentPath=
# If true, XL Deploy will automatically create CIs based on resources that are deployed.
#udm.BaseDeployedInfrastructureAsCode.generateCIsFromResources=true
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#udm.BaseProvisionable.boundTemplates=null
# Number of instances to launch.
#udm.BaseProvisionable.cardinality=1
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#udm.BaseProvisioned.boundConfigurationItems=null
# The index of the cardinality amount created provisioneds.
#udm.BaseProvisioned.ordinal=1
# The set of created CIs. (inherited from: udm.BaseDeployedContainer.boundConfigurationItems)
#udm.BaseProvisionedContainer.boundConfigurationItems=null
# The index of the cardinality amount created provisioneds.
#udm.BaseProvisionedContainer.ordinal=1
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.EmbeddedDeployableArtifact.delimiters)
#udm.BaseProvisionerArtifact.delimiters={{ }}
# A map that maps regular expressions matching the full path of file(s) in the artifact to character set encodings (inherited from: udm.EmbeddedDeployableArtifact.fileEncodings)
#udm.BaseProvisionerArtifact.fileEncodings=.+\.properties:ISO-8859-1
# Regular expression that matches file names of text files (inherited from: udm.EmbeddedDeployableArtifact.textFileNamesRegex)
#udm.BaseProvisionerArtifact.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# If this is true, all password properties are exported as plaintext while exporting the package. If false, exportOnlyPasswordPlaceholders is considered. (inherited from: udm.Version.exportAllPasswords)
#udm.CompositePackage.exportAllPasswords=false
# If this is true, all password properties whose value starts and ends with double curly braces are exported as plaintext. Else, the password values are discarded while exporting the package. (inherited from: udm.Version.exportOnlyPasswordPlaceholders)
#udm.CompositePackage.exportOnlyPasswordPlaceholders=true
# Whether to ignore all the undefined properties used in the manifest or to raise an error, while importing a package. (inherited from: udm.Version.ignoreUndefinedPropertiesInManifest)
#udm.CompositePackage.ignoreUndefinedPropertiesInManifest=true
# If set, multiple deployments at the same time can be executed, and a 'collision avoidance' check will not be executed
#udm.DeployedApplication.allowConcurrentDeployments=true
# Deployment overrides existing application completely.
#udm.DeployedApplication.forceRedeploy=false
# Optimize the generated plan after orchestration.
#udm.DeployedApplication.optimizePlan=true
# Undeploy direct or transient dependencies of this application. A dependent application is undeployed if no other applications depend on it.
#udm.DeployedApplication.undeployDependencies=false
# The resolution to use for application dependencies when deploying this application. Should be 'LATEST' or 'EXISTING'. A placeholder can be used.
#udm.DeploymentPackage.dependencyResolution=LATEST
# If this is true, all password properties are exported as plaintext while exporting the package. If false, exportOnlyPasswordPlaceholders is considered. (inherited from: udm.Version.exportAllPasswords)
#udm.DeploymentPackage.exportAllPasswords=false
# If this is true, all password properties whose value starts and ends with double curly braces are exported as plaintext. Else, the password values are discarded while exporting the package. (inherited from: udm.Version.exportOnlyPasswordPlaceholders)
#udm.DeploymentPackage.exportOnlyPasswordPlaceholders=true
# Whether to ignore all the undefined properties used in the manifest or to raise an error, while importing a package. (inherited from: udm.Version.ignoreUndefinedPropertiesInManifest)
#udm.DeploymentPackage.ignoreUndefinedPropertiesInManifest=true
# Whether to undeploy direct or transient dependencies of this application. Dependency is undeployed if there are not other application that depend on it. Should be 'true' or 'false'. A placeholder can be used.
#udm.DeploymentPackage.undeployDependencies=false
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter
#udm.EmbeddedDeployableArtifact.delimiters={{ }}
# A map that maps regular expressions matching the full path of file(s) in the artifact to character set encodings
#udm.EmbeddedDeployableArtifact.fileEncodings=.+\.properties:ISO-8859-1
# Whether to scan this artifact for placeholders when it is imported
#udm.EmbeddedDeployableArtifact.scanPlaceholders=true
# Regular expression that matches file names of text files
#udm.EmbeddedDeployableArtifact.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The encrypted dictionary entries
#udm.EncryptedDictionary.encryptedEntries=null
# If set, multiple deployments at the same time can be executed, and a 'collision avoidance' check will not be executed
#udm.Environment.allowConcurrentDeployments=true
# If set, will continually try to obtain lock
#udm.Environment.enableLockRetry=false
# If set, will lock all container in environment
#udm.Environment.lockAllContainersInEnvironment=false
# Number of retry attempts.
#udm.Environment.lockRetryAttempts=60
# Seconds to wait before retrying to obtain lock
#udm.Environment.lockRetryInterval=30
# If set, release conditions are not just verified before planning begins, an equivalent step is also added to the task
#udm.Environment.recheckConditionsAtDeploymentTime=true
# Recheck Conditions At Deployment Time Order
#udm.Environment.recheckConditionsAtDeploymentTimeOrder=9
# Protocol to use when connecting to this host (inherited from: overthere.Host.protocol)
#udm.LazyHost.protocol=null
# Executable shell program (inherited from: overthere.Host.shell)
#udm.LazyHost.shell=null
# If true, delete the temporary connection directory when the connection is closed (inherited from: overthere.Host.tmpDeleteOnDisconnect)
#udm.LazyHost.tmpDeleteOnDisconnect=true
# Number of times Overthere attempts to create a temporary file with a unique name (inherited from: overthere.Host.tmpFileCreationRetries)
#udm.LazyHost.tmpFileCreationRetries=1000
# If this is true, all password properties are exported as plaintext while exporting the package. If false, exportOnlyPasswordPlaceholders is considered. (inherited from: udm.DeploymentPackage.exportAllPasswords)
#udm.ProvisioningPackage.exportAllPasswords=false
# If this is true, all password properties whose value starts and ends with double curly braces are exported as plaintext. Else, the password values are discarded while exporting the package. (inherited from: udm.DeploymentPackage.exportOnlyPasswordPlaceholders)
#udm.ProvisioningPackage.exportOnlyPasswordPlaceholders=true
# Whether to ignore all the undefined properties used in the manifest or to raise an error, while importing a package. (inherited from: udm.DeploymentPackage.ignoreUndefinedPropertiesInManifest)
#udm.ProvisioningPackage.ignoreUndefinedPropertiesInManifest=true
# If this is true, all password properties are exported as plaintext while exporting the package. If false, exportOnlyPasswordPlaceholders is considered.
#udm.Version.exportAllPasswords=false
# If this is true, all password properties whose value starts and ends with double curly braces are exported as plaintext. Else, the password values are discarded while exporting the package.
#udm.Version.exportOnlyPasswordPlaceholders=true
# Whether to ignore all the undefined properties used in the manifest or to raise an error, while importing a package.
#udm.Version.ignoreUndefinedPropertiesInManifest=true
# Additional Properties Not To Expose (inherited from: was.HAManagerPolicy.additionalPropertiesNotToExpose)
#was.AllActivePolicy.additionalPropertiesNotToExpose=id,type,wasType,deployable,container,customProperties,matchCriteria,servers,preferredServers
# The fully qualified name of the Java interface that serves as a factory for a specific type of concrete HAManagerPolicy.
#was.AllActivePolicy.policyFactory=com.ibm.ws.hamanager.coordinator.policy.impl.AllActivePolicyFactory
# WebSphere admin resource type.
#was.AllActivePolicy.wasType=AllActivePolicy
# Additional Properties Not To Expose (inherited from: was.ServerConfigurationResource.additionalPropertiesNotToExpose)
#was.ApplicationServer.additionalPropertiesNotToExpose=id,name,wasType,wasContainerTypes,defaultDiscoverName,customProperties,overwriteExistingValues,overwriteExistingCustomProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ServerConfigurationResource.applyRestartStrategyOnNoop)
#was.ApplicationServer.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ServerConfigurationResource.boundConfigurationItems)
#was.ApplicationServer.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ServerConfigurationResource.containerRestartStrategy)
#was.ApplicationServer.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ServerConfigurationResource.createOrder)
#was.ApplicationServer.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ServerConfigurationResource.createScript)
#was.ApplicationServer.createScript=was/server/modify-config-resource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.ServerConfigurationResource.createVerb)
#was.ApplicationServer.createVerb=Configure
# Default deployed name to be assigned to the CI when discovered.
#was.ApplicationServer.defaultDiscoverName=ApplicationServer
# The order in which a destroy step will be executed. (inherited from: was.ServerConfigurationResource.destroyOrder)
#was.ApplicationServer.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ServerConfigurationResource.destroyScript)
#was.ApplicationServer.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ServerConfigurationResource.destroyVerb)
#was.ApplicationServer.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ServerConfigurationResource.discoverOrder)
#was.ApplicationServer.discoverOrder=50
# Discover Script (inherited from: was.ServerConfigurationResource.discoverScript)
#was.ApplicationServer.discoverScript=was/server/discover-inspect-config-resource.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ServerConfigurationResource.enableRippleStart)
#was.ApplicationServer.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ServerConfigurationResource.exposeDeployedApplication)
#was.ApplicationServer.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ServerConfigurationResource.libraryScripts)
#was.ApplicationServer.libraryScripts=was/common/config/set-encoding.py,was/server/config-resource-lib.py
# The order in which a modify step will be executed. (inherited from: was.ServerConfigurationResource.modifyOrder)
#was.ApplicationServer.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ServerConfigurationResource.modifyScript)
#was.ApplicationServer.modifyScript=was/server/modify-config-resource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ServerConfigurationResource.modifyVerb)
#was.ApplicationServer.modifyVerb=Configure
# The order of the step in the step list for the noop operation. (inherited from: was.ServerConfigurationResource.noopOrder)
#was.ApplicationServer.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ServerConfigurationResource.noopScript)
#was.ApplicationServer.noopScript=null
# Noop Verb (inherited from: was.ServerConfigurationResource.noopVerb)
#was.ApplicationServer.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ServerConfigurationResource.restartStrategy)
#was.ApplicationServer.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ServerConfigurationResource.standardPropertiesNotToExpose)
#was.ApplicationServer.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ServerConfigurationResource.startOrder)
#was.ApplicationServer.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ServerConfigurationResource.startScript)
#was.ApplicationServer.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ServerConfigurationResource.startVerb)
#was.ApplicationServer.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ServerConfigurationResource.stopOrder)
#was.ApplicationServer.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ServerConfigurationResource.stopScript)
#was.ApplicationServer.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ServerConfigurationResource.stopVerb)
#was.ApplicationServer.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterCreateOrder)
#was.ApplicationServer.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterDestroyOrder)
#was.ApplicationServer.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterModifyOrder)
#was.ApplicationServer.syncAfterModifyOrder=65
# List of container types on which the resource should be discovered. (inherited from: was.ServerConfigurationResource.wasContainerTypes)
#was.ApplicationServer.wasContainerTypes=Server
# WebSphere admin resource type.
#was.ApplicationServer.wasType=ApplicationServer
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.ApplicationServerSpec.boundTemplates=null
# Config directory name of WebSphere Application Server.
#was.BaseCell.configDirName=config
# Deployeds To Discover
#was.BaseCell.deployedsToDiscover=was.VirtualHost,was.SharedLibrary
# Inspect script for Cell
#was.BaseCell.inspectScript=was/container/discover-inspect-topology.py
# List of scripts to appended to runtime script
#was.BaseCell.libraryScripts=was/container/discover-inspect-topology-lib.py, was/container/container-lib.py
# Set to true to execute commands with the Python daemon
#was.BaseCell.runWithDaemon=true
# Translated text of "Name" used to resolve version of WebSphere Application Server running in a non-English language.
#was.BaseCell.versionInfoNameField=Name
# When true, the restart strategy is apply for a NOOP operation
#was.BaseCluster.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ExtensibleDeployedContainer.boundConfigurationItems)
#was.BaseCluster.boundConfigurationItems=null
# Number of retries to check if cluster is fully started during rippleStart. 
#was.BaseCluster.checkClusterIsReadyInterval=100
# Number of seconds to sleep inbetween the checking of cluster started.
#was.BaseCluster.checkStartedInterval=10
# Number of seconds to sleep inbetween the checking of cluster stopped.
#was.BaseCluster.checkStoppedInterval=10
# Restart strategy used when deploying. Valid values are: NONE, STOP_START, RESTART. For example, if the STOP_START strategy is used, the container will be stopped before deployment and started after deployment. If the RESTART strategy is used, the deployment will be executed, then container will be restarted using the restart script. If there is no restart script defined, the deployment will be executed, then the container will be stopped and immediately started. Note that it may be preferable to use the containerRestartStrategy property defined on was.Module and its subtypes.
#was.BaseCluster.containerRestartStrategy=NONE
# The order in which a create step will be executed.
#was.BaseCluster.createOrder=56
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ExtensibleDeployedContainer.createScript)
#was.BaseCluster.createScript=null
# The word that is used to prefix a step description for the create operation. (inherited from: was.ExtensibleDeployedContainer.createVerb)
#was.BaseCluster.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.ExtensibleDeployedContainer.destroyOrder)
#was.BaseCluster.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ExtensibleDeployedContainer.destroyScript)
#was.BaseCluster.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ExtensibleDeployedContainer.destroyVerb)
#was.BaseCluster.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ExtensibleDeployedContainer.discoverOrder)
#was.BaseCluster.discoverOrder=50
# If set, each server in the cluster will be first stopped and restarted sequentially.
#was.BaseCluster.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ExtensibleDeployedContainer.exposeDeployedApplication)
#was.BaseCluster.exposeDeployedApplication=false
# Specify if the deployment should fail when application fails to start on all servers in the cluster.
#was.BaseCluster.failOnPartialApplicationStart=true
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ExtensibleDeployedContainer.libraryScripts)
#was.BaseCluster.libraryScripts=null
# The order in which a modify step will be executed. (inherited from: was.ExtensibleDeployedContainer.modifyOrder)
#was.BaseCluster.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ExtensibleDeployedContainer.modifyScript)
#was.BaseCluster.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ExtensibleDeployedContainer.modifyVerb)
#was.BaseCluster.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.ExtensibleDeployedContainer.noopOrder)
#was.BaseCluster.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ExtensibleDeployedContainer.noopScript)
#was.BaseCluster.noopScript=null
# Noop Verb (inherited from: was.ExtensibleDeployedContainer.noopVerb)
#was.BaseCluster.noopVerb=Noop
# Restart Order
#was.BaseCluster.restartOrder=80
# Restart strategy used when deploying. Valid values are: NONE, STOP_START, STOP, START.
#was.BaseCluster.restartStrategy=STOP_START
# Server type. Possible values are: PROXY_SERVER, APPLICATION_SERVER, ONDEMAND_ROUTER. Default value: APPLICATION_SERVER. Available since: WAS_70
#was.BaseCluster.serverType=APPLICATION_SERVER
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ExtensibleDeployedContainer.standardPropertiesNotToExpose)
#was.BaseCluster.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed.
#was.BaseCluster.startOrder=80
# Python script invoked to start a Java EE artifact or Java EE resource
#was.BaseCluster.startScript=was/container/start-cluster.py
# The word that is used to prefix a step description for the start operation. (inherited from: was.ExtensibleDeployedContainer.startVerb)
#was.BaseCluster.startVerb=Start
# The order in which a stop step will be executed.
#was.BaseCluster.stopOrder=20
# Python script invoked to stop a Java EE artifact or Java EE resource
#was.BaseCluster.stopScript=was/container/stop-cluster.py
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ExtensibleDeployedContainer.stopVerb)
#was.BaseCluster.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ExtensibleDeployedContainer.syncAfterCreateOrder)
#was.BaseCluster.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ExtensibleDeployedContainer.syncAfterDestroyOrder)
#was.BaseCluster.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ExtensibleDeployedContainer.syncAfterModifyOrder)
#was.BaseCluster.syncAfterModifyOrder=65
# The set of created CIs. (inherited from: was.BaseCluster.boundConfigurationItems)
#was.Cluster.boundConfigurationItems=null
# The order in which a create step will be executed. (inherited from: was.BaseCluster.createOrder)
#was.Cluster.createOrder=56
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.BaseCluster.createScript)
#was.Cluster.createScript=null
# The word that is used to prefix a step description for the create operation. (inherited from: was.BaseCluster.createVerb)
#was.Cluster.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.BaseCluster.destroyOrder)
#was.Cluster.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.BaseCluster.destroyScript)
#was.Cluster.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.BaseCluster.destroyVerb)
#was.Cluster.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.BaseCluster.discoverOrder)
#was.Cluster.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.BaseCluster.exposeDeployedApplication)
#was.Cluster.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.BaseCluster.libraryScripts)
#was.Cluster.libraryScripts=null
# The order in which a modify step will be executed. (inherited from: was.BaseCluster.modifyOrder)
#was.Cluster.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.BaseCluster.modifyScript)
#was.Cluster.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.BaseCluster.modifyVerb)
#was.Cluster.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.BaseCluster.noopOrder)
#was.Cluster.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.BaseCluster.noopScript)
#was.Cluster.noopScript=null
# Noop Verb (inherited from: was.BaseCluster.noopVerb)
#was.Cluster.noopVerb=Noop
# Restart Order (inherited from: was.BaseCluster.restartOrder)
#was.Cluster.restartOrder=80
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.BaseCluster.standardPropertiesNotToExpose)
#was.Cluster.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.BaseCluster.startOrder)
#was.Cluster.startOrder=80
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.BaseCluster.startScript)
#was.Cluster.startScript=was/container/start-cluster.py
# The word that is used to prefix a step description for the start operation. (inherited from: was.BaseCluster.startVerb)
#was.Cluster.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.BaseCluster.stopOrder)
#was.Cluster.stopOrder=20
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.BaseCluster.stopScript)
#was.Cluster.stopScript=was/container/stop-cluster.py
# The word that is used to prefix a step description for the stop operation. (inherited from: was.BaseCluster.stopVerb)
#was.Cluster.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.BaseCluster.syncAfterCreateOrder)
#was.Cluster.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.BaseCluster.syncAfterDestroyOrder)
#was.Cluster.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.BaseCluster.syncAfterModifyOrder)
#was.Cluster.syncAfterModifyOrder=65
# Apply Restart Strategy On Noop
#was.ClusterSpec.applyRestartStrategyOnNoop=false
# The set of CI templates. (inherited from: was.DeployableContainer.boundTemplates)
#was.ClusterSpec.boundTemplates=null
# Number of retries to check if cluster is fully started during ripplestart.
#was.ClusterSpec.checkClusterIsReadyInterval=100
# Number of seconds to sleep in between the checking of cluster started.
#was.ClusterSpec.checkStartedInterval=10
# Number of seconds to sleep in between the checking of cluster stopped.
#was.ClusterSpec.checkStoppedInterval=10
# Restart strategy used when deploying. Valid values are: NONE, STOP_START, RESTART. For example, if the STOP_START strategy is used, the container will be stopped before deployment and started after deployment. If the RESTART strategy is used, the deployment will be executed, then container will be restarted using the restart script. If there is no restart script defined, the deployment will be executed, then the container will be stopped and immediately started. Note that it may be preferable to use the containerRestartStrategy property defined on was.Module and its subtypes.
#was.ClusterSpec.containerRestartStrategy=NONE
# If set, each server in the cluster will be first stopped and restarted sequentially.
#was.ClusterSpec.enableRippleStart=false
# Specify if the deployment should fail when application fails to start on all servers in the cluster.
#was.ClusterSpec.failOnPartialApplicationStart=true
# Restart strategy used when deploying. Valid values are: NONE, STOP_START, STOP, START.
#was.ClusterSpec.restartStrategy=STOP_START
# Server type. Possible values are: PROXY_SERVER, APPLICATION_SERVER, ONDEMAND_ROUTER. Default value: APPLICATION_SERVER. Available since: WAS_70
#was.ClusterSpec.serverType=APPLICATION_SERVER
# Additional Properties Not To Expose
#was.ConfigResource.additionalPropertiesNotToExpose=wasType,provider,providerType,customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.ConfigResource.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.ConfigResource.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.ConfigResource.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.Resource.createOrder)
#was.ConfigResource.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.ConfigResource.createScript=was/common/config/create-or-modify-resource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.ConfigResource.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.Resource.destroyOrder)
#was.ConfigResource.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.ConfigResource.destroyScript=was/common/config/destroy-resource.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.ConfigResource.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Resource.discoverOrder)
#was.ConfigResource.discoverOrder=50
# Discover Script
#was.ConfigResource.discoverScript=was/common/config/discover-inspect-resource.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.ConfigResource.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.ConfigResource.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#was.ConfigResource.libraryScripts=was/common/config/set-encoding.py,was/common/config/admin-config-lib.py
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.ConfigResource.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.ConfigResource.modifyScript=was/common/config/create-or-modify-resource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.ConfigResource.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.ConfigResource.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.ConfigResource.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.ConfigResource.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.ConfigResource.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.ConfigResource.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.ConfigResource.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.ConfigResource.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.ConfigResource.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.ConfigResource.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.ConfigResource.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.ConfigResource.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.ConfigResource.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.ConfigResource.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.ConfigResource.syncAfterModifyOrder=65
# Additional Properties Not To Expose
#was.ConfigurationResource.additionalPropertiesNotToExpose=id,name,wasType,wasContainerTypes,defaultDiscoverName,customProperties,overwriteExistingValues,overwriteExistingCustomProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.ConfigurationResource.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.ConfigurationResource.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.ConfigurationResource.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.Resource.createOrder)
#was.ConfigurationResource.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.ConfigurationResource.createScript=was/server/modify-config-resource.py
# The word that is used to prefix a step description for the create operation.
#was.ConfigurationResource.createVerb=Configure
# The order in which a destroy step will be executed. (inherited from: was.Resource.destroyOrder)
#was.ConfigurationResource.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.Resource.destroyScript)
#was.ConfigurationResource.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.ConfigurationResource.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Resource.discoverOrder)
#was.ConfigurationResource.discoverOrder=50
# Discover Script
#was.ConfigurationResource.discoverScript=was/server/discover-inspect-config-resource.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.ConfigurationResource.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.ConfigurationResource.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#was.ConfigurationResource.libraryScripts=was/common/config/set-encoding.py,was/server/config-resource-lib.py
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.ConfigurationResource.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.ConfigurationResource.modifyScript=was/server/modify-config-resource.py
# The word that is used to prefix a step description for the modify operation.
#was.ConfigurationResource.modifyVerb=Configure
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.ConfigurationResource.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.ConfigurationResource.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.ConfigurationResource.noopVerb=Noop
# When set to true, existing custom properties will be overwritten by the entries specified in the deployed CI. When false, new CI entries will be appended to the existing custom properties.
#was.ConfigurationResource.overwriteExistingCustomProperties=false
# When set to true, all not specified properties of the CI will be reset to WAS default values (or empty lists in case of custom properties). Otherwise, only the provided properties will be set; properties not specified in the deployed CI will be left as-is.
#was.ConfigurationResource.overwriteExistingValues=false
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.ConfigurationResource.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.ConfigurationResource.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.ConfigurationResource.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.ConfigurationResource.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.ConfigurationResource.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.ConfigurationResource.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.ConfigurationResource.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.ConfigurationResource.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.ConfigurationResource.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.ConfigurationResource.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.ConfigurationResource.syncAfterModifyOrder=65
# The set of created CIs. (inherited from: generic.CopiedArtifact.boundConfigurationItems)
#was.CopiedKeystoreFile.boundConfigurationItems=null
# If set to true, files are directly copied to the target directory without first being uploaded to the staging or temporary directory (like versions of XL Deploy prior to 4.0.0) (inherited from: generic.CopiedArtifact.copyDirectlyToTargetPath)
#was.CopiedKeystoreFile.copyDirectlyToTargetPath=false
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.createOptions)
#was.CopiedKeystoreFile.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: generic.CopiedArtifact.createOrder)
#was.CopiedKeystoreFile.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: generic.CopiedArtifact.createTargetDirectory)
#was.CopiedKeystoreFile.createTargetDirectory=false
# Create Verb (inherited from: generic.CopiedArtifact.createVerb)
#was.CopiedKeystoreFile.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.destroyOptions)
#was.CopiedKeystoreFile.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: generic.CopiedArtifact.destroyOrder)
#was.CopiedKeystoreFile.destroyOrder=40
# Destroy Verb (inherited from: generic.CopiedArtifact.destroyVerb)
#was.CopiedKeystoreFile.destroyVerb=Destroy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.CopiedArtifact.inspectClasspathResources)
#was.CopiedKeystoreFile.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.CopiedArtifact.inspectScript)
#was.CopiedKeystoreFile.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.CopiedArtifact.inspectTemplateClasspathResources)
#was.CopiedKeystoreFile.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.modifyOptions)
#was.CopiedKeystoreFile.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: generic.CopiedArtifact.modifyOrder)
#was.CopiedKeystoreFile.modifyOrder=50
# Modify Verb (inherited from: generic.CopiedArtifact.modifyVerb)
#was.CopiedKeystoreFile.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.noopOptions)
#was.CopiedKeystoreFile.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: generic.CopiedArtifact.noopOrder)
#was.CopiedKeystoreFile.noopOrder=50
# Noop Verb (inherited from: generic.CopiedArtifact.noopVerb)
#was.CopiedKeystoreFile.noopVerb=Modify
# If set to true, preserve the existing files on the remote host (do not delete the copied files during the destroy operation).  (inherited from: generic.CopiedArtifact.preserveExistingFiles)
#was.CopiedKeystoreFile.preserveExistingFiles=false
# The generic container requires a restart for the action performed by this deployed. (inherited from: generic.CopiedArtifact.restartRequired)
#was.CopiedKeystoreFile.restartRequired=false
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: generic.CopiedArtifact.restartRequiredForNoop)
#was.CopiedKeystoreFile.restartRequiredForNoop=false
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: generic.CopiedArtifact.targetDirectoryShared)
#was.CopiedKeystoreFile.targetDirectoryShared=true
# If set to true, the sub directories on the target machine are not deleted if files other than that copied by XL Deploy are present. Please note that setting this option to true will cause the removal process to be a slower.  (inherited from: generic.CopiedArtifact.targetPathSharedSubDirectories)
#was.CopiedKeystoreFile.targetPathSharedSubDirectories=false
# The time interval, in seconds, at which the discovery protocol runs. Increasing this value might decrease the use of system resources such as CPU. Decreasing this value might improve the detection of core group members.
#was.CoreGroup.Liveness_discoveryPeriod=60
# The time interval, in milliseconds, that constitutes a heartbeat timeout.  This value must be an integer multiple of the heartbeat transmission period.
#was.CoreGroup.Liveness_heartbeatTimeoutPeriod=180000
# The time interval, in milliseconds, at which active failure detection heartbeats are sent. Increasing this value might decrease the use of system resources such as CPU. Decreasing this value might improve the detection of failed core group members.
#was.CoreGroup.Liveness_heartbeatTransmissionPeriod=30000
# Specify to use default or alternative protocol providers. Depending on your platform, alternate protocol providers might be available.
#was.CoreGroup.Liveness_livenessType=DEFAULT_ONLY
# Additional Properties Not To Expose
#was.CoreGroup.additionalPropertiesNotToExpose=Liveness,coreGroupClusters,coreGroupServers,preferredCoordinatorServers,customProperties,policies
# When true, the restart strategy is apply for a NOOP operation
#was.CoreGroup.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.CoreGroup.boundConfigurationItems=null
# Specifies the transport channel chain to use for the channel framework transport type. Values: 'DCS'(default), 'DCS-Secure'.
#was.CoreGroup.channelChainName=DCS
# Strategy to restart Core Group member servers.
#was.CoreGroup.containerRestartStrategy=STOP_START
# The order in which a create step will be executed. (inherited from: was.Resource.createOrder)
#was.CoreGroup.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.CoreGroup.createScript=was/server/coregroup/create-or-modify-coregroup.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.CoreGroup.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.Resource.destroyOrder)
#was.CoreGroup.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.CoreGroup.destroyScript=was/server/coregroup/destroy-coregroup.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.CoreGroup.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Resource.discoverOrder)
#was.CoreGroup.discoverOrder=50
# Discover Script
#was.CoreGroup.discoverScript=was/server/coregroup/discover-inspect-coregroup.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.CoreGroup.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.CoreGroup.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#was.CoreGroup.libraryScripts=was/common/config/set-encoding.py,was/server/coregroup/coregroup-lib.py
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.CoreGroup.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.CoreGroup.modifyScript=was/server/coregroup/create-or-modify-coregroup.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.CoreGroup.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.CoreGroup.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.CoreGroup.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.CoreGroup.noopVerb=Noop
# Specifies the number of active coordinators.
#was.CoreGroup.numCoordinators=1
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.CoreGroup.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.CoreGroup.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.CoreGroup.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.CoreGroup.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.CoreGroup.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.CoreGroup.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.CoreGroup.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.CoreGroup.stopVerb=Stop
# The order in which a synchronize after create step will be executed.
#was.CoreGroup.syncAfterCreateOrder=-1
# The order in which a synchronize after destroy step will be executed.
#was.CoreGroup.syncAfterDestroyOrder=-1
# The order in which a synchronize after modify step will be executed.
#was.CoreGroup.syncAfterModifyOrder=-1
# The maximum size of dynamically allocated memory, in megabytes, that the transport can hold. The range is from 10 to 2147483647 megabytes, however, this value cannot be larger than the maximum heap size specified for the Java virtual machine.  When this limit is reached, congestion control is invoked.
#was.CoreGroup.transportMemorySize=100
# Specifies the communication protocol within a core group.
#was.CoreGroup.transportType=CHANNEL_FRAMEWORK
# Additional Properties Not To Expose (inherited from: was.ServerConfigurationResource.additionalPropertiesNotToExpose)
#was.CoreGroupService.additionalPropertiesNotToExpose=id,name,wasType,wasContainerTypes,defaultDiscoverName,customProperties,overwriteExistingValues,overwriteExistingCustomProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ServerConfigurationResource.applyRestartStrategyOnNoop)
#was.CoreGroupService.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ServerConfigurationResource.boundConfigurationItems)
#was.CoreGroupService.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ServerConfigurationResource.containerRestartStrategy)
#was.CoreGroupService.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ServerConfigurationResource.createOrder)
#was.CoreGroupService.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ServerConfigurationResource.createScript)
#was.CoreGroupService.createScript=was/server/modify-config-resource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.ServerConfigurationResource.createVerb)
#was.CoreGroupService.createVerb=Configure
# Default deployed name to be assigned to the CI when discovered.
#was.CoreGroupService.defaultDiscoverName=CoreGroupService
# The order in which a destroy step will be executed. (inherited from: was.ServerConfigurationResource.destroyOrder)
#was.CoreGroupService.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ServerConfigurationResource.destroyScript)
#was.CoreGroupService.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ServerConfigurationResource.destroyVerb)
#was.CoreGroupService.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ServerConfigurationResource.discoverOrder)
#was.CoreGroupService.discoverOrder=50
# Discover Script (inherited from: was.ServerConfigurationResource.discoverScript)
#was.CoreGroupService.discoverScript=was/server/discover-inspect-config-resource.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ServerConfigurationResource.enableRippleStart)
#was.CoreGroupService.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ServerConfigurationResource.exposeDeployedApplication)
#was.CoreGroupService.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ServerConfigurationResource.libraryScripts)
#was.CoreGroupService.libraryScripts=was/common/config/set-encoding.py,was/server/config-resource-lib.py
# The order in which a modify step will be executed. (inherited from: was.ServerConfigurationResource.modifyOrder)
#was.CoreGroupService.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ServerConfigurationResource.modifyScript)
#was.CoreGroupService.modifyScript=was/server/modify-config-resource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ServerConfigurationResource.modifyVerb)
#was.CoreGroupService.modifyVerb=Configure
# The order of the step in the step list for the noop operation. (inherited from: was.ServerConfigurationResource.noopOrder)
#was.CoreGroupService.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ServerConfigurationResource.noopScript)
#was.CoreGroupService.noopScript=null
# Noop Verb (inherited from: was.ServerConfigurationResource.noopVerb)
#was.CoreGroupService.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ServerConfigurationResource.restartStrategy)
#was.CoreGroupService.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ServerConfigurationResource.standardPropertiesNotToExpose)
#was.CoreGroupService.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ServerConfigurationResource.startOrder)
#was.CoreGroupService.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ServerConfigurationResource.startScript)
#was.CoreGroupService.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ServerConfigurationResource.startVerb)
#was.CoreGroupService.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ServerConfigurationResource.stopOrder)
#was.CoreGroupService.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ServerConfigurationResource.stopScript)
#was.CoreGroupService.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ServerConfigurationResource.stopVerb)
#was.CoreGroupService.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterCreateOrder)
#was.CoreGroupService.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterDestroyOrder)
#was.CoreGroupService.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterModifyOrder)
#was.CoreGroupService.syncAfterModifyOrder=65
# List of container types on which the resource should be discovered. (inherited from: was.ServerConfigurationResource.wasContainerTypes)
#was.CoreGroupService.wasContainerTypes=Server
# WebSphere admin resource type.
#was.CoreGroupService.wasType=HAManagerService
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.CoreGroupServiceSpec.boundTemplates=null
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.CoreGroupSpec.boundTemplates=null
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.CustomProperties.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.CustomProperties.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.CustomProperties.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.Resource.createOrder)
#was.CustomProperties.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.CustomProperties.createScript=was/server/custom/create-or-modify-custom-properties.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.CustomProperties.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.Resource.destroyOrder)
#was.CustomProperties.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.CustomProperties.destroyScript=was/server/custom/destroy-custom-properties.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.CustomProperties.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Resource.discoverOrder)
#was.CustomProperties.discoverOrder=50
# Discover Script
#was.CustomProperties.discoverScript=was/server/custom/discover-inspect-custom-properties.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.CustomProperties.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.CustomProperties.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#was.CustomProperties.libraryScripts=was/common/config/set-encoding.py,was/server/custom/custom-properties-lib.py
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.CustomProperties.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.CustomProperties.modifyScript=was/server/custom/create-or-modify-custom-properties.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.CustomProperties.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.CustomProperties.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.CustomProperties.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.CustomProperties.noopVerb=Noop
# If set, existing custom properties of the same name will be overwritten. Otherwise, the value will be appended to the existing property value.
#was.CustomProperties.overwriteExisting=true
# NOT APPLICABLE
#was.CustomProperties.overwriteExistingCustomProperties=false
# NOT APPLICABLE
#was.CustomProperties.overwriteExistingValues=false
# If set, custom properties present on the target container, but not specified in this deployed will be removed. Otherwise, properties and their values will be left as is.
#was.CustomProperties.removeNotPresent=false
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.CustomProperties.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.CustomProperties.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.CustomProperties.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.CustomProperties.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.CustomProperties.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.CustomProperties.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.CustomProperties.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.CustomProperties.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.CustomProperties.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.CustomProperties.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.CustomProperties.syncAfterModifyOrder=65
# Name of the properties attribute on WebSphere container type.
#was.CustomProperties.targetAttribute=properties
# WebSphere component type to which the properties should be deployed.
#was.CustomProperties.targetComponent=
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.CustomPropertiesSpec.boundTemplates=null
# Additional Properties Not To Expose
#was.CustomService.additionalPropertiesNotToExpose=name, customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.CustomService.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.CustomService.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.CustomService.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.Resource.createOrder)
#was.CustomService.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.CustomService.createScript=was/customservice/create-custom-service.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.CustomService.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.Resource.destroyOrder)
#was.CustomService.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.CustomService.destroyScript=was/customservice/destroy-custom-service.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.CustomService.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Resource.discoverOrder)
#was.CustomService.discoverOrder=50
# Discover Script
#was.CustomService.discoverScript=was/customservice/discover-inspect-custom-service.py
# Specifies whether or not the server attempts to start the specified service when server starts.
#was.CustomService.enable=false
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.CustomService.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.CustomService.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#was.CustomService.libraryScripts=was/common/config/set-encoding.py,was/customservice/custom-service-lib.py
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.CustomService.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.Resource.modifyScript)
#was.CustomService.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.CustomService.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.CustomService.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.CustomService.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.CustomService.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.CustomService.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.CustomService.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.CustomService.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.CustomService.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.CustomService.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.CustomService.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.CustomService.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.CustomService.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.CustomService.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.CustomService.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.CustomService.syncAfterModifyOrder=65
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.CustomServiceSpec.boundTemplates=null
# Additional Properties Not To Expose (inherited from: was.Datasource.additionalPropertiesNotToExpose)
#was.DB2Datasource.additionalPropertiesNotToExpose=name,alias,containerManagedPersistence,description,jndiName,createJaasAlias,jdbcProvider,username,password,ConnectionPool,datasourceHelperClassname,customProperties,allowExistingJaasAlias,jaasAliasName,useJaasAliasForXaRecovery,useJaasAliasForContainerManagedAuthentication,mappingConfigAlias,testConnection,testConnectionScript,testConnectionOrder,updateJaasScript,updateJaasOrder
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Datasource.applyRestartStrategyOnNoop)
#was.DB2Datasource.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Datasource.boundConfigurationItems)
#was.DB2Datasource.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Datasource.containerRestartStrategy)
#was.DB2Datasource.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.Datasource.createOrder)
#was.DB2Datasource.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.Datasource.createScript)
#was.DB2Datasource.createScript=was/datasource/create-or-modify-datasource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Datasource.createVerb)
#was.DB2Datasource.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.Datasource.destroyOrder)
#was.DB2Datasource.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.Datasource.destroyScript)
#was.DB2Datasource.destroyScript=was/datasource/destroy-datasource.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Datasource.destroyVerb)
#was.DB2Datasource.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Datasource.discoverOrder)
#was.DB2Datasource.discoverOrder=50
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Datasource.enableRippleStart)
#was.DB2Datasource.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Datasource.exposeDeployedApplication)
#was.DB2Datasource.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.Datasource.libraryScripts)
#was.DB2Datasource.libraryScripts=was/common/config/set-encoding.py,was/datasource/datasource-lib.py,was/datasource/discover-inspect-datasource-lib.py,was/jaas/jaas-alias-lib.py
# The order in which a modify step will be executed. (inherited from: was.Datasource.modifyOrder)
#was.DB2Datasource.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.Datasource.modifyScript)
#was.DB2Datasource.modifyScript=was/datasource/create-or-modify-datasource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Datasource.modifyVerb)
#was.DB2Datasource.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Datasource.noopOrder)
#was.DB2Datasource.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Datasource.noopScript)
#was.DB2Datasource.noopScript=null
# Noop Verb (inherited from: was.Datasource.noopVerb)
#was.DB2Datasource.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Datasource.restartStrategy)
#was.DB2Datasource.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Datasource.standardPropertiesNotToExpose)
#was.DB2Datasource.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Datasource.startOrder)
#was.DB2Datasource.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Datasource.startScript)
#was.DB2Datasource.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Datasource.startVerb)
#was.DB2Datasource.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Datasource.stopOrder)
#was.DB2Datasource.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Datasource.stopScript)
#was.DB2Datasource.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Datasource.stopVerb)
#was.DB2Datasource.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Datasource.syncAfterCreateOrder)
#was.DB2Datasource.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Datasource.syncAfterDestroyOrder)
#was.DB2Datasource.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Datasource.syncAfterModifyOrder)
#was.DB2Datasource.syncAfterModifyOrder=65
# Test Connection Order (inherited from: was.Datasource.testConnectionOrder)
#was.DB2Datasource.testConnectionOrder=102
# Test Connection Script (inherited from: was.Datasource.testConnectionScript)
#was.DB2Datasource.testConnectionScript=was/datasource/test-datasource-connection.py
# Update Jaas Order (inherited from: was.Datasource.updateJaasOrder)
#was.DB2Datasource.updateJaasOrder=101
# Update Jaas Script (inherited from: was.Datasource.updateJaasScript)
#was.DB2Datasource.updateJaasScript=was/jaas/update-jaas.py
# Additional Properties Not To Expose (inherited from: was.DB2Datasource.additionalPropertiesNotToExpose)
#was.DB2Type2Datasource.additionalPropertiesNotToExpose=name,alias,containerManagedPersistence,description,jndiName,createJaasAlias,jdbcProvider,username,password,ConnectionPool,datasourceHelperClassname,customProperties,allowExistingJaasAlias,jaasAliasName,useJaasAliasForXaRecovery,useJaasAliasForContainerManagedAuthentication,mappingConfigAlias,testConnection,testConnectionScript,testConnectionOrder,updateJaasScript,updateJaasOrder
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.DB2Datasource.applyRestartStrategyOnNoop)
#was.DB2Type2Datasource.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.DB2Datasource.boundConfigurationItems)
#was.DB2Type2Datasource.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.DB2Datasource.containerRestartStrategy)
#was.DB2Type2Datasource.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.DB2Datasource.createOrder)
#was.DB2Type2Datasource.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.DB2Datasource.createScript)
#was.DB2Type2Datasource.createScript=was/datasource/create-or-modify-datasource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.DB2Datasource.createVerb)
#was.DB2Type2Datasource.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.DB2Datasource.destroyOrder)
#was.DB2Type2Datasource.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.DB2Datasource.destroyScript)
#was.DB2Type2Datasource.destroyScript=was/datasource/destroy-datasource.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.DB2Datasource.destroyVerb)
#was.DB2Type2Datasource.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.DB2Datasource.discoverOrder)
#was.DB2Type2Datasource.discoverOrder=50
# Python wsadmin script invoked to discover a JDBC data sources.
#was.DB2Type2Datasource.discoverScript=was/datasource/discover-inspect-db2-type2-datasources.py
# Driver Type
#was.DB2Type2Datasource.driverType=2
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.DB2Datasource.enableRippleStart)
#was.DB2Type2Datasource.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.DB2Datasource.exposeDeployedApplication)
#was.DB2Type2Datasource.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.DB2Datasource.libraryScripts)
#was.DB2Type2Datasource.libraryScripts=was/common/config/set-encoding.py,was/datasource/datasource-lib.py,was/datasource/discover-inspect-datasource-lib.py,was/jaas/jaas-alias-lib.py
# The order in which a modify step will be executed. (inherited from: was.DB2Datasource.modifyOrder)
#was.DB2Type2Datasource.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.DB2Datasource.modifyScript)
#was.DB2Type2Datasource.modifyScript=was/datasource/create-or-modify-datasource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.DB2Datasource.modifyVerb)
#was.DB2Type2Datasource.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.DB2Datasource.noopOrder)
#was.DB2Type2Datasource.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.DB2Datasource.noopScript)
#was.DB2Type2Datasource.noopScript=null
# Noop Verb (inherited from: was.DB2Datasource.noopVerb)
#was.DB2Type2Datasource.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.DB2Datasource.restartStrategy)
#was.DB2Type2Datasource.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.DB2Datasource.standardPropertiesNotToExpose)
#was.DB2Type2Datasource.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.DB2Datasource.startOrder)
#was.DB2Type2Datasource.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.DB2Datasource.startScript)
#was.DB2Type2Datasource.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.DB2Datasource.startVerb)
#was.DB2Type2Datasource.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.DB2Datasource.stopOrder)
#was.DB2Type2Datasource.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.DB2Datasource.stopScript)
#was.DB2Type2Datasource.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.DB2Datasource.stopVerb)
#was.DB2Type2Datasource.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.DB2Datasource.syncAfterCreateOrder)
#was.DB2Type2Datasource.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.DB2Datasource.syncAfterDestroyOrder)
#was.DB2Type2Datasource.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.DB2Datasource.syncAfterModifyOrder)
#was.DB2Type2Datasource.syncAfterModifyOrder=65
# Test Connection Order (inherited from: was.DB2Datasource.testConnectionOrder)
#was.DB2Type2Datasource.testConnectionOrder=102
# Test Connection Script (inherited from: was.DB2Datasource.testConnectionScript)
#was.DB2Type2Datasource.testConnectionScript=was/datasource/test-datasource-connection.py
# Update Jaas Order (inherited from: was.DB2Datasource.updateJaasOrder)
#was.DB2Type2Datasource.updateJaasOrder=101
# Update Jaas Script (inherited from: was.DB2Datasource.updateJaasScript)
#was.DB2Type2Datasource.updateJaasScript=was/jaas/update-jaas.py
# The set of CI templates. (inherited from: jee.DataSourceSpec.boundTemplates)
#was.DB2Type2DatasourceSpec.boundTemplates=null
# Additional Properties Not To Expose (inherited from: was.DB2Datasource.additionalPropertiesNotToExpose)
#was.DB2Type4Datasource.additionalPropertiesNotToExpose=name,alias,containerManagedPersistence,description,jndiName,createJaasAlias,jdbcProvider,username,password,ConnectionPool,datasourceHelperClassname,customProperties,allowExistingJaasAlias,jaasAliasName,useJaasAliasForXaRecovery,useJaasAliasForContainerManagedAuthentication,mappingConfigAlias,testConnection,testConnectionScript,testConnectionOrder,updateJaasScript,updateJaasOrder
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.DB2Datasource.applyRestartStrategyOnNoop)
#was.DB2Type4Datasource.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.DB2Datasource.boundConfigurationItems)
#was.DB2Type4Datasource.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.DB2Datasource.containerRestartStrategy)
#was.DB2Type4Datasource.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.DB2Datasource.createOrder)
#was.DB2Type4Datasource.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.DB2Datasource.createScript)
#was.DB2Type4Datasource.createScript=was/datasource/create-or-modify-datasource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.DB2Datasource.createVerb)
#was.DB2Type4Datasource.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.DB2Datasource.destroyOrder)
#was.DB2Type4Datasource.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.DB2Datasource.destroyScript)
#was.DB2Type4Datasource.destroyScript=was/datasource/destroy-datasource.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.DB2Datasource.destroyVerb)
#was.DB2Type4Datasource.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.DB2Datasource.discoverOrder)
#was.DB2Type4Datasource.discoverOrder=50
# Python wsadmin script invoked to discover a JDBC data sources.
#was.DB2Type4Datasource.discoverScript=was/datasource/discover-inspect-db2-type4-datasources.py
# Driver Type
#was.DB2Type4Datasource.driverType=4
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.DB2Datasource.enableRippleStart)
#was.DB2Type4Datasource.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.DB2Datasource.exposeDeployedApplication)
#was.DB2Type4Datasource.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.DB2Datasource.libraryScripts)
#was.DB2Type4Datasource.libraryScripts=was/common/config/set-encoding.py,was/datasource/datasource-lib.py,was/datasource/discover-inspect-datasource-lib.py,was/jaas/jaas-alias-lib.py
# The order in which a modify step will be executed. (inherited from: was.DB2Datasource.modifyOrder)
#was.DB2Type4Datasource.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.DB2Datasource.modifyScript)
#was.DB2Type4Datasource.modifyScript=was/datasource/create-or-modify-datasource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.DB2Datasource.modifyVerb)
#was.DB2Type4Datasource.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.DB2Datasource.noopOrder)
#was.DB2Type4Datasource.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.DB2Datasource.noopScript)
#was.DB2Type4Datasource.noopScript=null
# Noop Verb (inherited from: was.DB2Datasource.noopVerb)
#was.DB2Type4Datasource.noopVerb=Noop
# The TCP/IP port number where the DRDA server resides. If property driverType is set to 4, this property is required.
#was.DB2Type4Datasource.portNumber=50000
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.DB2Datasource.restartStrategy)
#was.DB2Type4Datasource.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.DB2Datasource.standardPropertiesNotToExpose)
#was.DB2Type4Datasource.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.DB2Datasource.startOrder)
#was.DB2Type4Datasource.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.DB2Datasource.startScript)
#was.DB2Type4Datasource.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.DB2Datasource.startVerb)
#was.DB2Type4Datasource.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.DB2Datasource.stopOrder)
#was.DB2Type4Datasource.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.DB2Datasource.stopScript)
#was.DB2Type4Datasource.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.DB2Datasource.stopVerb)
#was.DB2Type4Datasource.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.DB2Datasource.syncAfterCreateOrder)
#was.DB2Type4Datasource.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.DB2Datasource.syncAfterDestroyOrder)
#was.DB2Type4Datasource.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.DB2Datasource.syncAfterModifyOrder)
#was.DB2Type4Datasource.syncAfterModifyOrder=65
# Test Connection Order (inherited from: was.DB2Datasource.testConnectionOrder)
#was.DB2Type4Datasource.testConnectionOrder=102
# Test Connection Script (inherited from: was.DB2Datasource.testConnectionScript)
#was.DB2Type4Datasource.testConnectionScript=was/datasource/test-datasource-connection.py
# Update Jaas Order (inherited from: was.DB2Datasource.updateJaasOrder)
#was.DB2Type4Datasource.updateJaasOrder=101
# Update Jaas Script (inherited from: was.DB2Datasource.updateJaasScript)
#was.DB2Type4Datasource.updateJaasScript=was/jaas/update-jaas.py
# The set of CI templates. (inherited from: jee.DataSourceSpec.boundTemplates)
#was.DB2Type4DatasourceSpec.boundTemplates=null
# Specifies the interval, in seconds, after which an unused, aged connection is discarded (regardless of recent activity) by the pool maintenance thread.
#was.Datasource.ConnectionPool_agedTimeout=0
# Specifies connection timeout value for a JDBC data source.
#was.Datasource.ConnectionPool_connectionTimeout=180
# Specifies Maximum number of connections for a JDBC data source.
#was.Datasource.ConnectionPool_maxConnections=10
# Specifies Minimum number of connections for a JDBC data source.
#was.Datasource.ConnectionPool_minConnections=1
# Specifies how to purge connections when a stale connection or fatal connection error is detected.
#was.Datasource.ConnectionPool_purgePolicy=EntirePool
# Specifies the interval, in seconds, between runs of the pool maintenance thread.
#was.Datasource.ConnectionPool_reapTime=180
# Specifies the maximum number of seconds that an idle connection can remain in the pool before being discarded by the maintenance thread.
#was.Datasource.ConnectionPool_unusedTimeout=1800
# Additional Properties Not To Expose
#was.Datasource.additionalPropertiesNotToExpose=name,alias,containerManagedPersistence,description,jndiName,createJaasAlias,jdbcProvider,username,password,ConnectionPool,datasourceHelperClassname,customProperties,allowExistingJaasAlias,jaasAliasName,useJaasAliasForXaRecovery,useJaasAliasForContainerManagedAuthentication,mappingConfigAlias,testConnection,testConnectionScript,testConnectionOrder,updateJaasScript,updateJaasOrder
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.Datasource.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.Datasource.boundConfigurationItems=null
# Specifies that the datasource is used for container-managed persistence (CMP) of enterprise beans.
#was.Datasource.containerManagedPersistence=true
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.Datasource.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.Resource.createOrder)
#was.Datasource.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.Datasource.createScript=was/datasource/create-or-modify-datasource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.Datasource.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.Resource.destroyOrder)
#was.Datasource.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.Datasource.destroyScript=was/datasource/destroy-datasource.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.Datasource.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Resource.discoverOrder)
#was.Datasource.discoverOrder=50
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.Datasource.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.Datasource.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#was.Datasource.libraryScripts=was/common/config/set-encoding.py,was/datasource/datasource-lib.py,was/datasource/discover-inspect-datasource-lib.py,was/jaas/jaas-alias-lib.py
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.Datasource.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.Datasource.modifyScript=was/datasource/create-or-modify-datasource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.Datasource.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.Datasource.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.Datasource.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.Datasource.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.Datasource.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.Datasource.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.Datasource.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.Datasource.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.Datasource.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.Datasource.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.Datasource.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.Datasource.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.Datasource.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.Datasource.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.Datasource.syncAfterModifyOrder=65
# If set, the connection to the database is tested.
#was.Datasource.testConnection=false
# Test Connection Order
#was.Datasource.testConnectionOrder=102
# Test Connection Script
#was.Datasource.testConnectionScript=was/datasource/test-datasource-connection.py
# Update Jaas Order
#was.Datasource.updateJaasOrder=101
# Update Jaas Script
#was.Datasource.updateJaasScript=was/jaas/update-jaas.py
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#was.Deployable.boundTemplates=null
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.DeployableContainer.boundTemplates=null
# Config directory name of WebSphere Application Server. (inherited from: was.BaseCell.configDirName)
#was.DeploymentManager.configDirName=config
# Deployeds To Discover (inherited from: was.BaseCell.deployedsToDiscover)
#was.DeploymentManager.deployedsToDiscover=was.VirtualHost,was.SharedLibrary
# Inspect script for Cell (inherited from: was.BaseCell.inspectScript)
#was.DeploymentManager.inspectScript=was/container/discover-inspect-topology.py
# List of scripts to appended to runtime script (inherited from: was.BaseCell.libraryScripts)
#was.DeploymentManager.libraryScripts=was/container/discover-inspect-topology-lib.py, was/container/container-lib.py
# TCP port which is used to login to the WebSphere Administration, defaults to 8880 for SA, 8879 for ND. Value of '0' has special meaning: it'used to suppress passing '-port' argument to wsadmin.
#was.DeploymentManager.port=0
# Propagate Global Plugin Order
#was.DeploymentManager.propagateGlobalPluginOrder=82
# Set to true to execute commands with the Python daemon (inherited from: was.BaseCell.runWithDaemon)
#was.DeploymentManager.runWithDaemon=true
# Update Global Plugin Order
#was.DeploymentManager.updateGlobalPluginOrder=81
# Update Global Plugin Script
#was.DeploymentManager.updateGlobalPluginScript=was/container/generate-global-plugin.py
# Use Jython 2.1
#was.DeploymentManager.useJython21=false
# Translated text of "Name" used to resolve version of WebSphere Application Server running in a non-English language. (inherited from: was.BaseCell.versionInfoNameField)
#was.DeploymentManager.versionInfoNameField=Name
# Additional Properties Not To Expose (inherited from: was.Datasource.additionalPropertiesNotToExpose)
#was.DerbyDatasource.additionalPropertiesNotToExpose=name,alias,containerManagedPersistence,description,jndiName,createJaasAlias,jdbcProvider,username,password,ConnectionPool,datasourceHelperClassname,customProperties,allowExistingJaasAlias,jaasAliasName,useJaasAliasForXaRecovery,useJaasAliasForContainerManagedAuthentication,mappingConfigAlias,testConnection,testConnectionScript,testConnectionOrder,updateJaasScript,updateJaasOrder
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Datasource.applyRestartStrategyOnNoop)
#was.DerbyDatasource.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Datasource.boundConfigurationItems)
#was.DerbyDatasource.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Datasource.containerRestartStrategy)
#was.DerbyDatasource.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.Datasource.createOrder)
#was.DerbyDatasource.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.Datasource.createScript)
#was.DerbyDatasource.createScript=was/datasource/create-or-modify-datasource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Datasource.createVerb)
#was.DerbyDatasource.createVerb=Create
# Specifies the data store helper class, an interface through which a datasource is triggered by a database to perform functions specific to that database vendor.
#was.DerbyDatasource.datasourceHelperClassname=com.ibm.websphere.rsadapter.DerbyDataStoreHelper
# The order in which a destroy step will be executed. (inherited from: was.Datasource.destroyOrder)
#was.DerbyDatasource.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.Datasource.destroyScript)
#was.DerbyDatasource.destroyScript=was/datasource/destroy-datasource.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Datasource.destroyVerb)
#was.DerbyDatasource.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Datasource.discoverOrder)
#was.DerbyDatasource.discoverOrder=50
# Discover Script
#was.DerbyDatasource.discoverScript=was/datasource/discover-inspect-derby-datasources.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Datasource.enableRippleStart)
#was.DerbyDatasource.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Datasource.exposeDeployedApplication)
#was.DerbyDatasource.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.Datasource.libraryScripts)
#was.DerbyDatasource.libraryScripts=was/common/config/set-encoding.py,was/datasource/datasource-lib.py,was/datasource/discover-inspect-datasource-lib.py,was/jaas/jaas-alias-lib.py
# The order in which a modify step will be executed. (inherited from: was.Datasource.modifyOrder)
#was.DerbyDatasource.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.Datasource.modifyScript)
#was.DerbyDatasource.modifyScript=was/datasource/create-or-modify-datasource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Datasource.modifyVerb)
#was.DerbyDatasource.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Datasource.noopOrder)
#was.DerbyDatasource.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Datasource.noopScript)
#was.DerbyDatasource.noopScript=null
# Noop Verb (inherited from: was.Datasource.noopVerb)
#was.DerbyDatasource.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Datasource.restartStrategy)
#was.DerbyDatasource.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Datasource.standardPropertiesNotToExpose)
#was.DerbyDatasource.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Datasource.startOrder)
#was.DerbyDatasource.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Datasource.startScript)
#was.DerbyDatasource.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Datasource.startVerb)
#was.DerbyDatasource.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Datasource.stopOrder)
#was.DerbyDatasource.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Datasource.stopScript)
#was.DerbyDatasource.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Datasource.stopVerb)
#was.DerbyDatasource.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Datasource.syncAfterCreateOrder)
#was.DerbyDatasource.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Datasource.syncAfterDestroyOrder)
#was.DerbyDatasource.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Datasource.syncAfterModifyOrder)
#was.DerbyDatasource.syncAfterModifyOrder=65
# Test Connection Order (inherited from: was.Datasource.testConnectionOrder)
#was.DerbyDatasource.testConnectionOrder=102
# Test Connection Script (inherited from: was.Datasource.testConnectionScript)
#was.DerbyDatasource.testConnectionScript=was/datasource/test-datasource-connection.py
# Update Jaas Order (inherited from: was.Datasource.updateJaasOrder)
#was.DerbyDatasource.updateJaasOrder=101
# Update Jaas Script (inherited from: was.Datasource.updateJaasScript)
#was.DerbyDatasource.updateJaasScript=was/jaas/update-jaas.py
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.DerbyDatasourceSpec.boundTemplates=null
# Target
#was.DmgrControlTaskParameters.target=DEPLOYMENT_MANAGER_AND_NODE_AGENTS
# The set of created CIs. (inherited from: was.BaseCluster.boundConfigurationItems)
#was.DynamicCluster.boundConfigurationItems=null
# The order in which a create step will be executed. (inherited from: was.BaseCluster.createOrder)
#was.DynamicCluster.createOrder=56
# Create Python Script
#was.DynamicCluster.createPythonScript=was/container/create-dynamic-cluster.py
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.BaseCluster.createScript)
#was.DynamicCluster.createScript=null
# The word that is used to prefix a step description for the create operation. (inherited from: was.BaseCluster.createVerb)
#was.DynamicCluster.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.BaseCluster.destroyOrder)
#was.DynamicCluster.destroyOrder=40
# Destroy Python Script
#was.DynamicCluster.destroyPythonScript=was/container/destroy-dynamic-cluster.py
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.BaseCluster.destroyScript)
#was.DynamicCluster.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.BaseCluster.destroyVerb)
#was.DynamicCluster.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.BaseCluster.discoverOrder)
#was.DynamicCluster.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.BaseCluster.exposeDeployedApplication)
#was.DynamicCluster.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.BaseCluster.libraryScripts)
#was.DynamicCluster.libraryScripts=null
# Choose the Maximum number of instances to have running when the dynamic cluster is activated,The Default is -1(Do not limit the number of instances that can start)
#was.DynamicCluster.maxInstances=-1
# Specify an expression that is used to define which nodes are used for the dynamic cluster.Ex:node_nodegroup = 'my_node_group'
#was.DynamicCluster.membershipPolicy=node_nodegroup = 'DefaultNodeGroup'
# Choose the minimum number of instances to have running when the dynamic cluster is activated,The Default is 1
#was.DynamicCluster.minInstances=1
# The order in which a modify step will be executed. (inherited from: was.BaseCluster.modifyOrder)
#was.DynamicCluster.modifyOrder=60
# Modify Python Script
#was.DynamicCluster.modifyPythonScript=was/container/modify-dynamic-cluster.py
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.BaseCluster.modifyScript)
#was.DynamicCluster.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.BaseCluster.modifyVerb)
#was.DynamicCluster.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.BaseCluster.noopOrder)
#was.DynamicCluster.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.BaseCluster.noopScript)
#was.DynamicCluster.noopScript=null
# Noop Verb (inherited from: was.BaseCluster.noopVerb)
#was.DynamicCluster.noopVerb=Noop
# If the nodes in the dynamic cluster have extra capacity, vertical stacking allows an application to make more effective use of the capacity by starting multiple instances on the same node,The Default is 0
#was.DynamicCluster.numVerticalInstances=0
# Specifies the level that the dynamic cluster interacts with the dynamic operations environment.
#was.DynamicCluster.operationalMode=MANUAL
# Restart Order (inherited from: was.BaseCluster.restartOrder)
#was.DynamicCluster.restartOrder=80
# Servers that are part of this cluster
#was.DynamicCluster.servers=null
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.BaseCluster.standardPropertiesNotToExpose)
#was.DynamicCluster.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.BaseCluster.startOrder)
#was.DynamicCluster.startOrder=80
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.BaseCluster.startScript)
#was.DynamicCluster.startScript=was/container/start-cluster.py
# The word that is used to prefix a step description for the start operation. (inherited from: was.BaseCluster.startVerb)
#was.DynamicCluster.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.BaseCluster.stopOrder)
#was.DynamicCluster.stopOrder=20
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.BaseCluster.stopScript)
#was.DynamicCluster.stopScript=was/container/stop-cluster.py
# The word that is used to prefix a step description for the stop operation. (inherited from: was.BaseCluster.stopVerb)
#was.DynamicCluster.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.BaseCluster.syncAfterCreateOrder)
#was.DynamicCluster.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.BaseCluster.syncAfterDestroyOrder)
#was.DynamicCluster.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.BaseCluster.syncAfterModifyOrder)
#was.DynamicCluster.syncAfterModifyOrder=65
# The set of CI templates. (inherited from: was.ClusterSpec.boundTemplates)
#was.DynamicClusterSpec.boundTemplates=null
# Choose the Maximum number of instances to have running when the dynamic cluster is activated,The Default is -1(Do not limit the number of instances that can start)
#was.DynamicClusterSpec.maxInstances=-1
# Specify an expression that is used to define which nodes are used for the dynamic cluster.Ex:node_nodegroup = 'my_node_group'
#was.DynamicClusterSpec.membershipPolicy=node_nodegroup = 'DefaultNodeGroup'
# Choose the minimum number of instances to have running when the dynamic cluster is activated,The Default is 1
#was.DynamicClusterSpec.minInstances=1
# If the nodes in the dynamic cluster have extra capacity, vertical stacking allows an application to make more effective use of the capacity by starting multiple instances on the same node,The Default is 0
#was.DynamicClusterSpec.numVerticalInstances=0
# Specifies the level that the dynamic cluster interacts with the dynamic operations environment.
#was.DynamicClusterSpec.operationalMode=MANUAL
# Server type. Possible values are: PROXY_SERVER, APPLICATION_SERVER, ONDEMAND_ROUTER. Default value: APPLICATION_SERVER. Available since: WAS_70
#was.DynamicClusterSpec.serverType=APPLICATION_SERVER
# Create Python Script
#was.DynamicOdrCluster.createPythonScript=was/container/create-dynamic-odr-cluster.py
# Destroy Python Script
#was.DynamicOdrCluster.destroyPythonScript=was/container/destroy-dynamic-cluster.py
# Choose the Maximum number of instances to have running when the dynamic ODR cluster is activated.
#was.DynamicOdrCluster.maxInstances=-1
# Specify an expression that is used to define which nodes are used for the dynamic ODR cluster.Ex:node_nodegroup = 'my_node_group'
#was.DynamicOdrCluster.membershipPolicy=node_nodegroup = 'DefaultNodeGroup'
# Choose the minimum number of instances to have running when the dynamic ODR cluster is activated.
#was.DynamicOdrCluster.minInstances=1
# Modify Python Script
#was.DynamicOdrCluster.modifyPythonScript=was/container/modify-dynamic-cluster.py
# The node group in which to create cluster members. Required for WAS_85
#was.DynamicOdrCluster.nodeGroupName=DefaultNodeGroup
# If the nodes in the dynamic ODR cluster have extra capacity, vertical stacking allows an application to make more effective use of the capacity by starting multiple instances on the same node.
#was.DynamicOdrCluster.numVerticalInstances=0
# Specifies the level that the dynamic cluster interacts with the dynamic operations environment.
#was.DynamicOdrCluster.operationalMode=MANUAL
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.DynamicSSLConfigSelection.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.DynamicSSLConfigSelection.boundConfigurationItems=null
# Specifies the protocol(s), host(s), and port target(s) of the outbound SSL configuration.
#was.DynamicSSLConfigSelection.connectionInformation=NONE
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.DynamicSSLConfigSelection.containerRestartStrategy=NONE
# The order in which a create step will be executed.
#was.DynamicSSLConfigSelection.createOrder=61
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.DynamicSSLConfigSelection.createScript=was/security/create-dynamic-ssl-config-selection.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.DynamicSSLConfigSelection.createVerb=Create
# The order in which a destroy step will be executed.
#was.DynamicSSLConfigSelection.destroyOrder=38
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.DynamicSSLConfigSelection.destroyScript=was/security/destroy-dynamic-ssl-config-selection.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.DynamicSSLConfigSelection.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Resource.discoverOrder)
#was.DynamicSSLConfigSelection.discoverOrder=50
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.DynamicSSLConfigSelection.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.DynamicSSLConfigSelection.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.Resource.libraryScripts)
#was.DynamicSSLConfigSelection.libraryScripts=null
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.DynamicSSLConfigSelection.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.DynamicSSLConfigSelection.modifyScript=was/security/modify-dynamic-ssl-config-selection.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.DynamicSSLConfigSelection.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.DynamicSSLConfigSelection.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.DynamicSSLConfigSelection.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.DynamicSSLConfigSelection.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.DynamicSSLConfigSelection.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.DynamicSSLConfigSelection.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.DynamicSSLConfigSelection.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.DynamicSSLConfigSelection.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.DynamicSSLConfigSelection.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.DynamicSSLConfigSelection.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.DynamicSSLConfigSelection.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.DynamicSSLConfigSelection.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.DynamicSSLConfigSelection.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.DynamicSSLConfigSelection.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.DynamicSSLConfigSelection.syncAfterModifyOrder=65
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.DynamicSSLConfigSelectionSpec.boundTemplates=null
# Additional Properties Not To Expose (inherited from: was.ServerConfigurationResource.additionalPropertiesNotToExpose)
#was.EJBContainer.additionalPropertiesNotToExpose=id,name,wasType,wasContainerTypes,defaultDiscoverName,customProperties,overwriteExistingValues,overwriteExistingCustomProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ServerConfigurationResource.applyRestartStrategyOnNoop)
#was.EJBContainer.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ServerConfigurationResource.boundConfigurationItems)
#was.EJBContainer.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ServerConfigurationResource.containerRestartStrategy)
#was.EJBContainer.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ServerConfigurationResource.createOrder)
#was.EJBContainer.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ServerConfigurationResource.createScript)
#was.EJBContainer.createScript=was/server/modify-config-resource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.ServerConfigurationResource.createVerb)
#was.EJBContainer.createVerb=Configure
# Default deployed name to be assigned to the CI when discovered.
#was.EJBContainer.defaultDiscoverName=EJBContainer
# The order in which a destroy step will be executed. (inherited from: was.ServerConfigurationResource.destroyOrder)
#was.EJBContainer.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ServerConfigurationResource.destroyScript)
#was.EJBContainer.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ServerConfigurationResource.destroyVerb)
#was.EJBContainer.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ServerConfigurationResource.discoverOrder)
#was.EJBContainer.discoverOrder=50
# Discover Script (inherited from: was.ServerConfigurationResource.discoverScript)
#was.EJBContainer.discoverScript=was/server/discover-inspect-config-resource.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ServerConfigurationResource.enableRippleStart)
#was.EJBContainer.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ServerConfigurationResource.exposeDeployedApplication)
#was.EJBContainer.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ServerConfigurationResource.libraryScripts)
#was.EJBContainer.libraryScripts=was/common/config/set-encoding.py,was/server/config-resource-lib.py
# The order in which a modify step will be executed. (inherited from: was.ServerConfigurationResource.modifyOrder)
#was.EJBContainer.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ServerConfigurationResource.modifyScript)
#was.EJBContainer.modifyScript=was/server/modify-config-resource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ServerConfigurationResource.modifyVerb)
#was.EJBContainer.modifyVerb=Configure
# The order of the step in the step list for the noop operation. (inherited from: was.ServerConfigurationResource.noopOrder)
#was.EJBContainer.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ServerConfigurationResource.noopScript)
#was.EJBContainer.noopScript=null
# Noop Verb (inherited from: was.ServerConfigurationResource.noopVerb)
#was.EJBContainer.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ServerConfigurationResource.restartStrategy)
#was.EJBContainer.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ServerConfigurationResource.standardPropertiesNotToExpose)
#was.EJBContainer.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ServerConfigurationResource.startOrder)
#was.EJBContainer.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ServerConfigurationResource.startScript)
#was.EJBContainer.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ServerConfigurationResource.startVerb)
#was.EJBContainer.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ServerConfigurationResource.stopOrder)
#was.EJBContainer.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ServerConfigurationResource.stopScript)
#was.EJBContainer.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ServerConfigurationResource.stopVerb)
#was.EJBContainer.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterCreateOrder)
#was.EJBContainer.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterDestroyOrder)
#was.EJBContainer.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterModifyOrder)
#was.EJBContainer.syncAfterModifyOrder=65
# List of container types on which the resource should be discovered. (inherited from: was.ServerConfigurationResource.wasContainerTypes)
#was.EJBContainer.wasContainerTypes=Server
# WebSphere admin resource type.
#was.EJBContainer.wasType=EJBContainer
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.EJBContainerSpec.boundTemplates=null
# The set of CI templates. (inherited from: jee.Ear.boundTemplates)
#was.Ear.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: jee.Ear.delimiters)
#was.Ear.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: jee.Ear.textFileNamesRegex)
#was.Ear.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: was.Module.boundConfigurationItems)
#was.EarModule.boundConfigurationItems=null
# The order in which a create step for Editioned application will be executed(was85nd only). (inherited from: was.Module.createEditionedOrder)
#was.EarModule.createEditionedOrder=10
# The order in which a create step will be executed. (inherited from: was.Module.createOrder)
#was.EarModule.createOrder=70
# Python wsadmin script invoked to create a Java EE artifact. (inherited from: was.Module.createScript)
#was.EarModule.createScript=was/application/deploy-application.py
# The word is used to prefix a step description for the create operation. (inherited from: was.Module.createVerb)
#was.EarModule.createVerb=Deploy
# The order in which a destroy step will be executed. (inherited from: was.Module.destroyOrder)
#was.EarModule.destroyOrder=30
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.Module.destroyScript)
#was.EarModule.destroyScript=was/application/undeploy-application.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Module.destroyVerb)
#was.EarModule.destroyVerb=Undeploy
# Specify to disable JSP runtime compilation. Values: 'Yes', 'No'(default).
#was.EarModule.disableJspRuntimeCompilation=No
# The order in which a discover step will be executed. (inherited from: was.Module.discoverOrder)
#was.EarModule.discoverOrder=50
# Discover Script
#was.EarModule.discoverScript=was/application/discover-inspect-ear-module.py
# Specify JSP reloading for Web modules.
#was.EarModule.enableJspClassReloading=true
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Module.enableRippleStart)
#was.EarModule.enableRippleStart=false
# Specify JSP reloading workaround for J2EE4 for Websphere 7.
#was.EarModule.enableWorkaroundForJavaEE4inWAS7=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Module.exposeDeployedApplication)
#was.EarModule.exposeDeployedApplication=false
# Specify JDK source level.
#was.EarModule.jdkSourceLevel=15
# Specify JSP precompiler classpath.
#was.EarModule.jspClassPath=jspcp
# The JSP reload interval in seconds. Only applicable if 'enableJspClassReloading' is set.
#was.EarModule.jspReloadInterval=10
# List of scripts to be appended to the deployed's runtime script (inherited from: was.Module.libraryScripts)
#was.EarModule.libraryScripts=was/common/config/set-encoding.py,was/application/discover-app-module-lib.py,was/application/deploy-application-lib.py
# The order in which a modify step will be executed. (inherited from: was.Module.modifyOrder)
#was.EarModule.modifyOrder=70
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.Module.modifyScript)
#was.EarModule.modifyScript=null
# The word is used to prefix a step description for the modify operation. (inherited from: was.Module.modifyVerb)
#was.EarModule.modifyVerb=Update
# The order of the step in the step list for the noop operation. (inherited from: was.Module.noopOrder)
#was.EarModule.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Module.noopScript)
#was.EarModule.noopScript=null
# Noop Verb (inherited from: was.Module.noopVerb)
#was.EarModule.noopVerb=Noop
# Specify whether to precompile JavaServer Pages (JSP) files as a part of installation. The default is not to precompile JSP files.
#was.EarModule.preCompileJsps=false
# Number of retry attempts to check if an application has been distributed before attempting the application start. (inherited from: was.Module.retryAttemptsForAppReadyCheck)
#was.EarModule.retryAttemptsForAppReadyCheck=6
# The order in which a rollout step will be executed. (inherited from: was.Module.rolloutEditionedOrder)
#was.EarModule.rolloutEditionedOrder=20
# Python wsadmin script invoked to perform rollout. (inherited from: was.Module.rolloutEditionedScript)
#was.EarModule.rolloutEditionedScript=was/application/rollout-edition.py
# The word that is used to prefix a step description for the rollout operation. (inherited from: was.Module.rolloutEditionedVerb)
#was.EarModule.rolloutEditionedVerb=Rollout
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Module.standardPropertiesNotToExpose)
#was.EarModule.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Module.startOrder)
#was.EarModule.startOrder=90
# Python wsadmin script invoked to start running a Java EE artifact. (inherited from: was.Module.startScript)
#was.EarModule.startScript=was/application/start-application.py
# The word that is used to prefix a step description for the start operation. (inherited from: was.Module.startVerb)
#was.EarModule.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Module.stopOrder)
#was.EarModule.stopOrder=10
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Module.stopScript)
#was.EarModule.stopScript=was/application/stop-application.py
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Module.stopVerb)
#was.EarModule.stopVerb=Stop
# The order in which a synchronize after create step for Editioned application will be executed. (inherited from: was.Module.syncAfterCreateEditionedOrder)
#was.EarModule.syncAfterCreateEditionedOrder=11
# The order in which a synchronize after create step will be executed. (inherited from: was.Module.syncAfterCreateOrder)
#was.EarModule.syncAfterCreateOrder=75
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Module.syncAfterDestroyOrder)
#was.EarModule.syncAfterDestroyOrder=35
# The order in which a synchronize after modify step will be executed. (inherited from: was.Module.syncAfterModifyOrder)
#was.EarModule.syncAfterModifyOrder=75
# Update strategy used to select behaviour for update app. valid values are true and false. false will create steps undeploy and deploy, true will create step update only. 
#was.EarModule.updateStrategy=false
# Specify to use full package names in JSPs. Values: 'Yes'(default), 'No'.
#was.EarModule.useFullPackageNames=Yes
# The set of CI templates. (inherited from: jee.EjbJar.boundTemplates)
#was.EjbJar.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: jee.EjbJar.delimiters)
#was.EjbJar.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: jee.EjbJar.textFileNamesRegex)
#was.EjbJar.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: was.Module.boundConfigurationItems)
#was.EjbModule.boundConfigurationItems=null
# The order in which a create step for Editioned application will be executed(was85nd only). (inherited from: was.Module.createEditionedOrder)
#was.EjbModule.createEditionedOrder=10
# The order in which a create step will be executed. (inherited from: was.Module.createOrder)
#was.EjbModule.createOrder=70
# Python wsadmin script invoked to create a Java EE artifact. (inherited from: was.Module.createScript)
#was.EjbModule.createScript=was/application/deploy-application.py
# The word is used to prefix a step description for the create operation. (inherited from: was.Module.createVerb)
#was.EjbModule.createVerb=Deploy
# The order in which a destroy step will be executed. (inherited from: was.Module.destroyOrder)
#was.EjbModule.destroyOrder=30
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.Module.destroyScript)
#was.EjbModule.destroyScript=was/application/undeploy-application.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Module.destroyVerb)
#was.EjbModule.destroyVerb=Undeploy
# The order in which a discover step will be executed. (inherited from: was.Module.discoverOrder)
#was.EjbModule.discoverOrder=50
# Discover Script
#was.EjbModule.discoverScript=was/application/discover-inspect-ejb-module.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Module.enableRippleStart)
#was.EjbModule.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Module.exposeDeployedApplication)
#was.EjbModule.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.Module.libraryScripts)
#was.EjbModule.libraryScripts=was/common/config/set-encoding.py,was/application/discover-app-module-lib.py,was/application/deploy-application-lib.py
# The order in which a modify step will be executed. (inherited from: was.Module.modifyOrder)
#was.EjbModule.modifyOrder=70
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.Module.modifyScript)
#was.EjbModule.modifyScript=null
# The word is used to prefix a step description for the modify operation. (inherited from: was.Module.modifyVerb)
#was.EjbModule.modifyVerb=Update
# The order of the step in the step list for the noop operation. (inherited from: was.Module.noopOrder)
#was.EjbModule.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Module.noopScript)
#was.EjbModule.noopScript=null
# Noop Verb (inherited from: was.Module.noopVerb)
#was.EjbModule.noopVerb=Noop
# Number of retry attempts to check if an application has been distributed before attempting the application start. (inherited from: was.Module.retryAttemptsForAppReadyCheck)
#was.EjbModule.retryAttemptsForAppReadyCheck=6
# The order in which a rollout step will be executed. (inherited from: was.Module.rolloutEditionedOrder)
#was.EjbModule.rolloutEditionedOrder=20
# Python wsadmin script invoked to perform rollout. (inherited from: was.Module.rolloutEditionedScript)
#was.EjbModule.rolloutEditionedScript=was/application/rollout-edition.py
# The word that is used to prefix a step description for the rollout operation. (inherited from: was.Module.rolloutEditionedVerb)
#was.EjbModule.rolloutEditionedVerb=Rollout
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Module.standardPropertiesNotToExpose)
#was.EjbModule.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Module.startOrder)
#was.EjbModule.startOrder=90
# Python wsadmin script invoked to start running a Java EE artifact. (inherited from: was.Module.startScript)
#was.EjbModule.startScript=was/application/start-application.py
# The word that is used to prefix a step description for the start operation. (inherited from: was.Module.startVerb)
#was.EjbModule.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Module.stopOrder)
#was.EjbModule.stopOrder=10
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Module.stopScript)
#was.EjbModule.stopScript=was/application/stop-application.py
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Module.stopVerb)
#was.EjbModule.stopVerb=Stop
# The order in which a synchronize after create step for Editioned application will be executed. (inherited from: was.Module.syncAfterCreateEditionedOrder)
#was.EjbModule.syncAfterCreateEditionedOrder=11
# The order in which a synchronize after create step will be executed. (inherited from: was.Module.syncAfterCreateOrder)
#was.EjbModule.syncAfterCreateOrder=75
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Module.syncAfterDestroyOrder)
#was.EjbModule.syncAfterDestroyOrder=35
# The order in which a synchronize after modify step will be executed. (inherited from: was.Module.syncAfterModifyOrder)
#was.EjbModule.syncAfterModifyOrder=75
# Additional Properties Not To Expose (inherited from: was.ConfigResource.additionalPropertiesNotToExpose)
#was.EjbNameSpaceBinding.additionalPropertiesNotToExpose=wasType,provider,providerType,customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ConfigResource.applyRestartStrategyOnNoop)
#was.EjbNameSpaceBinding.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ConfigResource.boundConfigurationItems)
#was.EjbNameSpaceBinding.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ConfigResource.containerRestartStrategy)
#was.EjbNameSpaceBinding.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ConfigResource.createOrder)
#was.EjbNameSpaceBinding.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ConfigResource.createScript)
#was.EjbNameSpaceBinding.createScript=was/common/config/create-or-modify-resource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.ConfigResource.createVerb)
#was.EjbNameSpaceBinding.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.ConfigResource.destroyOrder)
#was.EjbNameSpaceBinding.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ConfigResource.destroyScript)
#was.EjbNameSpaceBinding.destroyScript=was/common/config/destroy-resource.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ConfigResource.destroyVerb)
#was.EjbNameSpaceBinding.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ConfigResource.discoverOrder)
#was.EjbNameSpaceBinding.discoverOrder=50
# Discover Script (inherited from: was.ConfigResource.discoverScript)
#was.EjbNameSpaceBinding.discoverScript=was/common/config/discover-inspect-resource.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ConfigResource.enableRippleStart)
#was.EjbNameSpaceBinding.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ConfigResource.exposeDeployedApplication)
#was.EjbNameSpaceBinding.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ConfigResource.libraryScripts)
#was.EjbNameSpaceBinding.libraryScripts=was/common/config/set-encoding.py,was/common/config/admin-config-lib.py
# The order in which a modify step will be executed. (inherited from: was.ConfigResource.modifyOrder)
#was.EjbNameSpaceBinding.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ConfigResource.modifyScript)
#was.EjbNameSpaceBinding.modifyScript=was/common/config/create-or-modify-resource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ConfigResource.modifyVerb)
#was.EjbNameSpaceBinding.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.ConfigResource.noopOrder)
#was.EjbNameSpaceBinding.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ConfigResource.noopScript)
#was.EjbNameSpaceBinding.noopScript=null
# Noop Verb (inherited from: was.ConfigResource.noopVerb)
#was.EjbNameSpaceBinding.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ConfigResource.restartStrategy)
#was.EjbNameSpaceBinding.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ConfigResource.standardPropertiesNotToExpose)
#was.EjbNameSpaceBinding.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ConfigResource.startOrder)
#was.EjbNameSpaceBinding.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ConfigResource.startScript)
#was.EjbNameSpaceBinding.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ConfigResource.startVerb)
#was.EjbNameSpaceBinding.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ConfigResource.stopOrder)
#was.EjbNameSpaceBinding.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ConfigResource.stopScript)
#was.EjbNameSpaceBinding.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ConfigResource.stopVerb)
#was.EjbNameSpaceBinding.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ConfigResource.syncAfterCreateOrder)
#was.EjbNameSpaceBinding.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ConfigResource.syncAfterDestroyOrder)
#was.EjbNameSpaceBinding.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ConfigResource.syncAfterModifyOrder)
#was.EjbNameSpaceBinding.syncAfterModifyOrder=65
# WebSphere admin resource type.
#was.EjbNameSpaceBinding.wasType=EjbNameSpaceBinding
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.EjbNameSpaceBindingSpec.boundTemplates=null
# Specifies the order in which modules are started when the server starts. The module with the lowest starting weight is started first.
#was.EmbeddedEjbModule.startingWeight=1
# Specify to disable JSP runtime compilation. Values: 'Yes', 'No'(default).
#was.EmbeddedWebModule.disableJspRuntimeCompilation=No
# Specify JSP reloading for Web modules.
#was.EmbeddedWebModule.enableJspClassReloading=true
# Specify JSP reloading workaround for J2EE4 for Websphere 7.
#was.EmbeddedWebModule.enableWorkaroundForJavaEE4inWAS7=false
# Specify JDK source level.
#was.EmbeddedWebModule.jdkSourceLevel=15
# Specify JSP precompiler classpath.
#was.EmbeddedWebModule.jspClassPath=jspcp
# The JSP reload interval in seconds. Only applicable if 'enableJspClassReloading' is set.
#was.EmbeddedWebModule.jspReloadInterval=10
# Specify whether to precompile JavaServer Pages (JSP) files as a part of installation. The default is not to precompile JSP files.
#was.EmbeddedWebModule.preCompileJsps=false
# Specifies the order in which modules are started when the server starts. The module with the lowest starting weight is started first.
#was.EmbeddedWebModule.startingWeight=1
# Specify to use full package names in JSPs. Values: 'Yes'(default), 'No'.
#was.EmbeddedWebModule.useFullPackageNames=Yes
# When true, the restart strategy is apply for a NOOP operation
#was.ExtensibleDeployed.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: python.PythonManagedDeployed.boundConfigurationItems)
#was.ExtensibleDeployed.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container.
#was.ExtensibleDeployed.containerRestartStrategy=NONE
# The order in which a create step will be executed.
#was.ExtensibleDeployed.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.ExtensibleDeployed.createScript=null
# The word that is used to prefix a step description for the create operation.
#was.ExtensibleDeployed.createVerb=Create
# The order in which a destroy step will be executed.
#was.ExtensibleDeployed.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.ExtensibleDeployed.destroyScript=null
# The word that is used to prefix a step description for the destroy operation.
#was.ExtensibleDeployed.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: python.PythonManagedDeployed.discoverOrder)
#was.ExtensibleDeployed.discoverOrder=50
# If set, each server in the cluster will be first stopped and restarted sequentially.
#was.ExtensibleDeployed.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: python.PythonManagedDeployed.exposeDeployedApplication)
#was.ExtensibleDeployed.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: python.PythonManagedDeployed.libraryScripts)
#was.ExtensibleDeployed.libraryScripts=null
# The order in which a modify step will be executed.
#was.ExtensibleDeployed.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.ExtensibleDeployed.modifyScript=null
# The word that is used to prefix a step description for the modify operation.
#was.ExtensibleDeployed.modifyVerb=Modify
# The order of the step in the step list for the noop operation.
#was.ExtensibleDeployed.noopOrder=50
# Python script invoked for the noop operation.
#was.ExtensibleDeployed.noopScript=null
# Noop Verb
#was.ExtensibleDeployed.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start.
#was.ExtensibleDeployed.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script.
#was.ExtensibleDeployed.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed.
#was.ExtensibleDeployed.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource
#was.ExtensibleDeployed.startScript=null
# The word that is used to prefix a step description for the start operation.
#was.ExtensibleDeployed.startVerb=Start
# The order in which a stop step will be executed.
#was.ExtensibleDeployed.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource
#was.ExtensibleDeployed.stopScript=null
# The word that is used to prefix a step description for the stop operation.
#was.ExtensibleDeployed.stopVerb=Stop
# The order in which a synchronize after create step will be executed.
#was.ExtensibleDeployed.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed.
#was.ExtensibleDeployed.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed.
#was.ExtensibleDeployed.syncAfterModifyOrder=65
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ExtensibleDeployed.applyRestartStrategyOnNoop)
#was.ExtensibleDeployedArtifact.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ExtensibleDeployed.boundConfigurationItems)
#was.ExtensibleDeployedArtifact.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ExtensibleDeployed.containerRestartStrategy)
#was.ExtensibleDeployedArtifact.containerRestartStrategy=NONE
# The order in which a create step for Editioned application will be executed(was85nd only).
#was.ExtensibleDeployedArtifact.createEditionedOrder=10
# The order in which a create step will be executed. (inherited from: was.ExtensibleDeployed.createOrder)
#was.ExtensibleDeployedArtifact.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ExtensibleDeployed.createScript)
#was.ExtensibleDeployedArtifact.createScript=null
# The word that is used to prefix a step description for the create operation. (inherited from: was.ExtensibleDeployed.createVerb)
#was.ExtensibleDeployedArtifact.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.ExtensibleDeployed.destroyOrder)
#was.ExtensibleDeployedArtifact.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ExtensibleDeployed.destroyScript)
#was.ExtensibleDeployedArtifact.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ExtensibleDeployed.destroyVerb)
#was.ExtensibleDeployedArtifact.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ExtensibleDeployed.discoverOrder)
#was.ExtensibleDeployedArtifact.discoverOrder=50
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ExtensibleDeployed.enableRippleStart)
#was.ExtensibleDeployedArtifact.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ExtensibleDeployed.exposeDeployedApplication)
#was.ExtensibleDeployedArtifact.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ExtensibleDeployed.libraryScripts)
#was.ExtensibleDeployedArtifact.libraryScripts=null
# The order in which a modify step will be executed. (inherited from: was.ExtensibleDeployed.modifyOrder)
#was.ExtensibleDeployedArtifact.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ExtensibleDeployed.modifyScript)
#was.ExtensibleDeployedArtifact.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ExtensibleDeployed.modifyVerb)
#was.ExtensibleDeployedArtifact.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.ExtensibleDeployed.noopOrder)
#was.ExtensibleDeployedArtifact.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ExtensibleDeployed.noopScript)
#was.ExtensibleDeployedArtifact.noopScript=null
# Noop Verb (inherited from: was.ExtensibleDeployed.noopVerb)
#was.ExtensibleDeployedArtifact.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ExtensibleDeployed.restartStrategy)
#was.ExtensibleDeployedArtifact.restartStrategy=STOP_START
# The order in which a rollout step will be executed.
#was.ExtensibleDeployedArtifact.rolloutEditionedOrder=20
# Python script invoked to rollout a Java EE artifact.
#was.ExtensibleDeployedArtifact.rolloutEditionedScript=null
# The word that is used to prefix a step description for the rollout operation.
#was.ExtensibleDeployedArtifact.rolloutEditionedVerb=Rollout
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ExtensibleDeployed.standardPropertiesNotToExpose)
#was.ExtensibleDeployedArtifact.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ExtensibleDeployed.startOrder)
#was.ExtensibleDeployedArtifact.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ExtensibleDeployed.startScript)
#was.ExtensibleDeployedArtifact.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ExtensibleDeployed.startVerb)
#was.ExtensibleDeployedArtifact.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ExtensibleDeployed.stopOrder)
#was.ExtensibleDeployedArtifact.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ExtensibleDeployed.stopScript)
#was.ExtensibleDeployedArtifact.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ExtensibleDeployed.stopVerb)
#was.ExtensibleDeployedArtifact.stopVerb=Stop
# The order in which a synchronize after create step for Editioned application will be executed.
#was.ExtensibleDeployedArtifact.syncAfterCreateEditionedOrder=11
# The order in which a synchronize after create step will be executed. (inherited from: was.ExtensibleDeployed.syncAfterCreateOrder)
#was.ExtensibleDeployedArtifact.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ExtensibleDeployed.syncAfterDestroyOrder)
#was.ExtensibleDeployedArtifact.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ExtensibleDeployed.syncAfterModifyOrder)
#was.ExtensibleDeployedArtifact.syncAfterModifyOrder=65
# When true, the restart strategy is apply for a NOOP operation
#was.ExtensibleDeployedContainer.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: python.PythonManagedDeployedContainer.boundConfigurationItems)
#was.ExtensibleDeployedContainer.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container.
#was.ExtensibleDeployedContainer.containerRestartStrategy=NONE
# The order in which a create step will be executed.
#was.ExtensibleDeployedContainer.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.ExtensibleDeployedContainer.createScript=null
# The word that is used to prefix a step description for the create operation.
#was.ExtensibleDeployedContainer.createVerb=Create
# The order in which a destroy step will be executed.
#was.ExtensibleDeployedContainer.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.ExtensibleDeployedContainer.destroyScript=null
# The word that is used to prefix a step description for the destroy operation.
#was.ExtensibleDeployedContainer.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: python.PythonManagedDeployedContainer.discoverOrder)
#was.ExtensibleDeployedContainer.discoverOrder=50
# If set, each server in the cluster will be first stopped and restarted sequentially.
#was.ExtensibleDeployedContainer.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: python.PythonManagedDeployedContainer.exposeDeployedApplication)
#was.ExtensibleDeployedContainer.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: python.PythonManagedDeployedContainer.libraryScripts)
#was.ExtensibleDeployedContainer.libraryScripts=null
# The order in which a modify step will be executed.
#was.ExtensibleDeployedContainer.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.ExtensibleDeployedContainer.modifyScript=null
# The word that is used to prefix a step description for the modify operation.
#was.ExtensibleDeployedContainer.modifyVerb=Modify
# The order of the step in the step list for the noop operation.
#was.ExtensibleDeployedContainer.noopOrder=50
# Python script invoked for the noop operation.
#was.ExtensibleDeployedContainer.noopScript=null
# Noop Verb
#was.ExtensibleDeployedContainer.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start.
#was.ExtensibleDeployedContainer.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script.
#was.ExtensibleDeployedContainer.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed.
#was.ExtensibleDeployedContainer.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource
#was.ExtensibleDeployedContainer.startScript=null
# The word that is used to prefix a step description for the start operation.
#was.ExtensibleDeployedContainer.startVerb=Start
# The order in which a stop step will be executed.
#was.ExtensibleDeployedContainer.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource
#was.ExtensibleDeployedContainer.stopScript=null
# The word that is used to prefix a step description for the stop operation.
#was.ExtensibleDeployedContainer.stopVerb=Stop
# The order in which a synchronize after create step will be executed.
#was.ExtensibleDeployedContainer.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed.
#was.ExtensibleDeployedContainer.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed.
#was.ExtensibleDeployedContainer.syncAfterModifyOrder=65
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ExtensibleDeployed.applyRestartStrategyOnNoop)
#was.ExtensibleDeployedResource.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ExtensibleDeployed.boundConfigurationItems)
#was.ExtensibleDeployedResource.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ExtensibleDeployed.containerRestartStrategy)
#was.ExtensibleDeployedResource.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ExtensibleDeployed.createOrder)
#was.ExtensibleDeployedResource.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ExtensibleDeployed.createScript)
#was.ExtensibleDeployedResource.createScript=null
# The word that is used to prefix a step description for the create operation. (inherited from: was.ExtensibleDeployed.createVerb)
#was.ExtensibleDeployedResource.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.ExtensibleDeployed.destroyOrder)
#was.ExtensibleDeployedResource.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ExtensibleDeployed.destroyScript)
#was.ExtensibleDeployedResource.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ExtensibleDeployed.destroyVerb)
#was.ExtensibleDeployedResource.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ExtensibleDeployed.discoverOrder)
#was.ExtensibleDeployedResource.discoverOrder=50
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ExtensibleDeployed.enableRippleStart)
#was.ExtensibleDeployedResource.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ExtensibleDeployed.exposeDeployedApplication)
#was.ExtensibleDeployedResource.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ExtensibleDeployed.libraryScripts)
#was.ExtensibleDeployedResource.libraryScripts=null
# The order in which a modify step will be executed. (inherited from: was.ExtensibleDeployed.modifyOrder)
#was.ExtensibleDeployedResource.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ExtensibleDeployed.modifyScript)
#was.ExtensibleDeployedResource.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ExtensibleDeployed.modifyVerb)
#was.ExtensibleDeployedResource.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.ExtensibleDeployed.noopOrder)
#was.ExtensibleDeployedResource.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ExtensibleDeployed.noopScript)
#was.ExtensibleDeployedResource.noopScript=null
# Noop Verb (inherited from: was.ExtensibleDeployed.noopVerb)
#was.ExtensibleDeployedResource.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ExtensibleDeployed.restartStrategy)
#was.ExtensibleDeployedResource.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ExtensibleDeployed.standardPropertiesNotToExpose)
#was.ExtensibleDeployedResource.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ExtensibleDeployed.startOrder)
#was.ExtensibleDeployedResource.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ExtensibleDeployed.startScript)
#was.ExtensibleDeployedResource.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ExtensibleDeployed.startVerb)
#was.ExtensibleDeployedResource.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ExtensibleDeployed.stopOrder)
#was.ExtensibleDeployedResource.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ExtensibleDeployed.stopScript)
#was.ExtensibleDeployedResource.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ExtensibleDeployed.stopVerb)
#was.ExtensibleDeployedResource.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ExtensibleDeployed.syncAfterCreateOrder)
#was.ExtensibleDeployedResource.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ExtensibleDeployed.syncAfterDestroyOrder)
#was.ExtensibleDeployedResource.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ExtensibleDeployed.syncAfterModifyOrder)
#was.ExtensibleDeployedResource.syncAfterModifyOrder=65
# Additional Properties Not To Expose (inherited from: was.NodeConfigurationResource.additionalPropertiesNotToExpose)
#was.FileSynchronizationService.additionalPropertiesNotToExpose=id,name,wasType,wasContainerTypes,defaultDiscoverName,customProperties,overwriteExistingValues,overwriteExistingCustomProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.NodeConfigurationResource.applyRestartStrategyOnNoop)
#was.FileSynchronizationService.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.NodeConfigurationResource.boundConfigurationItems)
#was.FileSynchronizationService.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.NodeConfigurationResource.containerRestartStrategy)
#was.FileSynchronizationService.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.NodeConfigurationResource.createOrder)
#was.FileSynchronizationService.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.NodeConfigurationResource.createScript)
#was.FileSynchronizationService.createScript=was/server/modify-config-resource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.NodeConfigurationResource.createVerb)
#was.FileSynchronizationService.createVerb=Configure
# Default deployed name to be assigned to the CI when discovered.
#was.FileSynchronizationService.defaultDiscoverName=FileSynchronizationService
# The order in which a destroy step will be executed. (inherited from: was.NodeConfigurationResource.destroyOrder)
#was.FileSynchronizationService.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.NodeConfigurationResource.destroyScript)
#was.FileSynchronizationService.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.NodeConfigurationResource.destroyVerb)
#was.FileSynchronizationService.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.NodeConfigurationResource.discoverOrder)
#was.FileSynchronizationService.discoverOrder=50
# Discover Script (inherited from: was.NodeConfigurationResource.discoverScript)
#was.FileSynchronizationService.discoverScript=was/server/discover-inspect-config-resource.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.NodeConfigurationResource.enableRippleStart)
#was.FileSynchronizationService.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.NodeConfigurationResource.exposeDeployedApplication)
#was.FileSynchronizationService.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.NodeConfigurationResource.libraryScripts)
#was.FileSynchronizationService.libraryScripts=was/common/config/set-encoding.py,was/server/config-resource-lib.py
# The order in which a modify step will be executed. (inherited from: was.NodeConfigurationResource.modifyOrder)
#was.FileSynchronizationService.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.NodeConfigurationResource.modifyScript)
#was.FileSynchronizationService.modifyScript=was/server/modify-config-resource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.NodeConfigurationResource.modifyVerb)
#was.FileSynchronizationService.modifyVerb=Configure
# The order of the step in the step list for the noop operation. (inherited from: was.NodeConfigurationResource.noopOrder)
#was.FileSynchronizationService.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.NodeConfigurationResource.noopScript)
#was.FileSynchronizationService.noopScript=null
# Noop Verb (inherited from: was.NodeConfigurationResource.noopVerb)
#was.FileSynchronizationService.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.NodeConfigurationResource.restartStrategy)
#was.FileSynchronizationService.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.NodeConfigurationResource.standardPropertiesNotToExpose)
#was.FileSynchronizationService.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.NodeConfigurationResource.startOrder)
#was.FileSynchronizationService.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.NodeConfigurationResource.startScript)
#was.FileSynchronizationService.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.NodeConfigurationResource.startVerb)
#was.FileSynchronizationService.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.NodeConfigurationResource.stopOrder)
#was.FileSynchronizationService.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.NodeConfigurationResource.stopScript)
#was.FileSynchronizationService.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.NodeConfigurationResource.stopVerb)
#was.FileSynchronizationService.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.NodeConfigurationResource.syncAfterCreateOrder)
#was.FileSynchronizationService.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.NodeConfigurationResource.syncAfterDestroyOrder)
#was.FileSynchronizationService.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.NodeConfigurationResource.syncAfterModifyOrder)
#was.FileSynchronizationService.syncAfterModifyOrder=65
# List of container types on which the resource should be discovered. (inherited from: was.NodeConfigurationResource.wasContainerTypes)
#was.FileSynchronizationService.wasContainerTypes=Node
# WebSphere admin resource type.
#was.FileSynchronizationService.wasType=ConfigSynchronizationService
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.FileSynchronizationServiceSpec.boundTemplates=null
# Additional Properties Not To Expose
#was.GenericJmsConnectionFactory.additionalPropertiesNotToExpose=genericJmsDestinationType,provider,wasType,containerAuthDataAlias,mappingConfigAlias,ConnectionPool,SessionPool,customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.JmsConnectionFactory.applyRestartStrategyOnNoop)
#was.GenericJmsConnectionFactory.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.JmsConnectionFactory.boundConfigurationItems)
#was.GenericJmsConnectionFactory.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.JmsConnectionFactory.containerRestartStrategy)
#was.GenericJmsConnectionFactory.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.JmsConnectionFactory.createOrder)
#was.GenericJmsConnectionFactory.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.GenericJmsConnectionFactory.createScript=was/jms/generic/create-generic-connection-factory.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.JmsConnectionFactory.createVerb)
#was.GenericJmsConnectionFactory.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.JmsConnectionFactory.destroyOrder)
#was.GenericJmsConnectionFactory.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.GenericJmsConnectionFactory.destroyScript=was/jms/generic/destroy-generic-jms-object.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.JmsConnectionFactory.destroyVerb)
#was.GenericJmsConnectionFactory.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.JmsConnectionFactory.discoverOrder)
#was.GenericJmsConnectionFactory.discoverOrder=50
# Discover Script
#was.GenericJmsConnectionFactory.discoverScript=was/jms/generic/discover-inspect-generic-connection-factory.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.JmsConnectionFactory.enableRippleStart)
#was.GenericJmsConnectionFactory.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.JmsConnectionFactory.exposeDeployedApplication)
#was.GenericJmsConnectionFactory.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#was.GenericJmsConnectionFactory.libraryScripts=was/common/config/set-encoding.py,was/jms/generic/generic-connection-factory-lib.py,was/jms/jms-connection-factory-lib.py,was/jms/jms-object-lib.py
# The order in which a modify step will be executed. (inherited from: was.JmsConnectionFactory.modifyOrder)
#was.GenericJmsConnectionFactory.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.GenericJmsConnectionFactory.modifyScript=was/jms/generic/modify-generic-connection-factory.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.JmsConnectionFactory.modifyVerb)
#was.GenericJmsConnectionFactory.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.JmsConnectionFactory.noopOrder)
#was.GenericJmsConnectionFactory.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.JmsConnectionFactory.noopScript)
#was.GenericJmsConnectionFactory.noopScript=null
# Noop Verb (inherited from: was.JmsConnectionFactory.noopVerb)
#was.GenericJmsConnectionFactory.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.JmsConnectionFactory.restartStrategy)
#was.GenericJmsConnectionFactory.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.JmsConnectionFactory.standardPropertiesNotToExpose)
#was.GenericJmsConnectionFactory.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.JmsConnectionFactory.startOrder)
#was.GenericJmsConnectionFactory.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.JmsConnectionFactory.startScript)
#was.GenericJmsConnectionFactory.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.JmsConnectionFactory.startVerb)
#was.GenericJmsConnectionFactory.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.JmsConnectionFactory.stopOrder)
#was.GenericJmsConnectionFactory.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.JmsConnectionFactory.stopScript)
#was.GenericJmsConnectionFactory.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.JmsConnectionFactory.stopVerb)
#was.GenericJmsConnectionFactory.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.JmsConnectionFactory.syncAfterCreateOrder)
#was.GenericJmsConnectionFactory.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.JmsConnectionFactory.syncAfterDestroyOrder)
#was.GenericJmsConnectionFactory.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.JmsConnectionFactory.syncAfterModifyOrder)
#was.GenericJmsConnectionFactory.syncAfterModifyOrder=65
# WebSphere config type.
#was.GenericJmsConnectionFactory.wasType=GenericJMSConnectionFactory
# Additional Properties Not To Expose
#was.GenericJmsDestination.additionalPropertiesNotToExpose=provider,genericJmsDestinationType,wasType,customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.GenericJmsDestination.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.GenericJmsDestination.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.GenericJmsDestination.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.Resource.createOrder)
#was.GenericJmsDestination.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.GenericJmsDestination.createScript=was/jms/generic/create-generic-jms-destination.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.GenericJmsDestination.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.Resource.destroyOrder)
#was.GenericJmsDestination.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.GenericJmsDestination.destroyScript=was/jms/generic/destroy-generic-jms-object.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.GenericJmsDestination.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Resource.discoverOrder)
#was.GenericJmsDestination.discoverOrder=50
# Discover Script
#was.GenericJmsDestination.discoverScript=was/jms/discover-inspect-jms-objects.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.GenericJmsDestination.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.GenericJmsDestination.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#was.GenericJmsDestination.libraryScripts=was/common/config/set-encoding.py,was/jms/jms-object-lib.py
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.GenericJmsDestination.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.GenericJmsDestination.modifyScript=was/jms/generic/modify-generic-jms-destination.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.GenericJmsDestination.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.GenericJmsDestination.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.GenericJmsDestination.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.GenericJmsDestination.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.GenericJmsDestination.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.GenericJmsDestination.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.GenericJmsDestination.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.GenericJmsDestination.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.GenericJmsDestination.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.GenericJmsDestination.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.GenericJmsDestination.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.GenericJmsDestination.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.GenericJmsDestination.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.GenericJmsDestination.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.GenericJmsDestination.syncAfterModifyOrder=65
# WebSphere config type.
#was.GenericJmsDestination.wasType=GenericJMSDestination
# Additional Properties Not To Expose (inherited from: was.GenericJmsDestination.additionalPropertiesNotToExpose)
#was.GenericJmsQueue.additionalPropertiesNotToExpose=provider,genericJmsDestinationType,wasType,customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.GenericJmsDestination.applyRestartStrategyOnNoop)
#was.GenericJmsQueue.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.GenericJmsDestination.boundConfigurationItems)
#was.GenericJmsQueue.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.GenericJmsDestination.containerRestartStrategy)
#was.GenericJmsQueue.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.GenericJmsDestination.createOrder)
#was.GenericJmsQueue.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.GenericJmsDestination.createScript)
#was.GenericJmsQueue.createScript=was/jms/generic/create-generic-jms-destination.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.GenericJmsDestination.createVerb)
#was.GenericJmsQueue.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.GenericJmsDestination.destroyOrder)
#was.GenericJmsQueue.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.GenericJmsDestination.destroyScript)
#was.GenericJmsQueue.destroyScript=was/jms/generic/destroy-generic-jms-object.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.GenericJmsDestination.destroyVerb)
#was.GenericJmsQueue.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.GenericJmsDestination.discoverOrder)
#was.GenericJmsQueue.discoverOrder=50
# Discover Script (inherited from: was.GenericJmsDestination.discoverScript)
#was.GenericJmsQueue.discoverScript=was/jms/discover-inspect-jms-objects.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.GenericJmsDestination.enableRippleStart)
#was.GenericJmsQueue.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.GenericJmsDestination.exposeDeployedApplication)
#was.GenericJmsQueue.exposeDeployedApplication=false
# A JMS queue destination for point-to-point messaging provided by the selected generic JMS provider.
#was.GenericJmsQueue.genericJmsDestinationType=QUEUE
# List of scripts to be appended to the deployed's runtime script (inherited from: was.GenericJmsDestination.libraryScripts)
#was.GenericJmsQueue.libraryScripts=was/common/config/set-encoding.py,was/jms/jms-object-lib.py
# The order in which a modify step will be executed. (inherited from: was.GenericJmsDestination.modifyOrder)
#was.GenericJmsQueue.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.GenericJmsDestination.modifyScript)
#was.GenericJmsQueue.modifyScript=was/jms/generic/modify-generic-jms-destination.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.GenericJmsDestination.modifyVerb)
#was.GenericJmsQueue.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.GenericJmsDestination.noopOrder)
#was.GenericJmsQueue.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.GenericJmsDestination.noopScript)
#was.GenericJmsQueue.noopScript=null
# Noop Verb (inherited from: was.GenericJmsDestination.noopVerb)
#was.GenericJmsQueue.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.GenericJmsDestination.restartStrategy)
#was.GenericJmsQueue.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.GenericJmsDestination.standardPropertiesNotToExpose)
#was.GenericJmsQueue.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.GenericJmsDestination.startOrder)
#was.GenericJmsQueue.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.GenericJmsDestination.startScript)
#was.GenericJmsQueue.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.GenericJmsDestination.startVerb)
#was.GenericJmsQueue.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.GenericJmsDestination.stopOrder)
#was.GenericJmsQueue.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.GenericJmsDestination.stopScript)
#was.GenericJmsQueue.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.GenericJmsDestination.stopVerb)
#was.GenericJmsQueue.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.GenericJmsDestination.syncAfterCreateOrder)
#was.GenericJmsQueue.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.GenericJmsDestination.syncAfterDestroyOrder)
#was.GenericJmsQueue.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.GenericJmsDestination.syncAfterModifyOrder)
#was.GenericJmsQueue.syncAfterModifyOrder=65
# WebSphere config type. (inherited from: was.GenericJmsDestination.wasType)
#was.GenericJmsQueue.wasType=GenericJMSDestination
# Additional Properties Not To Expose (inherited from: was.GenericJmsConnectionFactory.additionalPropertiesNotToExpose)
#was.GenericJmsQueueConnectionFactory.additionalPropertiesNotToExpose=genericJmsDestinationType,provider,wasType,containerAuthDataAlias,mappingConfigAlias,ConnectionPool,SessionPool,customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.GenericJmsConnectionFactory.applyRestartStrategyOnNoop)
#was.GenericJmsQueueConnectionFactory.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.GenericJmsConnectionFactory.boundConfigurationItems)
#was.GenericJmsQueueConnectionFactory.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.GenericJmsConnectionFactory.containerRestartStrategy)
#was.GenericJmsQueueConnectionFactory.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.GenericJmsConnectionFactory.createOrder)
#was.GenericJmsQueueConnectionFactory.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.GenericJmsConnectionFactory.createScript)
#was.GenericJmsQueueConnectionFactory.createScript=was/jms/generic/create-generic-connection-factory.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.GenericJmsConnectionFactory.createVerb)
#was.GenericJmsQueueConnectionFactory.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.GenericJmsConnectionFactory.destroyOrder)
#was.GenericJmsQueueConnectionFactory.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.GenericJmsConnectionFactory.destroyScript)
#was.GenericJmsQueueConnectionFactory.destroyScript=was/jms/generic/destroy-generic-jms-object.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.GenericJmsConnectionFactory.destroyVerb)
#was.GenericJmsQueueConnectionFactory.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.GenericJmsConnectionFactory.discoverOrder)
#was.GenericJmsQueueConnectionFactory.discoverOrder=50
# Discover Script (inherited from: was.GenericJmsConnectionFactory.discoverScript)
#was.GenericJmsQueueConnectionFactory.discoverScript=was/jms/generic/discover-inspect-generic-connection-factory.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.GenericJmsConnectionFactory.enableRippleStart)
#was.GenericJmsQueueConnectionFactory.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.GenericJmsConnectionFactory.exposeDeployedApplication)
#was.GenericJmsQueueConnectionFactory.exposeDeployedApplication=false
# A JMS queue connection factory for point-to-point messaging.
#was.GenericJmsQueueConnectionFactory.genericJmsDestinationType=QUEUE
# List of scripts to be appended to the deployed's runtime script (inherited from: was.GenericJmsConnectionFactory.libraryScripts)
#was.GenericJmsQueueConnectionFactory.libraryScripts=was/common/config/set-encoding.py,was/jms/generic/generic-connection-factory-lib.py,was/jms/jms-connection-factory-lib.py,was/jms/jms-object-lib.py
# The order in which a modify step will be executed. (inherited from: was.GenericJmsConnectionFactory.modifyOrder)
#was.GenericJmsQueueConnectionFactory.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.GenericJmsConnectionFactory.modifyScript)
#was.GenericJmsQueueConnectionFactory.modifyScript=was/jms/generic/modify-generic-connection-factory.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.GenericJmsConnectionFactory.modifyVerb)
#was.GenericJmsQueueConnectionFactory.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.GenericJmsConnectionFactory.noopOrder)
#was.GenericJmsQueueConnectionFactory.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.GenericJmsConnectionFactory.noopScript)
#was.GenericJmsQueueConnectionFactory.noopScript=null
# Noop Verb (inherited from: was.GenericJmsConnectionFactory.noopVerb)
#was.GenericJmsQueueConnectionFactory.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.GenericJmsConnectionFactory.restartStrategy)
#was.GenericJmsQueueConnectionFactory.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.GenericJmsConnectionFactory.standardPropertiesNotToExpose)
#was.GenericJmsQueueConnectionFactory.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.GenericJmsConnectionFactory.startOrder)
#was.GenericJmsQueueConnectionFactory.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.GenericJmsConnectionFactory.startScript)
#was.GenericJmsQueueConnectionFactory.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.GenericJmsConnectionFactory.startVerb)
#was.GenericJmsQueueConnectionFactory.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.GenericJmsConnectionFactory.stopOrder)
#was.GenericJmsQueueConnectionFactory.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.GenericJmsConnectionFactory.stopScript)
#was.GenericJmsQueueConnectionFactory.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.GenericJmsConnectionFactory.stopVerb)
#was.GenericJmsQueueConnectionFactory.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.GenericJmsConnectionFactory.syncAfterCreateOrder)
#was.GenericJmsQueueConnectionFactory.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.GenericJmsConnectionFactory.syncAfterDestroyOrder)
#was.GenericJmsQueueConnectionFactory.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.GenericJmsConnectionFactory.syncAfterModifyOrder)
#was.GenericJmsQueueConnectionFactory.syncAfterModifyOrder=65
# WebSphere config type. (inherited from: was.GenericJmsConnectionFactory.wasType)
#was.GenericJmsQueueConnectionFactory.wasType=GenericJMSConnectionFactory
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.GenericJmsQueueConnectionFactorySpec.boundTemplates=null
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.GenericJmsQueueSpec.boundTemplates=null
# Additional Properties Not To Expose (inherited from: was.GenericJmsDestination.additionalPropertiesNotToExpose)
#was.GenericJmsTopic.additionalPropertiesNotToExpose=provider,genericJmsDestinationType,wasType,customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.GenericJmsDestination.applyRestartStrategyOnNoop)
#was.GenericJmsTopic.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.GenericJmsDestination.boundConfigurationItems)
#was.GenericJmsTopic.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.GenericJmsDestination.containerRestartStrategy)
#was.GenericJmsTopic.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.GenericJmsDestination.createOrder)
#was.GenericJmsTopic.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.GenericJmsDestination.createScript)
#was.GenericJmsTopic.createScript=was/jms/generic/create-generic-jms-destination.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.GenericJmsDestination.createVerb)
#was.GenericJmsTopic.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.GenericJmsDestination.destroyOrder)
#was.GenericJmsTopic.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.GenericJmsDestination.destroyScript)
#was.GenericJmsTopic.destroyScript=was/jms/generic/destroy-generic-jms-object.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.GenericJmsDestination.destroyVerb)
#was.GenericJmsTopic.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.GenericJmsDestination.discoverOrder)
#was.GenericJmsTopic.discoverOrder=50
# Discover Script (inherited from: was.GenericJmsDestination.discoverScript)
#was.GenericJmsTopic.discoverScript=was/jms/discover-inspect-jms-objects.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.GenericJmsDestination.enableRippleStart)
#was.GenericJmsTopic.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.GenericJmsDestination.exposeDeployedApplication)
#was.GenericJmsTopic.exposeDeployedApplication=false
# A JMS topic destination for publish/subscribe messaging.
#was.GenericJmsTopic.genericJmsDestinationType=TOPIC
# List of scripts to be appended to the deployed's runtime script (inherited from: was.GenericJmsDestination.libraryScripts)
#was.GenericJmsTopic.libraryScripts=was/common/config/set-encoding.py,was/jms/jms-object-lib.py
# The order in which a modify step will be executed. (inherited from: was.GenericJmsDestination.modifyOrder)
#was.GenericJmsTopic.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.GenericJmsDestination.modifyScript)
#was.GenericJmsTopic.modifyScript=was/jms/generic/modify-generic-jms-destination.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.GenericJmsDestination.modifyVerb)
#was.GenericJmsTopic.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.GenericJmsDestination.noopOrder)
#was.GenericJmsTopic.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.GenericJmsDestination.noopScript)
#was.GenericJmsTopic.noopScript=null
# Noop Verb (inherited from: was.GenericJmsDestination.noopVerb)
#was.GenericJmsTopic.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.GenericJmsDestination.restartStrategy)
#was.GenericJmsTopic.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.GenericJmsDestination.standardPropertiesNotToExpose)
#was.GenericJmsTopic.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.GenericJmsDestination.startOrder)
#was.GenericJmsTopic.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.GenericJmsDestination.startScript)
#was.GenericJmsTopic.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.GenericJmsDestination.startVerb)
#was.GenericJmsTopic.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.GenericJmsDestination.stopOrder)
#was.GenericJmsTopic.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.GenericJmsDestination.stopScript)
#was.GenericJmsTopic.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.GenericJmsDestination.stopVerb)
#was.GenericJmsTopic.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.GenericJmsDestination.syncAfterCreateOrder)
#was.GenericJmsTopic.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.GenericJmsDestination.syncAfterDestroyOrder)
#was.GenericJmsTopic.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.GenericJmsDestination.syncAfterModifyOrder)
#was.GenericJmsTopic.syncAfterModifyOrder=65
# WebSphere config type. (inherited from: was.GenericJmsDestination.wasType)
#was.GenericJmsTopic.wasType=GenericJMSDestination
# Additional Properties Not To Expose (inherited from: was.GenericJmsConnectionFactory.additionalPropertiesNotToExpose)
#was.GenericJmsTopicConnectionFactory.additionalPropertiesNotToExpose=genericJmsDestinationType,provider,wasType,containerAuthDataAlias,mappingConfigAlias,ConnectionPool,SessionPool,customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.GenericJmsConnectionFactory.applyRestartStrategyOnNoop)
#was.GenericJmsTopicConnectionFactory.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.GenericJmsConnectionFactory.boundConfigurationItems)
#was.GenericJmsTopicConnectionFactory.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.GenericJmsConnectionFactory.containerRestartStrategy)
#was.GenericJmsTopicConnectionFactory.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.GenericJmsConnectionFactory.createOrder)
#was.GenericJmsTopicConnectionFactory.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.GenericJmsConnectionFactory.createScript)
#was.GenericJmsTopicConnectionFactory.createScript=was/jms/generic/create-generic-connection-factory.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.GenericJmsConnectionFactory.createVerb)
#was.GenericJmsTopicConnectionFactory.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.GenericJmsConnectionFactory.destroyOrder)
#was.GenericJmsTopicConnectionFactory.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.GenericJmsConnectionFactory.destroyScript)
#was.GenericJmsTopicConnectionFactory.destroyScript=was/jms/generic/destroy-generic-jms-object.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.GenericJmsConnectionFactory.destroyVerb)
#was.GenericJmsTopicConnectionFactory.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.GenericJmsConnectionFactory.discoverOrder)
#was.GenericJmsTopicConnectionFactory.discoverOrder=50
# Discover Script (inherited from: was.GenericJmsConnectionFactory.discoverScript)
#was.GenericJmsTopicConnectionFactory.discoverScript=was/jms/generic/discover-inspect-generic-connection-factory.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.GenericJmsConnectionFactory.enableRippleStart)
#was.GenericJmsTopicConnectionFactory.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.GenericJmsConnectionFactory.exposeDeployedApplication)
#was.GenericJmsTopicConnectionFactory.exposeDeployedApplication=false
# A JMS topic connection factory for publish/subscribe messaging.
#was.GenericJmsTopicConnectionFactory.genericJmsDestinationType=TOPIC
# List of scripts to be appended to the deployed's runtime script (inherited from: was.GenericJmsConnectionFactory.libraryScripts)
#was.GenericJmsTopicConnectionFactory.libraryScripts=was/common/config/set-encoding.py,was/jms/generic/generic-connection-factory-lib.py,was/jms/jms-connection-factory-lib.py,was/jms/jms-object-lib.py
# The order in which a modify step will be executed. (inherited from: was.GenericJmsConnectionFactory.modifyOrder)
#was.GenericJmsTopicConnectionFactory.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.GenericJmsConnectionFactory.modifyScript)
#was.GenericJmsTopicConnectionFactory.modifyScript=was/jms/generic/modify-generic-connection-factory.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.GenericJmsConnectionFactory.modifyVerb)
#was.GenericJmsTopicConnectionFactory.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.GenericJmsConnectionFactory.noopOrder)
#was.GenericJmsTopicConnectionFactory.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.GenericJmsConnectionFactory.noopScript)
#was.GenericJmsTopicConnectionFactory.noopScript=null
# Noop Verb (inherited from: was.GenericJmsConnectionFactory.noopVerb)
#was.GenericJmsTopicConnectionFactory.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.GenericJmsConnectionFactory.restartStrategy)
#was.GenericJmsTopicConnectionFactory.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.GenericJmsConnectionFactory.standardPropertiesNotToExpose)
#was.GenericJmsTopicConnectionFactory.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.GenericJmsConnectionFactory.startOrder)
#was.GenericJmsTopicConnectionFactory.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.GenericJmsConnectionFactory.startScript)
#was.GenericJmsTopicConnectionFactory.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.GenericJmsConnectionFactory.startVerb)
#was.GenericJmsTopicConnectionFactory.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.GenericJmsConnectionFactory.stopOrder)
#was.GenericJmsTopicConnectionFactory.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.GenericJmsConnectionFactory.stopScript)
#was.GenericJmsTopicConnectionFactory.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.GenericJmsConnectionFactory.stopVerb)
#was.GenericJmsTopicConnectionFactory.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.GenericJmsConnectionFactory.syncAfterCreateOrder)
#was.GenericJmsTopicConnectionFactory.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.GenericJmsConnectionFactory.syncAfterDestroyOrder)
#was.GenericJmsTopicConnectionFactory.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.GenericJmsConnectionFactory.syncAfterModifyOrder)
#was.GenericJmsTopicConnectionFactory.syncAfterModifyOrder=65
# WebSphere config type. (inherited from: was.GenericJmsConnectionFactory.wasType)
#was.GenericJmsTopicConnectionFactory.wasType=GenericJMSConnectionFactory
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.GenericJmsTopicConnectionFactorySpec.boundTemplates=null
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.GenericJmsTopicSpec.boundTemplates=null
# Additional Properties Not To Expose
#was.HAManagerPolicy.additionalPropertiesNotToExpose=id,type,wasType,deployable,container,customProperties,matchCriteria,servers,preferredServers
# Specifies, in seconds, how frequently the high availability manager checks the health of the active group members governed by this policy. If a group member has failed, the server on which the group member resides is restarted.
#was.HAManagerPolicy.isAlivePeriodSec=120
# Specifies whether or not quorum checking is enabled for a high availability group governed by this policy. Using quorum is an advanced function and should not be enabled without first consulting the product documentation. 
#was.HAManagerPolicy.quorumEnabled=false
# Specifies the maximum number of historical files that can be kept.
#was.HTTPInboundChannel.HttpInboundChannelLogging_AccessLog_maximumBackupFiles=1
# Specifies, in megabytes, the maximum size of the NCSA log.
#was.HTTPInboundChannel.HttpInboundChannelLogging_AccessLog_maximumSize=1
# Specifies the maximum number of historical files that can be kept.
#was.HTTPInboundChannel.HttpInboundChannelLogging_ErrorLog_maximumBackupFiles=1
# Specifies, in megabytes, the maximum size of the Error log file.
#was.HTTPInboundChannel.HttpInboundChannelLogging_ErrorLog_maximumSize=1
# Specifies the maximum number of historical files that can be kept.
#was.HTTPInboundChannel.HttpInboundChannelLogging_FrcaLog_maximumBackupFiles=1
# Specifies, in megabytes, the maximum size of the FRCA log.
#was.HTTPInboundChannel.HttpInboundChannelLogging_FrcaLog_maximumSize=1
# Specifies the NCSA format that is used when client access information is added to an NCSA log.
#was.HTTPInboundChannel.HttpInboundChannelLogging_accessLogFormat=COMMON
# Specifies whether NCSA access logging is enabled for inbound client requests.
#was.HTTPInboundChannel.HttpInboundChannelLogging_enableAccessLogging=false
# Specifies whether error and debug information is collected in an Error log.
#was.HTTPInboundChannel.HttpInboundChannelLogging_enableErrorLogging=false
# Specifies whether FRCA logging is enabled for inbound client requests.
#was.HTTPInboundChannel.HttpInboundChannelLogging_enableFRCALogging=false
# Specifies the type of messages that are added to the Error log.
#was.HTTPInboundChannel.HttpInboundChannelLogging_errorLogLevel=CRITICAL
# Specifies the FRCA format that is used when client access information is added to an FRCA log.
#was.HTTPInboundChannel.HttpInboundChannelLogging_frcaLogFormat=COMMON
# Additional Properties Not To Expose (inherited from: was.TransportChannel.additionalPropertiesNotToExpose)
#was.HTTPInboundChannel.additionalPropertiesNotToExpose=id,container,type,wasType,customProperties,deployable
# Specifies the discrimination weight that is used to determine the order in which the channels obtain access to the incoming connection if the transport channels are shared amongst several transport chains. The transport channel with the lowest discrimination weight has the first opportunity to accept the incoming connection.
#was.HTTPInboundChannel.discriminationWeight=10
# Specifies whether logging of NCSA access information, including FRCA caching information, and error messages is enabled for connections that use this channel.
#was.HTTPInboundChannel.enableLogging=false
# Specifies whether persistent connections, also referred to as keep alive connections, rather than connections that close after the request and response exchange, are allowed when sending an outgoing HTTP message.
#was.HTTPInboundChannel.keepAlive=true
# Specifies, in bytes, the  maximum size for a header that is included in a message.
#was.HTTPInboundChannel.maxFieldSize=32768
# Specifies the maximum number of headers that can be included in a message.
#was.HTTPInboundChannel.maxHeaders=50
# Specifies, in bytes, the maximum size for the body of a message. Value -1 indicates unlimited request body buffer size.
#was.HTTPInboundChannel.maxRequestMessageBodySize=-1
# Specifies the maximum requests that are allowed on a single HTTP connection. 0 or 1 indicates one single request per connection. Value -1 indicates unlimited persistent requests per connection.
#was.HTTPInboundChannel.maximumPersistentRequests=100
# Specifies the maximum amount of  time, in seconds, that the server waits on a socket between client requests. After this timeout is passed, the connection closes.
#was.HTTPInboundChannel.persistentTimeout=30
# Specifies the maximum amount of time, in seconds, that the server waits for a read operation on a socket to complete.
#was.HTTPInboundChannel.readTimeout=60
# Specifies to use channel-specific instead of global logging service options.
#was.HTTPInboundChannel.useChannelAccessLoggingSettings=false
# Specifies to use channel-specific instead of global logging service options.
#was.HTTPInboundChannel.useChannelErrorLoggingSettings=false
# Specifies to use channel-specific instead of global logging service options.
#was.HTTPInboundChannel.useChannelFRCALoggingSettings=false
# WebSphere admin resource type.
#was.HTTPInboundChannel.wasType=HTTPInboundChannel
# Specifies the maximum amount of time, in seconds, that the server waits for a write operation on a socket to complete.
#was.HTTPInboundChannel.writeTimeout=60
# Action Type
#was.HealthActionHeapDump.actionType=HEAPDUMP
# Action Type
#was.HealthActionRestartServer.actionType=RESTART
# Action Type
#was.HealthActionSendSnmpTrap.actionType=SENDSNMPTRAP
# Action Type
#was.HealthActionSetMaintenanceMode.actionType=SETMAINTENANCEMODE
# Action Type
#was.HealthActionSetMaintenanceModeBreakAffinity.actionType=SETMAINTENANCEMODE_BREAK
# Action Type
#was.HealthActionSetMaintenanceModeStop.actionType=SETMAINTENANCEMODE_STOP
# Action Type
#was.HealthActionThreadDump.actionType=THREADDUMP
# Action Type
#was.HealthActionUnsetMaintenanceMode.actionType=UNSETMAINTENANCEMODE
# Additional Properties Not To Expose
#was.HealthBaseCondition.additionalPropertiesNotToExpose=container, conditionType, deployable, id, type
# Additional Properties Not To Expose (inherited from: was.HealthBaseCondition.additionalPropertiesNotToExpose)
#was.HealthConditionAge.additionalPropertiesNotToExpose=container, conditionType, deployable, id, type
# Unit DAYS or HOURS.
#was.HealthConditionAge.ageUnits=DAYS
# Condition Type
#was.HealthConditionAge.conditionType=AGE
# The age to allow the server instance to 'live' prior to corrective action. This value can go from 1 hour to 8760 hours
#was.HealthConditionAge.maxAge=7
# Additional Properties Not To Expose (inherited from: was.HealthBaseCondition.additionalPropertiesNotToExpose)
#was.HealthConditionExcessiveMemory.additionalPropertiesNotToExpose=container, conditionType, deployable, id, type
# Condition Type
#was.HealthConditionExcessiveMemory.conditionType=EXCESSIVE_MEMORY
# The threshold value for the percentage of the max heap size used for the JVM process.
#was.HealthConditionExcessiveMemory.memoryUsed=85
# Time period over which the JVM heap threshold must breach. This value can go from 1 second to 60 minutes.
#was.HealthConditionExcessiveMemory.timeOverThreshold=5
# Unit of time for time over threshold (MINUTES or SECONDS).
#was.HealthConditionExcessiveMemory.timeUnits=MINUTES
# Additional Properties Not To Expose (inherited from: was.HealthBaseCondition.additionalPropertiesNotToExpose)
#was.HealthConditionExcessiveRequestTimeout.additionalPropertiesNotToExpose=container, conditionType, deployable, id, type
# Condition Type
#was.HealthConditionExcessiveRequestTimeout.conditionType=EXCESSIVE_REQUEST_TIMEOUT
# The threshold value for the percentage of the timed out requests.
#was.HealthConditionExcessiveRequestTimeout.timeoutPercent=30
# Additional Properties Not To Expose (inherited from: was.HealthBaseCondition.additionalPropertiesNotToExpose)
#was.HealthConditionExcessiveResponseTime.additionalPropertiesNotToExpose=container, conditionType, deployable, id, type
# Condition Type
#was.HealthConditionExcessiveResponseTime.conditionType=EXCESSIVE_RESPONSE_TIME
# The average time that request can take prior to corrective action. This value go from 1 millisecond to 1 hour.
#was.HealthConditionExcessiveResponseTime.responseTime=10
# The average time that request can take prior to corrective action.this value go from 1 millisecond to 1 hour.
#was.HealthConditionExcessiveResponseTime.responseTimeUnits=SECONDS
# Additional Properties Not To Expose (inherited from: was.HealthBaseCondition.additionalPropertiesNotToExpose)
#was.HealthConditionGarbageCollectionPercentage.additionalPropertiesNotToExpose=container, conditionType, deployable, id, type
# Condition Type
#was.HealthConditionGarbageCollectionPercentage.conditionType=GC_PERCENTAGE
# The threshold value for the percentage of time spent in garbage collection. This value can be between 1 and 99.
#was.HealthConditionGarbageCollectionPercentage.garbageCollectionPercent=10
# This value can go from 1 minute to 24 hours. Default value: 2 minutes.
#was.HealthConditionGarbageCollectionPercentage.samplingPeriod=2
# The unit used for samplingPeriod. Default value: MINUTES.
#was.HealthConditionGarbageCollectionPercentage.samplingUnits=MINUTES
# Additional Properties Not To Expose (inherited from: was.HealthBaseCondition.additionalPropertiesNotToExpose)
#was.HealthConditionMemoryLeak.additionalPropertiesNotToExpose=container, conditionType, deployable, id, type
# Condition Type
#was.HealthConditionMemoryLeak.conditionType=MEMORY_LEAK
# The detection level specifies how aggressively to monitor for memory leaks. The value can be FAST, NORMAL or CONSERVATIVE.
#was.HealthConditionMemoryLeak.level=NORMAL
# Additional Properties Not To Expose (inherited from: was.HealthBaseCondition.additionalPropertiesNotToExpose)
#was.HealthConditionStormDrain.additionalPropertiesNotToExpose=container, conditionType, deployable, id, type
# Condition Type
#was.HealthConditionStormDrain.conditionType=STORM_DRAIN
# The detection level specifies how aggressively to monitor for storm drain scenarios. (NORMAL or CONSERVATIVE)
#was.HealthConditionStormDrain.level=NORMAL
# Additional Properties Not To Expose (inherited from: was.HealthBaseCondition.additionalPropertiesNotToExpose)
#was.HealthConditionWorkload.additionalPropertiesNotToExpose=container, conditionType, deployable, id, type
# Condition Type
#was.HealthConditionWorkload.conditionType=WORKLOAD
# The total number of requests that the server instance serves before corrective action. It must be 1000 <= 9223372036854775807.
#was.HealthConditionWorkload.totalRequests=20000000
# Additional Properties Not To Expose
#was.HealthPolicy.additionalPropertiesNotToExpose=healthActions,condition
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.HealthPolicy.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.HealthPolicy.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.HealthPolicy.containerRestartStrategy=NONE
# The order in which a create step will be executed.
#was.HealthPolicy.createOrder=58
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.HealthPolicy.createScript=was/policies/health/create-health-policy.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.HealthPolicy.createVerb=Create
# The order in which a destroy step will be executed.
#was.HealthPolicy.destroyOrder=42
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.HealthPolicy.destroyScript=was/policies/health/destroy-health-policy.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.HealthPolicy.destroyVerb=Destroy
# The order in which a discover step will be executed.
#was.HealthPolicy.discoverOrder=45
# Discover Script
#was.HealthPolicy.discoverScript=was/policies/health/discover-inspect-health-policy.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.HealthPolicy.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.HealthPolicy.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#was.HealthPolicy.libraryScripts=was/common/config/set-encoding.py,was/policies/health/health-policy-lib.py
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.HealthPolicy.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.HealthPolicy.modifyScript=was/policies/health/modify-health-policy.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.HealthPolicy.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.HealthPolicy.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.HealthPolicy.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.HealthPolicy.noopVerb=Noop
# The level of user-interaction required when corrective action is needed. The value can be SUPERVISE (default) or AUTOMATIC.
#was.HealthPolicy.reactionMode=SUPERVISE
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.HealthPolicy.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.HealthPolicy.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.HealthPolicy.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.HealthPolicy.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.HealthPolicy.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.HealthPolicy.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.HealthPolicy.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.HealthPolicy.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.HealthPolicy.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.HealthPolicy.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.HealthPolicy.syncAfterModifyOrder=65
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.HealthPolicyMembership.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.HealthPolicyMembership.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.HealthPolicyMembership.containerRestartStrategy=NONE
# The order in which a create step will be executed.
#was.HealthPolicyMembership.createOrder=59
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.HealthPolicyMembership.createScript=was/policies/health/create-health-policy-membership.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.HealthPolicyMembership.createVerb=Create
# The order in which a destroy step will be executed.
#was.HealthPolicyMembership.destroyOrder=41
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.HealthPolicyMembership.destroyScript=was/policies/health/destroy-health-policy-membership.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.HealthPolicyMembership.destroyVerb=Destroy
# The order in which a discover step will be executed.
#was.HealthPolicyMembership.discoverOrder=46
# Discover Script
#was.HealthPolicyMembership.discoverScript=was/policies/health/discover-inspect-health-policy-membership.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.HealthPolicyMembership.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.HealthPolicyMembership.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#was.HealthPolicyMembership.libraryScripts=was/common/config/set-encoding.py,was/policies/health/health-policy-lib.py
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.HealthPolicyMembership.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.Resource.modifyScript)
#was.HealthPolicyMembership.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.HealthPolicyMembership.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.HealthPolicyMembership.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.HealthPolicyMembership.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.HealthPolicyMembership.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.HealthPolicyMembership.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.HealthPolicyMembership.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.HealthPolicyMembership.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.HealthPolicyMembership.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.HealthPolicyMembership.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.HealthPolicyMembership.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.HealthPolicyMembership.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.HealthPolicyMembership.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.HealthPolicyMembership.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.HealthPolicyMembership.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.HealthPolicyMembership.syncAfterModifyOrder=65
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.HealthPolicyMembershipSpec.boundTemplates=null
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.HealthPolicySpec.boundTemplates=null
# Additional Properties Not To Expose (inherited from: was.ConfigResource.additionalPropertiesNotToExpose)
#was.IndirectNameSpaceBinding.additionalPropertiesNotToExpose=wasType,provider,providerType,customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ConfigResource.applyRestartStrategyOnNoop)
#was.IndirectNameSpaceBinding.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ConfigResource.boundConfigurationItems)
#was.IndirectNameSpaceBinding.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ConfigResource.containerRestartStrategy)
#was.IndirectNameSpaceBinding.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ConfigResource.createOrder)
#was.IndirectNameSpaceBinding.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ConfigResource.createScript)
#was.IndirectNameSpaceBinding.createScript=was/common/config/create-or-modify-resource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.ConfigResource.createVerb)
#was.IndirectNameSpaceBinding.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.ConfigResource.destroyOrder)
#was.IndirectNameSpaceBinding.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ConfigResource.destroyScript)
#was.IndirectNameSpaceBinding.destroyScript=was/common/config/destroy-resource.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ConfigResource.destroyVerb)
#was.IndirectNameSpaceBinding.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ConfigResource.discoverOrder)
#was.IndirectNameSpaceBinding.discoverOrder=50
# Discover Script (inherited from: was.ConfigResource.discoverScript)
#was.IndirectNameSpaceBinding.discoverScript=was/common/config/discover-inspect-resource.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ConfigResource.enableRippleStart)
#was.IndirectNameSpaceBinding.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ConfigResource.exposeDeployedApplication)
#was.IndirectNameSpaceBinding.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ConfigResource.libraryScripts)
#was.IndirectNameSpaceBinding.libraryScripts=was/common/config/set-encoding.py,was/common/config/admin-config-lib.py
# The order in which a modify step will be executed. (inherited from: was.ConfigResource.modifyOrder)
#was.IndirectNameSpaceBinding.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ConfigResource.modifyScript)
#was.IndirectNameSpaceBinding.modifyScript=was/common/config/create-or-modify-resource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ConfigResource.modifyVerb)
#was.IndirectNameSpaceBinding.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.ConfigResource.noopOrder)
#was.IndirectNameSpaceBinding.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ConfigResource.noopScript)
#was.IndirectNameSpaceBinding.noopScript=null
# Noop Verb (inherited from: was.ConfigResource.noopVerb)
#was.IndirectNameSpaceBinding.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ConfigResource.restartStrategy)
#was.IndirectNameSpaceBinding.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ConfigResource.standardPropertiesNotToExpose)
#was.IndirectNameSpaceBinding.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ConfigResource.startOrder)
#was.IndirectNameSpaceBinding.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ConfigResource.startScript)
#was.IndirectNameSpaceBinding.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ConfigResource.startVerb)
#was.IndirectNameSpaceBinding.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ConfigResource.stopOrder)
#was.IndirectNameSpaceBinding.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ConfigResource.stopScript)
#was.IndirectNameSpaceBinding.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ConfigResource.stopVerb)
#was.IndirectNameSpaceBinding.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ConfigResource.syncAfterCreateOrder)
#was.IndirectNameSpaceBinding.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ConfigResource.syncAfterDestroyOrder)
#was.IndirectNameSpaceBinding.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ConfigResource.syncAfterModifyOrder)
#was.IndirectNameSpaceBinding.syncAfterModifyOrder=65
# WebSphere admin resource type.
#was.IndirectNameSpaceBinding.wasType=IndirectLookupNameSpaceBinding
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.IndirectNameSpaceBindingSpec.boundTemplates=null
# Additional Properties Not To Expose
#was.J2CActivationSpecification.additionalPropertiesNotToExpose=provider,customProperties,wasType,standardProvidersToIgnore,additionalProvidersToIgnore
# Additional Providers To Ignore (inherited from: was.J2CResource.additionalProvidersToIgnore)
#was.J2CActivationSpecification.additionalProvidersToIgnore=
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.J2CResource.applyRestartStrategyOnNoop)
#was.J2CActivationSpecification.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.J2CResource.boundConfigurationItems)
#was.J2CActivationSpecification.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.J2CResource.containerRestartStrategy)
#was.J2CActivationSpecification.containerRestartStrategy=NONE
# The order in which a create step will be executed.
#was.J2CActivationSpecification.createOrder=71
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.J2CActivationSpecification.createScript=was/resources/ra/create-j2c-activation-spec.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.J2CResource.createVerb)
#was.J2CActivationSpecification.createVerb=Create
# The order in which a destroy step will be executed.
#was.J2CActivationSpecification.destroyOrder=29
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.J2CActivationSpecification.destroyScript=was/resources/ra/destroy-j2c-activation-spec.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.J2CResource.destroyVerb)
#was.J2CActivationSpecification.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.J2CResource.discoverOrder)
#was.J2CActivationSpecification.discoverOrder=50
# Discover Script
#was.J2CActivationSpecification.discoverScript=was/resources/ra/discover-inspect-j2c-activation-spec.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.J2CResource.enableRippleStart)
#was.J2CActivationSpecification.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.J2CResource.exposeDeployedApplication)
#was.J2CActivationSpecification.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#was.J2CActivationSpecification.libraryScripts=was/common/config/set-encoding.py,was/resources/ra/j2c-activation-spec-lib.py,was/resources/ra/j2c-resource-lib.py
# The order in which a modify step will be executed.
#was.J2CActivationSpecification.modifyOrder=71
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.J2CResource.modifyScript)
#was.J2CActivationSpecification.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.J2CResource.modifyVerb)
#was.J2CActivationSpecification.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.J2CResource.noopOrder)
#was.J2CActivationSpecification.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.J2CResource.noopScript)
#was.J2CActivationSpecification.noopScript=null
# Noop Verb (inherited from: was.J2CResource.noopVerb)
#was.J2CActivationSpecification.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.J2CResource.restartStrategy)
#was.J2CActivationSpecification.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.J2CResource.standardPropertiesNotToExpose)
#was.J2CActivationSpecification.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# Standard Providers To Ignore (inherited from: was.J2CResource.standardProvidersToIgnore)
#was.J2CActivationSpecification.standardProvidersToIgnore=SIB JMS Resource Adapter,WebSphere MQ Resource Adapter,WebSphere Relational Resource Adapter
# The order in which a start step will be executed. (inherited from: was.J2CResource.startOrder)
#was.J2CActivationSpecification.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.J2CResource.startScript)
#was.J2CActivationSpecification.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.J2CResource.startVerb)
#was.J2CActivationSpecification.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.J2CResource.stopOrder)
#was.J2CActivationSpecification.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.J2CResource.stopScript)
#was.J2CActivationSpecification.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.J2CResource.stopVerb)
#was.J2CActivationSpecification.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.J2CResource.syncAfterCreateOrder)
#was.J2CActivationSpecification.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.J2CResource.syncAfterDestroyOrder)
#was.J2CActivationSpecification.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.J2CResource.syncAfterModifyOrder)
#was.J2CActivationSpecification.syncAfterModifyOrder=65
# Was Type
#was.J2CActivationSpecification.wasType=J2CActivationSpec
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.J2CActivationSpecificationSpec.boundTemplates=null
# Additional Properties Not To Expose
#was.J2CAdminObject.additionalPropertiesNotToExpose=provider,customProperties,wasType,standardProvidersToIgnore,additionalProvidersToIgnore
# Additional Providers To Ignore (inherited from: was.J2CResource.additionalProvidersToIgnore)
#was.J2CAdminObject.additionalProvidersToIgnore=
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.J2CResource.applyRestartStrategyOnNoop)
#was.J2CAdminObject.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.J2CResource.boundConfigurationItems)
#was.J2CAdminObject.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.J2CResource.containerRestartStrategy)
#was.J2CAdminObject.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.J2CResource.createOrder)
#was.J2CAdminObject.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.J2CAdminObject.createScript=was/resources/ra/create-j2c-admin-object.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.J2CResource.createVerb)
#was.J2CAdminObject.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.J2CResource.destroyOrder)
#was.J2CAdminObject.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.J2CAdminObject.destroyScript=was/resources/ra/destroy-j2c-admin-object.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.J2CResource.destroyVerb)
#was.J2CAdminObject.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.J2CResource.discoverOrder)
#was.J2CAdminObject.discoverOrder=50
# Discover Script
#was.J2CAdminObject.discoverScript=was/resources/ra/discover-inspect-j2c-admin-object.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.J2CResource.enableRippleStart)
#was.J2CAdminObject.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.J2CResource.exposeDeployedApplication)
#was.J2CAdminObject.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#was.J2CAdminObject.libraryScripts=was/common/config/set-encoding.py,was/resources/ra/j2c-admin-object-lib.py,was/resources/ra/j2c-resource-lib.py
# The order in which a modify step will be executed. (inherited from: was.J2CResource.modifyOrder)
#was.J2CAdminObject.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.J2CResource.modifyScript)
#was.J2CAdminObject.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.J2CResource.modifyVerb)
#was.J2CAdminObject.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.J2CResource.noopOrder)
#was.J2CAdminObject.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.J2CResource.noopScript)
#was.J2CAdminObject.noopScript=null
# Noop Verb (inherited from: was.J2CResource.noopVerb)
#was.J2CAdminObject.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.J2CResource.restartStrategy)
#was.J2CAdminObject.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.J2CResource.standardPropertiesNotToExpose)
#was.J2CAdminObject.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# Standard Providers To Ignore (inherited from: was.J2CResource.standardProvidersToIgnore)
#was.J2CAdminObject.standardProvidersToIgnore=SIB JMS Resource Adapter,WebSphere MQ Resource Adapter,WebSphere Relational Resource Adapter
# The order in which a start step will be executed. (inherited from: was.J2CResource.startOrder)
#was.J2CAdminObject.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.J2CResource.startScript)
#was.J2CAdminObject.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.J2CResource.startVerb)
#was.J2CAdminObject.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.J2CResource.stopOrder)
#was.J2CAdminObject.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.J2CResource.stopScript)
#was.J2CAdminObject.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.J2CResource.stopVerb)
#was.J2CAdminObject.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.J2CResource.syncAfterCreateOrder)
#was.J2CAdminObject.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.J2CResource.syncAfterDestroyOrder)
#was.J2CAdminObject.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.J2CResource.syncAfterModifyOrder)
#was.J2CAdminObject.syncAfterModifyOrder=65
# Was Type
#was.J2CAdminObject.wasType=J2CAdminObject
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.J2CAdminObjectSpec.boundTemplates=null
# Specifies the interval, in seconds, after which an unused, aged connection is discarded (regardless of recent activity) by the pool maintenance thread.
#was.J2CConnectionFactory.ConnectionPool_agedTimeout=0
# Specifies the number of seconds that a connection request remains active, after which WebSphere Application Server issues a ConnectionWaitTimeout exception. The application server acts on this value only if you set the maximum pool size property.
#was.J2CConnectionFactory.ConnectionPool_connectionTimeout=180
# Determines the distribution of hash values in the table that indexes connection usage data. The hash values are used to match connection request credentials with the connections. A free pool distribution table size value that is higher than 1 can increase the efficiency of hash value distribution, to help minimize search collisions within the table. The value of 0 means random distribution.
#was.J2CConnectionFactory.ConnectionPool_freePoolDistributionTableSize=0
# Specifies the maximum number of connections to maintain in the pool per datasource. If the maximum number of connections is reached for a connection pool and all connections are in use for that connection pool, additional connection requests from that datasource will be denied only after the expiration of the time period specified for the connection timeout property.
#was.J2CConnectionFactory.ConnectionPool_maxConnections=10
# Specifies the minimum number of connections to maintain in the pool.
#was.J2CConnectionFactory.ConnectionPool_minConnections=1
# Specifies the number of partitions that are created in each of the free pools.
#was.J2CConnectionFactory.ConnectionPool_numberOfFreePoolPartitions=0
# Specifies the number of partitions that are created in each of the shared pools.
#was.J2CConnectionFactory.ConnectionPool_numberOfSharedPoolPartitions=0
# Specifies how to purge connections when a stale connection or fatal connection error is detected.
#was.J2CConnectionFactory.ConnectionPool_purgePolicy=EntirePool
# Specifies the interval, in seconds, between runs of the pool maintenance thread.
#was.J2CConnectionFactory.ConnectionPool_reapTime=180
# Specifies the maximum number of stuck connections that are allowed to accumulate in a pool before the connection manager rejects new connection requests.
#was.J2CConnectionFactory.ConnectionPool_stuckThreshold=0
# If the pool appears to be stuck (you have reached the stuck threshold), a resource exception is given to all new connection requests until the pool is unstuck. The stuck time property is the interval, in seconds, allowed for a single active connection to be in use to the backend resource before it is considered to be stuck.
#was.J2CConnectionFactory.ConnectionPool_stuckTime=0
# The stuck timer interval determines how often the connection pool checks for stuck connections. A stuck connection is an active connection that is not responding or returning to the connection pool. The default value is 0 seconds.
#was.J2CConnectionFactory.ConnectionPool_stuckTimerTime=0
# Specifies the period of time that the connection manager waits between creating connections while the connection manager operates in surge mode. The connection manager enforces the surge creation interval until the number of connections in the pool drops below the surge threshold value.
#was.J2CConnectionFactory.ConnectionPool_surgeCreationInterval=0
# Specifies the number of connections that can be created before the connection manager activates surge protection. Surge protection is an operating mode that limits connection creation according to a rate that you set through the surge creation interval property. The goal is to prevent overloading of a data source when too many connections are created simultaneously.
#was.J2CConnectionFactory.ConnectionPool_surgeThreshold=-1
# Specifies the maximum number of seconds that an idle connection can remain in the pool before being discarded by the maintenance thread.
#was.J2CConnectionFactory.ConnectionPool_unusedTimeout=1800
# Additional Properties Not To Expose
#was.J2CConnectionFactory.additionalPropertiesNotToExpose=provider,wasType,containerAuthDataAlias,mappingConfigAlias,ConnectionPool,customProperties,connectionFactoryInterface,standardProvidersToIgnore,additionalProvidersToIgnore
# Additional Providers To Ignore (inherited from: was.J2CResource.additionalProvidersToIgnore)
#was.J2CConnectionFactory.additionalProvidersToIgnore=
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.J2CResource.applyRestartStrategyOnNoop)
#was.J2CConnectionFactory.applyRestartStrategyOnNoop=false
# The value of this attribute specifies which of the defined authentication mechanisms for the corresponding resource adapter applies to this connection factory.
#was.J2CConnectionFactory.authMechanismPreference=BASIC_PASSWORD
# The set of created CIs. (inherited from: was.J2CResource.boundConfigurationItems)
#was.J2CConnectionFactory.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.J2CResource.containerRestartStrategy)
#was.J2CConnectionFactory.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.J2CResource.createOrder)
#was.J2CConnectionFactory.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.J2CConnectionFactory.createScript=was/resources/ra/create-j2c-connection-factory.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.J2CResource.createVerb)
#was.J2CConnectionFactory.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.J2CResource.destroyOrder)
#was.J2CConnectionFactory.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.J2CConnectionFactory.destroyScript=was/resources/ra/destroy-j2c-connection-factory.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.J2CResource.destroyVerb)
#was.J2CConnectionFactory.destroyVerb=Destroy
# Indicates that connection usage patterns should be monitored for potential programming model violations. Note that manageCachedHandles must also be true for the monitoring to work. 
#was.J2CConnectionFactory.diagnoseConnectionUsage=false
# The order in which a discover step will be executed. (inherited from: was.J2CResource.discoverOrder)
#was.J2CConnectionFactory.discoverOrder=50
# Discover Script
#was.J2CConnectionFactory.discoverScript=was/resources/ra/discover-inspect-j2c-connection-factory.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.J2CResource.enableRippleStart)
#was.J2CConnectionFactory.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.J2CResource.exposeDeployedApplication)
#was.J2CConnectionFactory.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#was.J2CConnectionFactory.libraryScripts=was/common/config/set-encoding.py,was/resources/ra/j2c-connection-factory-lib.py,was/resources/ra/j2c-resource-lib.py,was/jms/jms-connection-factory-lib.py
# The J2EE1.3 programming model indicates that connections should always have a transaction context; however, some applications do not correctly have a transaction context associated with them. This setting enables whether the container will log the condition that there is a missing transaction context at the time that the connection is obtained to the activity log.
#was.J2CConnectionFactory.logMissingTransactionContext=true
# Whether cached handles (handles held in inst vars in a bean) should be tracked by the container. Tracking handles can cause large performance overhead if used at runtime; however, for debugging purposes it can be useful to enable handle management.
#was.J2CConnectionFactory.manageCachedHandles=false
# If not set and 'Container-managed authentication alias' is set, will default to 'DefaultPrincipalMapping'.
#was.J2CConnectionFactory.mappingConfigAlias=DefaultPrincipalMapping
# The order in which a modify step will be executed. (inherited from: was.J2CResource.modifyOrder)
#was.J2CConnectionFactory.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.J2CResource.modifyScript)
#was.J2CConnectionFactory.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.J2CResource.modifyVerb)
#was.J2CConnectionFactory.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.J2CResource.noopOrder)
#was.J2CConnectionFactory.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.J2CResource.noopScript)
#was.J2CConnectionFactory.noopScript=null
# Noop Verb (inherited from: was.J2CResource.noopVerb)
#was.J2CConnectionFactory.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.J2CResource.restartStrategy)
#was.J2CConnectionFactory.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.J2CResource.standardPropertiesNotToExpose)
#was.J2CConnectionFactory.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# Standard Providers To Ignore (inherited from: was.J2CResource.standardProvidersToIgnore)
#was.J2CConnectionFactory.standardProvidersToIgnore=SIB JMS Resource Adapter,WebSphere MQ Resource Adapter,WebSphere Relational Resource Adapter
# The order in which a start step will be executed. (inherited from: was.J2CResource.startOrder)
#was.J2CConnectionFactory.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.J2CResource.startScript)
#was.J2CConnectionFactory.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.J2CResource.startVerb)
#was.J2CConnectionFactory.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.J2CResource.stopOrder)
#was.J2CConnectionFactory.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.J2CResource.stopScript)
#was.J2CConnectionFactory.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.J2CResource.stopVerb)
#was.J2CConnectionFactory.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.J2CResource.syncAfterCreateOrder)
#was.J2CConnectionFactory.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.J2CResource.syncAfterDestroyOrder)
#was.J2CConnectionFactory.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.J2CResource.syncAfterModifyOrder)
#was.J2CConnectionFactory.syncAfterModifyOrder=65
# Was Type
#was.J2CConnectionFactory.wasType=J2CConnectionFactory
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.J2CConnectionFactorySpec.boundTemplates=null
# Additional Properties Not To Expose
#was.J2CResource.additionalPropertiesNotToExpose=standardProvidersToIgnore,additionalProvidersToIgnore
# Additional Providers To Ignore
#was.J2CResource.additionalProvidersToIgnore=
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.J2CResource.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.J2CResource.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.J2CResource.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.Resource.createOrder)
#was.J2CResource.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.Resource.createScript)
#was.J2CResource.createScript=null
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.J2CResource.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.Resource.destroyOrder)
#was.J2CResource.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.Resource.destroyScript)
#was.J2CResource.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.J2CResource.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Resource.discoverOrder)
#was.J2CResource.discoverOrder=50
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.J2CResource.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.J2CResource.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.Resource.libraryScripts)
#was.J2CResource.libraryScripts=null
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.J2CResource.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.Resource.modifyScript)
#was.J2CResource.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.J2CResource.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.J2CResource.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.J2CResource.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.J2CResource.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.J2CResource.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.J2CResource.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# Standard Providers To Ignore
#was.J2CResource.standardProvidersToIgnore=SIB JMS Resource Adapter,WebSphere MQ Resource Adapter,WebSphere Relational Resource Adapter
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.J2CResource.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.J2CResource.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.J2CResource.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.J2CResource.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.J2CResource.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.J2CResource.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.J2CResource.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.J2CResource.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.J2CResource.syncAfterModifyOrder=65
# Additional Properties Not To Expose
#was.J2CResourceAdapter.additionalPropertiesNotToExpose=wasType,provider,customProperties,createEditionedOrder,rolloutEditionedOrder,rolloutEditionedVerb,rolloutEditionedScript,placeholders,nodeName
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ExtensibleDeployedArtifact.applyRestartStrategyOnNoop)
#was.J2CResourceAdapter.applyRestartStrategyOnNoop=false
# Specifies the path where the RAR file is to be installed. If you do not set the property, the application server extracts the RAR file to the absolute path that is represented by the variable CONNECTOR_INSTALL_ROOT.
#was.J2CResourceAdapter.archivePath=${CONNECTOR_INSTALL_ROOT}
# The set of created CIs. (inherited from: was.ExtensibleDeployedArtifact.boundConfigurationItems)
#was.J2CResourceAdapter.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ExtensibleDeployedArtifact.containerRestartStrategy)
#was.J2CResourceAdapter.containerRestartStrategy=NONE
# The order in which a create step for Editioned application will be executed(was85nd only). (inherited from: was.ExtensibleDeployedArtifact.createEditionedOrder)
#was.J2CResourceAdapter.createEditionedOrder=10
# The order in which a create step will be executed.
#was.J2CResourceAdapter.createOrder=57
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ExtensibleDeployedArtifact.createScript)
#was.J2CResourceAdapter.createScript=null
# The word that is used to prefix a step description for the create operation. (inherited from: was.ExtensibleDeployedArtifact.createVerb)
#was.J2CResourceAdapter.createVerb=Create
# The order in which a destroy step will be executed.
#was.J2CResourceAdapter.destroyOrder=41
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.J2CResourceAdapter.destroyScript=was/resources/ra/destroy-j2c-resource-adapter.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ExtensibleDeployedArtifact.destroyVerb)
#was.J2CResourceAdapter.destroyVerb=Destroy
# The order in which a discover step will be executed.
#was.J2CResourceAdapter.discoverOrder=45
# Discover Script
#was.J2CResourceAdapter.discoverScript=was/resources/ra/discover-inspect-j2c-resource-adapter.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ExtensibleDeployedArtifact.enableRippleStart)
#was.J2CResourceAdapter.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ExtensibleDeployedArtifact.exposeDeployedApplication)
#was.J2CResourceAdapter.exposeDeployedApplication=false
# Selection of the checkbox is not recommended without first consulting the product documentation for the resource adapter, because the checkbox requires the resource adapter to support high availability of inbound messaging. Not supported for: WAS_61.
#was.J2CResourceAdapter.hACapability=RA_NO_HA
# Enable HA support. The default value is false. Not supported for: WAS_61.
#was.J2CResourceAdapter.isEnableHASupport=false
# If selected, this resource provider will be loaded in its own class loader. This allows different versions of the same resource provider to be loaded in the same JVM. Each version of a provider should be given a unique class path appropriate for that version. NOTE: A provider cannot be isolated when a native library path is specified. Not supported for: WAS_61.
#was.J2CResourceAdapter.isolatedClassLoader=false
# List of scripts to be appended to the deployed's runtime script
#was.J2CResourceAdapter.libraryScripts=was/common/config/set-encoding.py,was/resources/ra/j2c-resource-adapter-lib.py,was/resources/ra/j2c-resource-lib.py
# The order in which a modify step will be executed.
#was.J2CResourceAdapter.modifyOrder=57
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.J2CResourceAdapter.modifyScript=was/resources/ra/modify-j2c-resource-adapter.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ExtensibleDeployedArtifact.modifyVerb)
#was.J2CResourceAdapter.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.ExtensibleDeployedArtifact.noopOrder)
#was.J2CResourceAdapter.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ExtensibleDeployedArtifact.noopScript)
#was.J2CResourceAdapter.noopScript=null
# Noop Verb (inherited from: was.ExtensibleDeployedArtifact.noopVerb)
#was.J2CResourceAdapter.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ExtensibleDeployedArtifact.restartStrategy)
#was.J2CResourceAdapter.restartStrategy=STOP_START
# The order in which a rollout step will be executed. (inherited from: was.ExtensibleDeployedArtifact.rolloutEditionedOrder)
#was.J2CResourceAdapter.rolloutEditionedOrder=20
# Python script invoked to rollout a Java EE artifact. (inherited from: was.ExtensibleDeployedArtifact.rolloutEditionedScript)
#was.J2CResourceAdapter.rolloutEditionedScript=null
# The word that is used to prefix a step description for the rollout operation. (inherited from: was.ExtensibleDeployedArtifact.rolloutEditionedVerb)
#was.J2CResourceAdapter.rolloutEditionedVerb=Rollout
# Selection of this checkbox is not recommended without first consulting the product documentation. Checking this box prevents more than one resource adapter JavaBean instance with the same resource adapter implementation class name from existing in the same JVM. This is an extremely restrictive environment. Not supported for: WAS_61.
#was.J2CResourceAdapter.singleton=false
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ExtensibleDeployedArtifact.standardPropertiesNotToExpose)
#was.J2CResourceAdapter.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ExtensibleDeployedArtifact.startOrder)
#was.J2CResourceAdapter.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ExtensibleDeployedArtifact.startScript)
#was.J2CResourceAdapter.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ExtensibleDeployedArtifact.startVerb)
#was.J2CResourceAdapter.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ExtensibleDeployedArtifact.stopOrder)
#was.J2CResourceAdapter.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ExtensibleDeployedArtifact.stopScript)
#was.J2CResourceAdapter.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ExtensibleDeployedArtifact.stopVerb)
#was.J2CResourceAdapter.stopVerb=Stop
# The order in which a synchronize after create step for Editioned application will be executed. (inherited from: was.ExtensibleDeployedArtifact.syncAfterCreateEditionedOrder)
#was.J2CResourceAdapter.syncAfterCreateEditionedOrder=11
# The order in which a synchronize after create step will be executed. (inherited from: was.ExtensibleDeployedArtifact.syncAfterCreateOrder)
#was.J2CResourceAdapter.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ExtensibleDeployedArtifact.syncAfterDestroyOrder)
#was.J2CResourceAdapter.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ExtensibleDeployedArtifact.syncAfterModifyOrder)
#was.J2CResourceAdapter.syncAfterModifyOrder=65
# Specifies the name of a thread pool that is part of the server configuration for the resource adapter. Set this property only if the resource adapter uses the work manager service. If you input a thread pool name that does not exist in the server configuration, WebSphere(R) Application Server uses the name DEFAULT.
#was.J2CResourceAdapter.threadPoolAlias=Default
# Was Type
#was.J2CResourceAdapter.wasType=J2CResourceAdapter
# The set of CI templates. (inherited from: udm.BaseDeployableArchiveArtifact.boundTemplates)
#was.J2CResourceAdapterSpec.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: udm.BaseDeployableArchiveArtifact.delimiters)
#was.J2CResourceAdapterSpec.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: udm.BaseDeployableArchiveArtifact.textFileNamesRegex)
#was.J2CResourceAdapterSpec.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# Additional Properties Not To Expose
#was.JaasAlias.additionalPropertiesNotToExpose=name,username,updateJaasScript,updateJaasOrder
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.JaasAlias.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.JaasAlias.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.JaasAlias.containerRestartStrategy=NONE
# The order in which a create step will be executed.
#was.JaasAlias.createOrder=58
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.JaasAlias.createScript=was/jaas/create-or-modify-jaas-alias.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.JaasAlias.createVerb=Create
# The order in which a destroy step will be executed.
#was.JaasAlias.destroyOrder=41
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.JaasAlias.destroyScript=was/jaas/destroy-jaas-alias.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.JaasAlias.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Resource.discoverOrder)
#was.JaasAlias.discoverOrder=50
# Discover Script
#was.JaasAlias.discoverScript=was/jaas/discover-jaas-alias.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.JaasAlias.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.JaasAlias.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#was.JaasAlias.libraryScripts=was/common/config/set-encoding.py,was/jaas/jaas-alias-lib.py
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.JaasAlias.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.JaasAlias.modifyScript=was/jaas/create-or-modify-jaas-alias.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.JaasAlias.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.JaasAlias.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.JaasAlias.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.JaasAlias.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.JaasAlias.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.JaasAlias.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.JaasAlias.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.JaasAlias.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.JaasAlias.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.JaasAlias.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.JaasAlias.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.JaasAlias.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.JaasAlias.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.JaasAlias.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.JaasAlias.syncAfterModifyOrder=65
# Update Jaas Order
#was.JaasAlias.updateJaasOrder=101
# Update Jaas Script
#was.JaasAlias.updateJaasScript=was/jaas/update-jaas.py
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.JaasAliasSpec.boundTemplates=null
# Additional Properties Not To Expose (inherited from: was.ServerConfigurationResource.additionalPropertiesNotToExpose)
#was.JavaProcessDefinition.additionalPropertiesNotToExpose=id,name,wasType,wasContainerTypes,defaultDiscoverName,customProperties,overwriteExistingValues,overwriteExistingCustomProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ServerConfigurationResource.applyRestartStrategyOnNoop)
#was.JavaProcessDefinition.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ServerConfigurationResource.boundConfigurationItems)
#was.JavaProcessDefinition.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ServerConfigurationResource.containerRestartStrategy)
#was.JavaProcessDefinition.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ServerConfigurationResource.createOrder)
#was.JavaProcessDefinition.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.JavaProcessDefinition.createScript=was/server/process/modify-process-def.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.ServerConfigurationResource.createVerb)
#was.JavaProcessDefinition.createVerb=Configure
# Default deployed name to be assigned to the CI when discovered.
#was.JavaProcessDefinition.defaultDiscoverName=JavaProcessDefinition
# The order in which a destroy step will be executed. (inherited from: was.ServerConfigurationResource.destroyOrder)
#was.JavaProcessDefinition.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ServerConfigurationResource.destroyScript)
#was.JavaProcessDefinition.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ServerConfigurationResource.destroyVerb)
#was.JavaProcessDefinition.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ServerConfigurationResource.discoverOrder)
#was.JavaProcessDefinition.discoverOrder=50
# Discover Script
#was.JavaProcessDefinition.discoverScript=was/server/process/discover-inspect-process-def.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ServerConfigurationResource.enableRippleStart)
#was.JavaProcessDefinition.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ServerConfigurationResource.exposeDeployedApplication)
#was.JavaProcessDefinition.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ServerConfigurationResource.libraryScripts)
#was.JavaProcessDefinition.libraryScripts=was/common/config/set-encoding.py,was/server/config-resource-lib.py
# The order in which a modify step will be executed. (inherited from: was.ServerConfigurationResource.modifyOrder)
#was.JavaProcessDefinition.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.JavaProcessDefinition.modifyScript=was/server/process/modify-process-def.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ServerConfigurationResource.modifyVerb)
#was.JavaProcessDefinition.modifyVerb=Configure
# The order of the step in the step list for the noop operation. (inherited from: was.ServerConfigurationResource.noopOrder)
#was.JavaProcessDefinition.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ServerConfigurationResource.noopScript)
#was.JavaProcessDefinition.noopScript=null
# Noop Verb (inherited from: was.ServerConfigurationResource.noopVerb)
#was.JavaProcessDefinition.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ServerConfigurationResource.restartStrategy)
#was.JavaProcessDefinition.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ServerConfigurationResource.standardPropertiesNotToExpose)
#was.JavaProcessDefinition.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ServerConfigurationResource.startOrder)
#was.JavaProcessDefinition.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ServerConfigurationResource.startScript)
#was.JavaProcessDefinition.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ServerConfigurationResource.startVerb)
#was.JavaProcessDefinition.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ServerConfigurationResource.stopOrder)
#was.JavaProcessDefinition.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ServerConfigurationResource.stopScript)
#was.JavaProcessDefinition.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ServerConfigurationResource.stopVerb)
#was.JavaProcessDefinition.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterCreateOrder)
#was.JavaProcessDefinition.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterDestroyOrder)
#was.JavaProcessDefinition.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterModifyOrder)
#was.JavaProcessDefinition.syncAfterModifyOrder=65
# List of container types on which the resource should be discovered. (inherited from: was.ServerConfigurationResource.wasContainerTypes)
#was.JavaProcessDefinition.wasContainerTypes=Server
# WebSphere admin resource type.
#was.JavaProcessDefinition.wasType=JavaProcessDef
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.JavaProcessDefinitionSpec.boundTemplates=null
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.JdbcProvider.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.JdbcProvider.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.JdbcProvider.containerRestartStrategy=NONE
# The order in which a create step will be executed.
#was.JdbcProvider.createOrder=58
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.JdbcProvider.createScript=was/JdbcProvider/create-or-modify-jdbc-provider.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.JdbcProvider.createVerb=Create
# The order in which a destroy step will be executed.
#was.JdbcProvider.destroyOrder=42
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.JdbcProvider.destroyScript=was/JdbcProvider/destroy-jdbc-provider.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.JdbcProvider.destroyVerb=Destroy
# The order in which a discover step will be executed.
#was.JdbcProvider.discoverOrder=45
# Discover Script
#was.JdbcProvider.discoverScript=was/JdbcProvider/discover-inspect-user-jdbc-provider.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.JdbcProvider.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.JdbcProvider.exposeDeployedApplication=false
# If selected, this resource provider will be loaded in its own class loader.
#was.JdbcProvider.isolatedClassLoader=false
# List of scripts to be appended to the deployed's runtime script
#was.JdbcProvider.libraryScripts=was/common/config/set-encoding.py,was/JdbcProvider/jdbc-provider-lib.py,was/JdbcProvider/discover-inspect-jdbc-provider-lib.py
# The order in which a modify step will be executed.
#was.JdbcProvider.modifyOrder=58
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.JdbcProvider.modifyScript=was/JdbcProvider/create-or-modify-jdbc-provider.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.JdbcProvider.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.JdbcProvider.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.JdbcProvider.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.JdbcProvider.noopVerb=Noop
# Specifies a provider type
#was.JdbcProvider.providerType=User-defined
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.JdbcProvider.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.JdbcProvider.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.JdbcProvider.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.JdbcProvider.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.JdbcProvider.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.JdbcProvider.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.JdbcProvider.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.JdbcProvider.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.JdbcProvider.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.JdbcProvider.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.JdbcProvider.syncAfterModifyOrder=65
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.JdbcProviderSpec.boundTemplates=null
# Specifies the interval, in seconds, after which an unused, aged connection is discarded (regardless of recent activity) by the pool maintenance thread.
#was.JmsConnectionFactory.ConnectionPool_agedTimeout=0
# Specifies the number of seconds that a connection request remains active, after which WebSphere Application Server issues a ConnectionWaitTimeout exception. The application server acts on this value only if you set the maximum pool size property.
#was.JmsConnectionFactory.ConnectionPool_connectionTimeout=180
# Determines the distribution of hash values in the table that indexes connection usage data. The hash values are used to match connection request credentials with the connections. A free pool distribution table size value that is higher than 1 can increase the efficiency of hash value distribution, to help minimize search collisions within the table. The value of 0 means random distribution.
#was.JmsConnectionFactory.ConnectionPool_freePoolDistributionTableSize=0
# Specifies the maximum number of connections to maintain in the pool per datasource. If the maximum number of connections is reached for a connection pool and all connections are in use for that connection pool, additional connection requests from that datasource will be denied only after the expiration of the time period specified for the connection timeout property.
#was.JmsConnectionFactory.ConnectionPool_maxConnections=10
# Specifies the minimum number of connections to maintain in the pool.
#was.JmsConnectionFactory.ConnectionPool_minConnections=1
# Specifies the number of partitions that are created in each of the free pools.
#was.JmsConnectionFactory.ConnectionPool_numberOfFreePoolPartitions=0
# Specifies the number of partitions that are created in each of the shared pools.
#was.JmsConnectionFactory.ConnectionPool_numberOfSharedPoolPartitions=0
# Specifies how to purge connections when a stale connection or fatal connection error is detected.
#was.JmsConnectionFactory.ConnectionPool_purgePolicy=EntirePool
# Specifies the interval, in seconds, between runs of the pool maintenance thread.
#was.JmsConnectionFactory.ConnectionPool_reapTime=180
# Specifies the maximum number of stuck connections that are allowed to accumulate in a pool before the connection manager rejects new connection requests.
#was.JmsConnectionFactory.ConnectionPool_stuckThreshold=0
# If the pool appears to be stuck (you have reached the stuck threshold), a resource exception is given to all new connection requests until the pool is unstuck. The stuck time property is the interval, in seconds, allowed for a single active connection to be in use to the backend resource before it is considered to be stuck.
#was.JmsConnectionFactory.ConnectionPool_stuckTime=0
# The stuck timer interval determines how often the connection pool checks for stuck connections. A stuck connection is an active connection that is not responding or returning to the connection pool. The default value is 0 seconds.
#was.JmsConnectionFactory.ConnectionPool_stuckTimerTime=0
# Specifies the period of time that the connection manager waits between creating connections while the connection manager operates in surge mode. The connection manager enforces the surge creation interval until the number of connections in the pool drops below the surge threshold value.
#was.JmsConnectionFactory.ConnectionPool_surgeCreationInterval=0
# Specifies the number of connections that can be created before the connection manager activates surge protection. Surge protection is an operating mode that limits connection creation according to a rate that you set through the surge creation interval property. The goal is to prevent overloading of a data source when too many connections are created simultaneously.
#was.JmsConnectionFactory.ConnectionPool_surgeThreshold=-1
# Specifies the maximum number of seconds that an idle connection can remain in the pool before being discarded by the maintenance thread.
#was.JmsConnectionFactory.ConnectionPool_unusedTimeout=1800
# Specifies the interval, in seconds, after which an unused, aged connection is discarded (regardless of recent activity) by the pool maintenance thread.
#was.JmsConnectionFactory.SessionPool_agedTimeout=0
# Specifies the number of seconds that a connection request remains active, after which WebSphere Application Server issues a ConnectionWaitTimeout exception. The application server acts on this value only if you set the maximum pool size property.
#was.JmsConnectionFactory.SessionPool_connectionTimeout=180
# Specifies the maximum number of connections to maintain in the pool per datasource. If the maximum number of connections is reached for a connection pool and all connections are in use for that connection pool, additional connection requests from that datasource will be denied only after the expiration of the time period specified for the connection timeout property.
#was.JmsConnectionFactory.SessionPool_maxConnections=10
# Specifies the minimum number of connections to maintain in the pool.
#was.JmsConnectionFactory.SessionPool_minConnections=1
# Specifies how to purge connections when a stale connection or fatal connection error is detected.
#was.JmsConnectionFactory.SessionPool_purgePolicy=FailingConnectionOnly
# Specifies the interval, in seconds, between runs of the pool maintenance thread.
#was.JmsConnectionFactory.SessionPool_reapTime=180
# Specifies the maximum number of seconds that an idle connection can remain in the pool before being discarded by the maintenance thread.
#was.JmsConnectionFactory.SessionPool_unusedTimeout=1800
# Determines if the connection factory will act as a resource which is capable of participation in distributed two phase commit processing.
#was.JmsConnectionFactory.XAEnabled=true
# Additional Properties Not To Expose
#was.JmsConnectionFactory.additionalPropertiesNotToExpose=jmsProvider,wasType,containerAuthDataAlias,mappingConfigAlias,ConnectionPool,SessionPool,customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.JmsResource.applyRestartStrategyOnNoop)
#was.JmsConnectionFactory.applyRestartStrategyOnNoop=false
# The value of this attribute specifies which of the defined authentication mechanisms for the corresponding resource adapter applies to this connection factory.
#was.JmsConnectionFactory.authMechanismPreference=BASIC_PASSWORD
# The set of created CIs. (inherited from: was.JmsResource.boundConfigurationItems)
#was.JmsConnectionFactory.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.JmsResource.containerRestartStrategy)
#was.JmsConnectionFactory.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.JmsResource.createOrder)
#was.JmsConnectionFactory.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.JmsResource.createScript)
#was.JmsConnectionFactory.createScript=was/jms/create-jms-object.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.JmsResource.createVerb)
#was.JmsConnectionFactory.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.JmsResource.destroyOrder)
#was.JmsConnectionFactory.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.JmsResource.destroyScript)
#was.JmsConnectionFactory.destroyScript=was/jms/destroy-jms-object.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.JmsResource.destroyVerb)
#was.JmsConnectionFactory.destroyVerb=Destroy
# Indicates that connection usage patterns should be monitored for potential programming model violations. Note that manageCachedHandles must also be true for the monitoring to work. 
#was.JmsConnectionFactory.diagnoseConnectionUsage=false
# The order in which a discover step will be executed. (inherited from: was.JmsResource.discoverOrder)
#was.JmsConnectionFactory.discoverOrder=50
# Discover Script (inherited from: was.JmsResource.discoverScript)
#was.JmsConnectionFactory.discoverScript=was/jms/discover-inspect-jms-objects.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.JmsResource.enableRippleStart)
#was.JmsConnectionFactory.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.JmsResource.exposeDeployedApplication)
#was.JmsConnectionFactory.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.JmsResource.libraryScripts)
#was.JmsConnectionFactory.libraryScripts=was/common/config/set-encoding.py,was/jms/jms-object-lib.py
# The J2EE1.3 programming model indicates that connections should always have a transaction context; however, some applications do not correctly have a transaction context associated with them. This setting enables whether the container will log the condition that there is a missing transaction context at the time that the connection is obtained to the activity log.
#was.JmsConnectionFactory.logMissingTransactionContext=true
# Whether cached handles (handles held in inst vars in a bean) should be tracked by the container. Tracking handles can cause large performance overhead if used at runtime; however, for debugging purposes it can be useful to enable handle management.
#was.JmsConnectionFactory.manageCachedHandles=false
# If not set and 'Container-managed authentication alias' is set, will default to 'DefaultPrincipalMapping.
#was.JmsConnectionFactory.mappingConfigAlias=DefaultPrincipalMapping
# The order in which a modify step will be executed. (inherited from: was.JmsResource.modifyOrder)
#was.JmsConnectionFactory.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.JmsResource.modifyScript)
#was.JmsConnectionFactory.modifyScript=was/jms/modify-jms-object.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.JmsResource.modifyVerb)
#was.JmsConnectionFactory.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.JmsResource.noopOrder)
#was.JmsConnectionFactory.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.JmsResource.noopScript)
#was.JmsConnectionFactory.noopScript=null
# Noop Verb (inherited from: was.JmsResource.noopVerb)
#was.JmsConnectionFactory.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.JmsResource.restartStrategy)
#was.JmsConnectionFactory.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.JmsResource.standardPropertiesNotToExpose)
#was.JmsConnectionFactory.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.JmsResource.startOrder)
#was.JmsConnectionFactory.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.JmsResource.startScript)
#was.JmsConnectionFactory.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.JmsResource.startVerb)
#was.JmsConnectionFactory.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.JmsResource.stopOrder)
#was.JmsConnectionFactory.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.JmsResource.stopScript)
#was.JmsConnectionFactory.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.JmsResource.stopVerb)
#was.JmsConnectionFactory.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.JmsResource.syncAfterCreateOrder)
#was.JmsConnectionFactory.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.JmsResource.syncAfterDestroyOrder)
#was.JmsConnectionFactory.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.JmsResource.syncAfterModifyOrder)
#was.JmsConnectionFactory.syncAfterModifyOrder=65
# Additional Properties Not To Expose (inherited from: was.ConfigResource.additionalPropertiesNotToExpose)
#was.JmsProvider.additionalPropertiesNotToExpose=wasType,provider,providerType,customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ConfigResource.applyRestartStrategyOnNoop)
#was.JmsProvider.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ConfigResource.boundConfigurationItems)
#was.JmsProvider.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ConfigResource.containerRestartStrategy)
#was.JmsProvider.containerRestartStrategy=NONE
# The order in which a create step will be executed.
#was.JmsProvider.createOrder=58
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ConfigResource.createScript)
#was.JmsProvider.createScript=was/common/config/create-or-modify-resource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.ConfigResource.createVerb)
#was.JmsProvider.createVerb=Create
# The order in which a destroy step will be executed.
#was.JmsProvider.destroyOrder=42
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ConfigResource.destroyScript)
#was.JmsProvider.destroyScript=was/common/config/destroy-resource.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ConfigResource.destroyVerb)
#was.JmsProvider.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ConfigResource.discoverOrder)
#was.JmsProvider.discoverOrder=50
# Discover Script (inherited from: was.ConfigResource.discoverScript)
#was.JmsProvider.discoverScript=was/common/config/discover-inspect-resource.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ConfigResource.enableRippleStart)
#was.JmsProvider.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ConfigResource.exposeDeployedApplication)
#was.JmsProvider.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ConfigResource.libraryScripts)
#was.JmsProvider.libraryScripts=was/common/config/set-encoding.py,was/common/config/admin-config-lib.py
# The order in which a modify step will be executed.
#was.JmsProvider.modifyOrder=58
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ConfigResource.modifyScript)
#was.JmsProvider.modifyScript=was/common/config/create-or-modify-resource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ConfigResource.modifyVerb)
#was.JmsProvider.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.ConfigResource.noopOrder)
#was.JmsProvider.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ConfigResource.noopScript)
#was.JmsProvider.noopScript=null
# Noop Verb (inherited from: was.ConfigResource.noopVerb)
#was.JmsProvider.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ConfigResource.restartStrategy)
#was.JmsProvider.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ConfigResource.standardPropertiesNotToExpose)
#was.JmsProvider.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ConfigResource.startOrder)
#was.JmsProvider.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ConfigResource.startScript)
#was.JmsProvider.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ConfigResource.startVerb)
#was.JmsProvider.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ConfigResource.stopOrder)
#was.JmsProvider.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ConfigResource.stopScript)
#was.JmsProvider.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ConfigResource.stopVerb)
#was.JmsProvider.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ConfigResource.syncAfterCreateOrder)
#was.JmsProvider.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ConfigResource.syncAfterDestroyOrder)
#was.JmsProvider.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ConfigResource.syncAfterModifyOrder)
#was.JmsProvider.syncAfterModifyOrder=65
# WebSphere admin resource type.
#was.JmsProvider.wasType=JMSProvider
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.JmsProviderSpec.boundTemplates=null
# Additional Properties Not To Expose
#was.JmsResource.additionalPropertiesNotToExpose=jmsProvider,wasType
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.JmsResource.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.JmsResource.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.JmsResource.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.Resource.createOrder)
#was.JmsResource.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.JmsResource.createScript=was/jms/create-jms-object.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.JmsResource.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.Resource.destroyOrder)
#was.JmsResource.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.JmsResource.destroyScript=was/jms/destroy-jms-object.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.JmsResource.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Resource.discoverOrder)
#was.JmsResource.discoverOrder=50
# Discover Script
#was.JmsResource.discoverScript=was/jms/discover-inspect-jms-objects.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.JmsResource.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.JmsResource.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#was.JmsResource.libraryScripts=was/common/config/set-encoding.py,was/jms/jms-object-lib.py
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.JmsResource.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.JmsResource.modifyScript=was/jms/modify-jms-object.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.JmsResource.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.JmsResource.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.JmsResource.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.JmsResource.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.JmsResource.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.JmsResource.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.JmsResource.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.JmsResource.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.JmsResource.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.JmsResource.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.JmsResource.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.JmsResource.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.JmsResource.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.JmsResource.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.JmsResource.syncAfterModifyOrder=65
# Additional Properties Not To Expose
#was.Keystore.additionalPropertiesNotToExpose=managementScope,useRelativePath,location,keyStoreType,description
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.Keystore.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.Keystore.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.Keystore.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.Resource.createOrder)
#was.Keystore.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.Keystore.createScript=was/security/create-keystore.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.Keystore.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.Resource.destroyOrder)
#was.Keystore.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.Keystore.destroyScript=was/security/destroy-keystore.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.Keystore.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Resource.discoverOrder)
#was.Keystore.discoverOrder=50
# Discover Script
#was.Keystore.discoverScript=was/security/discover-inspect-keystore.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.Keystore.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.Keystore.exposeDeployedApplication=false
# Specifies whether the keystore needs to be initialized before it can be used for cryptographic operations.
#was.Keystore.initializeAtStartup=false
# List of scripts to be appended to the deployed's runtime script
#was.Keystore.libraryScripts=was/common/config/set-encoding.py,was/security/security-lib.py
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.Keystore.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.Keystore.modifyScript=was/security/modify-keystore.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.Keystore.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.Keystore.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.Keystore.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.Keystore.noopVerb=Noop
# Specifies whether the keystore can be written to or not.
#was.Keystore.readOnly=false
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.Keystore.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.Keystore.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.Keystore.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.Keystore.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.Keystore.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.Keystore.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.Keystore.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.Keystore.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.Keystore.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.Keystore.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.Keystore.syncAfterModifyOrder=65
# when true, the path of the File is made relative using ${CONFIG_ROOT} but only when it matches the value of ${CONFIG_ROOT}
#was.Keystore.useRelativePath=true
# The set of CI templates. (inherited from: generic.File.boundTemplates)
#was.KeystoreFile.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: generic.File.delimiters)
#was.KeystoreFile.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: generic.File.textFileNamesRegex)
#was.KeystoreFile.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.KeystoreSpec.boundTemplates=null
# Additional Properties Not To Expose
#was.ListenerPort.additionalPropertiesNotToExpose=initialStateStarted,wasType
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.ListenerPort.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.ListenerPort.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.ListenerPort.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.Resource.createOrder)
#was.ListenerPort.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.ListenerPort.createScript=was/server/create-listenerport.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.ListenerPort.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.Resource.destroyOrder)
#was.ListenerPort.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.ListenerPort.destroyScript=was/server/destroy-listenerport.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.ListenerPort.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Resource.discoverOrder)
#was.ListenerPort.discoverOrder=50
# Discover Script
#was.ListenerPort.discoverScript=was/server/discover-inspect-listenerport.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.ListenerPort.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.ListenerPort.exposeDeployedApplication=false
# If unset, The Execution state requested when the server is first started,is 'stopped'.
#was.ListenerPort.initialStateStarted=true
# List of scripts to be appended to the deployed's runtime script
#was.ListenerPort.libraryScripts=was/common/config/set-encoding.py,was/server/discover-inspect-containerproperties-lib.py
# The maximum number of messages that the listener can process in one transaction, The default is 1.
#was.ListenerPort.maxMessages=1
# The maximum number of times that the listener tries to deliver a message to a message-driven bean instance before the listener is stopped, in the range 0 through 2147483647, The default is 0.
#was.ListenerPort.maxRetries=0
# The maximum number of concurrent sessions that a listener can have with the JMS server to process messages, The default is 1.
#was.ListenerPort.maxSessions=1
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.ListenerPort.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.Resource.modifyScript)
#was.ListenerPort.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.ListenerPort.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.ListenerPort.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.ListenerPort.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.ListenerPort.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.ListenerPort.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.ListenerPort.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.ListenerPort.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.ListenerPort.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.ListenerPort.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.ListenerPort.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.ListenerPort.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.ListenerPort.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.ListenerPort.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.ListenerPort.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.ListenerPort.syncAfterModifyOrder=65
# WAS config type of ListenerPort.
#was.ListenerPort.wasType=ListenerPort
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.ListenerPortSpec.boundTemplates=null
# Additional Properties Not To Expose (inherited from: was.ServerConfigurationResource.additionalPropertiesNotToExpose)
#was.LoggingAndTracing.additionalPropertiesNotToExpose=id,name,wasType,wasContainerTypes,defaultDiscoverName,customProperties,overwriteExistingValues,overwriteExistingCustomProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ServerConfigurationResource.applyRestartStrategyOnNoop)
#was.LoggingAndTracing.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ServerConfigurationResource.boundConfigurationItems)
#was.LoggingAndTracing.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ServerConfigurationResource.containerRestartStrategy)
#was.LoggingAndTracing.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ServerConfigurationResource.createOrder)
#was.LoggingAndTracing.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.LoggingAndTracing.createScript=was/server/logging/modify-logging.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.ServerConfigurationResource.createVerb)
#was.LoggingAndTracing.createVerb=Configure
# Default deployed name to be assigned to the CI when discovered.
#was.LoggingAndTracing.defaultDiscoverName=LoggingAndTracing
# The order in which a destroy step will be executed. (inherited from: was.ServerConfigurationResource.destroyOrder)
#was.LoggingAndTracing.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ServerConfigurationResource.destroyScript)
#was.LoggingAndTracing.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ServerConfigurationResource.destroyVerb)
#was.LoggingAndTracing.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ServerConfigurationResource.discoverOrder)
#was.LoggingAndTracing.discoverOrder=50
# Discover Script
#was.LoggingAndTracing.discoverScript=was/server/logging/discover-inspect-logging.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ServerConfigurationResource.enableRippleStart)
#was.LoggingAndTracing.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ServerConfigurationResource.exposeDeployedApplication)
#was.LoggingAndTracing.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ServerConfigurationResource.libraryScripts)
#was.LoggingAndTracing.libraryScripts=was/common/config/set-encoding.py,was/server/config-resource-lib.py
# The order in which a modify step will be executed. (inherited from: was.ServerConfigurationResource.modifyOrder)
#was.LoggingAndTracing.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.LoggingAndTracing.modifyScript=was/server/logging/modify-logging.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ServerConfigurationResource.modifyVerb)
#was.LoggingAndTracing.modifyVerb=Configure
# The order of the step in the step list for the noop operation. (inherited from: was.ServerConfigurationResource.noopOrder)
#was.LoggingAndTracing.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ServerConfigurationResource.noopScript)
#was.LoggingAndTracing.noopScript=null
# Noop Verb (inherited from: was.ServerConfigurationResource.noopVerb)
#was.LoggingAndTracing.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ServerConfigurationResource.restartStrategy)
#was.LoggingAndTracing.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ServerConfigurationResource.standardPropertiesNotToExpose)
#was.LoggingAndTracing.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ServerConfigurationResource.startOrder)
#was.LoggingAndTracing.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ServerConfigurationResource.startScript)
#was.LoggingAndTracing.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ServerConfigurationResource.startVerb)
#was.LoggingAndTracing.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ServerConfigurationResource.stopOrder)
#was.LoggingAndTracing.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ServerConfigurationResource.stopScript)
#was.LoggingAndTracing.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ServerConfigurationResource.stopVerb)
#was.LoggingAndTracing.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterCreateOrder)
#was.LoggingAndTracing.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterDestroyOrder)
#was.LoggingAndTracing.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterModifyOrder)
#was.LoggingAndTracing.syncAfterModifyOrder=65
# List of container types on which the resource should be discovered. (inherited from: was.ServerConfigurationResource.wasContainerTypes)
#was.LoggingAndTracing.wasContainerTypes=Server
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.LoggingAndTracingSpec.boundTemplates=null
# Additional Properties Not To Expose (inherited from: was.OneOfNPolicy.additionalPropertiesNotToExpose)
#was.MOfNPolicy.additionalPropertiesNotToExpose=id,type,wasType,deployable,container,customProperties,matchCriteria,servers,preferredServers
# Specifies the number of group members to activate at startup.
#was.MOfNPolicy.numActive=1
# The fully qualified name of the Java interface that serves as a factory for a specific type of concrete HAManagerPolicy.
#was.MOfNPolicy.policyFactory=com.ibm.ws.hamanager.coordinator.policy.impl.MOfNPolicyFactory
# WebSphere admin resource type.
#was.MOfNPolicy.wasType=MOfNPolicy
# Additional Properties Not To Expose
#was.MailProvider.additionalPropertiesNotToExpose=isolatedClassLoader,classpath,customProperties,defaultStoreProtocolProviders,defaultTransportProtocolProviders
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.MailProvider.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.MailProvider.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.MailProvider.containerRestartStrategy=NONE
# The order in which a create step will be executed.
#was.MailProvider.createOrder=59
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.MailProvider.createScript=was/mail/create-mailprovider.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.MailProvider.createVerb=Create
# Default Store Protocol Providers
#was.MailProvider.defaultStoreProtocolProviders=com.sun.mail.pop3.POP3Store:pop3, com.sun.mail.pop3.POP3SSLStore:pop3s, com.sun.mail.imap.IMAPStore:imap, com.sun.mail.imap.IMAPSSLStore:imaps
# Default Transport Protocol Providers
#was.MailProvider.defaultTransportProtocolProviders=com.sun.mail.smtp.SMTPTransport:smtp, com.sun.mail.smtp.SMTPSSLTransport:smtps
# The order in which a destroy step will be executed.
#was.MailProvider.destroyOrder=41
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.MailProvider.destroyScript=was/mail/destroy-mailprovider.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.MailProvider.destroyVerb=Destroy
# The order in which a discover step will be executed.
#was.MailProvider.discoverOrder=45
# Discover Script
#was.MailProvider.discoverScript=was/mail/discover-inspect-mailprovider.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.MailProvider.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.MailProvider.exposeDeployedApplication=false
# Specifies that this mail provider will be loaded in its own class loader.
#was.MailProvider.isolatedClassLoader=false
# List of scripts to be appended to the deployed's runtime script
#was.MailProvider.libraryScripts=was/common/config/set-encoding.py,was/mail/mail-object-lib.py
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.MailProvider.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.MailProvider.modifyScript=was/mail/modify-mailprovider.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.MailProvider.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.MailProvider.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.MailProvider.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.MailProvider.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.MailProvider.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.MailProvider.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.MailProvider.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.MailProvider.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.MailProvider.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.MailProvider.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.MailProvider.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.MailProvider.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.MailProvider.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.MailProvider.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.MailProvider.syncAfterModifyOrder=65
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.MailProviderSpec.boundTemplates=null
# Additional Properties Not To Expose
#was.MailSession.additionalPropertiesNotToExpose=provider,customProperties,mailStoreHost,mailStoreUser,mailStorePassword,mailStoreProtocol,mailFrom,mailTransportHost,mailTransportUser,mailTransportPassword,mailTransportProtocol
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.MailSession.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.MailSession.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.MailSession.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.Resource.createOrder)
#was.MailSession.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.MailSession.createScript=was/mail/create-mailsession.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.MailSession.createVerb=Create
# Toggles debug mode on and off for this mail session.
#was.MailSession.debug=false
# The order in which a destroy step will be executed. (inherited from: was.Resource.destroyOrder)
#was.MailSession.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.MailSession.destroyScript=was/mail/destroy-mailsession.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.MailSession.destroyVerb=Destroy
# The order in which a discover step will be executed.
#was.MailSession.discoverOrder=46
# Discover Script
#was.MailSession.discoverScript=was/mail/discover-inspect-mailsession.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.MailSession.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.MailSession.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#was.MailSession.libraryScripts=was/common/config/set-encoding.py,was/mail/mail-object-lib.py
# Specifies the protocol to be used when receiving mail.
#was.MailSession.mailStoreProtocol=imap
# Specifies the transport protocol to use when sending mail.
#was.MailSession.mailTransportProtocol=smtp
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.MailSession.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.Resource.modifyScript)
#was.MailSession.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.MailSession.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.MailSession.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.MailSession.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.MailSession.noopVerb=Noop
# Specifies the mail provider that the application server uses for this mail session.
#was.MailSession.provider=Built-in Mail Provider
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.MailSession.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.MailSession.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.MailSession.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.MailSession.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.MailSession.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.MailSession.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.MailSession.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.MailSession.stopVerb=Stop
# Specifies whether the recipient addresses must be parsed in strict compliance with RFC 822, which is a specifications document issued by the Internet Architecture Board.
#was.MailSession.strict=true
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.MailSession.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.MailSession.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.MailSession.syncAfterModifyOrder=65
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.MailSessionSpec.boundTemplates=null
# When true, the restart strategy is apply for a NOOP operation
#was.ManagedServer.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ExtensibleDeployedContainer.boundConfigurationItems)
#was.ManagedServer.boundConfigurationItems=null
# Restart strategy used when deploying. Valid values are: NONE, STOP_START, RESTART. If the STOP_START strategy is used, the container will be stopped before the deployment and started after the deployment. If the RESTART strategy is used, the deployment will be executed, and then the container will be restarted using the restart script. If there is no restart script defined, the deployment will be executed, and then the container will be stopped and immediately started. Ensure that the containerRestartStrategy property is defined on was.Module and its subtypes.
#was.ManagedServer.containerRestartStrategy=NONE
# The order in which a create step will be executed.
#was.ManagedServer.createOrder=57
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ExtensibleDeployedContainer.createScript)
#was.ManagedServer.createScript=null
# The word that is used to prefix a step description for the create operation. (inherited from: was.ExtensibleDeployedContainer.createVerb)
#was.ManagedServer.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.ExtensibleDeployedContainer.destroyOrder)
#was.ManagedServer.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ExtensibleDeployedContainer.destroyScript)
#was.ManagedServer.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ExtensibleDeployedContainer.destroyVerb)
#was.ManagedServer.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ExtensibleDeployedContainer.discoverOrder)
#was.ManagedServer.discoverOrder=50
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ExtensibleDeployedContainer.enableRippleStart)
#was.ManagedServer.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ExtensibleDeployedContainer.exposeDeployedApplication)
#was.ManagedServer.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ExtensibleDeployedContainer.libraryScripts)
#was.ManagedServer.libraryScripts=null
# The number of attempts to start, stop, and restart the server before failing.
#was.ManagedServer.maxRetries=5
# The order in which a modify step will be executed. (inherited from: was.ExtensibleDeployedContainer.modifyOrder)
#was.ManagedServer.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ExtensibleDeployedContainer.modifyScript)
#was.ManagedServer.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ExtensibleDeployedContainer.modifyVerb)
#was.ManagedServer.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.ExtensibleDeployedContainer.noopOrder)
#was.ManagedServer.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ExtensibleDeployedContainer.noopScript)
#was.ManagedServer.noopScript=null
# Noop Verb (inherited from: was.ExtensibleDeployedContainer.noopVerb)
#was.ManagedServer.noopVerb=Noop
# Restart Order
#was.ManagedServer.restartOrder=80
# Restart strategy used when deploying. Valid values are: NONE, STOP_START, STOP, START.
#was.ManagedServer.restartStrategy=STOP_START
# Server type. Possible values are: PROXY_SERVER, APPLICATION_SERVER, ONDEMAND_ROUTER. Default value: APPLICATION_SERVER.
#was.ManagedServer.serverType=APPLICATION_SERVER
# The amount of time in seconds to wait before retrying start, stop, and restart of the server.
#was.ManagedServer.sleepTime=5
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ExtensibleDeployedContainer.standardPropertiesNotToExpose)
#was.ManagedServer.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed.
#was.ManagedServer.startOrder=80
# Python script invoked to start a Java EE artifact or Java EE resource
#was.ManagedServer.startScript=was/container/start-server.py
# The word that is used to prefix a step description for the start operation. (inherited from: was.ExtensibleDeployedContainer.startVerb)
#was.ManagedServer.startVerb=Start
# The order in which a stop step will be executed.
#was.ManagedServer.stopOrder=20
# Python script invoked to stop a Java EE artifact or Java EE resource
#was.ManagedServer.stopScript=was/container/stop-server.py
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ExtensibleDeployedContainer.stopVerb)
#was.ManagedServer.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ExtensibleDeployedContainer.syncAfterCreateOrder)
#was.ManagedServer.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ExtensibleDeployedContainer.syncAfterDestroyOrder)
#was.ManagedServer.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ExtensibleDeployedContainer.syncAfterModifyOrder)
#was.ManagedServer.syncAfterModifyOrder=65
# The weight to assign to this managed server within a cluster. Default value: 2. Has no meaning if used on a standalone server.
#was.ManagedServer.weight=2
# Apply Restart Strategy On Noop
#was.ManagedServerSpec.applyRestartStrategyOnNoop=false
# The set of CI templates. (inherited from: was.DeployableContainer.boundTemplates)
#was.ManagedServerSpec.boundTemplates=null
# Restart strategy used when deploying. Valid values are: NONE, STOP_START, RESTART. If the STOP_START strategy is used, the container will be stopped before the deployment and started after the deployment. If the RESTART strategy is used, the deployment will be executed, and then the container will be restarted using the restart script. If there is no restart script defined, the deployment will be executed, and then the container will be stopped and immediately started. Ensure that the containerRestartStrategy property is defined on was.Module and its subtypes.
#was.ManagedServerSpec.containerRestartStrategy=NONE
# The number of attempts to start, stop, and restart the server before failing.
#was.ManagedServerSpec.maxRetries=5
# Restart strategy used when deploying. Valid values are: NONE, STOP_START, STOP, START.
#was.ManagedServerSpec.restartStrategy=STOP_START
# Server type. Possible values are: PROXY_SERVER, APPLICATION_SERVER, ONDEMAND_ROUTER
#was.ManagedServerSpec.serverType=APPLICATION_SERVER
# The amount of time in seconds to wait before retrying start, stop, and restart of the server.
#was.ManagedServerSpec.sleepTime=5
# The weight to assign to this managed server within a cluster. Default value: 2. Has no meaning if used on a standalone server.
#was.ManagedServerSpec.weight=2
# Specifies the path for the IBM HTTP Server access log (access.log).
#was.ManagedWebServer.accessLogfile=
# Specifies the password for the user ID. The password is generated by the htpasswd utility in the admin.passwd file.
#was.ManagedWebServer.adminPasswd=
# Specifies the port of the IBM HTTP Server administrative server. The administration server is installed on the same machine as the IBM HTTP Server and handles administrative requests to the IBM HTTP Server web server.
#was.ManagedWebServer.adminPort=
# Specifies the administrative protocol title. Options include HTTP or HTTPS. The default is HTTP.
#was.ManagedWebServer.adminProtocol=
# Specifies the user ID, if authentication is activated on the Administration server in the admin configuration file (admin.conf). This value should match the authentication in the admin.conf file.
#was.ManagedWebServer.adminUserID=
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ExtensibleDeployedContainer.applyRestartStrategyOnNoop)
#was.ManagedWebServer.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ExtensibleDeployedContainer.boundConfigurationItems)
#was.ManagedWebServer.boundConfigurationItems=null
# Specifies the config filepath for the web server.
#was.ManagedWebServer.configPath=/opt/IBM/HTTPServer/conf/httpd.conf
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ExtensibleDeployedContainer.containerRestartStrategy)
#was.ManagedWebServer.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ExtensibleDeployedContainer.createOrder)
#was.ManagedWebServer.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ExtensibleDeployedContainer.createScript)
#was.ManagedWebServer.createScript=null
# The word that is used to prefix a step description for the create operation. (inherited from: was.ExtensibleDeployedContainer.createVerb)
#was.ManagedWebServer.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.ExtensibleDeployedContainer.destroyOrder)
#was.ManagedWebServer.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ExtensibleDeployedContainer.destroyScript)
#was.ManagedWebServer.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ExtensibleDeployedContainer.destroyVerb)
#was.ManagedWebServer.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ExtensibleDeployedContainer.discoverOrder)
#was.ManagedWebServer.discoverOrder=50
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ExtensibleDeployedContainer.enableRippleStart)
#was.ManagedWebServer.enableRippleStart=false
# Specifies the path for the IBM HTTP Server error log (error.log)
#was.ManagedWebServer.errorLogfile=
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ExtensibleDeployedContainer.exposeDeployedApplication)
#was.ManagedWebServer.exposeDeployedApplication=false
# Generate Plugin Order
#was.ManagedWebServer.generatePluginOrder=83
# Generate Plugin Script
#was.ManagedWebServer.generatePluginScript=was/container/generate-webserver-plugin.py
# Specifies the install path directory for the web server. This option is required for IBM HTTP Server Admin Function.
#was.ManagedWebServer.installPath=/opt/IBM/HTTPServer
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ExtensibleDeployedContainer.libraryScripts)
#was.ManagedWebServer.libraryScripts=null
# The number of attempts to start, stop, and restart the server before failing.
#was.ManagedWebServer.maxRetries=5
# The order in which a modify step will be executed. (inherited from: was.ExtensibleDeployedContainer.modifyOrder)
#was.ManagedWebServer.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ExtensibleDeployedContainer.modifyScript)
#was.ManagedWebServer.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ExtensibleDeployedContainer.modifyVerb)
#was.ManagedWebServer.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.ExtensibleDeployedContainer.noopOrder)
#was.ManagedWebServer.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ExtensibleDeployedContainer.noopScript)
#was.ManagedWebServer.noopScript=null
# Noop Verb (inherited from: was.ExtensibleDeployedContainer.noopVerb)
#was.ManagedWebServer.noopVerb=Noop
# Specifies whether to allow a newly created plug-in process to proactively request a partition table from WebSphere Application Server before it handles any HTTP requests. This custom property is used only when memory-to-memory session management is configured. If the value is set to true, this custom property is enabled. If the value is set to false, the custom property is disabled. By default, the value is set to false.
#was.ManagedWebServer.pluginGetDWLMTable=true
# Specifies the installation root directory where the plug-in for the web server is installed. This option is required for all web servers.
#was.ManagedWebServer.pluginInstallPath=/opt/IBM/HTTPServer/Plugins
# Specifies the port number of the web server. This option is required for all web servers.
#was.ManagedWebServer.port=80
# Propagate Plugin Order
#was.ManagedWebServer.propagatePluginOrder=84
# Propagate Plugin Script
#was.ManagedWebServer.propagatePluginScript=was/container/propagate-webserver-plugin.py
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ExtensibleDeployedContainer.restartStrategy)
#was.ManagedWebServer.restartStrategy=STOP_START
# Specifies the windows service name on which to start the IBM HTTP Server. This option is required for start and stop of the IBM HTTP Server web server only.
#was.ManagedWebServer.serviceName=
# The amount of time in seconds to wait before retrying start, stop, and restart of the server.
#was.ManagedWebServer.sleepTime=5
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ExtensibleDeployedContainer.standardPropertiesNotToExpose)
#was.ManagedWebServer.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed.
#was.ManagedWebServer.startOrder=85
# Python script invoked to start a Java EE artifact or Java EE resource
#was.ManagedWebServer.startScript=was/container/start-webserver.py
# The word that is used to prefix a step description for the start operation. (inherited from: was.ExtensibleDeployedContainer.startVerb)
#was.ManagedWebServer.startVerb=Start
# The order in which a stop step will be executed.
#was.ManagedWebServer.stopOrder=15
# Python script invoked to stop a Java EE artifact or Java EE resource
#was.ManagedWebServer.stopScript=was/container/stop-webserver.py
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ExtensibleDeployedContainer.stopVerb)
#was.ManagedWebServer.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ExtensibleDeployedContainer.syncAfterCreateOrder)
#was.ManagedWebServer.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ExtensibleDeployedContainer.syncAfterDestroyOrder)
#was.ManagedWebServer.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ExtensibleDeployedContainer.syncAfterModifyOrder)
#was.ManagedWebServer.syncAfterModifyOrder=65
# If set, the plugin configuration for this web server will be generated and propagated.
#was.ManagedWebServer.updatePlugin=true
# Specifies the IBM HTTP Server administration server running with an unmanaged or remote web server. Options include HTTP or HTTPS. The default is HTTP.
#was.ManagedWebServer.webProtocol=
# Specifies the name of the template that you want to use. Templates include the following: IHS, iPlanet, IIS, DOMINO, APACHE. The default template is IHS.
#was.ManagedWebServer.webserverType=IHS
# Specifies the path for the IBM HTTP Server access log (access.log).
#was.ManagedWebServerSpec.accessLogfile=
# Specifies the password for the user ID. The password is generated by the htpasswd utility in the admin.passwd file.
#was.ManagedWebServerSpec.adminPasswd=
# Specifies the port of the IBM HTTP Server administrative server. The administration server is installed on the same machine as the IBM HTTP Server and handles administrative requests to the IBM HTTP Server web server.
#was.ManagedWebServerSpec.adminPort=
# Specifies the administrative protocol title. Options include HTTP or HTTPS. The default is HTTP.
#was.ManagedWebServerSpec.adminProtocol=
# Specifies the user ID, if authentication is activated on the Administration server in the admin configuration file (admin.conf). This value should match the authentication in the admin.conf file.
#was.ManagedWebServerSpec.adminUserID=
# The set of CI templates. (inherited from: was.DeployableContainer.boundTemplates)
#was.ManagedWebServerSpec.boundTemplates=null
# Specifies the config filepath for the web server.
#was.ManagedWebServerSpec.configPath=/opt/IBM/HTTPServer/conf/httpd.conf
# Specifies the path for the IBM HTTP Server error log (error.log)
#was.ManagedWebServerSpec.errorLogfile=
# Specifies the install path directory for the web server. This option is required for IBM HTTP Server Admin Function.
#was.ManagedWebServerSpec.installPath=/opt/IBM/HTTPServer
# The number of attempts to start, stop, and restart the server before failing.
#was.ManagedWebServerSpec.maxRetries=5
# Specifies whether to allow a newly created plug-in process to proactively request a partition table from WebSphere Application Server before it handles any HTTP requests. This custom property is used only when memory-to-memory session management is configured. If the value is set to true, this custom property is enabled. If the value is set to false, the custom property is disabled. By default, the value is set to false.
#was.ManagedWebServerSpec.pluginGetDWLMTable=TRUE
# Specifies the installation root directory where the plug-in for the web server is installed. This option is required for all web servers.
#was.ManagedWebServerSpec.pluginInstallPath=/opt/IBM/HTTPServer/Plugins
# Specifies the port number of the web server. This option is required for all web servers.
#was.ManagedWebServerSpec.port=80
# Specifies the windows service name on which to start the IBM HTTP Server. This option is required for start and stop of the IBM HTTP Server web server only.
#was.ManagedWebServerSpec.serviceName=
# The amount of time in seconds to wait before retrying start, stop, and restart of the server.
#was.ManagedWebServerSpec.sleepTime=5
# If set, the plugin configuration for this web server will be generated and propagated.
#was.ManagedWebServerSpec.updatePlugin=TRUE
# Specifies the IBM HTTP Server administration server running with an unmanaged or remote web server. Options include HTTP or HTTPS. The default is HTTP.
#was.ManagedWebServerSpec.webProtocol=
# Specifies the name of the template that you want to use. Templates include the following: IHS, iPlanet, IIS, DOMINO, APACHE. The default template is IHS.
#was.ManagedWebServerSpec.webserverType=IHS
# The additional install flags to be passed to AdminApp.install
#was.Module.additionalInstallFlags=-usedefaultbindings
# When true, the restart strategy is apply for a NOOP operation
#was.Module.applyRestartStrategyOnNoop=false
# Enables asynchronous dispatching and specifies how to aggregate the content.
#was.Module.asyncRequestDispatchType=DISABLED
# The set of created CIs. (inherited from: was.ExtensibleDeployedArtifact.boundConfigurationItems)
#was.Module.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container.
#was.Module.containerRestartStrategy=NONE
# The order in which a create step for Editioned application will be executed(was85nd only). (inherited from: was.ExtensibleDeployedArtifact.createEditionedOrder)
#was.Module.createEditionedOrder=10
# The order in which a create step will be executed.
#was.Module.createOrder=70
# Python wsadmin script invoked to create a Java EE artifact.
#was.Module.createScript=was/application/deploy-application.py
# The word is used to prefix a step description for the create operation.
#was.Module.createVerb=Deploy
# The order in which a destroy step will be executed.
#was.Module.destroyOrder=30
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.Module.destroyScript=was/application/undeploy-application.py
# The word that is used to prefix a step description for the destroy operation.
#was.Module.destroyVerb=Undeploy
# The order in which a discover step will be executed. (inherited from: was.ExtensibleDeployedArtifact.discoverOrder)
#was.Module.discoverOrder=50
# Drainage interval in seconds.
#was.Module.drainageInterval=30
# Specifies whether the application is distributed automatically to other nodes on the cell. The default is for automatic distribution.
#was.Module.enableDistribution=true
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ExtensibleDeployedArtifact.enableRippleStart)
#was.Module.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ExtensibleDeployedArtifact.exposeDeployedApplication)
#was.Module.exposeDeployedApplication=false
# Specifies num of members in a cluster.
#was.Module.groupSize=1
# Edition used by this application.
#was.Module.isEdition=false
# List of scripts to be appended to the deployed's runtime script
#was.Module.libraryScripts=was/common/config/set-encoding.py,was/application/discover-app-module-lib.py,was/application/deploy-application-lib.py
# The order in which a modify step will be executed.
#was.Module.modifyOrder=70
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ExtensibleDeployedArtifact.modifyScript)
#was.Module.modifyScript=null
# The word is used to prefix a step description for the modify operation.
#was.Module.modifyVerb=Update
# The order of the step in the step list for the noop operation. (inherited from: was.ExtensibleDeployedArtifact.noopOrder)
#was.Module.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ExtensibleDeployedArtifact.noopScript)
#was.Module.noopScript=null
# Noop Verb (inherited from: was.ExtensibleDeployedArtifact.noopVerb)
#was.Module.noopVerb=Noop
# Indicates type of reset strategy.
#was.Module.resetStrategy=SOFT
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start.
#was.Module.restartStrategy=STOP_START
# Number of retry attempts to check if an application has been distributed before attempting the application start.
#was.Module.retryAttemptsForAppReadyCheck=6
# The order in which a rollout step will be executed. (inherited from: was.ExtensibleDeployedArtifact.rolloutEditionedOrder)
#was.Module.rolloutEditionedOrder=20
# Python wsadmin script invoked to perform rollout.
#was.Module.rolloutEditionedScript=was/application/rollout-edition.py
# The word that is used to prefix a step description for the rollout operation. (inherited from: was.ExtensibleDeployedArtifact.rolloutEditionedVerb)
#was.Module.rolloutEditionedVerb=Rollout
# Indicates type of rollout strategy.
#was.Module.rolloutStrategy=GROUPED
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ExtensibleDeployedArtifact.standardPropertiesNotToExpose)
#was.Module.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed.
#was.Module.startOrder=90
# Python wsadmin script invoked to start running a Java EE artifact.
#was.Module.startScript=was/application/start-application.py
# The word that is used to prefix a step description for the start operation. (inherited from: was.ExtensibleDeployedArtifact.startVerb)
#was.Module.startVerb=Start
# Specifies the order in which modules are started when the server starts. The module with the lowest starting weight is started first.
#was.Module.startingWeight=1
# The order in which a stop step will be executed.
#was.Module.stopOrder=10
# Python script invoked to stop a Java EE artifact or Java EE resource
#was.Module.stopScript=was/application/stop-application.py
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ExtensibleDeployedArtifact.stopVerb)
#was.Module.stopVerb=Stop
# The order in which a synchronize after create step for Editioned application will be executed. (inherited from: was.ExtensibleDeployedArtifact.syncAfterCreateEditionedOrder)
#was.Module.syncAfterCreateEditionedOrder=11
# The order in which a synchronize after create step will be executed.
#was.Module.syncAfterCreateOrder=75
# The order in which a synchronize after destroy step will be executed.
#was.Module.syncAfterDestroyOrder=35
# The order in which a synchronize after modify step will be executed.
#was.Module.syncAfterModifyOrder=75
# Additional Properties Not To Expose (inherited from: was.Datasource.additionalPropertiesNotToExpose)
#was.MsSqlDatasource.additionalPropertiesNotToExpose=name,alias,containerManagedPersistence,description,jndiName,createJaasAlias,jdbcProvider,username,password,ConnectionPool,datasourceHelperClassname,customProperties,allowExistingJaasAlias,jaasAliasName,useJaasAliasForXaRecovery,useJaasAliasForContainerManagedAuthentication,mappingConfigAlias,testConnection,testConnectionScript,testConnectionOrder,updateJaasScript,updateJaasOrder
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Datasource.applyRestartStrategyOnNoop)
#was.MsSqlDatasource.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Datasource.boundConfigurationItems)
#was.MsSqlDatasource.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Datasource.containerRestartStrategy)
#was.MsSqlDatasource.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.Datasource.createOrder)
#was.MsSqlDatasource.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.Datasource.createScript)
#was.MsSqlDatasource.createScript=was/datasource/create-or-modify-datasource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Datasource.createVerb)
#was.MsSqlDatasource.createVerb=Create
# Specifies the data store helper class, an interface through which a datasource is triggered by a database to perform functions specific to that database vendor.
#was.MsSqlDatasource.datasourceHelperClassname=com.ibm.websphere.rsadapter.MicrosoftSQLServerDataStoreHelper
# The order in which a destroy step will be executed. (inherited from: was.Datasource.destroyOrder)
#was.MsSqlDatasource.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.Datasource.destroyScript)
#was.MsSqlDatasource.destroyScript=was/datasource/destroy-datasource.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Datasource.destroyVerb)
#was.MsSqlDatasource.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Datasource.discoverOrder)
#was.MsSqlDatasource.discoverOrder=50
# Discover Script
#was.MsSqlDatasource.discoverScript=was/datasource/discover-inspect-mssql-datasources.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Datasource.enableRippleStart)
#was.MsSqlDatasource.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Datasource.exposeDeployedApplication)
#was.MsSqlDatasource.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.Datasource.libraryScripts)
#was.MsSqlDatasource.libraryScripts=was/common/config/set-encoding.py,was/datasource/datasource-lib.py,was/datasource/discover-inspect-datasource-lib.py,was/jaas/jaas-alias-lib.py
# The order in which a modify step will be executed. (inherited from: was.Datasource.modifyOrder)
#was.MsSqlDatasource.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.Datasource.modifyScript)
#was.MsSqlDatasource.modifyScript=was/datasource/create-or-modify-datasource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Datasource.modifyVerb)
#was.MsSqlDatasource.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Datasource.noopOrder)
#was.MsSqlDatasource.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Datasource.noopScript)
#was.MsSqlDatasource.noopScript=null
# Noop Verb (inherited from: was.Datasource.noopVerb)
#was.MsSqlDatasource.noopVerb=Noop
# Specifies the port number on which the database server listens.
#was.MsSqlDatasource.portNumber=1433
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Datasource.restartStrategy)
#was.MsSqlDatasource.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Datasource.standardPropertiesNotToExpose)
#was.MsSqlDatasource.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Datasource.startOrder)
#was.MsSqlDatasource.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Datasource.startScript)
#was.MsSqlDatasource.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Datasource.startVerb)
#was.MsSqlDatasource.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Datasource.stopOrder)
#was.MsSqlDatasource.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Datasource.stopScript)
#was.MsSqlDatasource.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Datasource.stopVerb)
#was.MsSqlDatasource.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Datasource.syncAfterCreateOrder)
#was.MsSqlDatasource.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Datasource.syncAfterDestroyOrder)
#was.MsSqlDatasource.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Datasource.syncAfterModifyOrder)
#was.MsSqlDatasource.syncAfterModifyOrder=65
# Test Connection Order (inherited from: was.Datasource.testConnectionOrder)
#was.MsSqlDatasource.testConnectionOrder=102
# Test Connection Script (inherited from: was.Datasource.testConnectionScript)
#was.MsSqlDatasource.testConnectionScript=was/datasource/test-datasource-connection.py
# Update Jaas Order (inherited from: was.Datasource.updateJaasOrder)
#was.MsSqlDatasource.updateJaasOrder=101
# Update Jaas Script (inherited from: was.Datasource.updateJaasScript)
#was.MsSqlDatasource.updateJaasScript=was/jaas/update-jaas.py
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.MsSqlDatasourceSpec.boundTemplates=null
# Additional Properties Not To Expose (inherited from: was.HAManagerPolicy.additionalPropertiesNotToExpose)
#was.NoOpPolicy.additionalPropertiesNotToExpose=id,type,wasType,deployable,container,customProperties,matchCriteria,servers,preferredServers
# The fully qualified name of the Java interface that serves as a factory for a specific type of concrete HAManagerPolicy.
#was.NoOpPolicy.policyFactory=com.ibm.ws.hamanager.coordinator.policy.impl.NOOPPolicyFactory
# WebSphere admin resource type.
#was.NoOpPolicy.wasType=NoOpPolicy
# Synchronize Script
#was.NodeAgent.synchronizeScript=was/base/synchronize-node.py
# Additional Properties Not To Expose (inherited from: was.ConfigurationResource.additionalPropertiesNotToExpose)
#was.NodeConfigurationResource.additionalPropertiesNotToExpose=id,name,wasType,wasContainerTypes,defaultDiscoverName,customProperties,overwriteExistingValues,overwriteExistingCustomProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ConfigurationResource.applyRestartStrategyOnNoop)
#was.NodeConfigurationResource.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ConfigurationResource.boundConfigurationItems)
#was.NodeConfigurationResource.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ConfigurationResource.containerRestartStrategy)
#was.NodeConfigurationResource.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ConfigurationResource.createOrder)
#was.NodeConfigurationResource.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ConfigurationResource.createScript)
#was.NodeConfigurationResource.createScript=was/server/modify-config-resource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.ConfigurationResource.createVerb)
#was.NodeConfigurationResource.createVerb=Configure
# The order in which a destroy step will be executed. (inherited from: was.ConfigurationResource.destroyOrder)
#was.NodeConfigurationResource.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ConfigurationResource.destroyScript)
#was.NodeConfigurationResource.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ConfigurationResource.destroyVerb)
#was.NodeConfigurationResource.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ConfigurationResource.discoverOrder)
#was.NodeConfigurationResource.discoverOrder=50
# Discover Script (inherited from: was.ConfigurationResource.discoverScript)
#was.NodeConfigurationResource.discoverScript=was/server/discover-inspect-config-resource.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ConfigurationResource.enableRippleStart)
#was.NodeConfigurationResource.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ConfigurationResource.exposeDeployedApplication)
#was.NodeConfigurationResource.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ConfigurationResource.libraryScripts)
#was.NodeConfigurationResource.libraryScripts=was/common/config/set-encoding.py,was/server/config-resource-lib.py
# The order in which a modify step will be executed. (inherited from: was.ConfigurationResource.modifyOrder)
#was.NodeConfigurationResource.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ConfigurationResource.modifyScript)
#was.NodeConfigurationResource.modifyScript=was/server/modify-config-resource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ConfigurationResource.modifyVerb)
#was.NodeConfigurationResource.modifyVerb=Configure
# The order of the step in the step list for the noop operation. (inherited from: was.ConfigurationResource.noopOrder)
#was.NodeConfigurationResource.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ConfigurationResource.noopScript)
#was.NodeConfigurationResource.noopScript=null
# Noop Verb (inherited from: was.ConfigurationResource.noopVerb)
#was.NodeConfigurationResource.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ConfigurationResource.restartStrategy)
#was.NodeConfigurationResource.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ConfigurationResource.standardPropertiesNotToExpose)
#was.NodeConfigurationResource.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ConfigurationResource.startOrder)
#was.NodeConfigurationResource.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ConfigurationResource.startScript)
#was.NodeConfigurationResource.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ConfigurationResource.startVerb)
#was.NodeConfigurationResource.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ConfigurationResource.stopOrder)
#was.NodeConfigurationResource.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ConfigurationResource.stopScript)
#was.NodeConfigurationResource.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ConfigurationResource.stopVerb)
#was.NodeConfigurationResource.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ConfigurationResource.syncAfterCreateOrder)
#was.NodeConfigurationResource.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ConfigurationResource.syncAfterDestroyOrder)
#was.NodeConfigurationResource.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ConfigurationResource.syncAfterModifyOrder)
#was.NodeConfigurationResource.syncAfterModifyOrder=65
# List of container types on which the resource should be discovered.
#was.NodeConfigurationResource.wasContainerTypes=Node
# Additional Properties Not To Expose (inherited from: was.ServerConfigurationResource.additionalPropertiesNotToExpose)
#was.ORBService.additionalPropertiesNotToExpose=id,name,wasType,wasContainerTypes,defaultDiscoverName,customProperties,overwriteExistingValues,overwriteExistingCustomProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ServerConfigurationResource.applyRestartStrategyOnNoop)
#was.ORBService.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ServerConfigurationResource.boundConfigurationItems)
#was.ORBService.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ServerConfigurationResource.containerRestartStrategy)
#was.ORBService.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ServerConfigurationResource.createOrder)
#was.ORBService.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ServerConfigurationResource.createScript)
#was.ORBService.createScript=was/server/modify-config-resource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.ServerConfigurationResource.createVerb)
#was.ORBService.createVerb=Configure
# Specifies additional custom properties that you can configure for this Object Request Broker.
#was.ORBService.customProperties=com.ibm.CORBA.ConnectionInterceptorName:com.ibm.ISecurityLocalObjectBaseL13Impl.SecurityConnectionInterceptors,com.ibm.CORBA.RasManager:com.ibm.websphere.ras.WsOrbRasManager,com.ibm.CORBA.enableLocateRequest:true,com.ibm.websphere.management.registerServerIORWithLSD:true,com.ibm.ws.orb.transport.WSSSLClientSocketFactoryName:com.ibm.ws.security.orbssl.WSSSLClientSocketFactoryImpl,com.ibm.ws.orb.transport.WSSSLServerSocketFactoryName:com.ibm.ws.security.orbssl.WSSSLServerSocketFactoryImpl,com.ibm.ws.orb.transport.useMultiHome:true
# Default deployed name to be assigned to the CI when discovered.
#was.ORBService.defaultDiscoverName=ORBService
# The order in which a destroy step will be executed. (inherited from: was.ServerConfigurationResource.destroyOrder)
#was.ORBService.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ServerConfigurationResource.destroyScript)
#was.ORBService.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ServerConfigurationResource.destroyVerb)
#was.ORBService.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ServerConfigurationResource.discoverOrder)
#was.ORBService.discoverOrder=50
# Discover Script (inherited from: was.ServerConfigurationResource.discoverScript)
#was.ORBService.discoverScript=was/server/discover-inspect-config-resource.py
# Enable this resource.
#was.ORBService.enable=true
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ServerConfigurationResource.enableRippleStart)
#was.ORBService.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ServerConfigurationResource.exposeDeployedApplication)
#was.ORBService.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ServerConfigurationResource.libraryScripts)
#was.ORBService.libraryScripts=was/common/config/set-encoding.py,was/server/config-resource-lib.py
# The order in which a modify step will be executed. (inherited from: was.ServerConfigurationResource.modifyOrder)
#was.ORBService.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ServerConfigurationResource.modifyScript)
#was.ORBService.modifyScript=was/server/modify-config-resource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ServerConfigurationResource.modifyVerb)
#was.ORBService.modifyVerb=Configure
# The order of the step in the step list for the noop operation. (inherited from: was.ServerConfigurationResource.noopOrder)
#was.ORBService.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ServerConfigurationResource.noopScript)
#was.ORBService.noopScript=null
# Noop Verb (inherited from: was.ServerConfigurationResource.noopVerb)
#was.ORBService.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ServerConfigurationResource.restartStrategy)
#was.ORBService.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ServerConfigurationResource.standardPropertiesNotToExpose)
#was.ORBService.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ServerConfigurationResource.startOrder)
#was.ORBService.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ServerConfigurationResource.startScript)
#was.ORBService.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ServerConfigurationResource.startVerb)
#was.ORBService.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ServerConfigurationResource.stopOrder)
#was.ORBService.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ServerConfigurationResource.stopScript)
#was.ORBService.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ServerConfigurationResource.stopVerb)
#was.ORBService.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterCreateOrder)
#was.ORBService.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterDestroyOrder)
#was.ORBService.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterModifyOrder)
#was.ORBService.syncAfterModifyOrder=65
# List of container types on which the resource should be discovered. (inherited from: was.ServerConfigurationResource.wasContainerTypes)
#was.ORBService.wasContainerTypes=Server
# WebSphere admin resource type.
#was.ORBService.wasType=ObjectRequestBroker
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.ORBServiceSpec.boundTemplates=null
# Additional Properties Not To Expose (inherited from: was.HAManagerPolicy.additionalPropertiesNotToExpose)
#was.OneOfNPolicy.additionalPropertiesNotToExpose=id,type,wasType,deployable,container,customProperties,matchCriteria,servers,preferredServers
# The fully qualified name of the Java interface that serves as a factory for a specific type of concrete HAManagerPolicy.
#was.OneOfNPolicy.policyFactory=com.ibm.ws.hamanager.coordinator.policy.impl.OneOfNPolicyFactory
# WebSphere admin resource type.
#was.OneOfNPolicy.wasType=OneOfNPolicy
# Additional Properties Not To Expose (inherited from: was.Datasource.additionalPropertiesNotToExpose)
#was.OracleDatasource.additionalPropertiesNotToExpose=name,alias,containerManagedPersistence,description,jndiName,createJaasAlias,jdbcProvider,username,password,ConnectionPool,datasourceHelperClassname,customProperties,allowExistingJaasAlias,jaasAliasName,useJaasAliasForXaRecovery,useJaasAliasForContainerManagedAuthentication,mappingConfigAlias,testConnection,testConnectionScript,testConnectionOrder,updateJaasScript,updateJaasOrder
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Datasource.applyRestartStrategyOnNoop)
#was.OracleDatasource.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Datasource.boundConfigurationItems)
#was.OracleDatasource.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Datasource.containerRestartStrategy)
#was.OracleDatasource.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.Datasource.createOrder)
#was.OracleDatasource.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.Datasource.createScript)
#was.OracleDatasource.createScript=was/datasource/create-or-modify-datasource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Datasource.createVerb)
#was.OracleDatasource.createVerb=Create
# Specifies the data store helper class, an interface through which a datasource is triggered by a database to perform functions specific to that database vendor.
#was.OracleDatasource.datasourceHelperClassname=com.ibm.websphere.rsadapter.OracleDataStoreHelper
# The order in which a destroy step will be executed. (inherited from: was.Datasource.destroyOrder)
#was.OracleDatasource.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.Datasource.destroyScript)
#was.OracleDatasource.destroyScript=was/datasource/destroy-datasource.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Datasource.destroyVerb)
#was.OracleDatasource.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Datasource.discoverOrder)
#was.OracleDatasource.discoverOrder=50
# Python wsadmin script invoked to discover a JDBC data sources.
#was.OracleDatasource.discoverScript=was/datasource/discover-inspect-ora-datasources.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Datasource.enableRippleStart)
#was.OracleDatasource.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Datasource.exposeDeployedApplication)
#was.OracleDatasource.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.Datasource.libraryScripts)
#was.OracleDatasource.libraryScripts=was/common/config/set-encoding.py,was/datasource/datasource-lib.py,was/datasource/discover-inspect-datasource-lib.py,was/jaas/jaas-alias-lib.py
# The order in which a modify step will be executed. (inherited from: was.Datasource.modifyOrder)
#was.OracleDatasource.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.Datasource.modifyScript)
#was.OracleDatasource.modifyScript=was/datasource/create-or-modify-datasource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Datasource.modifyVerb)
#was.OracleDatasource.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Datasource.noopOrder)
#was.OracleDatasource.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Datasource.noopScript)
#was.OracleDatasource.noopScript=null
# Noop Verb (inherited from: was.Datasource.noopVerb)
#was.OracleDatasource.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Datasource.restartStrategy)
#was.OracleDatasource.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Datasource.standardPropertiesNotToExpose)
#was.OracleDatasource.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Datasource.startOrder)
#was.OracleDatasource.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Datasource.startScript)
#was.OracleDatasource.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Datasource.startVerb)
#was.OracleDatasource.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Datasource.stopOrder)
#was.OracleDatasource.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Datasource.stopScript)
#was.OracleDatasource.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Datasource.stopVerb)
#was.OracleDatasource.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Datasource.syncAfterCreateOrder)
#was.OracleDatasource.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Datasource.syncAfterDestroyOrder)
#was.OracleDatasource.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Datasource.syncAfterModifyOrder)
#was.OracleDatasource.syncAfterModifyOrder=65
# Test Connection Order (inherited from: was.Datasource.testConnectionOrder)
#was.OracleDatasource.testConnectionOrder=102
# Test Connection Script (inherited from: was.Datasource.testConnectionScript)
#was.OracleDatasource.testConnectionScript=was/datasource/test-datasource-connection.py
# Update Jaas Order (inherited from: was.Datasource.updateJaasOrder)
#was.OracleDatasource.updateJaasOrder=101
# Update Jaas Script (inherited from: was.Datasource.updateJaasScript)
#was.OracleDatasource.updateJaasScript=was/jaas/update-jaas.py
# The set of CI templates. (inherited from: jee.DataSourceSpec.boundTemplates)
#was.OracleDatasourceSpec.boundTemplates=null
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.JdbcProvider.applyRestartStrategyOnNoop)
#was.OracleJdbcProvider.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.JdbcProvider.boundConfigurationItems)
#was.OracleJdbcProvider.boundConfigurationItems=null
# Specifies a list of paths or JAR file names which together form the location for the resource provider classes.
#was.OracleJdbcProvider.classpath=${ORACLE_JDBC_DRIVER_PATH}/ojdbc6.jar
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.JdbcProvider.containerRestartStrategy)
#was.OracleJdbcProvider.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.JdbcProvider.createOrder)
#was.OracleJdbcProvider.createOrder=58
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.JdbcProvider.createScript)
#was.OracleJdbcProvider.createScript=was/JdbcProvider/create-or-modify-jdbc-provider.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.JdbcProvider.createVerb)
#was.OracleJdbcProvider.createVerb=Create
# Specifies description for the resource.
#was.OracleJdbcProvider.description=Oracle JDBC Driver
# The order in which a destroy step will be executed. (inherited from: was.JdbcProvider.destroyOrder)
#was.OracleJdbcProvider.destroyOrder=42
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.JdbcProvider.destroyScript)
#was.OracleJdbcProvider.destroyScript=was/JdbcProvider/destroy-jdbc-provider.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.JdbcProvider.destroyVerb)
#was.OracleJdbcProvider.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.JdbcProvider.discoverOrder)
#was.OracleJdbcProvider.discoverOrder=45
# Discover Script
#was.OracleJdbcProvider.discoverScript=was/JdbcProvider/discover-inspect-ora-jdbc-provider.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.JdbcProvider.enableRippleStart)
#was.OracleJdbcProvider.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.JdbcProvider.exposeDeployedApplication)
#was.OracleJdbcProvider.exposeDeployedApplication=false
# Specifies the Java class name of the JDBC driver's datasource implementation.
#was.OracleJdbcProvider.implementationClassName=oracle.jdbc.pool.OracleConnectionPoolDataSource
# List of scripts to be appended to the deployed's runtime script (inherited from: was.JdbcProvider.libraryScripts)
#was.OracleJdbcProvider.libraryScripts=was/common/config/set-encoding.py,was/JdbcProvider/jdbc-provider-lib.py,was/JdbcProvider/discover-inspect-jdbc-provider-lib.py
# The order in which a modify step will be executed. (inherited from: was.JdbcProvider.modifyOrder)
#was.OracleJdbcProvider.modifyOrder=58
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.JdbcProvider.modifyScript)
#was.OracleJdbcProvider.modifyScript=was/JdbcProvider/create-or-modify-jdbc-provider.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.JdbcProvider.modifyVerb)
#was.OracleJdbcProvider.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.JdbcProvider.noopOrder)
#was.OracleJdbcProvider.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.JdbcProvider.noopScript)
#was.OracleJdbcProvider.noopScript=null
# Noop Verb (inherited from: was.JdbcProvider.noopVerb)
#was.OracleJdbcProvider.noopVerb=Noop
# Specifies a provider type.
#was.OracleJdbcProvider.providerType=Oracle JDBC Driver
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.JdbcProvider.restartStrategy)
#was.OracleJdbcProvider.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.JdbcProvider.standardPropertiesNotToExpose)
#was.OracleJdbcProvider.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.JdbcProvider.startOrder)
#was.OracleJdbcProvider.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.JdbcProvider.startScript)
#was.OracleJdbcProvider.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.JdbcProvider.startVerb)
#was.OracleJdbcProvider.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.JdbcProvider.stopOrder)
#was.OracleJdbcProvider.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.JdbcProvider.stopScript)
#was.OracleJdbcProvider.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.JdbcProvider.stopVerb)
#was.OracleJdbcProvider.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.JdbcProvider.syncAfterCreateOrder)
#was.OracleJdbcProvider.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.JdbcProvider.syncAfterDestroyOrder)
#was.OracleJdbcProvider.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.JdbcProvider.syncAfterModifyOrder)
#was.OracleJdbcProvider.syncAfterModifyOrder=65
# Set to true to select an XA datasource (application requires two-phase commit transactions). Set to false if XA datasource is not required.
#was.OracleJdbcProvider.xa=false
# The set of CI templates. (inherited from: was.JdbcProviderSpec.boundTemplates)
#was.OracleJdbcProviderSpec.boundTemplates=null
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.JdbcProvider.applyRestartStrategyOnNoop)
#was.OracleXaJdbcProvider.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.JdbcProvider.boundConfigurationItems)
#was.OracleXaJdbcProvider.boundConfigurationItems=null
# Specifies a list of paths or JAR file names which together form the location for the resource provider classes.
#was.OracleXaJdbcProvider.classpath=${ORACLE_JDBC_DRIVER_PATH}/ojdbc6.jar
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.JdbcProvider.containerRestartStrategy)
#was.OracleXaJdbcProvider.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.JdbcProvider.createOrder)
#was.OracleXaJdbcProvider.createOrder=58
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.JdbcProvider.createScript)
#was.OracleXaJdbcProvider.createScript=was/JdbcProvider/create-or-modify-jdbc-provider.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.JdbcProvider.createVerb)
#was.OracleXaJdbcProvider.createVerb=Create
# Specifies description for the resource.
#was.OracleXaJdbcProvider.description=Oracle JDBC Driver (XA)
# The order in which a destroy step will be executed. (inherited from: was.JdbcProvider.destroyOrder)
#was.OracleXaJdbcProvider.destroyOrder=42
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.JdbcProvider.destroyScript)
#was.OracleXaJdbcProvider.destroyScript=was/JdbcProvider/destroy-jdbc-provider.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.JdbcProvider.destroyVerb)
#was.OracleXaJdbcProvider.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.JdbcProvider.discoverOrder)
#was.OracleXaJdbcProvider.discoverOrder=45
# Discover Script
#was.OracleXaJdbcProvider.discoverScript=was/JdbcProvider/discover-inspect-ora-xa-jdbc-provider.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.JdbcProvider.enableRippleStart)
#was.OracleXaJdbcProvider.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.JdbcProvider.exposeDeployedApplication)
#was.OracleXaJdbcProvider.exposeDeployedApplication=false
# Specifies the Java class name of the JDBC driver's datasource implementation.
#was.OracleXaJdbcProvider.implementationClassName=oracle.jdbc.xa.client.OracleXADataSource
# List of scripts to be appended to the deployed's runtime script (inherited from: was.JdbcProvider.libraryScripts)
#was.OracleXaJdbcProvider.libraryScripts=was/common/config/set-encoding.py,was/JdbcProvider/jdbc-provider-lib.py,was/JdbcProvider/discover-inspect-jdbc-provider-lib.py
# The order in which a modify step will be executed. (inherited from: was.JdbcProvider.modifyOrder)
#was.OracleXaJdbcProvider.modifyOrder=58
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.JdbcProvider.modifyScript)
#was.OracleXaJdbcProvider.modifyScript=was/JdbcProvider/create-or-modify-jdbc-provider.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.JdbcProvider.modifyVerb)
#was.OracleXaJdbcProvider.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.JdbcProvider.noopOrder)
#was.OracleXaJdbcProvider.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.JdbcProvider.noopScript)
#was.OracleXaJdbcProvider.noopScript=null
# Noop Verb (inherited from: was.JdbcProvider.noopVerb)
#was.OracleXaJdbcProvider.noopVerb=Noop
# Specifies a provider type.
#was.OracleXaJdbcProvider.providerType=Oracle JDBC Driver (XA)
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.JdbcProvider.restartStrategy)
#was.OracleXaJdbcProvider.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.JdbcProvider.standardPropertiesNotToExpose)
#was.OracleXaJdbcProvider.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.JdbcProvider.startOrder)
#was.OracleXaJdbcProvider.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.JdbcProvider.startScript)
#was.OracleXaJdbcProvider.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.JdbcProvider.startVerb)
#was.OracleXaJdbcProvider.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.JdbcProvider.stopOrder)
#was.OracleXaJdbcProvider.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.JdbcProvider.stopScript)
#was.OracleXaJdbcProvider.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.JdbcProvider.stopVerb)
#was.OracleXaJdbcProvider.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.JdbcProvider.syncAfterCreateOrder)
#was.OracleXaJdbcProvider.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.JdbcProvider.syncAfterDestroyOrder)
#was.OracleXaJdbcProvider.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.JdbcProvider.syncAfterModifyOrder)
#was.OracleXaJdbcProvider.syncAfterModifyOrder=65
# Set to true to select an XA datasource (application requires two-phase commit transactions). Set to false if XA datasource is not required.
#was.OracleXaJdbcProvider.xa=true
# The set of CI templates. (inherited from: was.JdbcProviderSpec.boundTemplates)
#was.OracleXaJdbcProviderSpec.boundTemplates=null
# Additional Properties Not To Expose
#was.PMIService.additionalPropertiesNotToExpose=id,name,wasContainerTypes,customModuleMetrics,wasType,overwriteExistingValues,overwriteExistingCustomProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ServerConfigurationResource.applyRestartStrategyOnNoop)
#was.PMIService.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ServerConfigurationResource.boundConfigurationItems)
#was.PMIService.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ServerConfigurationResource.containerRestartStrategy)
#was.PMIService.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ServerConfigurationResource.createOrder)
#was.PMIService.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.PMIService.createScript=was/server/pmi/modify-server-pmi.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.ServerConfigurationResource.createVerb)
#was.PMIService.createVerb=Configure
# The order in which a destroy step will be executed. (inherited from: was.ServerConfigurationResource.destroyOrder)
#was.PMIService.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.PMIService.destroyScript=was/server/pmi/destroy-server-pmi.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ServerConfigurationResource.destroyVerb)
#was.PMIService.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ServerConfigurationResource.discoverOrder)
#was.PMIService.discoverOrder=50
# Discover Script
#was.PMIService.discoverScript=was/server/pmi/discover-inspect-server-pmi.py
# Specifies whether or not the server attempts to start the specified service when the server starts.
#was.PMIService.enable=true
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ServerConfigurationResource.enableRippleStart)
#was.PMIService.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ServerConfigurationResource.exposeDeployedApplication)
#was.PMIService.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ServerConfigurationResource.libraryScripts)
#was.PMIService.libraryScripts=was/common/config/set-encoding.py,was/server/config-resource-lib.py
# The order in which a modify step will be executed. (inherited from: was.ServerConfigurationResource.modifyOrder)
#was.PMIService.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.PMIService.modifyScript=was/server/pmi/modify-server-pmi.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ServerConfigurationResource.modifyVerb)
#was.PMIService.modifyVerb=Configure
# The order of the step in the step list for the noop operation. (inherited from: was.ServerConfigurationResource.noopOrder)
#was.PMIService.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ServerConfigurationResource.noopScript)
#was.PMIService.noopScript=null
# Noop Verb (inherited from: was.ServerConfigurationResource.noopVerb)
#was.PMIService.noopVerb=Noop
# NOT APPLICABLE
#was.PMIService.overwriteExistingCustomProperties=false
# NOT APPLICABLE
#was.PMIService.overwriteExistingValues=false
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ServerConfigurationResource.restartStrategy)
#was.PMIService.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ServerConfigurationResource.standardPropertiesNotToExpose)
#was.PMIService.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ServerConfigurationResource.startOrder)
#was.PMIService.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ServerConfigurationResource.startScript)
#was.PMIService.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ServerConfigurationResource.startVerb)
#was.PMIService.startVerb=Start
# Valid values are 'none', 'basic', 'extended', 'all' and 'custom'
#was.PMIService.statisticSet=none
# The order in which a stop step will be executed. (inherited from: was.ServerConfigurationResource.stopOrder)
#was.PMIService.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ServerConfigurationResource.stopScript)
#was.PMIService.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ServerConfigurationResource.stopVerb)
#was.PMIService.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterCreateOrder)
#was.PMIService.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterDestroyOrder)
#was.PMIService.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterModifyOrder)
#was.PMIService.syncAfterModifyOrder=65
# List of container types on which the resource should be discovered. (inherited from: was.ServerConfigurationResource.wasContainerTypes)
#was.PMIService.wasContainerTypes=Server
# WebSphere admin resource type.
#was.PMIService.wasType=PMIService
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.PMIServiceSpec.boundTemplates=null
# The set of created CIs. (inherited from: was.BaseCluster.boundConfigurationItems)
#was.ProxyServerCluster.boundConfigurationItems=null
# The order in which a create step will be executed. (inherited from: was.BaseCluster.createOrder)
#was.ProxyServerCluster.createOrder=56
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.BaseCluster.createScript)
#was.ProxyServerCluster.createScript=null
# The word that is used to prefix a step description for the create operation. (inherited from: was.BaseCluster.createVerb)
#was.ProxyServerCluster.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.BaseCluster.destroyOrder)
#was.ProxyServerCluster.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.BaseCluster.destroyScript)
#was.ProxyServerCluster.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.BaseCluster.destroyVerb)
#was.ProxyServerCluster.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.BaseCluster.discoverOrder)
#was.ProxyServerCluster.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.BaseCluster.exposeDeployedApplication)
#was.ProxyServerCluster.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.BaseCluster.libraryScripts)
#was.ProxyServerCluster.libraryScripts=null
# The order in which a modify step will be executed. (inherited from: was.BaseCluster.modifyOrder)
#was.ProxyServerCluster.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.BaseCluster.modifyScript)
#was.ProxyServerCluster.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.BaseCluster.modifyVerb)
#was.ProxyServerCluster.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.BaseCluster.noopOrder)
#was.ProxyServerCluster.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.BaseCluster.noopScript)
#was.ProxyServerCluster.noopScript=null
# Noop Verb (inherited from: was.BaseCluster.noopVerb)
#was.ProxyServerCluster.noopVerb=Noop
# Restart Order (inherited from: was.BaseCluster.restartOrder)
#was.ProxyServerCluster.restartOrder=80
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.BaseCluster.standardPropertiesNotToExpose)
#was.ProxyServerCluster.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.BaseCluster.startOrder)
#was.ProxyServerCluster.startOrder=80
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.BaseCluster.startScript)
#was.ProxyServerCluster.startScript=was/container/start-cluster.py
# The word that is used to prefix a step description for the start operation. (inherited from: was.BaseCluster.startVerb)
#was.ProxyServerCluster.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.BaseCluster.stopOrder)
#was.ProxyServerCluster.stopOrder=20
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.BaseCluster.stopScript)
#was.ProxyServerCluster.stopScript=was/container/stop-cluster.py
# The word that is used to prefix a step description for the stop operation. (inherited from: was.BaseCluster.stopVerb)
#was.ProxyServerCluster.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.BaseCluster.syncAfterCreateOrder)
#was.ProxyServerCluster.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.BaseCluster.syncAfterDestroyOrder)
#was.ProxyServerCluster.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.BaseCluster.syncAfterModifyOrder)
#was.ProxyServerCluster.syncAfterModifyOrder=65
# The set of CI templates. (inherited from: was.ClusterSpec.boundTemplates)
#was.ProxyServerClusterSpec.boundTemplates=null
# Server type. Possible values are: PROXY_SERVER, APPLICATION_SERVER, ONDEMAND_ROUTER. Default value: PROXY_SERVER. Available since: WAS_70
#was.ProxyServerClusterSpec.serverType=PROXY_SERVER
# Specify EJB bean name to be used for resource references to EJB modules. Property not required for Web modules.
#was.ResRef.ejbName=.*
# Specify the type of referenced resource.
#was.ResRef.resourceType=.*
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ExtensibleDeployedResource.applyRestartStrategyOnNoop)
#was.Resource.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ExtensibleDeployedResource.boundConfigurationItems)
#was.Resource.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ExtensibleDeployedResource.containerRestartStrategy)
#was.Resource.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ExtensibleDeployedResource.createOrder)
#was.Resource.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ExtensibleDeployedResource.createScript)
#was.Resource.createScript=null
# The word that is used to prefix a step description for the create operation. (inherited from: was.ExtensibleDeployedResource.createVerb)
#was.Resource.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.ExtensibleDeployedResource.destroyOrder)
#was.Resource.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ExtensibleDeployedResource.destroyScript)
#was.Resource.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ExtensibleDeployedResource.destroyVerb)
#was.Resource.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ExtensibleDeployedResource.discoverOrder)
#was.Resource.discoverOrder=50
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ExtensibleDeployedResource.enableRippleStart)
#was.Resource.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ExtensibleDeployedResource.exposeDeployedApplication)
#was.Resource.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ExtensibleDeployedResource.libraryScripts)
#was.Resource.libraryScripts=null
# The order in which a modify step will be executed. (inherited from: was.ExtensibleDeployedResource.modifyOrder)
#was.Resource.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ExtensibleDeployedResource.modifyScript)
#was.Resource.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ExtensibleDeployedResource.modifyVerb)
#was.Resource.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.ExtensibleDeployedResource.noopOrder)
#was.Resource.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ExtensibleDeployedResource.noopScript)
#was.Resource.noopScript=null
# Noop Verb (inherited from: was.ExtensibleDeployedResource.noopVerb)
#was.Resource.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ExtensibleDeployedResource.restartStrategy)
#was.Resource.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ExtensibleDeployedResource.standardPropertiesNotToExpose)
#was.Resource.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ExtensibleDeployedResource.startOrder)
#was.Resource.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ExtensibleDeployedResource.startScript)
#was.Resource.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ExtensibleDeployedResource.startVerb)
#was.Resource.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ExtensibleDeployedResource.stopOrder)
#was.Resource.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ExtensibleDeployedResource.stopScript)
#was.Resource.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ExtensibleDeployedResource.stopVerb)
#was.Resource.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ExtensibleDeployedResource.syncAfterCreateOrder)
#was.Resource.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ExtensibleDeployedResource.syncAfterDestroyOrder)
#was.Resource.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ExtensibleDeployedResource.syncAfterModifyOrder)
#was.Resource.syncAfterModifyOrder=65
# Additional Properties Not To Expose
#was.ResourceEnvironmentEntry.additionalPropertiesNotToExpose=provider,customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.ResourceEnvironmentEntry.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.ResourceEnvironmentEntry.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.ResourceEnvironmentEntry.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.Resource.createOrder)
#was.ResourceEnvironmentEntry.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.ResourceEnvironmentEntry.createScript=was/resources/environment/create-resource-env-entry.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.ResourceEnvironmentEntry.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.Resource.destroyOrder)
#was.ResourceEnvironmentEntry.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.ResourceEnvironmentEntry.destroyScript=was/resources/environment/destroy-resource-env-entry.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.ResourceEnvironmentEntry.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Resource.discoverOrder)
#was.ResourceEnvironmentEntry.discoverOrder=50
# Discover Script
#was.ResourceEnvironmentEntry.discoverScript=was/resources/environment/discover-inspect-resource-environment-entry.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.ResourceEnvironmentEntry.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.ResourceEnvironmentEntry.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#was.ResourceEnvironmentEntry.libraryScripts=was/common/config/set-encoding.py,was/resources/environment/resource-environment-lib.py
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.ResourceEnvironmentEntry.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.ResourceEnvironmentEntry.modifyScript=was/resources/environment/modify-resource-envEntry.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.ResourceEnvironmentEntry.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.ResourceEnvironmentEntry.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.ResourceEnvironmentEntry.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.ResourceEnvironmentEntry.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.ResourceEnvironmentEntry.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.ResourceEnvironmentEntry.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.ResourceEnvironmentEntry.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.ResourceEnvironmentEntry.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.ResourceEnvironmentEntry.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.ResourceEnvironmentEntry.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.ResourceEnvironmentEntry.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.ResourceEnvironmentEntry.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.ResourceEnvironmentEntry.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.ResourceEnvironmentEntry.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.ResourceEnvironmentEntry.syncAfterModifyOrder=65
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.ResourceEnvironmentEntrySpec.boundTemplates=null
# Additional Properties Not To Expose
#was.ResourceEnvironmentProvider.additionalPropertiesNotToExpose=customProperties,referenceables
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.ResourceEnvironmentProvider.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.ResourceEnvironmentProvider.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.ResourceEnvironmentProvider.containerRestartStrategy=NONE
# The order in which a create step will be executed.
#was.ResourceEnvironmentProvider.createOrder=58
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.ResourceEnvironmentProvider.createScript=was/resources/environment/create-resource-env-provider.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.ResourceEnvironmentProvider.createVerb=Create
# The order in which a destroy step will be executed.
#was.ResourceEnvironmentProvider.destroyOrder=42
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.ResourceEnvironmentProvider.destroyScript=was/resources/environment/destroy-resource-env-provider.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.ResourceEnvironmentProvider.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Resource.discoverOrder)
#was.ResourceEnvironmentProvider.discoverOrder=50
# Discover Script
#was.ResourceEnvironmentProvider.discoverScript=was/resources/environment/discover-inspect-resource-env-provider.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.ResourceEnvironmentProvider.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.ResourceEnvironmentProvider.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#was.ResourceEnvironmentProvider.libraryScripts=was/common/config/set-encoding.py,was/resources/environment/resource-environment-lib.py
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.ResourceEnvironmentProvider.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.ResourceEnvironmentProvider.modifyScript=was/resources/environment/modify-resource-env-provider.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.ResourceEnvironmentProvider.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.ResourceEnvironmentProvider.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.ResourceEnvironmentProvider.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.ResourceEnvironmentProvider.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.ResourceEnvironmentProvider.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.ResourceEnvironmentProvider.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.ResourceEnvironmentProvider.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.ResourceEnvironmentProvider.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.ResourceEnvironmentProvider.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.ResourceEnvironmentProvider.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.ResourceEnvironmentProvider.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.ResourceEnvironmentProvider.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.ResourceEnvironmentProvider.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.ResourceEnvironmentProvider.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.ResourceEnvironmentProvider.syncAfterModifyOrder=65
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.ResourceEnvironmentProviderSpec.boundTemplates=null
# Specify this option to create a custom login configuration. The client can use JAAS to create a login design.
#was.ResourceRef.loginConfigurationName=
# Specify this option to create a custom login configuration. The client can use JAAS to create a login design.
#was.ResourceRef.properties=
# Additional Properties Not To Expose
#was.SSLConfig.additionalPropertiesNotToExpose=managementScope,enabledCiphers,clientAuthentication,trustStore,keyStore
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.SSLConfig.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.SSLConfig.boundConfigurationItems=null
# Specifies the whether SSL client authentication should be requested if the SSL connection is used for the server side of the connection.
#was.SSLConfig.clientAuthentication=NONE
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.SSLConfig.containerRestartStrategy=NONE
# The order in which a create step will be executed.
#was.SSLConfig.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.SSLConfig.createScript=was/security/create-ssl-config.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.SSLConfig.createVerb=Create
# The order in which a destroy step will be executed.
#was.SSLConfig.destroyOrder=39
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.SSLConfig.destroyScript=was/security/destroy-ssl-config.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.SSLConfig.destroyVerb=Destroy
# The order in which a discover step will be executed.
#was.SSLConfig.discoverOrder=44
# Discover Script
#was.SSLConfig.discoverScript=was/security/discover-inspect-ssl-config.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.SSLConfig.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.SSLConfig.exposeDeployedApplication=false
# Specifies a package that implements a subset of the cryptography aspects for the Java security application programming interface (API).
#was.SSLConfig.jsseProvider=IBMJSSE2
# Specifies a reference to a specific key store.
#was.SSLConfig.keyStore=NodeDefaultKeyStore
# List of scripts to be appended to the deployed's runtime script
#was.SSLConfig.libraryScripts=was/common/config/set-encoding.py,was/security/security-lib.py
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.SSLConfig.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.SSLConfig.modifyScript=was/security/modify-ssl-config.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.SSLConfig.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.SSLConfig.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.SSLConfig.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.SSLConfig.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.SSLConfig.restartStrategy=STOP_START
# Specifies the various cipher suite groups that can be chosen depending upon your security needs.
#was.SSLConfig.securityLevel=HIGH
# Specifies the Secure Sockets Layer (SSL) handshake protocol.
#was.SSLConfig.sslProtocol=SSL_TLS
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.SSLConfig.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.SSLConfig.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.SSLConfig.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.SSLConfig.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.SSLConfig.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.SSLConfig.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.SSLConfig.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.SSLConfig.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.SSLConfig.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.SSLConfig.syncAfterModifyOrder=65
# Specifies a reference to a specific trust store used by Java™ Secure Sockets Extension (JSSE).
#was.SSLConfig.trustStore=NodeDefaultKeyStore
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.SSLConfigSpec.boundTemplates=null
# Additional Properties Not To Expose (inherited from: was.ConfigResource.additionalPropertiesNotToExpose)
#was.Scheduler.additionalPropertiesNotToExpose=wasType,provider,providerType,customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ConfigResource.applyRestartStrategyOnNoop)
#was.Scheduler.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ConfigResource.boundConfigurationItems)
#was.Scheduler.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ConfigResource.containerRestartStrategy)
#was.Scheduler.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ConfigResource.createOrder)
#was.Scheduler.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ConfigResource.createScript)
#was.Scheduler.createScript=was/common/config/create-or-modify-resource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.ConfigResource.createVerb)
#was.Scheduler.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.ConfigResource.destroyOrder)
#was.Scheduler.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ConfigResource.destroyScript)
#was.Scheduler.destroyScript=was/common/config/destroy-resource.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ConfigResource.destroyVerb)
#was.Scheduler.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ConfigResource.discoverOrder)
#was.Scheduler.discoverOrder=50
# Discover Script (inherited from: was.ConfigResource.discoverScript)
#was.Scheduler.discoverScript=was/common/config/discover-inspect-resource.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ConfigResource.enableRippleStart)
#was.Scheduler.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ConfigResource.exposeDeployedApplication)
#was.Scheduler.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ConfigResource.libraryScripts)
#was.Scheduler.libraryScripts=was/common/config/set-encoding.py,was/common/config/admin-config-lib.py
# The order in which a modify step will be executed. (inherited from: was.ConfigResource.modifyOrder)
#was.Scheduler.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ConfigResource.modifyScript)
#was.Scheduler.modifyScript=was/common/config/create-or-modify-resource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ConfigResource.modifyVerb)
#was.Scheduler.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.ConfigResource.noopOrder)
#was.Scheduler.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ConfigResource.noopScript)
#was.Scheduler.noopScript=null
# Noop Verb (inherited from: was.ConfigResource.noopVerb)
#was.Scheduler.noopVerb=Noop
# Specifies the interval, in seconds, that a scheduler polls the database. The default value is appropriate for most applications.
#was.Scheduler.pollInterval=30
# Specifies the Scheduler Provider name.
#was.Scheduler.provider=SchedulerProvider
# WebSphere admin resource provider type.
#was.Scheduler.providerType=SchedulerProvider
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ConfigResource.restartStrategy)
#was.Scheduler.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ConfigResource.standardPropertiesNotToExpose)
#was.Scheduler.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ConfigResource.startOrder)
#was.Scheduler.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ConfigResource.startScript)
#was.Scheduler.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ConfigResource.startVerb)
#was.Scheduler.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ConfigResource.stopOrder)
#was.Scheduler.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ConfigResource.stopScript)
#was.Scheduler.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ConfigResource.stopVerb)
#was.Scheduler.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ConfigResource.syncAfterCreateOrder)
#was.Scheduler.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ConfigResource.syncAfterDestroyOrder)
#was.Scheduler.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ConfigResource.syncAfterModifyOrder)
#was.Scheduler.syncAfterModifyOrder=65
# WebSphere admin resource type.
#was.Scheduler.wasType=SchedulerConfiguration
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.SchedulerSpec.boundTemplates=null
# Additional Properties Not To Expose (inherited from: was.ConfigurationResource.additionalPropertiesNotToExpose)
#was.ServerConfigurationResource.additionalPropertiesNotToExpose=id,name,wasType,wasContainerTypes,defaultDiscoverName,customProperties,overwriteExistingValues,overwriteExistingCustomProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ConfigurationResource.applyRestartStrategyOnNoop)
#was.ServerConfigurationResource.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ConfigurationResource.boundConfigurationItems)
#was.ServerConfigurationResource.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ConfigurationResource.containerRestartStrategy)
#was.ServerConfigurationResource.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ConfigurationResource.createOrder)
#was.ServerConfigurationResource.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ConfigurationResource.createScript)
#was.ServerConfigurationResource.createScript=was/server/modify-config-resource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.ConfigurationResource.createVerb)
#was.ServerConfigurationResource.createVerb=Configure
# The order in which a destroy step will be executed. (inherited from: was.ConfigurationResource.destroyOrder)
#was.ServerConfigurationResource.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ConfigurationResource.destroyScript)
#was.ServerConfigurationResource.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ConfigurationResource.destroyVerb)
#was.ServerConfigurationResource.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ConfigurationResource.discoverOrder)
#was.ServerConfigurationResource.discoverOrder=50
# Discover Script (inherited from: was.ConfigurationResource.discoverScript)
#was.ServerConfigurationResource.discoverScript=was/server/discover-inspect-config-resource.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ConfigurationResource.enableRippleStart)
#was.ServerConfigurationResource.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ConfigurationResource.exposeDeployedApplication)
#was.ServerConfigurationResource.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ConfigurationResource.libraryScripts)
#was.ServerConfigurationResource.libraryScripts=was/common/config/set-encoding.py,was/server/config-resource-lib.py
# The order in which a modify step will be executed. (inherited from: was.ConfigurationResource.modifyOrder)
#was.ServerConfigurationResource.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ConfigurationResource.modifyScript)
#was.ServerConfigurationResource.modifyScript=was/server/modify-config-resource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ConfigurationResource.modifyVerb)
#was.ServerConfigurationResource.modifyVerb=Configure
# The order of the step in the step list for the noop operation. (inherited from: was.ConfigurationResource.noopOrder)
#was.ServerConfigurationResource.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ConfigurationResource.noopScript)
#was.ServerConfigurationResource.noopScript=null
# Noop Verb (inherited from: was.ConfigurationResource.noopVerb)
#was.ServerConfigurationResource.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ConfigurationResource.restartStrategy)
#was.ServerConfigurationResource.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ConfigurationResource.standardPropertiesNotToExpose)
#was.ServerConfigurationResource.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ConfigurationResource.startOrder)
#was.ServerConfigurationResource.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ConfigurationResource.startScript)
#was.ServerConfigurationResource.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ConfigurationResource.startVerb)
#was.ServerConfigurationResource.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ConfigurationResource.stopOrder)
#was.ServerConfigurationResource.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ConfigurationResource.stopScript)
#was.ServerConfigurationResource.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ConfigurationResource.stopVerb)
#was.ServerConfigurationResource.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ConfigurationResource.syncAfterCreateOrder)
#was.ServerConfigurationResource.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ConfigurationResource.syncAfterDestroyOrder)
#was.ServerConfigurationResource.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ConfigurationResource.syncAfterModifyOrder)
#was.ServerConfigurationResource.syncAfterModifyOrder=65
# List of container types on which the resource should be discovered.
#was.ServerConfigurationResource.wasContainerTypes=Server
# Additional Properties Not To Expose
#was.ServerPort.additionalPropertiesNotToExpose=id,name,wasContainerTypes,enableRemoval,overwriteExistingValues,overwriteExistingCustomProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ServerConfigurationResource.applyRestartStrategyOnNoop)
#was.ServerPort.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ServerConfigurationResource.boundConfigurationItems)
#was.ServerPort.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ServerConfigurationResource.containerRestartStrategy)
#was.ServerPort.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ServerConfigurationResource.createOrder)
#was.ServerPort.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.ServerPort.createScript=was/server/create-modify-server-port.py
# The word that is used to prefix a step description for the create operation.
#was.ServerPort.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.ServerConfigurationResource.destroyOrder)
#was.ServerPort.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.ServerPort.destroyScript=was/server/destroy-server-port.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ServerConfigurationResource.destroyVerb)
#was.ServerPort.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ServerConfigurationResource.discoverOrder)
#was.ServerPort.discoverOrder=50
# Discover Script
#was.ServerPort.discoverScript=was/server/discover-inspect-server-port.py
# Allows removal of server port. This is error prone operation and by default it's not enabled.
#was.ServerPort.enableRemoval=false
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ServerConfigurationResource.enableRippleStart)
#was.ServerPort.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ServerConfigurationResource.exposeDeployedApplication)
#was.ServerPort.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ServerConfigurationResource.libraryScripts)
#was.ServerPort.libraryScripts=was/common/config/set-encoding.py,was/server/config-resource-lib.py
# The order in which a modify step will be executed. (inherited from: was.ServerConfigurationResource.modifyOrder)
#was.ServerPort.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.ServerPort.modifyScript=was/server/create-modify-server-port.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ServerConfigurationResource.modifyVerb)
#was.ServerPort.modifyVerb=Configure
# The order of the step in the step list for the noop operation. (inherited from: was.ServerConfigurationResource.noopOrder)
#was.ServerPort.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ServerConfigurationResource.noopScript)
#was.ServerPort.noopScript=null
# Noop Verb (inherited from: was.ServerConfigurationResource.noopVerb)
#was.ServerPort.noopVerb=Noop
# NOT APPLICABLE
#was.ServerPort.overwriteExistingCustomProperties=false
# NOT APPLICABLE
#was.ServerPort.overwriteExistingValues=false
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ServerConfigurationResource.restartStrategy)
#was.ServerPort.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ServerConfigurationResource.standardPropertiesNotToExpose)
#was.ServerPort.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ServerConfigurationResource.startOrder)
#was.ServerPort.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ServerConfigurationResource.startScript)
#was.ServerPort.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ServerConfigurationResource.startVerb)
#was.ServerPort.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ServerConfigurationResource.stopOrder)
#was.ServerPort.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ServerConfigurationResource.stopScript)
#was.ServerPort.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ServerConfigurationResource.stopVerb)
#was.ServerPort.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterCreateOrder)
#was.ServerPort.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterDestroyOrder)
#was.ServerPort.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterModifyOrder)
#was.ServerPort.syncAfterModifyOrder=65
# List of container types on which the resource should be discovered. (inherited from: was.ServerConfigurationResource.wasContainerTypes)
#was.ServerPort.wasContainerTypes=Server
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.ServerPortSpec.boundTemplates=null
# Additional Properties Not To Expose (inherited from: was.ServerConfigurationResource.additionalPropertiesNotToExpose)
#was.ServerSessionManager.additionalPropertiesNotToExpose=id,name,wasType,wasContainerTypes,defaultDiscoverName,customProperties,overwriteExistingValues,overwriteExistingCustomProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ServerConfigurationResource.applyRestartStrategyOnNoop)
#was.ServerSessionManager.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ServerConfigurationResource.boundConfigurationItems)
#was.ServerSessionManager.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ServerConfigurationResource.containerRestartStrategy)
#was.ServerSessionManager.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ServerConfigurationResource.createOrder)
#was.ServerSessionManager.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ServerConfigurationResource.createScript)
#was.ServerSessionManager.createScript=was/server/modify-config-resource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.ServerConfigurationResource.createVerb)
#was.ServerSessionManager.createVerb=Configure
# Default deployed name to be assigned to the CI when discovered.
#was.ServerSessionManager.defaultDiscoverName=SessionManager
# The order in which a destroy step will be executed. (inherited from: was.ServerConfigurationResource.destroyOrder)
#was.ServerSessionManager.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ServerConfigurationResource.destroyScript)
#was.ServerSessionManager.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ServerConfigurationResource.destroyVerb)
#was.ServerSessionManager.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ServerConfigurationResource.discoverOrder)
#was.ServerSessionManager.discoverOrder=50
# Discover Script (inherited from: was.ServerConfigurationResource.discoverScript)
#was.ServerSessionManager.discoverScript=was/server/discover-inspect-config-resource.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ServerConfigurationResource.enableRippleStart)
#was.ServerSessionManager.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ServerConfigurationResource.exposeDeployedApplication)
#was.ServerSessionManager.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ServerConfigurationResource.libraryScripts)
#was.ServerSessionManager.libraryScripts=was/common/config/set-encoding.py,was/server/config-resource-lib.py
# The order in which a modify step will be executed. (inherited from: was.ServerConfigurationResource.modifyOrder)
#was.ServerSessionManager.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ServerConfigurationResource.modifyScript)
#was.ServerSessionManager.modifyScript=was/server/modify-config-resource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ServerConfigurationResource.modifyVerb)
#was.ServerSessionManager.modifyVerb=Configure
# The order of the step in the step list for the noop operation. (inherited from: was.ServerConfigurationResource.noopOrder)
#was.ServerSessionManager.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ServerConfigurationResource.noopScript)
#was.ServerSessionManager.noopScript=null
# Noop Verb (inherited from: was.ServerConfigurationResource.noopVerb)
#was.ServerSessionManager.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ServerConfigurationResource.restartStrategy)
#was.ServerSessionManager.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ServerConfigurationResource.standardPropertiesNotToExpose)
#was.ServerSessionManager.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ServerConfigurationResource.startOrder)
#was.ServerSessionManager.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ServerConfigurationResource.startScript)
#was.ServerSessionManager.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ServerConfigurationResource.startVerb)
#was.ServerSessionManager.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ServerConfigurationResource.stopOrder)
#was.ServerSessionManager.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ServerConfigurationResource.stopScript)
#was.ServerSessionManager.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ServerConfigurationResource.stopVerb)
#was.ServerSessionManager.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterCreateOrder)
#was.ServerSessionManager.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterDestroyOrder)
#was.ServerSessionManager.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterModifyOrder)
#was.ServerSessionManager.syncAfterModifyOrder=65
# List of container types on which the resource should be discovered. (inherited from: was.ServerConfigurationResource.wasContainerTypes)
#was.ServerSessionManager.wasContainerTypes=Server
# WebSphere admin resource type.
#was.ServerSessionManager.wasType=SessionManager
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.ServerSessionManagerSpec.boundTemplates=null
# Only applicable for Percentile Response Time goals
#was.ServicePolicy.GoalAttributes_goalDeltaPercent=0
# Only applicable for Average Response Time goals
#was.ServicePolicy.GoalAttributes_goalDeltaValue=0
# Only applicable for Average Response Time goals
#was.ServicePolicy.GoalAttributes_goalDeltaValueUnits=MILLISECONDS
# Only applicable for Percentile Response Time goals
#was.ServicePolicy.GoalAttributes_goalPercent=90
# Only applicable for Percentile or Average Response Time goals
#was.ServicePolicy.GoalAttributes_goalValue=1
# Only applicable for Percentile or Average Response Time goals
#was.ServicePolicy.GoalAttributes_goalValueUnits=MILLISECONDS
# In WAS 6.1, only applicable for Percentile or Average Response Time goals
#was.ServicePolicy.GoalAttributes_importance=MEDIUM
# Only applicable for Percentile or Average Response Time goals
#was.ServicePolicy.GoalAttributes_timePeriodValue=0
# Only applicable for Percentile or Average Response Time goals
#was.ServicePolicy.GoalAttributes_timePeriodValueUnits=MILLISECONDS
# Additional Properties Not To Expose
#was.ServicePolicy.additionalPropertiesNotToExpose=GoalAttributes,goalType,additionalTransactionClasses
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.ServicePolicy.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.ServicePolicy.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.ServicePolicy.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.Resource.createOrder)
#was.ServicePolicy.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.ServicePolicy.createScript=was/policies/service/create-service-policy.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.ServicePolicy.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.Resource.destroyOrder)
#was.ServicePolicy.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.ServicePolicy.destroyScript=was/policies/service/destroy-service-policy.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.ServicePolicy.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Resource.discoverOrder)
#was.ServicePolicy.discoverOrder=50
# Discover Script
#was.ServicePolicy.discoverScript=was/policies/service/discover-inspect-service-policy.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.ServicePolicy.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.ServicePolicy.exposeDeployedApplication=false
# Goal Type
#was.ServicePolicy.goalType=DISCRETIONARY
# List of scripts to be appended to the deployed's runtime script
#was.ServicePolicy.libraryScripts=was/common/config/set-encoding.py,was/policies/service/service-policy-lib.py
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.ServicePolicy.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.ServicePolicy.modifyScript=was/policies/service/modify-service-policy.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.ServicePolicy.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.ServicePolicy.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.ServicePolicy.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.ServicePolicy.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.ServicePolicy.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.ServicePolicy.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.ServicePolicy.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.ServicePolicy.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.ServicePolicy.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.ServicePolicy.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.ServicePolicy.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.ServicePolicy.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.ServicePolicy.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.ServicePolicy.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.ServicePolicy.syncAfterModifyOrder=65
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.ServicePolicySpec.boundTemplates=null
# Specifies the eviction algorithm that the disk cache will use to evict entries once the high threshold is reached.
#was.ServletCacheInstance.DiskCache_algorithm=NONE
# Specifies when the eviction policy starts.
#was.ServletCacheInstance.DiskCache_highThreshold=95
# Specifies when the eviction policy ends.
#was.ServletCacheInstance.DiskCache_lowThreshold=90
# Specifies when the memory cache eviction policy starts.
#was.ServletCacheInstance.MemoryCache_highThreshold=95
# Specifies when the memory cache eviction policy ends.
#was.ServletCacheInstance.MemoryCache_lowThreshold=80
# Additional Properties Not To Expose
#was.ServletCacheInstance.additionalPropertiesNotToExpose=customProperties, diskCacheCleanupFrequency, maxBufferedTemplates, maxBufferedDependencyIds, maxBufferedCacheIdsPerMetaEntry, diskCachePerformanceLevel, diskCacheEntrySizeInMB, diskCacheSizeInEntries, diskCacheSizeInGB, flushToDiskOnStop, diskOffloadLocation, DiskCache, MemoryCache, memoryCacheSizeInMB
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.ServletCacheInstance.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.ServletCacheInstance.boundConfigurationItems=null
# Specifies a positive integer for the maximum number of entries the cache holds.
#was.ServletCacheInstance.cacheSize=2000
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.ServletCacheInstance.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.Resource.createOrder)
#was.ServletCacheInstance.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.ServletCacheInstance.createScript=was/resources/cache/create-servlet-cache-instance.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.ServletCacheInstance.createVerb=Create
# Specifies the default priority for servlets that can be cached.
#was.ServletCacheInstance.defaultPriority=1
# The order in which a destroy step will be executed. (inherited from: was.Resource.destroyOrder)
#was.ServletCacheInstance.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.ServletCacheInstance.destroyScript=was/resources/cache/destroy-servlet-cache-instance.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.ServletCacheInstance.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Resource.discoverOrder)
#was.ServletCacheInstance.discoverOrder=50
# Discover Script
#was.ServletCacheInstance.discoverScript=was/resources/cache/discover-inspect-servlet-cache-instance.py
# Specifies a value for the disk cache cleanup frequency,in minutes. If this value is set to 0, the cleanup runs only at midnight.
#was.ServletCacheInstance.diskCacheCleanupFrequency=0
# Specifies a value for the maximum size of an individual cache entry in MB.
#was.ServletCacheInstance.diskCacheEntrySizeInMB=0
# Specifies the level of performance that is required by the disk cache.
#was.ServletCacheInstance.diskCachePerformanceLevel=BALANCED
# Specifies a value for the maximum disk cache size in number of entries.
#was.ServletCacheInstance.diskCacheSizeInEntries=0
# Specifies a value for the maximum disk cache size in GB.
#was.ServletCacheInstance.diskCacheSizeInGB=0
# Specifies that when the cache becomes full, the cache entries are saved to disk.
#was.ServletCacheInstance.enableDiskOffload=false
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.ServletCacheInstance.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.ServletCacheInstance.exposeDeployedApplication=false
# Specifies if in-memory cached objects are saved to disk when the server is stopped.
#was.ServletCacheInstance.flushToDiskOnStop=false
# List of scripts to be appended to the deployed's runtime script
#was.ServletCacheInstance.libraryScripts=was/common/config/set-encoding.py,was/resources/cache/servlet-cache-instance-lib.py
# Specifies a value for the maximum number of cache identifiers that are stored for an individual dependency ID or template in the disk cache metadata in memory.
#was.ServletCacheInstance.maxBufferedCacheIdsPerMetaEntry=1000
# Specifies a value for the maximum number of dependency identifier buckets in the disk cache metadata in memory.
#was.ServletCacheInstance.maxBufferedDependencyIds=10000
# Specifies a value for the maximum number of template buckets that are in the disk cache metadata in memory.
#was.ServletCacheInstance.maxBufferedTemplates=100
# Specifies a value for the maximum memory cache size in MB.
#was.ServletCacheInstance.memoryCacheSizeInMB=0
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.ServletCacheInstance.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.ServletCacheInstance.modifyScript=was/resources/cache/modify-servlet-cache-instance.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.ServletCacheInstance.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.ServletCacheInstance.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.ServletCacheInstance.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.ServletCacheInstance.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.ServletCacheInstance.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.ServletCacheInstance.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.ServletCacheInstance.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.ServletCacheInstance.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.ServletCacheInstance.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.ServletCacheInstance.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.ServletCacheInstance.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.ServletCacheInstance.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.ServletCacheInstance.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.ServletCacheInstance.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.ServletCacheInstance.syncAfterModifyOrder=65
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.ServletCacheInstanceSpec.boundTemplates=null
# Specifies that session cookies include the HTTPOnly field.  When checked, browsers that support the HTTPOnly attribute do not allow cookies to be accessed by client-side scripts.  For security cookies, see the global security settings for Web SSO.
#was.SessionManager.Cookie_httpOnly=true
# Specifies the time to live for a cookie as a user defined value. Specify a value in seconds. When the default value (-1) is used, time to live for a cookie will be determined by the browser session.
#was.SessionManager.Cookie_maximumAge=-1
# Specifies a name for the cookie that is used for session management. This name must be unique. The servlet specification requires this name to be JSESSIONID. However, for flexibility, this value is configurable.
#was.SessionManager.Cookie_name=JSESSIONID
# Specify any string representing a path on the server. A slash (/) indicates root directory. Specify a value to restrict the paths to which the cookie is sent. By restricting paths, you can keep the cookie from being sent to certain URLs on the server. If you specify the root directory, the cookie is sent no matter which path on the given server is accessed.
#was.SessionManager.Cookie_path=/
# Specifies the mode used for replication. Select client if sessions need to be replicated. Select server if sessions need to be stored. Select both client and server if sessions need to be replicated and stored.
#was.SessionManager.DRSSettings_dataReplicationMode=BOTH
# Specifies whether to allow the number of sessions in memory to exceed the value specified for maximum in-memory session count. This feature is valid only in nonpersistent sessions mode.
#was.SessionManager.TuningParams_allowOverflow=true
# Specify session timeout in minutes.
#was.SessionManager.TuningParams_invalidationTimeout=30
# Specifies the maximum number of sessions to maintain in memory.
#was.SessionManager.TuningParams_maxInMemorySessionCount=1000
# Specifies when to clean the invalid sessions from external location.
#was.SessionManager.TuningParams_scheduleInvalidation=false
# Specifies whether or not only updated attributes should be written to the persistent store or all of the session attributes should be written to the persistent store, whether or not they have changed. If you specify only updated attributes, only the updated attributes are written to the persistent store  If you specify all session attributes, all attributes are written to the persistent store.
#was.SessionManager.TuningParams_writeContents=ONLY_UPDATED_ATTRIBUTES
# Specifies when the session is written to the persistent store.
#was.SessionManager.TuningParams_writeFrequency=END_OF_SERVLET_SERVICE
# Specify a time period in seconds in which a session should be writen to the persistent store.
#was.SessionManager.TuningParams_writeInterval=120
# Allow access on timeout.
#was.SessionManager.accessSessionOnTimeout=true
# Additional Properties Not To Expose
#was.SessionManager.additionalPropertiesNotToExpose=id,container,name,type,deployable,scope,restrictToModules,Cookie,SessionDatabasePersistence,TuningParams,DRSSettings,InvalidationSchedule
# Allow serial access.
#was.SessionManager.allowSerializedSessionAccess=false
# Enable cookies.
#was.SessionManager.enableCookies=true
# Enable protocol switch rewriting
#was.SessionManager.enableProtocolSwitchRewriting=false
# Enable SSL ID tracking.
#was.SessionManager.enableSSLTracking=false
# Specifies whether security integration is enabled. When security integration is enabled, the session manager associates the identity of users with their HTTP sessions.
#was.SessionManager.enableSecurityIntegration=false
# Enable URL rewriting.
#was.SessionManager.enableUrlRewriting=false
# Maximum wait time.
#was.SessionManager.maxWaitTime=0
# Use this page to specify how session data is saved in a distributed environment. The SIP container uses only memory-to-memory replication for distributed sessions.
#was.SessionManager.sessionPersistenceMode=NONE
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.SharedLibrary.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.SharedLibrary.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.SharedLibrary.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.Resource.createOrder)
#was.SharedLibrary.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.SharedLibrary.createScript=was/sharedlibrary/create-shared-library.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.SharedLibrary.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.Resource.destroyOrder)
#was.SharedLibrary.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.SharedLibrary.destroyScript=was/sharedlibrary/destroy-shared-library.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.SharedLibrary.destroyVerb=Destroy
# The order in which a discover step will be executed.
#was.SharedLibrary.discoverOrder=45
# Discover Script
#was.SharedLibrary.discoverScript=was/sharedlibrary/discover-inspect-shared-library.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.SharedLibrary.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.SharedLibrary.exposeDeployedApplication=false
# Configure boolean value to use an isolated class loader for this shared library
#was.SharedLibrary.isolatedClassLoader=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.Resource.libraryScripts)
#was.SharedLibrary.libraryScripts=null
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.SharedLibrary.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.Resource.modifyScript)
#was.SharedLibrary.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.SharedLibrary.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.SharedLibrary.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.SharedLibrary.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.SharedLibrary.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.SharedLibrary.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.SharedLibrary.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.SharedLibrary.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.SharedLibrary.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.SharedLibrary.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.SharedLibrary.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.SharedLibrary.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.SharedLibrary.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.SharedLibrary.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.SharedLibrary.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.SharedLibrary.syncAfterModifyOrder=65
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.SharedLibrarySpec.boundTemplates=null
# Additional Properties Not To Expose
#was.SiBus.additionalPropertiesNotToExpose=name,permittedTransport
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.SiBus.applyRestartStrategyOnNoop=false
# Used to allow or prevent the bus from auditing when the application server auditing support is enabled.
#was.SiBus.auditAllowed=true
# The bootstrap policy value can be set to one of the following SIBSERVICE_ENABLED, MEMBERS_AND_NOMINATED or MEMBERS_ONLY.
#was.SiBus.bootstrapPolicy=SIBSERVICE_ENABLED
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.SiBus.boundConfigurationItems=null
# Enables or disables bus security.
#was.SiBus.busSecurity=true
# Indicate whether configuration files should be dynamically reloaded for this bus.
#was.SiBus.configurationReloadEnabled=true
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.SiBus.containerRestartStrategy=NONE
# The order in which a create step will be executed.
#was.SiBus.createOrder=57
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.SiBus.createScript=was/sib/create-or-modify-sibus.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.SiBus.createVerb=Create
# The order in which a destroy step will be executed.
#was.SiBus.destroyOrder=46
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.SiBus.destroyScript=was/sib/destroy-sibus.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.SiBus.destroyVerb=Destroy
# Indicate whether or not any messages left in a queue's data store should be discarded when the queue is deleted.
#was.SiBus.discardOnDelete=false
# The order in which a discover step will be executed.
#was.SiBus.discoverOrder=45
# Discover Script
#was.SiBus.discoverScript=was/sib/discover-inspect-sibus.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.SiBus.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.SiBus.exposeDeployedApplication=false
# The maximum number of messages that any queue on the bus can hold.
#was.SiBus.highMessageThreshold=50000
# List of scripts to be appended to the deployed's runtime script
#was.SiBus.libraryScripts=was/common/config/set-encoding.py,was/sib/sib-lib.py
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.SiBus.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.SiBus.modifyScript=was/sib/create-or-modify-sibus.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.SiBus.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.SiBus.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.SiBus.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.SiBus.noopVerb=Noop
# Selects which transports are allowed. When set to LISTED transports are enabled by the permittedTransport_* flags. (Values: ALL, SSL_ENABLED, LISTED)
#was.SiBus.permittedChains=SSL_ENABLED
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.SiBus.restartStrategy=STOP_START
# Set script compatibility to 6 to maintain version 6 command behavior. Default value is 6.1.
#was.SiBus.scriptCompatibility=6.1
# The length of time, in minutes, that a security group will be cached for. Default 120, maximum 99999.
#was.SiBus.securityGroupCacheTimeout=120
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.SiBus.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.SiBus.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.SiBus.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.SiBus.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.SiBus.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.SiBus.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.SiBus.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.SiBus.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.SiBus.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.SiBus.syncAfterModifyOrder=65
# Configure the bus to use the server identity for calling mediations rather than the mediationsAuthAlias.
#was.SiBus.useServerIdForMediations=false
# A parameter that specifies whether to enable messaging engine policy assistance.
#was.SiBusMember.Cluster_enableAssistance=false
# A parameter that specifies whether the messaging engine in the cluster that has failed over can fail back to a more preferred server in the preferred servers list if that server becomes available again. This option can be used when messaging engine policy assistance is enabled and the 'CUSTOM' policy is selected.
#was.SiBusMember.Cluster_failback=false
# A parameter that specifies whether the messaging engine in the cluster can fail over to another server in the cluster if the host server for the messaging engine fails. This option can be used when messaging engine policy assistance is enabled and the 'CUSTOM' policy is selected.
#was.SiBusMember.Cluster_failover=false
# A parameter that specifies whether the messaging engine in the cluster can run only on servers in the preferred servers list, or on any server in the cluster. This option can be used when messaging engine policy assistance is enabled and the 'CUSTOM' policy is selected.
#was.SiBusMember.Cluster_preferredServersOnly=false
# If this option is selected, the messaging engine creates the database tables for the data store automatically. Otherwise, the database administrator must create the database tables manually.
#was.SiBusMember.DataStore_createTables=true
# Create a data store to use as a message store for the messaging engine. A data store consists of the set of tables that a messaging engine uses to store persistent data in a database.
#was.SiBusMember.DataStore_enabled=false
# If this option is selected, A new messaging engine locking mechanism is applied, where long DB locks are not held. Otherwise, the old locking mechanism is applied where long DB locks are held by messaging engine.
#was.SiBusMember.DataStore_restrictLongDBLock=false
# The name of the database schema used to contain the tables for the data store.
#was.SiBusMember.DataStore_schemaName=IBMWSSIB
# Create a file store to use as a message store for the messaging engine. A file store is a type of message store that directly uses files in a file system through the operating system. The alternative is to use a data store.
#was.SiBusMember.FileStore_enabled=true
# Size in megabytes of the log file.
#was.SiBusMember.FileStore_logSize=100
# The maximum size in megabytes for the permanent store files.
#was.SiBusMember.FileStore_maxPermanentStoreSize=500
# The maximum size in megabytes for the temporary store files.
#was.SiBusMember.FileStore_maxTemporaryStoreSize=500
# The minimum number of megabytes reserved by each of the permanent store files. The permanent store files are never smaller than the log file.
#was.SiBusMember.FileStore_minPermanentStoreSize=200
# The minimum number of megabytes reserved by each of the temporary store files. The temporary store files are never smaller than the log file.
#was.SiBusMember.FileStore_minTemporaryStoreSize=200
# Indicates whether the permanent store files are unlimited in size.
#was.SiBusMember.FileStore_unlimitedPermanentStoreSize=false
# Indicates whether the temporary store files are unlimited in size.
#was.SiBusMember.FileStore_unlimitedTemporaryStoreSize=false
# This is the override name of the WebSphere MQ server connection channel that will be used to establish a connection to the WebSphere MQ queue manager or WebSphere MQ queue sharing group, supply with a WebSphere MQ server name, but not node name, server name or cluster name.
#was.SiBusMember.Wmq_channel=SYSTEM.DEF.SVRCONN
# This is the override port number monitored by a WebSphere MQ queue manager or WebSphere MQ queue sharing group listener, which is listening for connections, supply with a WebSphere MQ server name, but not node name, server name or cluster name.
#was.SiBusMember.Wmq_port=1414
# Overridden value for the WebSphere MQ server bus member transportChain attribute. Refer to the createSIBWMQServer command for a description of this parameter.
#was.SiBusMember.Wmq_transportChain=OutboundBasicWMQClient
# Overridden value for the WebSphere MQ server bus member trustUserIds attribute. Refer to the createSIBWMQServer command for a description of this parameter
#was.SiBusMember.Wmq_trustUserIds=true
# Additional Properties Not To Expose
#was.SiBusMember.additionalPropertiesNotToExpose=name,Cluster,DataStore,FileStore,Wmq
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.SiBusMember.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.SiBusMember.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.SiBusMember.containerRestartStrategy=NONE
# The order in which a create step will be executed.
#was.SiBusMember.createOrder=58
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.SiBusMember.createScript=was/sib/create-sibus-member.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.SiBusMember.createVerb=Create
# The order in which a destroy step will be executed.
#was.SiBusMember.destroyOrder=44
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.SiBusMember.destroyScript=was/sib/destroy-sibus-member.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.SiBusMember.destroyVerb=Destroy
# The order in which a discover step will be executed.
#was.SiBusMember.discoverOrder=44
# Discover Script
#was.SiBusMember.discoverScript=was/sib/discover-inspect-sibus-member.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.SiBusMember.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.SiBusMember.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.Resource.libraryScripts)
#was.SiBusMember.libraryScripts=null
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.SiBusMember.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.Resource.modifyScript)
#was.SiBusMember.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.SiBusMember.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.SiBusMember.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.SiBusMember.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.SiBusMember.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.SiBusMember.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.SiBusMember.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.SiBusMember.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.SiBusMember.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.SiBusMember.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.SiBusMember.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.SiBusMember.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.SiBusMember.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.SiBusMember.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.SiBusMember.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.SiBusMember.syncAfterModifyOrder=65
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.SiBusMemberSpec.boundTemplates=null
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.SiBusSpec.boundTemplates=null
# Additional Properties Not To Expose
#was.SibConnectionFactory.additionalPropertiesNotToExpose=sibType,wasType
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.SibJndiResource.applyRestartStrategyOnNoop)
#was.SibConnectionFactory.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.SibJndiResource.boundConfigurationItems)
#was.SibConnectionFactory.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.SibJndiResource.containerRestartStrategy)
#was.SibConnectionFactory.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.SibJndiResource.createOrder)
#was.SibConnectionFactory.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.SibConnectionFactory.createScript=was/jms/create-sib-connection-factory.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.SibJndiResource.createVerb)
#was.SibConnectionFactory.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.SibJndiResource.destroyOrder)
#was.SibConnectionFactory.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.SibConnectionFactory.destroyScript=was/jms/destroy-sib-connection-factory.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.SibJndiResource.destroyVerb)
#was.SibConnectionFactory.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.SibJndiResource.discoverOrder)
#was.SibConnectionFactory.discoverOrder=50
# Discover Script
#was.SibConnectionFactory.discoverScript=was/jms/discover-inspect-sib-connection-factory.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.SibJndiResource.enableRippleStart)
#was.SibConnectionFactory.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.SibJndiResource.exposeDeployedApplication)
#was.SibConnectionFactory.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.SibJndiResource.libraryScripts)
#was.SibConnectionFactory.libraryScripts=was/common/config/set-encoding.py,was/jms/discover-inspect-sib-lib.py
# The order in which a modify step will be executed. (inherited from: was.SibJndiResource.modifyOrder)
#was.SibConnectionFactory.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.SibJndiResource.modifyScript)
#was.SibConnectionFactory.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.SibJndiResource.modifyVerb)
#was.SibConnectionFactory.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.SibJndiResource.noopOrder)
#was.SibConnectionFactory.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.SibJndiResource.noopScript)
#was.SibConnectionFactory.noopScript=null
# Noop Verb (inherited from: was.SibJndiResource.noopVerb)
#was.SibConnectionFactory.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.SibJndiResource.restartStrategy)
#was.SibConnectionFactory.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.SibJndiResource.standardPropertiesNotToExpose)
#was.SibConnectionFactory.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.SibJndiResource.startOrder)
#was.SibConnectionFactory.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.SibJndiResource.startScript)
#was.SibConnectionFactory.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.SibJndiResource.startVerb)
#was.SibConnectionFactory.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.SibJndiResource.stopOrder)
#was.SibConnectionFactory.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.SibJndiResource.stopScript)
#was.SibConnectionFactory.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.SibJndiResource.stopVerb)
#was.SibConnectionFactory.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.SibJndiResource.syncAfterCreateOrder)
#was.SibConnectionFactory.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.SibJndiResource.syncAfterDestroyOrder)
#was.SibConnectionFactory.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.SibJndiResource.syncAfterModifyOrder)
#was.SibConnectionFactory.syncAfterModifyOrder=65
# Properties that are not exposed to any python wsadmin script.
#was.SibDestination.additionalPropertiesNotToExpose=wasType,sibType,busName
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.SibResource.applyRestartStrategyOnNoop)
#was.SibDestination.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.SibResource.boundConfigurationItems)
#was.SibDestination.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.SibResource.containerRestartStrategy)
#was.SibDestination.containerRestartStrategy=NONE
# The order in which a create step will be executed.
#was.SibDestination.createOrder=58
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.SibResource.createScript)
#was.SibDestination.createScript=null
# The word that is used to prefix a step description for the create operation. (inherited from: was.SibResource.createVerb)
#was.SibDestination.createVerb=Create
# The order in which a destroy step will be executed.
#was.SibDestination.destroyOrder=42
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.SibResource.destroyScript)
#was.SibDestination.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.SibResource.destroyVerb)
#was.SibDestination.destroyVerb=Destroy
# The order in which a discover step will be executed.
#was.SibDestination.discoverOrder=45
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.SibResource.enableRippleStart)
#was.SibDestination.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.SibResource.exposeDeployedApplication)
#was.SibDestination.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.SibResource.libraryScripts)
#was.SibDestination.libraryScripts=was/common/config/set-encoding.py,was/jms/discover-inspect-sib-lib.py
# The order in which a modify step will be executed. (inherited from: was.SibResource.modifyOrder)
#was.SibDestination.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.SibResource.modifyScript)
#was.SibDestination.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.SibResource.modifyVerb)
#was.SibDestination.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.SibResource.noopOrder)
#was.SibDestination.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.SibResource.noopScript)
#was.SibDestination.noopScript=null
# Noop Verb (inherited from: was.SibResource.noopVerb)
#was.SibDestination.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.SibResource.restartStrategy)
#was.SibDestination.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.SibResource.standardPropertiesNotToExpose)
#was.SibDestination.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.SibResource.startOrder)
#was.SibDestination.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.SibResource.startScript)
#was.SibDestination.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.SibResource.startVerb)
#was.SibDestination.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.SibResource.stopOrder)
#was.SibDestination.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.SibResource.stopScript)
#was.SibDestination.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.SibResource.stopVerb)
#was.SibDestination.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.SibResource.syncAfterCreateOrder)
#was.SibDestination.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.SibResource.syncAfterDestroyOrder)
#was.SibDestination.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.SibResource.syncAfterModifyOrder)
#was.SibDestination.syncAfterModifyOrder=65
# Additional Properties Not To Expose (inherited from: was.SibResource.additionalPropertiesNotToExpose)
#was.SibJndiResource.additionalPropertiesNotToExpose=wasType
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.SibResource.applyRestartStrategyOnNoop)
#was.SibJndiResource.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.SibResource.boundConfigurationItems)
#was.SibJndiResource.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.SibResource.containerRestartStrategy)
#was.SibJndiResource.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.SibResource.createOrder)
#was.SibJndiResource.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.SibResource.createScript)
#was.SibJndiResource.createScript=null
# The word that is used to prefix a step description for the create operation. (inherited from: was.SibResource.createVerb)
#was.SibJndiResource.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.SibResource.destroyOrder)
#was.SibJndiResource.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.SibResource.destroyScript)
#was.SibJndiResource.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.SibResource.destroyVerb)
#was.SibJndiResource.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.SibResource.discoverOrder)
#was.SibJndiResource.discoverOrder=50
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.SibResource.enableRippleStart)
#was.SibJndiResource.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.SibResource.exposeDeployedApplication)
#was.SibJndiResource.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.SibResource.libraryScripts)
#was.SibJndiResource.libraryScripts=was/common/config/set-encoding.py,was/jms/discover-inspect-sib-lib.py
# The order in which a modify step will be executed. (inherited from: was.SibResource.modifyOrder)
#was.SibJndiResource.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.SibResource.modifyScript)
#was.SibJndiResource.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.SibResource.modifyVerb)
#was.SibJndiResource.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.SibResource.noopOrder)
#was.SibJndiResource.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.SibResource.noopScript)
#was.SibJndiResource.noopScript=null
# Noop Verb (inherited from: was.SibResource.noopVerb)
#was.SibJndiResource.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.SibResource.restartStrategy)
#was.SibJndiResource.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.SibResource.standardPropertiesNotToExpose)
#was.SibJndiResource.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.SibResource.startOrder)
#was.SibJndiResource.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.SibResource.startScript)
#was.SibJndiResource.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.SibResource.startVerb)
#was.SibJndiResource.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.SibResource.stopOrder)
#was.SibJndiResource.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.SibResource.stopScript)
#was.SibJndiResource.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.SibResource.stopVerb)
#was.SibJndiResource.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.SibResource.syncAfterCreateOrder)
#was.SibJndiResource.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.SibResource.syncAfterDestroyOrder)
#was.SibJndiResource.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.SibResource.syncAfterModifyOrder)
#was.SibJndiResource.syncAfterModifyOrder=65
# Additional Properties Not To Expose (inherited from: was.SibJndiResource.additionalPropertiesNotToExpose)
#was.SibQueue.additionalPropertiesNotToExpose=wasType
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.SibJndiResource.applyRestartStrategyOnNoop)
#was.SibQueue.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.SibJndiResource.boundConfigurationItems)
#was.SibQueue.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.SibJndiResource.containerRestartStrategy)
#was.SibQueue.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.SibJndiResource.createOrder)
#was.SibQueue.createOrder=60
# Python wsadmin script invoked to create a JMS SIB queue.
#was.SibQueue.createScript=was/jms/create-sib-queue.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.SibJndiResource.createVerb)
#was.SibQueue.createVerb=Create
# The delivery mode for messages. Legal values are 'Application', 'NonPersistent' and 'Persistent'.
#was.SibQueue.deliveryMode=Application
# The order in which a destroy step will be executed. (inherited from: was.SibJndiResource.destroyOrder)
#was.SibQueue.destroyOrder=40
# Python wsadmin script invoked to destroy a JMS SIB queue.
#was.SibQueue.destroyScript=was/jms/destroy-sib-queue-or-topic.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.SibJndiResource.destroyVerb)
#was.SibQueue.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.SibJndiResource.discoverOrder)
#was.SibQueue.discoverOrder=50
# Python wsadmin script invoked to inspect a JMS SIB queue.
#was.SibQueue.discoverScript=was/jms/discover-inspect-sib-queue.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.SibJndiResource.enableRippleStart)
#was.SibQueue.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.SibJndiResource.exposeDeployedApplication)
#was.SibQueue.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.SibJndiResource.libraryScripts)
#was.SibQueue.libraryScripts=was/common/config/set-encoding.py,was/jms/discover-inspect-sib-lib.py
# The order in which a modify step will be executed. (inherited from: was.SibJndiResource.modifyOrder)
#was.SibQueue.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.SibJndiResource.modifyScript)
#was.SibQueue.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.SibJndiResource.modifyVerb)
#was.SibQueue.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.SibJndiResource.noopOrder)
#was.SibQueue.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.SibJndiResource.noopScript)
#was.SibQueue.noopScript=null
# Noop Verb (inherited from: was.SibJndiResource.noopVerb)
#was.SibQueue.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.SibJndiResource.restartStrategy)
#was.SibQueue.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.SibJndiResource.standardPropertiesNotToExpose)
#was.SibQueue.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.SibJndiResource.startOrder)
#was.SibQueue.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.SibJndiResource.startScript)
#was.SibQueue.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.SibJndiResource.startVerb)
#was.SibQueue.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.SibJndiResource.stopOrder)
#was.SibQueue.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.SibJndiResource.stopScript)
#was.SibQueue.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.SibJndiResource.stopVerb)
#was.SibQueue.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.SibJndiResource.syncAfterCreateOrder)
#was.SibQueue.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.SibJndiResource.syncAfterDestroyOrder)
#was.SibQueue.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.SibJndiResource.syncAfterModifyOrder)
#was.SibQueue.syncAfterModifyOrder=65
# WAS config type of SIB queue.
#was.SibQueue.wasType=SIBJMSQueue
# Additional Properties Not To Expose (inherited from: was.SibConnectionFactory.additionalPropertiesNotToExpose)
#was.SibQueueConnectionFactory.additionalPropertiesNotToExpose=sibType,wasType
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.SibConnectionFactory.applyRestartStrategyOnNoop)
#was.SibQueueConnectionFactory.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.SibConnectionFactory.boundConfigurationItems)
#was.SibQueueConnectionFactory.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.SibConnectionFactory.containerRestartStrategy)
#was.SibQueueConnectionFactory.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.SibConnectionFactory.createOrder)
#was.SibQueueConnectionFactory.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.SibConnectionFactory.createScript)
#was.SibQueueConnectionFactory.createScript=was/jms/create-sib-connection-factory.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.SibConnectionFactory.createVerb)
#was.SibQueueConnectionFactory.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.SibConnectionFactory.destroyOrder)
#was.SibQueueConnectionFactory.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.SibConnectionFactory.destroyScript)
#was.SibQueueConnectionFactory.destroyScript=was/jms/destroy-sib-connection-factory.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.SibConnectionFactory.destroyVerb)
#was.SibQueueConnectionFactory.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.SibConnectionFactory.discoverOrder)
#was.SibQueueConnectionFactory.discoverOrder=50
# Discover Script (inherited from: was.SibConnectionFactory.discoverScript)
#was.SibQueueConnectionFactory.discoverScript=was/jms/discover-inspect-sib-connection-factory.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.SibConnectionFactory.enableRippleStart)
#was.SibQueueConnectionFactory.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.SibConnectionFactory.exposeDeployedApplication)
#was.SibQueueConnectionFactory.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.SibConnectionFactory.libraryScripts)
#was.SibQueueConnectionFactory.libraryScripts=was/common/config/set-encoding.py,was/jms/discover-inspect-sib-lib.py
# The order in which a modify step will be executed. (inherited from: was.SibConnectionFactory.modifyOrder)
#was.SibQueueConnectionFactory.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.SibConnectionFactory.modifyScript)
#was.SibQueueConnectionFactory.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.SibConnectionFactory.modifyVerb)
#was.SibQueueConnectionFactory.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.SibConnectionFactory.noopOrder)
#was.SibQueueConnectionFactory.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.SibConnectionFactory.noopScript)
#was.SibQueueConnectionFactory.noopScript=null
# Noop Verb (inherited from: was.SibConnectionFactory.noopVerb)
#was.SibQueueConnectionFactory.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.SibConnectionFactory.restartStrategy)
#was.SibQueueConnectionFactory.restartStrategy=STOP_START
# SIB type of SIB connection factory.
#was.SibQueueConnectionFactory.sibType=Queue
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.SibConnectionFactory.standardPropertiesNotToExpose)
#was.SibQueueConnectionFactory.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.SibConnectionFactory.startOrder)
#was.SibQueueConnectionFactory.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.SibConnectionFactory.startScript)
#was.SibQueueConnectionFactory.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.SibConnectionFactory.startVerb)
#was.SibQueueConnectionFactory.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.SibConnectionFactory.stopOrder)
#was.SibQueueConnectionFactory.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.SibConnectionFactory.stopScript)
#was.SibQueueConnectionFactory.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.SibConnectionFactory.stopVerb)
#was.SibQueueConnectionFactory.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.SibConnectionFactory.syncAfterCreateOrder)
#was.SibQueueConnectionFactory.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.SibConnectionFactory.syncAfterDestroyOrder)
#was.SibQueueConnectionFactory.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.SibConnectionFactory.syncAfterModifyOrder)
#was.SibQueueConnectionFactory.syncAfterModifyOrder=65
# WAS config type of SIB queue connnection factory.
#was.SibQueueConnectionFactory.wasType=SIBJMSQueueConnectionFactory
# The set of CI templates. (inherited from: jee.QueueConnectionFactorySpec.boundTemplates)
#was.SibQueueConnectionFactorySpec.boundTemplates=null
# Properties that are not exposed to any python wsadmin script. (inherited from: was.SibDestination.additionalPropertiesNotToExpose)
#was.SibQueueDestination.additionalPropertiesNotToExpose=wasType,sibType,busName
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.SibDestination.applyRestartStrategyOnNoop)
#was.SibQueueDestination.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.SibDestination.boundConfigurationItems)
#was.SibQueueDestination.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.SibDestination.containerRestartStrategy)
#was.SibQueueDestination.containerRestartStrategy=NONE
# The order in which a create step will be executed.
#was.SibQueueDestination.createOrder=59
# Python wsadmin script invoked to create a JMS SIB queue destination.
#was.SibQueueDestination.createScript=was/jms/create-sib-queue-destination.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.SibDestination.createVerb)
#was.SibQueueDestination.createVerb=Create
# The order in which a destroy step will be executed.
#was.SibQueueDestination.destroyOrder=43
# Python wsadmin script invoked to destroy a JMS SIB queue destination.
#was.SibQueueDestination.destroyScript=was/jms/destroy-sib-destination.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.SibDestination.destroyVerb)
#was.SibQueueDestination.destroyVerb=Destroy
# The order in which a discover step will be executed.
#was.SibQueueDestination.discoverOrder=44
# Discover Script
#was.SibQueueDestination.discoverScript=was/jms/discover-inspect-sib-queue-destination.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.SibDestination.enableRippleStart)
#was.SibQueueDestination.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.SibDestination.exposeDeployedApplication)
#was.SibQueueDestination.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.SibDestination.libraryScripts)
#was.SibQueueDestination.libraryScripts=was/common/config/set-encoding.py,was/jms/discover-inspect-sib-lib.py
# The order in which a modify step will be executed. (inherited from: was.SibDestination.modifyOrder)
#was.SibQueueDestination.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.SibDestination.modifyScript)
#was.SibQueueDestination.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.SibDestination.modifyVerb)
#was.SibQueueDestination.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.SibDestination.noopOrder)
#was.SibQueueDestination.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.SibDestination.noopScript)
#was.SibQueueDestination.noopScript=null
# Noop Verb (inherited from: was.SibDestination.noopVerb)
#was.SibQueueDestination.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.SibDestination.restartStrategy)
#was.SibQueueDestination.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.SibDestination.standardPropertiesNotToExpose)
#was.SibQueueDestination.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.SibDestination.startOrder)
#was.SibQueueDestination.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.SibDestination.startScript)
#was.SibQueueDestination.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.SibDestination.startVerb)
#was.SibQueueDestination.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.SibDestination.stopOrder)
#was.SibQueueDestination.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.SibDestination.stopScript)
#was.SibQueueDestination.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.SibDestination.stopVerb)
#was.SibQueueDestination.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.SibDestination.syncAfterCreateOrder)
#was.SibQueueDestination.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.SibDestination.syncAfterDestroyOrder)
#was.SibQueueDestination.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.SibDestination.syncAfterModifyOrder)
#was.SibQueueDestination.syncAfterModifyOrder=65
# The set of CI templates. (inherited from: jee.QueueSpec.boundTemplates)
#was.SibQueueDestinationSpec.boundTemplates=null
# The set of CI templates. (inherited from: jee.QueueSpec.boundTemplates)
#was.SibQueueSpec.boundTemplates=null
# Additional Properties Not To Expose
#was.SibResource.additionalPropertiesNotToExpose=wasType
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.SibResource.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.SibResource.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.SibResource.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.Resource.createOrder)
#was.SibResource.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.Resource.createScript)
#was.SibResource.createScript=null
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.SibResource.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.Resource.destroyOrder)
#was.SibResource.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.Resource.destroyScript)
#was.SibResource.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.SibResource.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Resource.discoverOrder)
#was.SibResource.discoverOrder=50
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.SibResource.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.SibResource.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#was.SibResource.libraryScripts=was/common/config/set-encoding.py,was/jms/discover-inspect-sib-lib.py
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.SibResource.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.Resource.modifyScript)
#was.SibResource.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.SibResource.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.SibResource.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.SibResource.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.SibResource.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.SibResource.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.SibResource.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.SibResource.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.SibResource.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.SibResource.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.SibResource.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.SibResource.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.SibResource.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.SibResource.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.SibResource.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.SibResource.syncAfterModifyOrder=65
# Additional Properties Not To Expose (inherited from: was.SibJndiResource.additionalPropertiesNotToExpose)
#was.SibTopic.additionalPropertiesNotToExpose=wasType
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.SibJndiResource.applyRestartStrategyOnNoop)
#was.SibTopic.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.SibJndiResource.boundConfigurationItems)
#was.SibTopic.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.SibJndiResource.containerRestartStrategy)
#was.SibTopic.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.SibJndiResource.createOrder)
#was.SibTopic.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.SibTopic.createScript=was/jms/create-sib-topic.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.SibJndiResource.createVerb)
#was.SibTopic.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.SibJndiResource.destroyOrder)
#was.SibTopic.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.SibTopic.destroyScript=was/jms/destroy-sib-queue-or-topic.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.SibJndiResource.destroyVerb)
#was.SibTopic.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.SibJndiResource.discoverOrder)
#was.SibTopic.discoverOrder=50
# Discover Script
#was.SibTopic.discoverScript=was/jms/discover-inspect-sib-topic.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.SibJndiResource.enableRippleStart)
#was.SibTopic.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.SibJndiResource.exposeDeployedApplication)
#was.SibTopic.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.SibJndiResource.libraryScripts)
#was.SibTopic.libraryScripts=was/common/config/set-encoding.py,was/jms/discover-inspect-sib-lib.py
# The order in which a modify step will be executed. (inherited from: was.SibJndiResource.modifyOrder)
#was.SibTopic.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.SibJndiResource.modifyScript)
#was.SibTopic.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.SibJndiResource.modifyVerb)
#was.SibTopic.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.SibJndiResource.noopOrder)
#was.SibTopic.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.SibJndiResource.noopScript)
#was.SibTopic.noopScript=null
# Noop Verb (inherited from: was.SibJndiResource.noopVerb)
#was.SibTopic.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.SibJndiResource.restartStrategy)
#was.SibTopic.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.SibJndiResource.standardPropertiesNotToExpose)
#was.SibTopic.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.SibJndiResource.startOrder)
#was.SibTopic.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.SibJndiResource.startScript)
#was.SibTopic.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.SibJndiResource.startVerb)
#was.SibTopic.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.SibJndiResource.stopOrder)
#was.SibTopic.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.SibJndiResource.stopScript)
#was.SibTopic.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.SibJndiResource.stopVerb)
#was.SibTopic.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.SibJndiResource.syncAfterCreateOrder)
#was.SibTopic.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.SibJndiResource.syncAfterDestroyOrder)
#was.SibTopic.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.SibJndiResource.syncAfterModifyOrder)
#was.SibTopic.syncAfterModifyOrder=65
# WAS config type of SIB topic.
#was.SibTopic.wasType=SIBJMSTopic
# Additional Properties Not To Expose (inherited from: was.SibConnectionFactory.additionalPropertiesNotToExpose)
#was.SibTopicConnectionFactory.additionalPropertiesNotToExpose=sibType,wasType
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.SibConnectionFactory.applyRestartStrategyOnNoop)
#was.SibTopicConnectionFactory.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.SibConnectionFactory.boundConfigurationItems)
#was.SibTopicConnectionFactory.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.SibConnectionFactory.containerRestartStrategy)
#was.SibTopicConnectionFactory.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.SibConnectionFactory.createOrder)
#was.SibTopicConnectionFactory.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.SibConnectionFactory.createScript)
#was.SibTopicConnectionFactory.createScript=was/jms/create-sib-connection-factory.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.SibConnectionFactory.createVerb)
#was.SibTopicConnectionFactory.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.SibConnectionFactory.destroyOrder)
#was.SibTopicConnectionFactory.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.SibConnectionFactory.destroyScript)
#was.SibTopicConnectionFactory.destroyScript=was/jms/destroy-sib-connection-factory.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.SibConnectionFactory.destroyVerb)
#was.SibTopicConnectionFactory.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.SibConnectionFactory.discoverOrder)
#was.SibTopicConnectionFactory.discoverOrder=50
# Discover Script (inherited from: was.SibConnectionFactory.discoverScript)
#was.SibTopicConnectionFactory.discoverScript=was/jms/discover-inspect-sib-connection-factory.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.SibConnectionFactory.enableRippleStart)
#was.SibTopicConnectionFactory.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.SibConnectionFactory.exposeDeployedApplication)
#was.SibTopicConnectionFactory.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.SibConnectionFactory.libraryScripts)
#was.SibTopicConnectionFactory.libraryScripts=was/common/config/set-encoding.py,was/jms/discover-inspect-sib-lib.py
# The order in which a modify step will be executed. (inherited from: was.SibConnectionFactory.modifyOrder)
#was.SibTopicConnectionFactory.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.SibConnectionFactory.modifyScript)
#was.SibTopicConnectionFactory.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.SibConnectionFactory.modifyVerb)
#was.SibTopicConnectionFactory.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.SibConnectionFactory.noopOrder)
#was.SibTopicConnectionFactory.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.SibConnectionFactory.noopScript)
#was.SibTopicConnectionFactory.noopScript=null
# Noop Verb (inherited from: was.SibConnectionFactory.noopVerb)
#was.SibTopicConnectionFactory.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.SibConnectionFactory.restartStrategy)
#was.SibTopicConnectionFactory.restartStrategy=STOP_START
# SIB type of SIB connection factory.
#was.SibTopicConnectionFactory.sibType=Topic
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.SibConnectionFactory.standardPropertiesNotToExpose)
#was.SibTopicConnectionFactory.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.SibConnectionFactory.startOrder)
#was.SibTopicConnectionFactory.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.SibConnectionFactory.startScript)
#was.SibTopicConnectionFactory.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.SibConnectionFactory.startVerb)
#was.SibTopicConnectionFactory.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.SibConnectionFactory.stopOrder)
#was.SibTopicConnectionFactory.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.SibConnectionFactory.stopScript)
#was.SibTopicConnectionFactory.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.SibConnectionFactory.stopVerb)
#was.SibTopicConnectionFactory.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.SibConnectionFactory.syncAfterCreateOrder)
#was.SibTopicConnectionFactory.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.SibConnectionFactory.syncAfterDestroyOrder)
#was.SibTopicConnectionFactory.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.SibConnectionFactory.syncAfterModifyOrder)
#was.SibTopicConnectionFactory.syncAfterModifyOrder=65
# WAS config type of SIB topic connnection factory.
#was.SibTopicConnectionFactory.wasType=SIBJMSTopicConnectionFactory
# The set of CI templates. (inherited from: jee.TopicConnectionFactorySpec.boundTemplates)
#was.SibTopicConnectionFactorySpec.boundTemplates=null
# Properties that are not exposed to any python wsadmin script. (inherited from: was.SibDestination.additionalPropertiesNotToExpose)
#was.SibTopicSpaceDestination.additionalPropertiesNotToExpose=wasType,sibType,busName
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.SibDestination.applyRestartStrategyOnNoop)
#was.SibTopicSpaceDestination.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.SibDestination.boundConfigurationItems)
#was.SibTopicSpaceDestination.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.SibDestination.containerRestartStrategy)
#was.SibTopicSpaceDestination.containerRestartStrategy=NONE
# The order in which a create step will be executed.
#was.SibTopicSpaceDestination.createOrder=59
# Python wsadmin script invoked to create a JMS SIB topic space destination.
#was.SibTopicSpaceDestination.createScript=was/jms/create-sib-topic-space-destination.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.SibDestination.createVerb)
#was.SibTopicSpaceDestination.createVerb=Create
# The order in which a destroy step will be executed.
#was.SibTopicSpaceDestination.destroyOrder=43
# Python wsadmin script invoked to destroy a JMS SIB topic space destination.
#was.SibTopicSpaceDestination.destroyScript=was/jms/destroy-sib-destination.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.SibDestination.destroyVerb)
#was.SibTopicSpaceDestination.destroyVerb=Destroy
# The order in which a discover step will be executed.
#was.SibTopicSpaceDestination.discoverOrder=44
# Discover Script
#was.SibTopicSpaceDestination.discoverScript=was/jms/discover-inspect-sib-topic-space-destination.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.SibDestination.enableRippleStart)
#was.SibTopicSpaceDestination.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.SibDestination.exposeDeployedApplication)
#was.SibTopicSpaceDestination.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.SibDestination.libraryScripts)
#was.SibTopicSpaceDestination.libraryScripts=was/common/config/set-encoding.py,was/jms/discover-inspect-sib-lib.py
# The order in which a modify step will be executed. (inherited from: was.SibDestination.modifyOrder)
#was.SibTopicSpaceDestination.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.SibDestination.modifyScript)
#was.SibTopicSpaceDestination.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.SibDestination.modifyVerb)
#was.SibTopicSpaceDestination.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.SibDestination.noopOrder)
#was.SibTopicSpaceDestination.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.SibDestination.noopScript)
#was.SibTopicSpaceDestination.noopScript=null
# Noop Verb (inherited from: was.SibDestination.noopVerb)
#was.SibTopicSpaceDestination.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.SibDestination.restartStrategy)
#was.SibTopicSpaceDestination.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.SibDestination.standardPropertiesNotToExpose)
#was.SibTopicSpaceDestination.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.SibDestination.startOrder)
#was.SibTopicSpaceDestination.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.SibDestination.startScript)
#was.SibTopicSpaceDestination.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.SibDestination.startVerb)
#was.SibTopicSpaceDestination.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.SibDestination.stopOrder)
#was.SibTopicSpaceDestination.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.SibDestination.stopScript)
#was.SibTopicSpaceDestination.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.SibDestination.stopVerb)
#was.SibTopicSpaceDestination.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.SibDestination.syncAfterCreateOrder)
#was.SibTopicSpaceDestination.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.SibDestination.syncAfterDestroyOrder)
#was.SibTopicSpaceDestination.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.SibDestination.syncAfterModifyOrder)
#was.SibTopicSpaceDestination.syncAfterModifyOrder=65
# The set of CI templates. (inherited from: jee.TopicSpec.boundTemplates)
#was.SibTopicSpaceDestinationSpec.boundTemplates=null
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.SibTopicSpec.boundTemplates=null
# Additional Properties Not To Expose (inherited from: was.HAManagerPolicy.additionalPropertiesNotToExpose)
#was.StaticPolicy.additionalPropertiesNotToExpose=id,type,wasType,deployable,container,customProperties,matchCriteria,servers,preferredServers
# The fully qualified name of the Java interface that serves as a factory for a specific type of concrete HAManagerPolicy.
#was.StaticPolicy.policyFactory=com.ibm.ws.hamanager.coordinator.policy.impl.StaticPolicyFactory
# WebSphere admin resource type.
#was.StaticPolicy.wasType=StaticPolicy
# Additional Properties Not To Expose
#was.StringNameSpaceBinding.additionalPropertiesNotToExpose=wasType,value,bindingIdentifier
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ConfigResource.applyRestartStrategyOnNoop)
#was.StringNameSpaceBinding.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ConfigResource.boundConfigurationItems)
#was.StringNameSpaceBinding.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ConfigResource.containerRestartStrategy)
#was.StringNameSpaceBinding.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ConfigResource.createOrder)
#was.StringNameSpaceBinding.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.StringNameSpaceBinding.createScript=was/env/create-string-namespacebinding.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.ConfigResource.createVerb)
#was.StringNameSpaceBinding.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.ConfigResource.destroyOrder)
#was.StringNameSpaceBinding.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.StringNameSpaceBinding.destroyScript=was/env/destroy-string-namespacebinding.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ConfigResource.destroyVerb)
#was.StringNameSpaceBinding.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ConfigResource.discoverOrder)
#was.StringNameSpaceBinding.discoverOrder=50
# Discover Script
#was.StringNameSpaceBinding.discoverScript=was/env/discover-inspect-string-namespacebinding.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ConfigResource.enableRippleStart)
#was.StringNameSpaceBinding.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ConfigResource.exposeDeployedApplication)
#was.StringNameSpaceBinding.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ConfigResource.libraryScripts)
#was.StringNameSpaceBinding.libraryScripts=was/common/config/set-encoding.py,was/common/config/admin-config-lib.py
# The order in which a modify step will be executed. (inherited from: was.ConfigResource.modifyOrder)
#was.StringNameSpaceBinding.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.StringNameSpaceBinding.modifyScript=was/env/modify-string-namespacebinding.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ConfigResource.modifyVerb)
#was.StringNameSpaceBinding.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.ConfigResource.noopOrder)
#was.StringNameSpaceBinding.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ConfigResource.noopScript)
#was.StringNameSpaceBinding.noopScript=null
# Noop Verb (inherited from: was.ConfigResource.noopVerb)
#was.StringNameSpaceBinding.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ConfigResource.restartStrategy)
#was.StringNameSpaceBinding.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ConfigResource.standardPropertiesNotToExpose)
#was.StringNameSpaceBinding.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ConfigResource.startOrder)
#was.StringNameSpaceBinding.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ConfigResource.startScript)
#was.StringNameSpaceBinding.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ConfigResource.startVerb)
#was.StringNameSpaceBinding.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ConfigResource.stopOrder)
#was.StringNameSpaceBinding.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ConfigResource.stopScript)
#was.StringNameSpaceBinding.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ConfigResource.stopVerb)
#was.StringNameSpaceBinding.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ConfigResource.syncAfterCreateOrder)
#was.StringNameSpaceBinding.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ConfigResource.syncAfterDestroyOrder)
#was.StringNameSpaceBinding.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ConfigResource.syncAfterModifyOrder)
#was.StringNameSpaceBinding.syncAfterModifyOrder=65
# WebSphere admin resource type.
#was.StringNameSpaceBinding.wasType=StringNameSpaceBinding
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.StringNameSpaceBindingSpec.boundTemplates=null
# Additional Properties Not To Expose
#was.ThreadPool.additionalPropertiesNotToExpose=wasType
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.ThreadPool.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.ThreadPool.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.ThreadPool.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.Resource.createOrder)
#was.ThreadPool.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.ThreadPool.createScript=was/server/modify-threadpool.py
# The word that is used to prefix a step description for the create operation.
#was.ThreadPool.createVerb=Configure
# The order in which a destroy step will be executed. (inherited from: was.Resource.destroyOrder)
#was.ThreadPool.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.Resource.destroyScript)
#was.ThreadPool.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.ThreadPool.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Resource.discoverOrder)
#was.ThreadPool.discoverOrder=50
# Discover Script
#was.ThreadPool.discoverScript=was/server/discover-inspect-threadpool.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.ThreadPool.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.ThreadPool.exposeDeployedApplication=false
# Specifies the number of milliseconds of the inactivity that should elapse before a thread is reclaimed.
#was.ThreadPool.inactivityTimeout=3500
# List of scripts to be appended to the deployed's runtime script
#was.ThreadPool.libraryScripts=was/common/config/set-encoding.py,was/server/discover-inspect-containerproperties-lib.py
# Specifies the maximum number of threads to allow in the pool
#was.ThreadPool.maximumSize=50
# Specifies the minimum number of threads to allow in the pool
#was.ThreadPool.minimumSize=10
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.ThreadPool.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.ThreadPool.modifyScript=was/server/modify-threadpool.py
# The word that is used to prefix a step description for the modify operation.
#was.ThreadPool.modifyVerb=Configure
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.ThreadPool.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.ThreadPool.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.ThreadPool.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.ThreadPool.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.ThreadPool.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.ThreadPool.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.ThreadPool.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.ThreadPool.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.ThreadPool.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.ThreadPool.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.ThreadPool.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.ThreadPool.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.ThreadPool.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.ThreadPool.syncAfterModifyOrder=65
# WAS config type of ThreadPool.
#was.ThreadPool.wasType=ThreadPool
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.ThreadPoolSpec.boundTemplates=null
# Additional Properties Not To Expose
#was.TimerManager.additionalPropertiesNotToExpose=wasType,provider,providerType,customProperties,ServiceNames
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ConfigResource.applyRestartStrategyOnNoop)
#was.TimerManager.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ConfigResource.boundConfigurationItems)
#was.TimerManager.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ConfigResource.containerRestartStrategy)
#was.TimerManager.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ConfigResource.createOrder)
#was.TimerManager.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.TimerManager.createScript=was/resources/async/create-or-modify-timer-manager.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.ConfigResource.createVerb)
#was.TimerManager.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.ConfigResource.destroyOrder)
#was.TimerManager.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ConfigResource.destroyScript)
#was.TimerManager.destroyScript=was/common/config/destroy-resource.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ConfigResource.destroyVerb)
#was.TimerManager.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ConfigResource.discoverOrder)
#was.TimerManager.discoverOrder=50
# Discover Script
#was.TimerManager.discoverScript=was/resources/async/discover-inspect-timer-manager.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ConfigResource.enableRippleStart)
#was.TimerManager.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ConfigResource.exposeDeployedApplication)
#was.TimerManager.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#was.TimerManager.libraryScripts=was/common/config/set-encoding.py,was/resources/async/async-lib.py,was/common/config/admin-config-lib.py
# The order in which a modify step will be executed. (inherited from: was.ConfigResource.modifyOrder)
#was.TimerManager.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.TimerManager.modifyScript=was/resources/async/create-or-modify-timer-manager.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ConfigResource.modifyVerb)
#was.TimerManager.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.ConfigResource.noopOrder)
#was.TimerManager.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ConfigResource.noopScript)
#was.TimerManager.noopScript=null
# Noop Verb (inherited from: was.ConfigResource.noopVerb)
#was.TimerManager.noopVerb=Noop
# Specifies the maximum number of threads that are used for timers.
#was.TimerManager.numAlarmThreads=2
# Specifies the Timer Manager Provider name.
#was.TimerManager.provider=TimerManagerProvider
# WebSphere admin resource provider type.
#was.TimerManager.providerType=TimerManagerProvider
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ConfigResource.restartStrategy)
#was.TimerManager.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ConfigResource.standardPropertiesNotToExpose)
#was.TimerManager.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ConfigResource.startOrder)
#was.TimerManager.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ConfigResource.startScript)
#was.TimerManager.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ConfigResource.startVerb)
#was.TimerManager.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ConfigResource.stopOrder)
#was.TimerManager.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ConfigResource.stopScript)
#was.TimerManager.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ConfigResource.stopVerb)
#was.TimerManager.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ConfigResource.syncAfterCreateOrder)
#was.TimerManager.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ConfigResource.syncAfterDestroyOrder)
#was.TimerManager.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ConfigResource.syncAfterModifyOrder)
#was.TimerManager.syncAfterModifyOrder=65
# WebSphere admin resource type.
#was.TimerManager.wasType=TimerManagerInfo
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.TimerManagerSpec.boundTemplates=null
# Additional Properties Not To Expose (inherited from: was.ServerConfigurationResource.additionalPropertiesNotToExpose)
#was.TransactionService.additionalPropertiesNotToExpose=id,name,wasType,wasContainerTypes,defaultDiscoverName,customProperties,overwriteExistingValues,overwriteExistingCustomProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ServerConfigurationResource.applyRestartStrategyOnNoop)
#was.TransactionService.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ServerConfigurationResource.boundConfigurationItems)
#was.TransactionService.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ServerConfigurationResource.containerRestartStrategy)
#was.TransactionService.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ServerConfigurationResource.createOrder)
#was.TransactionService.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ServerConfigurationResource.createScript)
#was.TransactionService.createScript=was/server/modify-config-resource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.ServerConfigurationResource.createVerb)
#was.TransactionService.createVerb=Configure
# Default deployed name to be assigned to the CI when discovered.
#was.TransactionService.defaultDiscoverName=TransactionService
# The order in which a destroy step will be executed. (inherited from: was.ServerConfigurationResource.destroyOrder)
#was.TransactionService.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ServerConfigurationResource.destroyScript)
#was.TransactionService.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ServerConfigurationResource.destroyVerb)
#was.TransactionService.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ServerConfigurationResource.discoverOrder)
#was.TransactionService.discoverOrder=50
# Discover Script (inherited from: was.ServerConfigurationResource.discoverScript)
#was.TransactionService.discoverScript=was/server/discover-inspect-config-resource.py
# Enable this resource.
#was.TransactionService.enable=true
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ServerConfigurationResource.enableRippleStart)
#was.TransactionService.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ServerConfigurationResource.exposeDeployedApplication)
#was.TransactionService.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ServerConfigurationResource.libraryScripts)
#was.TransactionService.libraryScripts=was/common/config/set-encoding.py,was/server/config-resource-lib.py
# The order in which a modify step will be executed. (inherited from: was.ServerConfigurationResource.modifyOrder)
#was.TransactionService.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ServerConfigurationResource.modifyScript)
#was.TransactionService.modifyScript=was/server/modify-config-resource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ServerConfigurationResource.modifyVerb)
#was.TransactionService.modifyVerb=Configure
# The order of the step in the step list for the noop operation. (inherited from: was.ServerConfigurationResource.noopOrder)
#was.TransactionService.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ServerConfigurationResource.noopScript)
#was.TransactionService.noopScript=null
# Noop Verb (inherited from: was.ServerConfigurationResource.noopVerb)
#was.TransactionService.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ServerConfigurationResource.restartStrategy)
#was.TransactionService.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ServerConfigurationResource.standardPropertiesNotToExpose)
#was.TransactionService.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ServerConfigurationResource.startOrder)
#was.TransactionService.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ServerConfigurationResource.startScript)
#was.TransactionService.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ServerConfigurationResource.startVerb)
#was.TransactionService.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ServerConfigurationResource.stopOrder)
#was.TransactionService.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ServerConfigurationResource.stopScript)
#was.TransactionService.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ServerConfigurationResource.stopVerb)
#was.TransactionService.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterCreateOrder)
#was.TransactionService.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterDestroyOrder)
#was.TransactionService.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterModifyOrder)
#was.TransactionService.syncAfterModifyOrder=65
# List of container types on which the resource should be discovered. (inherited from: was.ServerConfigurationResource.wasContainerTypes)
#was.TransactionService.wasContainerTypes=Server
# WebSphere admin resource type.
#was.TransactionService.wasType=TransactionService
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.TransactionServiceSpec.boundTemplates=null
# Additional Properties Not To Expose
#was.TransportChain.additionalPropertiesNotToExpose=id,container,wasContainerTypes,type,templateName,portName,transportChannels,overwriteExistingValues,overwriteExistingCustomProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ServerConfigurationResource.applyRestartStrategyOnNoop)
#was.TransportChain.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ServerConfigurationResource.boundConfigurationItems)
#was.TransportChain.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ServerConfigurationResource.containerRestartStrategy)
#was.TransportChain.containerRestartStrategy=NONE
# The order in which a create step will be executed.
#was.TransportChain.createOrder=62
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.TransportChain.createScript=was/server/transport/create-modify-transport-chain.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.ServerConfigurationResource.createVerb)
#was.TransportChain.createVerb=Configure
# The order in which a destroy step will be executed.
#was.TransportChain.destroyOrder=38
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.TransportChain.destroyScript=was/server/transport/destroy-transport-chain.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ServerConfigurationResource.destroyVerb)
#was.TransportChain.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ServerConfigurationResource.discoverOrder)
#was.TransportChain.discoverOrder=50
# Discover Script
#was.TransportChain.discoverScript=was/server/transport/discover-inspect-transport-chain.py
# Specifies whether this protocol stack starts when the server starts.
#was.TransportChain.enable=true
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ServerConfigurationResource.enableRippleStart)
#was.TransportChain.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ServerConfigurationResource.exposeDeployedApplication)
#was.TransportChain.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#was.TransportChain.libraryScripts=was/common/config/set-encoding.py,was/server/config-resource-lib.py,was/server/transport/transport-chain-lib.py
# The order in which a modify step will be executed.
#was.TransportChain.modifyOrder=62
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.TransportChain.modifyScript=was/server/transport/create-modify-transport-chain.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ServerConfigurationResource.modifyVerb)
#was.TransportChain.modifyVerb=Configure
# The order of the step in the step list for the noop operation. (inherited from: was.ServerConfigurationResource.noopOrder)
#was.TransportChain.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ServerConfigurationResource.noopScript)
#was.TransportChain.noopScript=null
# Noop Verb (inherited from: was.ServerConfigurationResource.noopVerb)
#was.TransportChain.noopVerb=Noop
# NOT APPLICABLE
#was.TransportChain.overwriteExistingCustomProperties=false
# NOT APPLICABLE
#was.TransportChain.overwriteExistingValues=false
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ServerConfigurationResource.restartStrategy)
#was.TransportChain.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ServerConfigurationResource.standardPropertiesNotToExpose)
#was.TransportChain.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ServerConfigurationResource.startOrder)
#was.TransportChain.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ServerConfigurationResource.startScript)
#was.TransportChain.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ServerConfigurationResource.startVerb)
#was.TransportChain.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ServerConfigurationResource.stopOrder)
#was.TransportChain.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ServerConfigurationResource.stopScript)
#was.TransportChain.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ServerConfigurationResource.stopVerb)
#was.TransportChain.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterCreateOrder)
#was.TransportChain.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterDestroyOrder)
#was.TransportChain.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterModifyOrder)
#was.TransportChain.syncAfterModifyOrder=65
# Template from which the new transport chain will be created. If no template name is provided, the transport chain will be created based on the specified transport channel names. Usage of both properies 'templateName' and 'transportChannelNames' for creation is not valid.
#was.TransportChain.templateName=WebContainer
# List of container types on which the resource should be discovered. (inherited from: was.ServerConfigurationResource.wasContainerTypes)
#was.TransportChain.wasContainerTypes=Server
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.TransportChainSpec.boundTemplates=null
# Additional Properties Not To Expose
#was.TransportChannel.additionalPropertiesNotToExpose=id,container,type,wasType,customProperties,deployable
# WebSphere admin resource type.
#was.TransportChannel.wasType=TransportChannel
# Additional Properties Not To Expose (inherited from: was.ConfigResource.additionalPropertiesNotToExpose)
#was.URL.additionalPropertiesNotToExpose=wasType,provider,providerType,customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ConfigResource.applyRestartStrategyOnNoop)
#was.URL.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ConfigResource.boundConfigurationItems)
#was.URL.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ConfigResource.containerRestartStrategy)
#was.URL.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ConfigResource.createOrder)
#was.URL.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ConfigResource.createScript)
#was.URL.createScript=was/common/config/create-or-modify-resource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.ConfigResource.createVerb)
#was.URL.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.ConfigResource.destroyOrder)
#was.URL.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ConfigResource.destroyScript)
#was.URL.destroyScript=was/common/config/destroy-resource.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ConfigResource.destroyVerb)
#was.URL.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ConfigResource.discoverOrder)
#was.URL.discoverOrder=50
# Discover Script (inherited from: was.ConfigResource.discoverScript)
#was.URL.discoverScript=was/common/config/discover-inspect-resource.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ConfigResource.enableRippleStart)
#was.URL.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ConfigResource.exposeDeployedApplication)
#was.URL.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ConfigResource.libraryScripts)
#was.URL.libraryScripts=was/common/config/set-encoding.py,was/common/config/admin-config-lib.py
# The order in which a modify step will be executed. (inherited from: was.ConfigResource.modifyOrder)
#was.URL.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ConfigResource.modifyScript)
#was.URL.modifyScript=was/common/config/create-or-modify-resource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ConfigResource.modifyVerb)
#was.URL.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.ConfigResource.noopOrder)
#was.URL.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ConfigResource.noopScript)
#was.URL.noopScript=null
# Noop Verb (inherited from: was.ConfigResource.noopVerb)
#was.URL.noopVerb=Noop
# Select the provider to support this resource object. Resource providers encapsulate the Java classes that WebSphere Application Server uses to instantiate the resource object.
#was.URL.provider=Default URL Provider
# WebSphere admin resource provider type.
#was.URL.providerType=URLProvider
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ConfigResource.restartStrategy)
#was.URL.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ConfigResource.standardPropertiesNotToExpose)
#was.URL.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ConfigResource.startOrder)
#was.URL.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ConfigResource.startScript)
#was.URL.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ConfigResource.startVerb)
#was.URL.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ConfigResource.stopOrder)
#was.URL.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ConfigResource.stopScript)
#was.URL.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ConfigResource.stopVerb)
#was.URL.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ConfigResource.syncAfterCreateOrder)
#was.URL.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ConfigResource.syncAfterDestroyOrder)
#was.URL.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ConfigResource.syncAfterModifyOrder)
#was.URL.syncAfterModifyOrder=65
# WebSphere admin resource type.
#was.URL.wasType=URL
# Additional Properties Not To Expose (inherited from: was.ConfigResource.additionalPropertiesNotToExpose)
#was.URLProvider.additionalPropertiesNotToExpose=wasType,provider,providerType,customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ConfigResource.applyRestartStrategyOnNoop)
#was.URLProvider.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ConfigResource.boundConfigurationItems)
#was.URLProvider.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ConfigResource.containerRestartStrategy)
#was.URLProvider.containerRestartStrategy=NONE
# The order in which a create step will be executed.
#was.URLProvider.createOrder=59
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ConfigResource.createScript)
#was.URLProvider.createScript=was/common/config/create-or-modify-resource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.ConfigResource.createVerb)
#was.URLProvider.createVerb=Create
# The order in which a destroy step will be executed.
#was.URLProvider.destroyOrder=41
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ConfigResource.destroyScript)
#was.URLProvider.destroyScript=was/common/config/destroy-resource.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ConfigResource.destroyVerb)
#was.URLProvider.destroyVerb=Destroy
# The order in which a discover step will be executed.
#was.URLProvider.discoverOrder=45
# Discover Script (inherited from: was.ConfigResource.discoverScript)
#was.URLProvider.discoverScript=was/common/config/discover-inspect-resource.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ConfigResource.enableRippleStart)
#was.URLProvider.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ConfigResource.exposeDeployedApplication)
#was.URLProvider.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ConfigResource.libraryScripts)
#was.URLProvider.libraryScripts=was/common/config/set-encoding.py,was/common/config/admin-config-lib.py
# The order in which a modify step will be executed.
#was.URLProvider.modifyOrder=59
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ConfigResource.modifyScript)
#was.URLProvider.modifyScript=was/common/config/create-or-modify-resource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ConfigResource.modifyVerb)
#was.URLProvider.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.ConfigResource.noopOrder)
#was.URLProvider.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ConfigResource.noopScript)
#was.URLProvider.noopScript=null
# Noop Verb (inherited from: was.ConfigResource.noopVerb)
#was.URLProvider.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ConfigResource.restartStrategy)
#was.URLProvider.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ConfigResource.standardPropertiesNotToExpose)
#was.URLProvider.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ConfigResource.startOrder)
#was.URLProvider.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ConfigResource.startScript)
#was.URLProvider.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ConfigResource.startVerb)
#was.URLProvider.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ConfigResource.stopOrder)
#was.URLProvider.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ConfigResource.stopScript)
#was.URLProvider.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ConfigResource.stopVerb)
#was.URLProvider.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ConfigResource.syncAfterCreateOrder)
#was.URLProvider.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ConfigResource.syncAfterDestroyOrder)
#was.URLProvider.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ConfigResource.syncAfterModifyOrder)
#was.URLProvider.syncAfterModifyOrder=65
# WebSphere admin resource type.
#was.URLProvider.wasType=URLProvider
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.URLProviderSpec.boundTemplates=null
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.URLSpec.boundTemplates=null
# Config directory name of WebSphere Application Server. (inherited from: was.BaseCell.configDirName)
#was.UnmanagedServer.configDirName=config
# Restart strategy used when deploying. Valid supported strategy is NONE. The STOP_START and RESTART strategy is not supported for unmanaged servers. Ensure that the containerRestartStrategy property is defined on was.Module and its subtypes.
#was.UnmanagedServer.containerRestartStrategy=NONE
# Deployeds To Discover (inherited from: was.BaseCell.deployedsToDiscover)
#was.UnmanagedServer.deployedsToDiscover=was.VirtualHost,was.SharedLibrary
# Inspect script for Cell (inherited from: was.BaseCell.inspectScript)
#was.UnmanagedServer.inspectScript=was/container/discover-inspect-topology.py
# List of scripts to appended to runtime script (inherited from: was.BaseCell.libraryScripts)
#was.UnmanagedServer.libraryScripts=was/container/discover-inspect-topology-lib.py, was/container/container-lib.py
# TCP port which is used to login to the WebSphere Administration, defaults to 8880 for SA, 8879 for ND. Value of '0' has special meaning: it'used to suppress passing '-port' argument to wsadmin.
#was.UnmanagedServer.port=0
# Propagate Global Plugin Order
#was.UnmanagedServer.propagateGlobalPluginOrder=82
# Restart Order
#was.UnmanagedServer.restartOrder=80
# Restart Script
#was.UnmanagedServer.restartScript=was/container/restart-unmanaged-server.py
# Set to true to execute commands with the Python daemon (inherited from: was.BaseCell.runWithDaemon)
#was.UnmanagedServer.runWithDaemon=true
# Update Global Plugin Order
#was.UnmanagedServer.updateGlobalPluginOrder=81
# Update Global Plugin Script
#was.UnmanagedServer.updateGlobalPluginScript=was/container/generate-global-plugin.py
# Use Jython 2.1
#was.UnmanagedServer.useJython21=false
# Translated text of "Name" used to resolve version of WebSphere Application Server running in a non-English language. (inherited from: was.BaseCell.versionInfoNameField)
#was.UnmanagedServer.versionInfoNameField=Name
# Additional Properties Not To Expose (inherited from: was.JmsResource.additionalPropertiesNotToExpose)
#was.V5DefaultQueue.additionalPropertiesNotToExpose=jmsProvider,wasType
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.JmsResource.applyRestartStrategyOnNoop)
#was.V5DefaultQueue.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.JmsResource.boundConfigurationItems)
#was.V5DefaultQueue.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.JmsResource.containerRestartStrategy)
#was.V5DefaultQueue.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.JmsResource.createOrder)
#was.V5DefaultQueue.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.JmsResource.createScript)
#was.V5DefaultQueue.createScript=was/jms/create-jms-object.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.JmsResource.createVerb)
#was.V5DefaultQueue.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.JmsResource.destroyOrder)
#was.V5DefaultQueue.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.JmsResource.destroyScript)
#was.V5DefaultQueue.destroyScript=was/jms/destroy-jms-object.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.JmsResource.destroyVerb)
#was.V5DefaultQueue.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.JmsResource.discoverOrder)
#was.V5DefaultQueue.discoverOrder=50
# Discover Script (inherited from: was.JmsResource.discoverScript)
#was.V5DefaultQueue.discoverScript=was/jms/discover-inspect-jms-objects.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.JmsResource.enableRippleStart)
#was.V5DefaultQueue.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.JmsResource.exposeDeployedApplication)
#was.V5DefaultQueue.exposeDeployedApplication=false
# JMS provider for V5 default queue.
#was.V5DefaultQueue.jmsProvider=WebSphere JMS Provider
# List of scripts to be appended to the deployed's runtime script (inherited from: was.JmsResource.libraryScripts)
#was.V5DefaultQueue.libraryScripts=was/common/config/set-encoding.py,was/jms/jms-object-lib.py
# The order in which a modify step will be executed. (inherited from: was.JmsResource.modifyOrder)
#was.V5DefaultQueue.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.JmsResource.modifyScript)
#was.V5DefaultQueue.modifyScript=was/jms/modify-jms-object.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.JmsResource.modifyVerb)
#was.V5DefaultQueue.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.JmsResource.noopOrder)
#was.V5DefaultQueue.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.JmsResource.noopScript)
#was.V5DefaultQueue.noopScript=null
# Noop Verb (inherited from: was.JmsResource.noopVerb)
#was.V5DefaultQueue.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.JmsResource.restartStrategy)
#was.V5DefaultQueue.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.JmsResource.standardPropertiesNotToExpose)
#was.V5DefaultQueue.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.JmsResource.startOrder)
#was.V5DefaultQueue.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.JmsResource.startScript)
#was.V5DefaultQueue.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.JmsResource.startVerb)
#was.V5DefaultQueue.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.JmsResource.stopOrder)
#was.V5DefaultQueue.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.JmsResource.stopScript)
#was.V5DefaultQueue.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.JmsResource.stopVerb)
#was.V5DefaultQueue.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.JmsResource.syncAfterCreateOrder)
#was.V5DefaultQueue.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.JmsResource.syncAfterDestroyOrder)
#was.V5DefaultQueue.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.JmsResource.syncAfterModifyOrder)
#was.V5DefaultQueue.syncAfterModifyOrder=65
# WAS config type of V5 default queue.
#was.V5DefaultQueue.wasType=WASQueue
# Additional Properties Not To Expose (inherited from: was.JmsResource.additionalPropertiesNotToExpose)
#was.V5DefaultQueueConnectionFactory.additionalPropertiesNotToExpose=jmsProvider,wasType
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.JmsResource.applyRestartStrategyOnNoop)
#was.V5DefaultQueueConnectionFactory.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.JmsResource.boundConfigurationItems)
#was.V5DefaultQueueConnectionFactory.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.JmsResource.containerRestartStrategy)
#was.V5DefaultQueueConnectionFactory.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.JmsResource.createOrder)
#was.V5DefaultQueueConnectionFactory.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.JmsResource.createScript)
#was.V5DefaultQueueConnectionFactory.createScript=was/jms/create-jms-object.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.JmsResource.createVerb)
#was.V5DefaultQueueConnectionFactory.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.JmsResource.destroyOrder)
#was.V5DefaultQueueConnectionFactory.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.JmsResource.destroyScript)
#was.V5DefaultQueueConnectionFactory.destroyScript=was/jms/destroy-jms-object.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.JmsResource.destroyVerb)
#was.V5DefaultQueueConnectionFactory.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.JmsResource.discoverOrder)
#was.V5DefaultQueueConnectionFactory.discoverOrder=50
# Discover Script (inherited from: was.JmsResource.discoverScript)
#was.V5DefaultQueueConnectionFactory.discoverScript=was/jms/discover-inspect-jms-objects.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.JmsResource.enableRippleStart)
#was.V5DefaultQueueConnectionFactory.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.JmsResource.exposeDeployedApplication)
#was.V5DefaultQueueConnectionFactory.exposeDeployedApplication=false
# JMS provider for V5 default queue connection factory.
#was.V5DefaultQueueConnectionFactory.jmsProvider=WebSphere JMS Provider
# List of scripts to be appended to the deployed's runtime script (inherited from: was.JmsResource.libraryScripts)
#was.V5DefaultQueueConnectionFactory.libraryScripts=was/common/config/set-encoding.py,was/jms/jms-object-lib.py
# The order in which a modify step will be executed. (inherited from: was.JmsResource.modifyOrder)
#was.V5DefaultQueueConnectionFactory.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.JmsResource.modifyScript)
#was.V5DefaultQueueConnectionFactory.modifyScript=was/jms/modify-jms-object.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.JmsResource.modifyVerb)
#was.V5DefaultQueueConnectionFactory.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.JmsResource.noopOrder)
#was.V5DefaultQueueConnectionFactory.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.JmsResource.noopScript)
#was.V5DefaultQueueConnectionFactory.noopScript=null
# Noop Verb (inherited from: was.JmsResource.noopVerb)
#was.V5DefaultQueueConnectionFactory.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.JmsResource.restartStrategy)
#was.V5DefaultQueueConnectionFactory.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.JmsResource.standardPropertiesNotToExpose)
#was.V5DefaultQueueConnectionFactory.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.JmsResource.startOrder)
#was.V5DefaultQueueConnectionFactory.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.JmsResource.startScript)
#was.V5DefaultQueueConnectionFactory.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.JmsResource.startVerb)
#was.V5DefaultQueueConnectionFactory.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.JmsResource.stopOrder)
#was.V5DefaultQueueConnectionFactory.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.JmsResource.stopScript)
#was.V5DefaultQueueConnectionFactory.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.JmsResource.stopVerb)
#was.V5DefaultQueueConnectionFactory.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.JmsResource.syncAfterCreateOrder)
#was.V5DefaultQueueConnectionFactory.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.JmsResource.syncAfterDestroyOrder)
#was.V5DefaultQueueConnectionFactory.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.JmsResource.syncAfterModifyOrder)
#was.V5DefaultQueueConnectionFactory.syncAfterModifyOrder=65
# JMS type of V5 default queue connection factory.
#was.V5DefaultQueueConnectionFactory.wasType=WASQueueConnectionFactory
# The set of CI templates. (inherited from: jee.QueueConnectionFactorySpec.boundTemplates)
#was.V5DefaultQueueConnectionFactorySpec.boundTemplates=null
# The set of CI templates. (inherited from: jee.QueueSpec.boundTemplates)
#was.V5DefaultQueueSpec.boundTemplates=null
# Additional Properties Not To Expose (inherited from: was.JmsResource.additionalPropertiesNotToExpose)
#was.V5DefaultTopic.additionalPropertiesNotToExpose=jmsProvider,wasType
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.JmsResource.applyRestartStrategyOnNoop)
#was.V5DefaultTopic.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.JmsResource.boundConfigurationItems)
#was.V5DefaultTopic.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.JmsResource.containerRestartStrategy)
#was.V5DefaultTopic.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.JmsResource.createOrder)
#was.V5DefaultTopic.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.JmsResource.createScript)
#was.V5DefaultTopic.createScript=was/jms/create-jms-object.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.JmsResource.createVerb)
#was.V5DefaultTopic.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.JmsResource.destroyOrder)
#was.V5DefaultTopic.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.JmsResource.destroyScript)
#was.V5DefaultTopic.destroyScript=was/jms/destroy-jms-object.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.JmsResource.destroyVerb)
#was.V5DefaultTopic.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.JmsResource.discoverOrder)
#was.V5DefaultTopic.discoverOrder=50
# Discover Script (inherited from: was.JmsResource.discoverScript)
#was.V5DefaultTopic.discoverScript=was/jms/discover-inspect-jms-objects.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.JmsResource.enableRippleStart)
#was.V5DefaultTopic.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.JmsResource.exposeDeployedApplication)
#was.V5DefaultTopic.exposeDeployedApplication=false
# JMS provider for V5 default topic.
#was.V5DefaultTopic.jmsProvider=WebSphere JMS Provider
# List of scripts to be appended to the deployed's runtime script (inherited from: was.JmsResource.libraryScripts)
#was.V5DefaultTopic.libraryScripts=was/common/config/set-encoding.py,was/jms/jms-object-lib.py
# The order in which a modify step will be executed. (inherited from: was.JmsResource.modifyOrder)
#was.V5DefaultTopic.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.JmsResource.modifyScript)
#was.V5DefaultTopic.modifyScript=was/jms/modify-jms-object.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.JmsResource.modifyVerb)
#was.V5DefaultTopic.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.JmsResource.noopOrder)
#was.V5DefaultTopic.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.JmsResource.noopScript)
#was.V5DefaultTopic.noopScript=null
# Noop Verb (inherited from: was.JmsResource.noopVerb)
#was.V5DefaultTopic.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.JmsResource.restartStrategy)
#was.V5DefaultTopic.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.JmsResource.standardPropertiesNotToExpose)
#was.V5DefaultTopic.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.JmsResource.startOrder)
#was.V5DefaultTopic.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.JmsResource.startScript)
#was.V5DefaultTopic.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.JmsResource.startVerb)
#was.V5DefaultTopic.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.JmsResource.stopOrder)
#was.V5DefaultTopic.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.JmsResource.stopScript)
#was.V5DefaultTopic.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.JmsResource.stopVerb)
#was.V5DefaultTopic.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.JmsResource.syncAfterCreateOrder)
#was.V5DefaultTopic.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.JmsResource.syncAfterDestroyOrder)
#was.V5DefaultTopic.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.JmsResource.syncAfterModifyOrder)
#was.V5DefaultTopic.syncAfterModifyOrder=65
# WAS config type of V5 default topic.
#was.V5DefaultTopic.wasType=WASTopic
# Additional Properties Not To Expose (inherited from: was.JmsResource.additionalPropertiesNotToExpose)
#was.V5DefaultTopicConnectionFactory.additionalPropertiesNotToExpose=jmsProvider,wasType
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.JmsResource.applyRestartStrategyOnNoop)
#was.V5DefaultTopicConnectionFactory.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.JmsResource.boundConfigurationItems)
#was.V5DefaultTopicConnectionFactory.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.JmsResource.containerRestartStrategy)
#was.V5DefaultTopicConnectionFactory.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.JmsResource.createOrder)
#was.V5DefaultTopicConnectionFactory.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.JmsResource.createScript)
#was.V5DefaultTopicConnectionFactory.createScript=was/jms/create-jms-object.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.JmsResource.createVerb)
#was.V5DefaultTopicConnectionFactory.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.JmsResource.destroyOrder)
#was.V5DefaultTopicConnectionFactory.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.JmsResource.destroyScript)
#was.V5DefaultTopicConnectionFactory.destroyScript=was/jms/destroy-jms-object.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.JmsResource.destroyVerb)
#was.V5DefaultTopicConnectionFactory.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.JmsResource.discoverOrder)
#was.V5DefaultTopicConnectionFactory.discoverOrder=50
# Discover Script (inherited from: was.JmsResource.discoverScript)
#was.V5DefaultTopicConnectionFactory.discoverScript=was/jms/discover-inspect-jms-objects.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.JmsResource.enableRippleStart)
#was.V5DefaultTopicConnectionFactory.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.JmsResource.exposeDeployedApplication)
#was.V5DefaultTopicConnectionFactory.exposeDeployedApplication=false
# JMS provider for V5 default topic connection factory.
#was.V5DefaultTopicConnectionFactory.jmsProvider=WebSphere JMS Provider
# List of scripts to be appended to the deployed's runtime script (inherited from: was.JmsResource.libraryScripts)
#was.V5DefaultTopicConnectionFactory.libraryScripts=was/common/config/set-encoding.py,was/jms/jms-object-lib.py
# The order in which a modify step will be executed. (inherited from: was.JmsResource.modifyOrder)
#was.V5DefaultTopicConnectionFactory.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.JmsResource.modifyScript)
#was.V5DefaultTopicConnectionFactory.modifyScript=was/jms/modify-jms-object.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.JmsResource.modifyVerb)
#was.V5DefaultTopicConnectionFactory.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.JmsResource.noopOrder)
#was.V5DefaultTopicConnectionFactory.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.JmsResource.noopScript)
#was.V5DefaultTopicConnectionFactory.noopScript=null
# Noop Verb (inherited from: was.JmsResource.noopVerb)
#was.V5DefaultTopicConnectionFactory.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.JmsResource.restartStrategy)
#was.V5DefaultTopicConnectionFactory.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.JmsResource.standardPropertiesNotToExpose)
#was.V5DefaultTopicConnectionFactory.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.JmsResource.startOrder)
#was.V5DefaultTopicConnectionFactory.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.JmsResource.startScript)
#was.V5DefaultTopicConnectionFactory.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.JmsResource.startVerb)
#was.V5DefaultTopicConnectionFactory.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.JmsResource.stopOrder)
#was.V5DefaultTopicConnectionFactory.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.JmsResource.stopScript)
#was.V5DefaultTopicConnectionFactory.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.JmsResource.stopVerb)
#was.V5DefaultTopicConnectionFactory.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.JmsResource.syncAfterCreateOrder)
#was.V5DefaultTopicConnectionFactory.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.JmsResource.syncAfterDestroyOrder)
#was.V5DefaultTopicConnectionFactory.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.JmsResource.syncAfterModifyOrder)
#was.V5DefaultTopicConnectionFactory.syncAfterModifyOrder=65
# WAS config type of V5 default topic connection factory.
#was.V5DefaultTopicConnectionFactory.wasType=WASTopicConnectionFactory
# The set of CI templates. (inherited from: jee.TopicConnectionFactorySpec.boundTemplates)
#was.V5DefaultTopicConnectionFactorySpec.boundTemplates=null
# The set of CI templates. (inherited from: jee.TopicSpec.boundTemplates)
#was.V5DefaultTopicSpec.boundTemplates=null
# Additional Properties Not To Expose
#was.Variable.additionalPropertiesNotToExpose=name,overwrite
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.Variable.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.Variable.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.Variable.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.Resource.createOrder)
#was.Variable.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.Variable.createScript=was/env/create-variable.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.Variable.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.Resource.destroyOrder)
#was.Variable.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.Variable.destroyScript=was/env/destroy-variable.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.Variable.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Resource.discoverOrder)
#was.Variable.discoverOrder=50
# Discover Script
#was.Variable.discoverScript=was/env/discover-inspect-variable.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.Variable.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.Variable.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#was.Variable.libraryScripts=was/common/config/set-encoding.py,was/env/variable-lib.py
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.Variable.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.Variable.modifyScript=was/env/modify-variable.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.Variable.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.Variable.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.Variable.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.Variable.noopVerb=Noop
# If set, will replace the value of an existing variable of the same name. Otherwise, will fail if a variable of that name is already present.
#was.Variable.overwrite=false
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.Variable.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.Variable.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.Variable.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.Variable.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.Variable.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.Variable.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.Variable.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.Variable.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.Variable.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.Variable.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.Variable.syncAfterModifyOrder=65
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.VariableSpec.boundTemplates=null
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.VirtualHost.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.VirtualHost.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.VirtualHost.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.Resource.createOrder)
#was.VirtualHost.createOrder=60
# Python wsadmin script invoked to create a virtual host.
#was.VirtualHost.createScript=was/virtualhost/create-virtual-host.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.VirtualHost.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.Resource.destroyOrder)
#was.VirtualHost.destroyOrder=40
# Python wsadmin script invoked to destroy a virtual host.
#was.VirtualHost.destroyScript=was/virtualhost/destroy-virtual-host.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.VirtualHost.destroyVerb=Destroy
# The order in which a discover step will be executed.
#was.VirtualHost.discoverOrder=45
# Python wsadmin script invoked to inspect a virtual host.
#was.VirtualHost.discoverScript=was/virtualhost/discover-inspect-virtual-host.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.VirtualHost.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.VirtualHost.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.Resource.libraryScripts)
#was.VirtualHost.libraryScripts=null
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.VirtualHost.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.Resource.modifyScript)
#was.VirtualHost.modifyScript=null
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.VirtualHost.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.VirtualHost.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.VirtualHost.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.VirtualHost.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.VirtualHost.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.VirtualHost.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.VirtualHost.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.VirtualHost.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.VirtualHost.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.VirtualHost.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.VirtualHost.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.VirtualHost.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.VirtualHost.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.VirtualHost.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.VirtualHost.syncAfterModifyOrder=65
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.VirtualHostSpec.boundTemplates=null
# The set of CI templates. (inherited from: jee.War.boundTemplates)
#was.War.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: jee.War.delimiters)
#was.War.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: jee.War.textFileNamesRegex)
#was.War.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: was.Module.boundConfigurationItems)
#was.WarModule.boundConfigurationItems=null
# The order in which a create step for Editioned application will be executed(was85nd only). (inherited from: was.Module.createEditionedOrder)
#was.WarModule.createEditionedOrder=10
# The order in which a create step will be executed. (inherited from: was.Module.createOrder)
#was.WarModule.createOrder=70
# Python wsadmin script invoked to create a Java EE artifact. (inherited from: was.Module.createScript)
#was.WarModule.createScript=was/application/deploy-application.py
# The word is used to prefix a step description for the create operation. (inherited from: was.Module.createVerb)
#was.WarModule.createVerb=Deploy
# The order in which a destroy step will be executed. (inherited from: was.Module.destroyOrder)
#was.WarModule.destroyOrder=30
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.Module.destroyScript)
#was.WarModule.destroyScript=was/application/undeploy-application.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Module.destroyVerb)
#was.WarModule.destroyVerb=Undeploy
# Specify to disable JSP runtime compilation. Values: 'Yes', 'No'(default).
#was.WarModule.disableJspRuntimeCompilation=No
# The order in which a discover step will be executed. (inherited from: was.Module.discoverOrder)
#was.WarModule.discoverOrder=50
# Discover Script
#was.WarModule.discoverScript=was/application/discover-inspect-war-module.py
# Specify JSP reloading for Web modules.
#was.WarModule.enableJspClassReloading=true
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Module.enableRippleStart)
#was.WarModule.enableRippleStart=false
# Specify JSP reloading workaround for J2EE4 for Websphere 7.
#was.WarModule.enableWorkaroundForJavaEE4inWAS7=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Module.exposeDeployedApplication)
#was.WarModule.exposeDeployedApplication=false
# Specify JDK source level.
#was.WarModule.jdkSourceLevel=15
# Specify JSP precompiler classpath.
#was.WarModule.jspClassPath=jspcp
# The JSP reload interval in seconds. Only applicable if 'enableJspClassReloading' is set.
#was.WarModule.jspReloadInterval=10
# List of scripts to be appended to the deployed's runtime script (inherited from: was.Module.libraryScripts)
#was.WarModule.libraryScripts=was/common/config/set-encoding.py,was/application/discover-app-module-lib.py,was/application/deploy-application-lib.py
# The order in which a modify step will be executed. (inherited from: was.Module.modifyOrder)
#was.WarModule.modifyOrder=70
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.Module.modifyScript)
#was.WarModule.modifyScript=null
# The word is used to prefix a step description for the modify operation. (inherited from: was.Module.modifyVerb)
#was.WarModule.modifyVerb=Update
# The order of the step in the step list for the noop operation. (inherited from: was.Module.noopOrder)
#was.WarModule.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Module.noopScript)
#was.WarModule.noopScript=null
# Noop Verb (inherited from: was.Module.noopVerb)
#was.WarModule.noopVerb=Noop
# Specify whether to precompile JavaServer Pages (JSP) files as a part of installation. The default is not to precompile JSP files.
#was.WarModule.preCompileJsps=false
# Number of retry attempts to check if an application has been distributed before attempting the application start. (inherited from: was.Module.retryAttemptsForAppReadyCheck)
#was.WarModule.retryAttemptsForAppReadyCheck=6
# The order in which a rollout step will be executed. (inherited from: was.Module.rolloutEditionedOrder)
#was.WarModule.rolloutEditionedOrder=20
# Python wsadmin script invoked to perform rollout. (inherited from: was.Module.rolloutEditionedScript)
#was.WarModule.rolloutEditionedScript=was/application/rollout-edition.py
# The word that is used to prefix a step description for the rollout operation. (inherited from: was.Module.rolloutEditionedVerb)
#was.WarModule.rolloutEditionedVerb=Rollout
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Module.standardPropertiesNotToExpose)
#was.WarModule.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Module.startOrder)
#was.WarModule.startOrder=90
# Python wsadmin script invoked to start running a Java EE artifact. (inherited from: was.Module.startScript)
#was.WarModule.startScript=was/application/start-application.py
# The word that is used to prefix a step description for the start operation. (inherited from: was.Module.startVerb)
#was.WarModule.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.Module.stopOrder)
#was.WarModule.stopOrder=10
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Module.stopScript)
#was.WarModule.stopScript=was/application/stop-application.py
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Module.stopVerb)
#was.WarModule.stopVerb=Stop
# The order in which a synchronize after create step for Editioned application will be executed. (inherited from: was.Module.syncAfterCreateEditionedOrder)
#was.WarModule.syncAfterCreateEditionedOrder=11
# The order in which a synchronize after create step will be executed. (inherited from: was.Module.syncAfterCreateOrder)
#was.WarModule.syncAfterCreateOrder=75
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Module.syncAfterDestroyOrder)
#was.WarModule.syncAfterDestroyOrder=35
# The order in which a synchronize after modify step will be executed. (inherited from: was.Module.syncAfterModifyOrder)
#was.WarModule.syncAfterModifyOrder=75
# Update strategy used to select behaviour for update app. valid values are true and false. false will create steps undeploy and deploy, true will create step update only. 
#was.WarModule.updateStrategy=false
# Specify to use full package names in JSPs. Values: 'Yes'(default), 'No'.
#was.WarModule.useFullPackageNames=Yes
# Additional Properties Not To Expose (inherited from: was.ServerConfigurationResource.additionalPropertiesNotToExpose)
#was.WebContainer.additionalPropertiesNotToExpose=id,name,wasType,wasContainerTypes,defaultDiscoverName,customProperties,overwriteExistingValues,overwriteExistingCustomProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ServerConfigurationResource.applyRestartStrategyOnNoop)
#was.WebContainer.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ServerConfigurationResource.boundConfigurationItems)
#was.WebContainer.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ServerConfigurationResource.containerRestartStrategy)
#was.WebContainer.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ServerConfigurationResource.createOrder)
#was.WebContainer.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ServerConfigurationResource.createScript)
#was.WebContainer.createScript=was/server/modify-config-resource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.ServerConfigurationResource.createVerb)
#was.WebContainer.createVerb=Configure
# Default deployed name to be assigned to the CI when discovered.
#was.WebContainer.defaultDiscoverName=WebContainer
# The order in which a destroy step will be executed. (inherited from: was.ServerConfigurationResource.destroyOrder)
#was.WebContainer.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ServerConfigurationResource.destroyScript)
#was.WebContainer.destroyScript=null
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ServerConfigurationResource.destroyVerb)
#was.WebContainer.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ServerConfigurationResource.discoverOrder)
#was.WebContainer.discoverOrder=50
# Discover Script (inherited from: was.ServerConfigurationResource.discoverScript)
#was.WebContainer.discoverScript=was/server/discover-inspect-config-resource.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ServerConfigurationResource.enableRippleStart)
#was.WebContainer.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ServerConfigurationResource.exposeDeployedApplication)
#was.WebContainer.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ServerConfigurationResource.libraryScripts)
#was.WebContainer.libraryScripts=was/common/config/set-encoding.py,was/server/config-resource-lib.py
# The order in which a modify step will be executed. (inherited from: was.ServerConfigurationResource.modifyOrder)
#was.WebContainer.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ServerConfigurationResource.modifyScript)
#was.WebContainer.modifyScript=was/server/modify-config-resource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ServerConfigurationResource.modifyVerb)
#was.WebContainer.modifyVerb=Configure
# The order of the step in the step list for the noop operation. (inherited from: was.ServerConfigurationResource.noopOrder)
#was.WebContainer.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ServerConfigurationResource.noopScript)
#was.WebContainer.noopScript=null
# Noop Verb (inherited from: was.ServerConfigurationResource.noopVerb)
#was.WebContainer.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ServerConfigurationResource.restartStrategy)
#was.WebContainer.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ServerConfigurationResource.standardPropertiesNotToExpose)
#was.WebContainer.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ServerConfigurationResource.startOrder)
#was.WebContainer.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ServerConfigurationResource.startScript)
#was.WebContainer.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ServerConfigurationResource.startVerb)
#was.WebContainer.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ServerConfigurationResource.stopOrder)
#was.WebContainer.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ServerConfigurationResource.stopScript)
#was.WebContainer.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ServerConfigurationResource.stopVerb)
#was.WebContainer.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterCreateOrder)
#was.WebContainer.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterDestroyOrder)
#was.WebContainer.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ServerConfigurationResource.syncAfterModifyOrder)
#was.WebContainer.syncAfterModifyOrder=65
# List of container types on which the resource should be discovered. (inherited from: was.ServerConfigurationResource.wasContainerTypes)
#was.WebContainer.wasContainerTypes=Server
# WebSphere admin resource type.
#was.WebContainer.wasType=WebContainer
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.WebContainerSpec.boundTemplates=null
# Additional Properties Not To Expose
#was.WmqActivationSpecification.additionalPropertiesNotToExpose=customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.Resource.applyRestartStrategyOnNoop)
#was.WmqActivationSpecification.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.Resource.boundConfigurationItems)
#was.WmqActivationSpecification.boundConfigurationItems=null
# The name of the queue from which a connection consumer receives durable subscription messages.
#was.WmqActivationSpecification.brokerCCDurSubQueue=SYSTEM.JMS.D.CC.SUBSCRIBER.QUEUE
# The name of the queue from which non-durable subscription messages are retrieved for a ConnectionConsumer.
#was.WmqActivationSpecification.brokerCCSubQueue=SYSTEM.JMS.ND.CC.SUBSCRIBER.QUEUE
# The broker control queue to use if subscribing to a topic.
#was.WmqActivationSpecification.brokerCtrlQueue=SYSTEM.BROKER.CONTROL.QUEUE
# The queue to use for obtaining subscription messages if subscribing to a topic.
#was.WmqActivationSpecification.brokerSubQueue=SYSTEM.JMS.ND.SUBSCRIBER.QUEUE
# The version of the broker being used. Values: '1'(default), '2'.
#was.WmqActivationSpecification.brokerVersion=1
# The coded-character-set-ID to be used on connections. Default value is 819 (ISO 8859-1 ASCII).
#was.WmqActivationSpecification.ccsid=819
# The interval between background executions of the publish/subscribe cleanup utility.
#was.WmqActivationSpecification.cleanupInterval=3600000
# Cleanup Level for BROKER or MIGRATE Subscription Stores.
#was.WmqActivationSpecification.cleanupLevel=SAFE
# Whether two or more instances of the same durable topic subscriber can run simultaneously. Values: 'DISABLED'(default), 'ENABLED'.
#was.WmqActivationSpecification.clonedSubs=DISABLED
# Determines if message headers are compressed or not.
#was.WmqActivationSpecification.compressHeaders=NONE
# The compression algorithm to use to compress message payloads.
#was.WmqActivationSpecification.compressPayload=NONE
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.Resource.containerRestartStrategy)
#was.WmqActivationSpecification.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.Resource.createOrder)
#was.WmqActivationSpecification.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.WmqActivationSpecification.createScript=was/jms/wmq/create-wmq-activation-spec.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.Resource.createVerb)
#was.WmqActivationSpecification.createVerb=Create
# Determines whether the destination is expected to be a queue or a topic type destination. Values: 'javax.jms.Queue', 'javax.jms.Topic'.
#was.WmqActivationSpecification.destinationType=javax.jms.Queue
# The order in which a destroy step will be executed. (inherited from: was.Resource.destroyOrder)
#was.WmqActivationSpecification.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource
#was.WmqActivationSpecification.destroyScript=was/jms/wmq/destroy-wmq-activation-spec.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.Resource.destroyVerb)
#was.WmqActivationSpecification.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.Resource.discoverOrder)
#was.WmqActivationSpecification.discoverOrder=50
# Discover Script
#was.WmqActivationSpecification.discoverScript=was/jms/wmq/discover-inspect-wmq-activation-spec.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.Resource.enableRippleStart)
#was.WmqActivationSpecification.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.Resource.exposeDeployedApplication)
#was.WmqActivationSpecification.exposeDeployedApplication=false
# Determines the behavior of certain calls to the queue manager when the queue manager is put into quiescing state.
#was.WmqActivationSpecification.failIfQuiescing=true
# The number of sequential delivery failures that are allowed before the endpoint is suspended.
#was.WmqActivationSpecification.failureDeliveryCount=0
# List of scripts to be appended to the deployed's runtime script
#was.WmqActivationSpecification.libraryScripts=was/common/config/set-encoding.py,was/jms/wmq/wmq-activation-spec-lib.py
# The maximum number of server sessions in the server session pool used by the connection consumer.
#was.WmqActivationSpecification.maxPoolSize=10
# The order in which a modify step will be executed. (inherited from: was.Resource.modifyOrder)
#was.WmqActivationSpecification.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.WmqActivationSpecification.modifyScript=was/jms/wmq/modify-wmq-activation-spec.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.Resource.modifyVerb)
#was.WmqActivationSpecification.modifyVerb=Modify
# Determines whether or not the connection consumer keeps unwanted messages on the input queue. A value of true means that it does. A value of false means that the messages are disposed of as per their disposition options.
#was.WmqActivationSpecification.msgRetention=YES
# Determines where message selection is performed.
#was.WmqActivationSpecification.msgSelection=CLIENT
# The order of the step in the step list for the noop operation. (inherited from: was.Resource.noopOrder)
#was.WmqActivationSpecification.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.Resource.noopScript)
#was.WmqActivationSpecification.noopScript=null
# Noop Verb (inherited from: was.Resource.noopVerb)
#was.WmqActivationSpecification.noopVerb=Noop
# The period of time, in milliseconds, that an unused server session is held open in the server session pool before being closed due to inactivity.
#was.WmqActivationSpecification.poolTimeout=300000
# The hostname which will be used when attempting a client mode connection to WebSphere MQ.
#was.WmqActivationSpecification.qmgrHostname=localhost
# The TCP/IP port number used for connection to the WebSphere MQ queue manager, for client connection only.
#was.WmqActivationSpecification.qmgrPortNumber=1414
# The name of a WebSphere MQ svrconn channel to use when connecting to WebSphere MQ.
#was.WmqActivationSpecification.qmgrSvrconnChannel=SYSTEM.DEF.SVRCONN
# The amount of time to examine messages on a queue before checking to see if new messages have arrived at the head of the queue when receiving messages asynchronously from multiple queues.
#was.WmqActivationSpecification.rescanInterval=5000
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.Resource.restartStrategy)
#was.WmqActivationSpecification.restartStrategy=STOP_START
# Used when establishing an SSL connection to the queue manager. This parameter determines how many bytes to transfer before resetting the symmetric encryption key used for the SSL session.
#was.WmqActivationSpecification.sslResetCount=0
# This option determines whether the SSL (Secure Sockets Layer) protocol is used to secure communications with the WebSphere MQ queue manager or queue sharing group.
#was.WmqActivationSpecification.sslType=NONE
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.Resource.standardPropertiesNotToExpose)
#was.WmqActivationSpecification.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.Resource.startOrder)
#was.WmqActivationSpecification.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.Resource.startScript)
#was.WmqActivationSpecification.startScript=null
# The period of time, in milliseconds, within which delivery of a message to an MDB must start after the work to deliver the message has been scheduled. If this period of time elapses, the message is rolled back onto the queue.
#was.WmqActivationSpecification.startTimeout=10000
# The word that is used to prefix a step description for the start operation. (inherited from: was.Resource.startVerb)
#was.WmqActivationSpecification.startVerb=Start
# The interval, in milliseconds, between refreshes of the long running transaction that detects when a subscriber loses its connection to the queue manager. This property is relevant only if subStore parameter has the value QUEUE.
#was.WmqActivationSpecification.stateRefreshInt=60000
# Indicates whether the endpoint should be stopped if message delivery fails the number of times specified by the failureDeliveryCount property.
#was.WmqActivationSpecification.stopEndpointIfDeliveryFails=true
# The order in which a stop step will be executed. (inherited from: was.Resource.stopOrder)
#was.WmqActivationSpecification.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.Resource.stopScript)
#was.WmqActivationSpecification.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.Resource.stopVerb)
#was.WmqActivationSpecification.stopVerb=Stop
# Where WebSphere MQ JMS should store persistent data relating to active subscriptions.
#was.WmqActivationSpecification.subStore=MIGRATE
# Whether a durable or nondurable subscription is used to deliver messages to an MDB subscribing to the topic. Values: 'Nondurable'(default), 'Durable'.
#was.WmqActivationSpecification.subscriptionDurability=Nondurable
# The order in which a synchronize after create step will be executed. (inherited from: was.Resource.syncAfterCreateOrder)
#was.WmqActivationSpecification.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.Resource.syncAfterDestroyOrder)
#was.WmqActivationSpecification.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.Resource.syncAfterModifyOrder)
#was.WmqActivationSpecification.syncAfterModifyOrder=65
# Determines which sets of characters are interpreted as topic wildcards. Values: 'Char'(default), 'Topic'.
#was.WmqActivationSpecification.wildcardFormat=Char
# Determines the manner in which a connection will be established to WebSphere MQ.
#was.WmqActivationSpecification.wmqTransportType=BINDINGS_THEN_CLIENT
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.WmqActivationSpecificationSpec.boundTemplates=null
# The coded-character-set-ID to be used on connections. Default value is 819 (ISO 8859-1 ASCII)
#was.WmqConnectionFactory.CCSID=819
# Additional Properties Not To Expose (inherited from: was.JmsConnectionFactory.additionalPropertiesNotToExpose)
#was.WmqConnectionFactory.additionalPropertiesNotToExpose=jmsProvider,wasType,containerAuthDataAlias,mappingConfigAlias,ConnectionPool,SessionPool,customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.JmsConnectionFactory.applyRestartStrategyOnNoop)
#was.WmqConnectionFactory.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.JmsConnectionFactory.boundConfigurationItems)
#was.WmqConnectionFactory.boundConfigurationItems=null
# Specifies whether a client mode connection reconnects automatically or not in the event of a communications or queue manager failure. This parameter is ignored unless the connection factory is being used in a thin or managed client environment. Not supported for: WAS_61, WAS_70.
#was.WmqConnectionFactory.clientReconnectOptions=DISABLED
# The maximum amount of time, in seconds, that a client mode connection will spend attempting to automatically reconnect to a queue manager after a communications or queue manager failure. This parameter is ignored unless the connection factory is being used in a thin or managed client environment. Whether this parameter is used or not depends on the value of the client reconnect options parameter. Not supported for: WAS_61, WAS_70.
#was.WmqConnectionFactory.clientReconnectTimeout=1800
# Determines if message headers are compressed or not. Not supported for: WAS_61.
#was.WmqConnectionFactory.compressHeaders=NONE
# The compression algorithm to use to compress message payloads. Not supported for: WAS_61.
#was.WmqConnectionFactory.compressPayload=NONE
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.JmsConnectionFactory.containerRestartStrategy)
#was.WmqConnectionFactory.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.JmsConnectionFactory.createOrder)
#was.WmqConnectionFactory.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.WmqConnectionFactory.createScript=was/jms/wmq/create-wmq-connection-factory.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.JmsConnectionFactory.createVerb)
#was.WmqConnectionFactory.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.JmsConnectionFactory.destroyOrder)
#was.WmqConnectionFactory.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.JmsConnectionFactory.destroyScript)
#was.WmqConnectionFactory.destroyScript=was/jms/destroy-jms-object.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.JmsConnectionFactory.destroyVerb)
#was.WmqConnectionFactory.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.JmsConnectionFactory.discoverOrder)
#was.WmqConnectionFactory.discoverOrder=50
# Discover Script
#was.WmqConnectionFactory.discoverScript=was/jms/wmq/discover-inspect-wmq-connection-factory.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.JmsConnectionFactory.enableRippleStart)
#was.WmqConnectionFactory.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.JmsConnectionFactory.exposeDeployedApplication)
#was.WmqConnectionFactory.exposeDeployedApplication=false
# Determines the behavior of certain calls to the queue manager when the queue manager is put into quiescing state.
#was.WmqConnectionFactory.failIfQuiesce=true
# JMS provider for WebSphere MQ queue connection factory.
#was.WmqConnectionFactory.jmsProvider=WebSphere MQ JMS Provider
# List of scripts to be appended to the deployed's runtime script
#was.WmqConnectionFactory.libraryScripts=was/common/config/set-encoding.py,was/jms/wmq/wmq-connection-factory-lib.py,was/jms/jms-connection-factory-lib.py,was/jms/jms-object-lib.py
# The maximum number of messages to remove from a queue before at least one must be delivered to an asynchronous consumer. Not supported for: WAS_61.
#was.WmqConnectionFactory.maxBatchSize=10
# The order in which a modify step will be executed. (inherited from: was.JmsConnectionFactory.modifyOrder)
#was.WmqConnectionFactory.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.WmqConnectionFactory.modifyScript=was/jms/wmq/modify-wmq-connection-factory.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.JmsConnectionFactory.modifyVerb)
#was.WmqConnectionFactory.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.JmsConnectionFactory.noopOrder)
#was.WmqConnectionFactory.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.JmsConnectionFactory.noopScript)
#was.WmqConnectionFactory.noopScript=null
# Noop Verb (inherited from: was.JmsConnectionFactory.noopVerb)
#was.WmqConnectionFactory.noopVerb=Noop
# How long to wait for a message to turn up on the queue currently being polled before moving to another queue when receiving messages asynchronously from multiple queues. This is only applicable in the client container.
#was.WmqConnectionFactory.pollingInterval=5000
# The TCP/IP port number used for connection to the WebSphere MQ queue manager, for client connection only.
#was.WmqConnectionFactory.port=0
# Type of queue manager.
#was.WmqConnectionFactory.qmgrType=QMGR
# The amount of time to examine messages on a queue before checking to see if new messages have arrived at the head of the queue when receiving messages asynchronously from multiple queues.
#was.WmqConnectionFactory.rescanInterval=5000
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.JmsConnectionFactory.restartStrategy)
#was.WmqConnectionFactory.restartStrategy=STOP_START
# Used when establishing an SSL connection to the queue manager. This parameter determines how many bytes to transfer before resetting the symmetric encryption key used for the SSL session. Not supported for: WAS_61.
#was.WmqConnectionFactory.sslResetCount=0
# This option determines whether the SSL (Secure Sockets Layer) protocol is used to secure communications with the WebSphere MQ queue manager or queue sharing group. Not supported for: WAS_61.
#was.WmqConnectionFactory.sslType=NONE
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.JmsConnectionFactory.standardPropertiesNotToExpose)
#was.WmqConnectionFactory.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.JmsConnectionFactory.startOrder)
#was.WmqConnectionFactory.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.JmsConnectionFactory.startScript)
#was.WmqConnectionFactory.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.JmsConnectionFactory.startVerb)
#was.WmqConnectionFactory.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.JmsConnectionFactory.stopOrder)
#was.WmqConnectionFactory.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.JmsConnectionFactory.stopScript)
#was.WmqConnectionFactory.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.JmsConnectionFactory.stopVerb)
#was.WmqConnectionFactory.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.JmsConnectionFactory.syncAfterCreateOrder)
#was.WmqConnectionFactory.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.JmsConnectionFactory.syncAfterDestroyOrder)
#was.WmqConnectionFactory.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.JmsConnectionFactory.syncAfterModifyOrder)
#was.WmqConnectionFactory.syncAfterModifyOrder=65
# The model queue that is used as a basis for temporary queue creation.
#was.WmqConnectionFactory.tempModel=SYSTEM.DEFAULT.MODEL.QUEUE
# Determines the manner in which a connection will be established to WebSphere MQ.
#was.WmqConnectionFactory.transportType=BINDINGS
# Set the use of ConnectionPooling in earlier versions of the WebSphere MQ classes for JMS. This method is retained for compatibility with older MQJMS applications, but, because this Connection Pooling functionality has been removed from version 7, setting this property will have no effect.
#was.WmqConnectionFactory.useConnectionPooling=true
# The character set used to for encoding strings in messages sent to this destination. Default value is 1208 (UTF-8).
#was.WmqDestination.CCSID=1208
# Additional Properties Not To Expose
#was.WmqDestination.additionalPropertiesNotToExpose=jmsProvider,wasType,customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.JmsResource.applyRestartStrategyOnNoop)
#was.WmqDestination.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.JmsResource.boundConfigurationItems)
#was.WmqDestination.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.JmsResource.containerRestartStrategy)
#was.WmqDestination.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.JmsResource.createOrder)
#was.WmqDestination.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.WmqDestination.createScript=was/jms/wmq/create-wmq-queue.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.JmsResource.createVerb)
#was.WmqDestination.createVerb=Create
# If native encoding is not enabled, select the type of decimal encoding.
#was.WmqDestination.decimalEncoding=Normal
# The order in which a destroy step will be executed. (inherited from: was.JmsResource.destroyOrder)
#was.WmqDestination.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.JmsResource.destroyScript)
#was.WmqDestination.destroyScript=was/jms/destroy-jms-object.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.JmsResource.destroyVerb)
#was.WmqDestination.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.JmsResource.discoverOrder)
#was.WmqDestination.discoverOrder=50
# Discover Script
#was.WmqDestination.discoverScript=was/jms/wmq/discover-inspect-wmq-queue.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.JmsResource.enableRippleStart)
#was.WmqDestination.enableRippleStart=false
# Indicates whether the expiry timeout for this queue is defined by the application or the Specified expiry property, or whether messages on the queue do not expire.
#was.WmqDestination.expiry=APPLICATION_DEFINED
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.JmsResource.exposeDeployedApplication)
#was.WmqDestination.exposeDeployedApplication=false
# If native encoding is not enabled, select the type of floating point encoding.
#was.WmqDestination.floatingPointEncoding=IEEENormal
# If native encoding is not enabled, select the type of integer encoding.
#was.WmqDestination.integerEncoding=Normal
# JMS provider for WebSphere MQ queue.
#was.WmqDestination.jmsProvider=WebSphere MQ JMS Provider
# List of scripts to be appended to the deployed's runtime script
#was.WmqDestination.libraryScripts=was/common/config/set-encoding.py,was/jms/wmq/wmq-object-lib.py,was/jms/jms-object-lib.py
# Specifies whether an application processes the RFH version 2 header of a WebSphere MQ message as part of the JMS message body. Values: 'JMS', 'MQ' and 'UNSPECIFIED'(default). Not supported for: WAS_61, WAS_70.
#was.WmqDestination.messageBody=UNSPECIFIED
# The order in which a modify step will be executed. (inherited from: was.JmsResource.modifyOrder)
#was.WmqDestination.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.WmqDestination.modifyScript=was/jms/wmq/modify-wmq-queue.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.JmsResource.modifyVerb)
#was.WmqDestination.modifyVerb=Modify
# Defines the message context options specified when sending messages to a destination. Values: 'DEFAULT'(default), 'SET_ALL_CONTEXT', 'SET_IDENTITY_CONTEXT'. Not supported for: WAS_61, WAS_70, WAS_80.
#was.WmqDestination.mqmdMessageContext=DEFAULT
# Specifies whether an application can read the values of MQMD fields from JMS messages that have been sent or received using the WebSphere MQ messaging provider. Not supported for: WAS_61, WAS_70, WAS_80.
#was.WmqDestination.mqmdReadEnabled=false
# Specifies whether an application can write the values of MQMD fields to JMS messages that will be sent or received using the WebSphere MQ messaging provider. Not supported for: WAS_61, WAS_70, WAS_80.
#was.WmqDestination.mqmdWriteEnabled=false
# The order of the step in the step list for the noop operation. (inherited from: was.JmsResource.noopOrder)
#was.WmqDestination.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.JmsResource.noopScript)
#was.WmqDestination.noopScript=null
# Noop Verb (inherited from: was.JmsResource.noopVerb)
#was.WmqDestination.noopVerb=Noop
# Sets the level of persistence used for sending messages to this queue.
#was.WmqDestination.persistence=APPLICATION_DEFINED
# The priority assigned to messages sent to this queue.
#was.WmqDestination.priority=APPLICATION_DEFINED
# Determines if messages for non-persistent consumers are sent to the client before the client requests them. Not supported for: WAS_61.
#was.WmqDestination.readAhead=QUEUE_DEFINED
# Determines what happens if a read ahead consumer is closed. Values: 'DELIVERALL'(default) and 'DELIVERCURRENT'. Not supported for: WAS_61.
#was.WmqDestination.readAheadClose=DELIVERALL
# Specifies how the JMSReplyTo header field in a WebSphere MQ messaging provider message is generated. Values: 'DEFAULT'(default), 'MQMD', 'RFH2'. Not supported for: WAS_61, WAS_70.
#was.WmqDestination.replyToStyle=DEFAULT
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.JmsResource.restartStrategy)
#was.WmqDestination.restartStrategy=STOP_START
# Determines whether the queue manager acknowledges receipt of messages sent to it. Not supported for: WAS_61.
#was.WmqDestination.sendAsync=QUEUE_DEFINED
# If the Expiry timeout property is set to specified, you must type the number of milliseconds (greater than 0) after which messages on this queue expire.
#was.WmqDestination.specifiedExpiry=0
# If the priority property is set to specified, you must type the message priority for this queue, using the range 0 through 9.
#was.WmqDestination.specifiedPriority=0
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.JmsResource.standardPropertiesNotToExpose)
#was.WmqDestination.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.JmsResource.startOrder)
#was.WmqDestination.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.JmsResource.startScript)
#was.WmqDestination.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.JmsResource.startVerb)
#was.WmqDestination.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.JmsResource.stopOrder)
#was.WmqDestination.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.JmsResource.stopScript)
#was.WmqDestination.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.JmsResource.stopVerb)
#was.WmqDestination.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.JmsResource.syncAfterCreateOrder)
#was.WmqDestination.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.JmsResource.syncAfterDestroyOrder)
#was.WmqDestination.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.JmsResource.syncAfterModifyOrder)
#was.WmqDestination.syncAfterModifyOrder=65
# Indicates whether the receiving application is JMS-compliant or is a traditional WebSphere MQ application. Values: JMS (default), MQ.
#was.WmqDestination.targetClient=JMS
# Use native encodings.
#was.WmqDestination.useNativeEncoding=true
# Additional Properties Not To Expose (inherited from: was.WmqDestination.additionalPropertiesNotToExpose)
#was.WmqQueue.additionalPropertiesNotToExpose=jmsProvider,wasType,customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.WmqDestination.applyRestartStrategyOnNoop)
#was.WmqQueue.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.WmqDestination.boundConfigurationItems)
#was.WmqQueue.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.WmqDestination.containerRestartStrategy)
#was.WmqQueue.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.WmqDestination.createOrder)
#was.WmqQueue.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.WmqDestination.createScript)
#was.WmqQueue.createScript=was/jms/wmq/create-wmq-queue.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.WmqDestination.createVerb)
#was.WmqQueue.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.WmqDestination.destroyOrder)
#was.WmqQueue.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.WmqDestination.destroyScript)
#was.WmqQueue.destroyScript=was/jms/destroy-jms-object.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.WmqDestination.destroyVerb)
#was.WmqQueue.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.WmqDestination.discoverOrder)
#was.WmqQueue.discoverOrder=50
# Discover Script (inherited from: was.WmqDestination.discoverScript)
#was.WmqQueue.discoverScript=was/jms/wmq/discover-inspect-wmq-queue.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.WmqDestination.enableRippleStart)
#was.WmqQueue.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.WmqDestination.exposeDeployedApplication)
#was.WmqQueue.exposeDeployedApplication=false
# JMS provider for WebSphere MQ queue. (inherited from: was.WmqDestination.jmsProvider)
#was.WmqQueue.jmsProvider=WebSphere MQ JMS Provider
# List of scripts to be appended to the deployed's runtime script (inherited from: was.WmqDestination.libraryScripts)
#was.WmqQueue.libraryScripts=was/common/config/set-encoding.py,was/jms/wmq/wmq-object-lib.py,was/jms/jms-object-lib.py
# The order in which a modify step will be executed. (inherited from: was.WmqDestination.modifyOrder)
#was.WmqQueue.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.WmqDestination.modifyScript)
#was.WmqQueue.modifyScript=was/jms/wmq/modify-wmq-queue.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.WmqDestination.modifyVerb)
#was.WmqQueue.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.WmqDestination.noopOrder)
#was.WmqQueue.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.WmqDestination.noopScript)
#was.WmqQueue.noopScript=null
# Noop Verb (inherited from: was.WmqDestination.noopVerb)
#was.WmqQueue.noopVerb=Noop
# The number of the port used by the queue manager on which this queue is defined.
#was.WmqQueue.queueManagerPort=1414
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.WmqDestination.restartStrategy)
#was.WmqQueue.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.WmqDestination.standardPropertiesNotToExpose)
#was.WmqQueue.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.WmqDestination.startOrder)
#was.WmqQueue.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.WmqDestination.startScript)
#was.WmqQueue.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.WmqDestination.startVerb)
#was.WmqQueue.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.WmqDestination.stopOrder)
#was.WmqQueue.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.WmqDestination.stopScript)
#was.WmqQueue.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.WmqDestination.stopVerb)
#was.WmqQueue.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.WmqDestination.syncAfterCreateOrder)
#was.WmqQueue.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.WmqDestination.syncAfterDestroyOrder)
#was.WmqQueue.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.WmqDestination.syncAfterModifyOrder)
#was.WmqQueue.syncAfterModifyOrder=65
# WAS config type of WebSphere MQ queue.
#was.WmqQueue.wasType=MQQueue
# Additional Properties Not To Expose (inherited from: was.WmqConnectionFactory.additionalPropertiesNotToExpose)
#was.WmqQueueConnectionFactory.additionalPropertiesNotToExpose=jmsProvider,wasType,containerAuthDataAlias,mappingConfigAlias,ConnectionPool,SessionPool,customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.WmqConnectionFactory.applyRestartStrategyOnNoop)
#was.WmqQueueConnectionFactory.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.WmqConnectionFactory.boundConfigurationItems)
#was.WmqQueueConnectionFactory.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.WmqConnectionFactory.containerRestartStrategy)
#was.WmqQueueConnectionFactory.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.WmqConnectionFactory.createOrder)
#was.WmqQueueConnectionFactory.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.WmqConnectionFactory.createScript)
#was.WmqQueueConnectionFactory.createScript=was/jms/wmq/create-wmq-connection-factory.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.WmqConnectionFactory.createVerb)
#was.WmqQueueConnectionFactory.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.WmqConnectionFactory.destroyOrder)
#was.WmqQueueConnectionFactory.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.WmqConnectionFactory.destroyScript)
#was.WmqQueueConnectionFactory.destroyScript=was/jms/destroy-jms-object.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.WmqConnectionFactory.destroyVerb)
#was.WmqQueueConnectionFactory.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.WmqConnectionFactory.discoverOrder)
#was.WmqQueueConnectionFactory.discoverOrder=50
# Discover Script (inherited from: was.WmqConnectionFactory.discoverScript)
#was.WmqQueueConnectionFactory.discoverScript=was/jms/wmq/discover-inspect-wmq-connection-factory.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.WmqConnectionFactory.enableRippleStart)
#was.WmqQueueConnectionFactory.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.WmqConnectionFactory.exposeDeployedApplication)
#was.WmqQueueConnectionFactory.exposeDeployedApplication=false
# JMS provider for WebSphere MQ queue connection factory. (inherited from: was.WmqConnectionFactory.jmsProvider)
#was.WmqQueueConnectionFactory.jmsProvider=WebSphere MQ JMS Provider
# List of scripts to be appended to the deployed's runtime script (inherited from: was.WmqConnectionFactory.libraryScripts)
#was.WmqQueueConnectionFactory.libraryScripts=was/common/config/set-encoding.py,was/jms/wmq/wmq-connection-factory-lib.py,was/jms/jms-connection-factory-lib.py,was/jms/jms-object-lib.py
# The order in which a modify step will be executed. (inherited from: was.WmqConnectionFactory.modifyOrder)
#was.WmqQueueConnectionFactory.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.WmqConnectionFactory.modifyScript)
#was.WmqQueueConnectionFactory.modifyScript=was/jms/wmq/modify-wmq-connection-factory.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.WmqConnectionFactory.modifyVerb)
#was.WmqQueueConnectionFactory.modifyVerb=Modify
# Determines whether or not the connection consumer keeps unwanted messages on the input queue. A value of true means that it does. A value of false means that the messages are disposed of as per their disposition options.
#was.WmqQueueConnectionFactory.msgRetention=true
# The order of the step in the step list for the noop operation. (inherited from: was.WmqConnectionFactory.noopOrder)
#was.WmqQueueConnectionFactory.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.WmqConnectionFactory.noopScript)
#was.WmqQueueConnectionFactory.noopScript=null
# Noop Verb (inherited from: was.WmqConnectionFactory.noopVerb)
#was.WmqQueueConnectionFactory.noopVerb=Noop
# Determines whether, when replying to a message, a RFH version 2 header is included in the reply message. Values: 'AS_REPLY_DEST'(default), 'ALWAYS'. Not supported for: WAS_61.
#was.WmqQueueConnectionFactory.replyWithRFH2=AS_REPLY_DEST
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.WmqConnectionFactory.restartStrategy)
#was.WmqQueueConnectionFactory.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.WmqConnectionFactory.standardPropertiesNotToExpose)
#was.WmqQueueConnectionFactory.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.WmqConnectionFactory.startOrder)
#was.WmqQueueConnectionFactory.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.WmqConnectionFactory.startScript)
#was.WmqQueueConnectionFactory.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.WmqConnectionFactory.startVerb)
#was.WmqQueueConnectionFactory.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.WmqConnectionFactory.stopOrder)
#was.WmqQueueConnectionFactory.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.WmqConnectionFactory.stopScript)
#was.WmqQueueConnectionFactory.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.WmqConnectionFactory.stopVerb)
#was.WmqQueueConnectionFactory.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.WmqConnectionFactory.syncAfterCreateOrder)
#was.WmqQueueConnectionFactory.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.WmqConnectionFactory.syncAfterDestroyOrder)
#was.WmqQueueConnectionFactory.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.WmqConnectionFactory.syncAfterModifyOrder)
#was.WmqQueueConnectionFactory.syncAfterModifyOrder=65
# WAS config type of WebSphere MQ queue connection factory.
#was.WmqQueueConnectionFactory.wasType=MQQueueConnectionFactory
# The set of CI templates. (inherited from: jee.QueueConnectionFactorySpec.boundTemplates)
#was.WmqQueueConnectionFactorySpec.boundTemplates=null
# The set of CI templates. (inherited from: jee.QueueSpec.boundTemplates)
#was.WmqQueueSpec.boundTemplates=null
# Additional Properties Not To Expose (inherited from: was.ConfigResource.additionalPropertiesNotToExpose)
#was.WmqServer.additionalPropertiesNotToExpose=wasType,provider,providerType,customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ConfigResource.applyRestartStrategyOnNoop)
#was.WmqServer.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ConfigResource.boundConfigurationItems)
#was.WmqServer.boundConfigurationItems=null
# The WebSphere MQ server connection channel, as defined in WebSphere MQ.
#was.WmqServer.channel=SYSTEM.DEF.SVRCONN
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ConfigResource.containerRestartStrategy)
#was.WmqServer.containerRestartStrategy=NONE
# The order in which a create step will be executed.
#was.WmqServer.createOrder=57
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.WmqServer.createScript=was/container/wmq/create-or-modify-wmq-server.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.ConfigResource.createVerb)
#was.WmqServer.createVerb=Create
# The order in which a destroy step will be executed.
#was.WmqServer.destroyOrder=45
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ConfigResource.destroyScript)
#was.WmqServer.destroyScript=was/common/config/destroy-resource.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ConfigResource.destroyVerb)
#was.WmqServer.destroyVerb=Destroy
# The order in which a discover step will be executed.
#was.WmqServer.discoverOrder=44
# Discover Script
#was.WmqServer.discoverScript=was/container/wmq/discover-inspect-wmq-server.py
# WebSphere MQ queue name used by the system to obtain messages used in the resource discovery process.
#was.WmqServer.discoveryReplyToQueue=SYSTEM.DEFAULT.MODEL.QUEUE
# When selected this enables the discovery of WebSphere MQ queue names to assist the administrator.
#was.WmqServer.enableAutoResourceDiscovery=true
# When selected, bindings transport mode will be used in preference to client transport mode when establishing connections to the WebSphere MQ server. Otherwise client transport mode will always be used.
#was.WmqServer.enableBindingsTransportMode=true
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ConfigResource.enableRippleStart)
#was.WmqServer.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ConfigResource.exposeDeployedApplication)
#was.WmqServer.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#was.WmqServer.libraryScripts=was/common/config/set-encoding.py,was/common/config/admin-config-lib.py,was/container/wmq/wmq-server-lib.py
# The order in which a modify step will be executed. (inherited from: was.ConfigResource.modifyOrder)
#was.WmqServer.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.WmqServer.modifyScript=was/container/wmq/create-or-modify-wmq-server.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ConfigResource.modifyVerb)
#was.WmqServer.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.ConfigResource.noopOrder)
#was.WmqServer.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ConfigResource.noopScript)
#was.WmqServer.noopScript=null
# Noop Verb (inherited from: was.ConfigResource.noopVerb)
#was.WmqServer.noopVerb=Noop
# This is the port that will be used when attempting to establish client transport mode connections to WebSphere MQ.
#was.WmqServer.port=1414
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ConfigResource.restartStrategy)
#was.WmqServer.restartStrategy=STOP_START
# Indicates whether the WebSphere MQ server represents a WebSphere MQ queue manager or a WebSphere MQ queue sharing group.
#was.WmqServer.serverType=MQ_QUEUE_MANAGER
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ConfigResource.standardPropertiesNotToExpose)
#was.WmqServer.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ConfigResource.startOrder)
#was.WmqServer.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ConfigResource.startScript)
#was.WmqServer.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ConfigResource.startVerb)
#was.WmqServer.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ConfigResource.stopOrder)
#was.WmqServer.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ConfigResource.stopScript)
#was.WmqServer.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ConfigResource.stopVerb)
#was.WmqServer.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ConfigResource.syncAfterCreateOrder)
#was.WmqServer.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ConfigResource.syncAfterDestroyOrder)
#was.WmqServer.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ConfigResource.syncAfterModifyOrder)
#was.WmqServer.syncAfterModifyOrder=65
# The name of the transport chain to use when communicating with MQ.
#was.WmqServer.transportChainName=OutboundBasicWMQClient
# If selected user identifiers received as part of WebSphere MQ messages will be used for security purposes within the bus.
#was.WmqServer.trustMessageUserIdentifiers=true
# WebSphere admin resource type.
#was.WmqServer.wasType=SIBMQServer
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.WmqServerSpec.boundTemplates=null
# Additional Properties Not To Expose (inherited from: was.WmqDestination.additionalPropertiesNotToExpose)
#was.WmqTopic.additionalPropertiesNotToExpose=jmsProvider,wasType,customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.WmqDestination.applyRestartStrategyOnNoop)
#was.WmqTopic.applyRestartStrategyOnNoop=false
# The name of the WebSphere MQ topic where publications will be received from, or sent to when this destination definition is used.
#was.WmqTopic.baseTopicName=BASE.TOPIC.NAME
# The set of created CIs. (inherited from: was.WmqDestination.boundConfigurationItems)
#was.WmqTopic.boundConfigurationItems=null
# The version of the broker being used. Values: 'V1'(default), 'V2'.
#was.WmqTopic.brokerVersion=V1
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.WmqDestination.containerRestartStrategy)
#was.WmqTopic.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.WmqDestination.createOrder)
#was.WmqTopic.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.WmqDestination.createScript)
#was.WmqTopic.createScript=was/jms/wmq/create-wmq-queue.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.WmqDestination.createVerb)
#was.WmqTopic.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.WmqDestination.destroyOrder)
#was.WmqTopic.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.WmqDestination.destroyScript)
#was.WmqTopic.destroyScript=was/jms/destroy-jms-object.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.WmqDestination.destroyVerb)
#was.WmqTopic.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.WmqDestination.discoverOrder)
#was.WmqTopic.discoverOrder=50
# Discover Script (inherited from: was.WmqDestination.discoverScript)
#was.WmqTopic.discoverScript=was/jms/wmq/discover-inspect-wmq-queue.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.WmqDestination.enableRippleStart)
#was.WmqTopic.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.WmqDestination.exposeDeployedApplication)
#was.WmqTopic.exposeDeployedApplication=false
# JMS provider for WebSphere MQ queue. (inherited from: was.WmqDestination.jmsProvider)
#was.WmqTopic.jmsProvider=WebSphere MQ JMS Provider
# List of scripts to be appended to the deployed's runtime script (inherited from: was.WmqDestination.libraryScripts)
#was.WmqTopic.libraryScripts=was/common/config/set-encoding.py,was/jms/wmq/wmq-object-lib.py,was/jms/jms-object-lib.py
# The order in which a modify step will be executed. (inherited from: was.WmqDestination.modifyOrder)
#was.WmqTopic.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.WmqDestination.modifyScript)
#was.WmqTopic.modifyScript=was/jms/wmq/modify-wmq-queue.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.WmqDestination.modifyVerb)
#was.WmqTopic.modifyVerb=Modify
# Enable MultiCast transport.
#was.WmqTopic.multicast=AS_CF
# The order of the step in the step list for the noop operation. (inherited from: was.WmqDestination.noopOrder)
#was.WmqTopic.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.WmqDestination.noopScript)
#was.WmqTopic.noopScript=null
# Noop Verb (inherited from: was.WmqDestination.noopVerb)
#was.WmqTopic.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.WmqDestination.restartStrategy)
#was.WmqTopic.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.WmqDestination.standardPropertiesNotToExpose)
#was.WmqTopic.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.WmqDestination.startOrder)
#was.WmqTopic.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.WmqDestination.startScript)
#was.WmqTopic.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.WmqDestination.startVerb)
#was.WmqTopic.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.WmqDestination.stopOrder)
#was.WmqTopic.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.WmqDestination.stopScript)
#was.WmqTopic.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.WmqDestination.stopVerb)
#was.WmqTopic.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.WmqDestination.syncAfterCreateOrder)
#was.WmqTopic.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.WmqDestination.syncAfterDestroyOrder)
#was.WmqTopic.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.WmqDestination.syncAfterModifyOrder)
#was.WmqTopic.syncAfterModifyOrder=65
# WAS config type of WebSphere MQ topic.
#was.WmqTopic.wasType=MQTopic
# Determines which sets of characters are interpreted as topic wildcards.
#was.WmqTopic.wildcardFormat=topicWildcards
# Additional Properties Not To Expose (inherited from: was.WmqConnectionFactory.additionalPropertiesNotToExpose)
#was.WmqTopicConnectionFactory.additionalPropertiesNotToExpose=jmsProvider,wasType,containerAuthDataAlias,mappingConfigAlias,ConnectionPool,SessionPool,customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.WmqConnectionFactory.applyRestartStrategyOnNoop)
#was.WmqTopicConnectionFactory.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.WmqConnectionFactory.boundConfigurationItems)
#was.WmqTopicConnectionFactory.boundConfigurationItems=null
# The name of the queue from which non-durable subscription messages are retrieved for a ConnectionConsumer.
#was.WmqTopicConnectionFactory.brokerCCSubQ=SYSTEM.JMS.ND.CC.SUBSCRIBER.QUEUE
# The broker control queue to use if subscribing to a topic.
#was.WmqTopicConnectionFactory.brokerControlQueue=SYSTEM.BROKER.CONTROL.QUEUE
# The queue to send publication messages to when using queue based brokering.
#was.WmqTopicConnectionFactory.brokerPubQueue=SYSTEM.BROKER.DEFAULT.STREAM
# The queue to use for obtaining subscription messages if subscribing to a topic.
#was.WmqTopicConnectionFactory.brokerSubQueue=SYSTEM.JMS.ND.SUBSCRIBER.QUEUE
# The version of the broker being used.
#was.WmqTopicConnectionFactory.brokerVersion=MQSI
# Select this checkbox to enable WebSphere MQ clone support to allow the same durable subscription across topic clones. When true, the clientID field is required.
#was.WmqTopicConnectionFactory.cloneSupport=false
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.WmqConnectionFactory.containerRestartStrategy)
#was.WmqTopicConnectionFactory.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.WmqConnectionFactory.createOrder)
#was.WmqTopicConnectionFactory.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.WmqConnectionFactory.createScript)
#was.WmqTopicConnectionFactory.createScript=was/jms/wmq/create-wmq-connection-factory.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.WmqConnectionFactory.createVerb)
#was.WmqTopicConnectionFactory.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.WmqConnectionFactory.destroyOrder)
#was.WmqTopicConnectionFactory.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.WmqConnectionFactory.destroyScript)
#was.WmqTopicConnectionFactory.destroyScript=was/jms/destroy-jms-object.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.WmqConnectionFactory.destroyVerb)
#was.WmqTopicConnectionFactory.destroyVerb=Destroy
# Specifies whether direct Broker authorization is used. Values: 'BASIC'(default), CERTIFICATE.
#was.WmqTopicConnectionFactory.directAuth=BASIC
# The order in which a discover step will be executed. (inherited from: was.WmqConnectionFactory.discoverOrder)
#was.WmqTopicConnectionFactory.discoverOrder=50
# Discover Script (inherited from: was.WmqConnectionFactory.discoverScript)
#was.WmqTopicConnectionFactory.discoverScript=was/jms/wmq/discover-inspect-wmq-connection-factory.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.WmqConnectionFactory.enableRippleStart)
#was.WmqTopicConnectionFactory.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.WmqConnectionFactory.exposeDeployedApplication)
#was.WmqTopicConnectionFactory.exposeDeployedApplication=false
# JMS provider for WebSphere MQ queue connection factory. (inherited from: was.WmqConnectionFactory.jmsProvider)
#was.WmqTopicConnectionFactory.jmsProvider=WebSphere MQ JMS Provider
# List of scripts to be appended to the deployed's runtime script (inherited from: was.WmqConnectionFactory.libraryScripts)
#was.WmqTopicConnectionFactory.libraryScripts=was/common/config/set-encoding.py,was/jms/wmq/wmq-connection-factory-lib.py,was/jms/jms-connection-factory-lib.py,was/jms/jms-object-lib.py
# The order in which a modify step will be executed. (inherited from: was.WmqConnectionFactory.modifyOrder)
#was.WmqTopicConnectionFactory.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.WmqConnectionFactory.modifyScript)
#was.WmqTopicConnectionFactory.modifyScript=was/jms/wmq/modify-wmq-connection-factory.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.WmqConnectionFactory.modifyVerb)
#was.WmqTopicConnectionFactory.modifyVerb=Modify
# Determines where message selection is performed.
#was.WmqTopicConnectionFactory.msgSelection=CLIENT
# Enable MultiCast transport.
#was.WmqTopicConnectionFactory.multicast=DISABLED
# The order of the step in the step list for the noop operation. (inherited from: was.WmqConnectionFactory.noopOrder)
#was.WmqTopicConnectionFactory.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.WmqConnectionFactory.noopScript)
#was.WmqTopicConnectionFactory.noopScript=null
# Noop Verb (inherited from: was.WmqConnectionFactory.noopVerb)
#was.WmqTopicConnectionFactory.noopVerb=Noop
# Web Scale proxy port.
#was.WmqTopicConnectionFactory.proxyPort=0
# Cleanup Level for BROKER or MIGRATE Subscription Stores.
#was.WmqTopicConnectionFactory.pubSubCleanup=SAFE
# The interval between background executions of the publish/subscribe cleanup utility.
#was.WmqTopicConnectionFactory.pubSubCleanupInterval=3600000
# The interval, in number of messages, between publish requests that require acknowledgement from the broker.
#was.WmqTopicConnectionFactory.publishAckInterval=25
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.WmqConnectionFactory.restartStrategy)
#was.WmqTopicConnectionFactory.restartStrategy=STOP_START
# Specifies whether the user anticipates that resource will receive a high proportion messages that match its selection criteria. This information can be used to optimize message delivery.
#was.WmqTopicConnectionFactory.sparseSubscriptions=false
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.WmqConnectionFactory.standardPropertiesNotToExpose)
#was.WmqTopicConnectionFactory.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.WmqConnectionFactory.startOrder)
#was.WmqTopicConnectionFactory.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.WmqConnectionFactory.startScript)
#was.WmqTopicConnectionFactory.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.WmqConnectionFactory.startVerb)
#was.WmqTopicConnectionFactory.startVerb=Start
# The interval, in milliseconds, between refreshes of the long running transaction that detects when a subscriber loses its connection to the queue manager. This property is relevant only if subStore parameter has the value QUEUE.
#was.WmqTopicConnectionFactory.statRefreshInterval=60000
# The order in which a stop step will be executed. (inherited from: was.WmqConnectionFactory.stopOrder)
#was.WmqTopicConnectionFactory.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.WmqConnectionFactory.stopScript)
#was.WmqTopicConnectionFactory.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.WmqConnectionFactory.stopVerb)
#was.WmqTopicConnectionFactory.stopVerb=Stop
# Where WebSphere MQ JMS should store persistent data relating to active subscriptions.
#was.WmqTopicConnectionFactory.substore=MIGRATE
# The order in which a synchronize after create step will be executed. (inherited from: was.WmqConnectionFactory.syncAfterCreateOrder)
#was.WmqTopicConnectionFactory.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.WmqConnectionFactory.syncAfterDestroyOrder)
#was.WmqTopicConnectionFactory.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.WmqConnectionFactory.syncAfterModifyOrder)
#was.WmqTopicConnectionFactory.syncAfterModifyOrder=65
# WAS config type of WebSphere MQ topic connection factory.
#was.WmqTopicConnectionFactory.wasType=MQTopicConnectionFactory
# Determines which sets of characters are interpreted as topic wildcards.
#was.WmqTopicConnectionFactory.wildcardFormat=topicWildcards
# The set of CI templates. (inherited from: jee.TopicConnectionFactorySpec.boundTemplates)
#was.WmqTopicConnectionFactorySpec.boundTemplates=null
# The set of CI templates. (inherited from: jee.TopicSpec.boundTemplates)
#was.WmqTopicSpec.boundTemplates=null
# Additional Properties Not To Expose
#was.WorkManager.additionalPropertiesNotToExpose=wasType,provider,providerType,customProperties,ServiceNames
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ConfigResource.applyRestartStrategyOnNoop)
#was.WorkManager.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ConfigResource.boundConfigurationItems)
#was.WorkManager.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ConfigResource.containerRestartStrategy)
#was.WorkManager.containerRestartStrategy=NONE
# The order in which a create step will be executed. (inherited from: was.ConfigResource.createOrder)
#was.WorkManager.createOrder=60
# Python script invoked to deploy a Java EE artifact or create a Java EE resource
#was.WorkManager.createScript=was/resources/async/create-or-modify-work-manager.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.ConfigResource.createVerb)
#was.WorkManager.createVerb=Create
# The order in which a destroy step will be executed. (inherited from: was.ConfigResource.destroyOrder)
#was.WorkManager.destroyOrder=40
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ConfigResource.destroyScript)
#was.WorkManager.destroyScript=was/common/config/destroy-resource.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ConfigResource.destroyVerb)
#was.WorkManager.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ConfigResource.discoverOrder)
#was.WorkManager.discoverOrder=50
# Discover Script
#was.WorkManager.discoverScript=was/resources/async/discover-inspect-work-manager.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ConfigResource.enableRippleStart)
#was.WorkManager.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ConfigResource.exposeDeployedApplication)
#was.WorkManager.exposeDeployedApplication=false
# Specifies whether the number of threads in this work manager can be increased.
#was.WorkManager.isGrowable=true
# List of scripts to be appended to the deployed's runtime script
#was.WorkManager.libraryScripts=was/common/config/set-encoding.py,was/resources/async/async-lib.py,was/common/config/admin-config-lib.py
# Specifies the maximum number of threads available in this work manager. The default value is 2.
#was.WorkManager.maxThreads=2
# Specifies the minimum number of threads available in this work manager. The default value is 0.
#was.WorkManager.minThreads=0
# The order in which a modify step will be executed. (inherited from: was.ConfigResource.modifyOrder)
#was.WorkManager.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource
#was.WorkManager.modifyScript=was/resources/async/create-or-modify-work-manager.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ConfigResource.modifyVerb)
#was.WorkManager.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.ConfigResource.noopOrder)
#was.WorkManager.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ConfigResource.noopScript)
#was.WorkManager.noopScript=null
# Noop Verb (inherited from: was.ConfigResource.noopVerb)
#was.WorkManager.noopVerb=Noop
# Specifies the desired maximum number of threads used for alarms. The default value is 2.
#was.WorkManager.numAlarmThreads=2
# Specifies the Work Manager Provider name,The Default is 'WorkManagerProvider'.
#was.WorkManager.provider=WorkManagerProvider
# WebSphere admin resource provider type.
#was.WorkManager.providerType=WorkManagerProvider
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ConfigResource.restartStrategy)
#was.WorkManager.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ConfigResource.standardPropertiesNotToExpose)
#was.WorkManager.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ConfigResource.startOrder)
#was.WorkManager.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ConfigResource.startScript)
#was.WorkManager.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ConfigResource.startVerb)
#was.WorkManager.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ConfigResource.stopOrder)
#was.WorkManager.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ConfigResource.stopScript)
#was.WorkManager.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ConfigResource.stopVerb)
#was.WorkManager.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ConfigResource.syncAfterCreateOrder)
#was.WorkManager.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ConfigResource.syncAfterDestroyOrder)
#was.WorkManager.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ConfigResource.syncAfterModifyOrder)
#was.WorkManager.syncAfterModifyOrder=65
# Specifies the priority of the threads available in this work manager. The default value is 5.
#was.WorkManager.threadPriority=5
# WebSphere admin resource type.
#was.WorkManager.wasType=WorkManagerInfo
# Specifies the action taken when the thread pool is exhausted, and the work request queue is full,If set to FAIL, the work manager API methods creates an exception instead of blocking.
#was.WorkManager.workReqQFullAction=Block
# Specifies the size of the work request queue. The default is 0 work objects.
#was.WorkManager.workReqQSize=0
# Specifies the number of milliseconds to wait before attempting to release a unit of work ,The default is 0 milliseconds.
#was.WorkManager.workTimeout=0
# Additional Properties Not To Expose (inherited from: was.ConfigResource.additionalPropertiesNotToExpose)
#was.WorkManagerProvider.additionalPropertiesNotToExpose=wasType,provider,providerType,customProperties
# When true, the restart strategy is apply for a NOOP operation (inherited from: was.ConfigResource.applyRestartStrategyOnNoop)
#was.WorkManagerProvider.applyRestartStrategyOnNoop=false
# The set of created CIs. (inherited from: was.ConfigResource.boundConfigurationItems)
#was.WorkManagerProvider.boundConfigurationItems=null
# The restart strategy for the container affected by the deployed. STOP_START : stop container, undeploy, deploy, start container. RESTART : undeploy, deploy, restart container. (inherited from: was.ConfigResource.containerRestartStrategy)
#was.WorkManagerProvider.containerRestartStrategy=NONE
# The order in which a create step will be executed.
#was.WorkManagerProvider.createOrder=58
# Python script invoked to deploy a Java EE artifact or create a Java EE resource (inherited from: was.ConfigResource.createScript)
#was.WorkManagerProvider.createScript=was/common/config/create-or-modify-resource.py
# The word that is used to prefix a step description for the create operation. (inherited from: was.ConfigResource.createVerb)
#was.WorkManagerProvider.createVerb=Create
# The order in which a destroy step will be executed.
#was.WorkManagerProvider.destroyOrder=42
# Python script invoked to undeploy a Java EE artifact or destroy a Java EE resource (inherited from: was.ConfigResource.destroyScript)
#was.WorkManagerProvider.destroyScript=was/common/config/destroy-resource.py
# The word that is used to prefix a step description for the destroy operation. (inherited from: was.ConfigResource.destroyVerb)
#was.WorkManagerProvider.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: was.ConfigResource.discoverOrder)
#was.WorkManagerProvider.discoverOrder=50
# Discover Script (inherited from: was.ConfigResource.discoverScript)
#was.WorkManagerProvider.discoverScript=was/common/config/discover-inspect-resource.py
# If set, each server in the cluster will be first stopped and restarted sequentially. (inherited from: was.ConfigResource.enableRippleStart)
#was.WorkManagerProvider.enableRippleStart=false
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: was.ConfigResource.exposeDeployedApplication)
#was.WorkManagerProvider.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: was.ConfigResource.libraryScripts)
#was.WorkManagerProvider.libraryScripts=was/common/config/set-encoding.py,was/common/config/admin-config-lib.py
# The order in which a modify step will be executed. (inherited from: was.ConfigResource.modifyOrder)
#was.WorkManagerProvider.modifyOrder=60
# Python script invoked to upgrade a Java EE artifact or modify a Java EE resource (inherited from: was.ConfigResource.modifyScript)
#was.WorkManagerProvider.modifyScript=was/common/config/create-or-modify-resource.py
# The word that is used to prefix a step description for the modify operation. (inherited from: was.ConfigResource.modifyVerb)
#was.WorkManagerProvider.modifyVerb=Modify
# The order of the step in the step list for the noop operation. (inherited from: was.ConfigResource.noopOrder)
#was.WorkManagerProvider.noopOrder=50
# Python script invoked for the noop operation. (inherited from: was.ConfigResource.noopScript)
#was.WorkManagerProvider.noopScript=null
# Noop Verb (inherited from: was.ConfigResource.noopVerb)
#was.WorkManagerProvider.noopVerb=Noop
# The restart strategy for the deployed. STOP_START : stop, undeploy, deploy, start. STOP: stop, undeploy, deploy. START: undeploy, deploy, start. (inherited from: was.ConfigResource.restartStrategy)
#was.WorkManagerProvider.restartStrategy=STOP_START
# Standard properties that are not exposed to any python wsadmin script. (inherited from: was.ConfigResource.standardPropertiesNotToExpose)
#was.WorkManagerProvider.standardPropertiesNotToExpose=id, type, properties, deployable, container, createOrder, createScript, createVerb, syncAfterCreateOrder, modifyOrder, modifyScript, modifyVerb, noopOrder, noopScript, noopVerb, syncAfterModifyOrder, destroyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, syncAfterDestroyOrder, startOrder, startScript, startVerb, stopOrder, stopScript, stopVerb, discoverScript, inspectScript, discoverOrder, libraryScripts, retryAttemptsForAppReadyCheck, restartStrategy, containerRestartStrategy,applyRestartStrategyOnNoop, enableRippleStart, provisioners, ordinal, boundConfigurationItems
# The order in which a start step will be executed. (inherited from: was.ConfigResource.startOrder)
#was.WorkManagerProvider.startOrder=50
# Python script invoked to start a Java EE artifact or Java EE resource (inherited from: was.ConfigResource.startScript)
#was.WorkManagerProvider.startScript=null
# The word that is used to prefix a step description for the start operation. (inherited from: was.ConfigResource.startVerb)
#was.WorkManagerProvider.startVerb=Start
# The order in which a stop step will be executed. (inherited from: was.ConfigResource.stopOrder)
#was.WorkManagerProvider.stopOrder=50
# Python script invoked to stop a Java EE artifact or Java EE resource (inherited from: was.ConfigResource.stopScript)
#was.WorkManagerProvider.stopScript=null
# The word that is used to prefix a step description for the stop operation. (inherited from: was.ConfigResource.stopVerb)
#was.WorkManagerProvider.stopVerb=Stop
# The order in which a synchronize after create step will be executed. (inherited from: was.ConfigResource.syncAfterCreateOrder)
#was.WorkManagerProvider.syncAfterCreateOrder=65
# The order in which a synchronize after destroy step will be executed. (inherited from: was.ConfigResource.syncAfterDestroyOrder)
#was.WorkManagerProvider.syncAfterDestroyOrder=45
# The order in which a synchronize after modify step will be executed. (inherited from: was.ConfigResource.syncAfterModifyOrder)
#was.WorkManagerProvider.syncAfterModifyOrder=65
# WebSphere admin resource type.
#was.WorkManagerProvider.wasType=WorkManagerProvider
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.WorkManagerProviderSpec.boundTemplates=null
# The set of CI templates. (inherited from: was.Deployable.boundTemplates)
#was.WorkManagerSpec.boundTemplates=null
# If set to true, multiple steps at the same order will be batched together in one batch to improve performance over high-latency WinRM connections (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.batchSteps)
#windows.ImportedRegFile.batchSteps=false
# The set of created CIs. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.boundConfigurationItems)
#windows.ImportedRegFile.boundConfigurationItems=null
# Additional classpath resources that should be uploaded to the working directory before executing the script. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.classpathResources)
#windows.ImportedRegFile.classpathResources=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.createOptions)
#windows.ImportedRegFile.createOptions=uploadArtifactData,uploadClasspathResources
# Order at which the create step will be executed.
#windows.ImportedRegFile.createOrder=72
# PowerShell script invoked to create a resource (or deploy an artifact) on Windows.
#windows.ImportedRegFile.createScript=windows/import-reg-file.ps1
# Verb that is used to prefix the description for the create step.
#windows.ImportedRegFile.createVerb=Import
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.destroyOptions)
#windows.ImportedRegFile.destroyOptions=uploadClasspathResources
# Order at which the destroy step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.destroyOrder)
#windows.ImportedRegFile.destroyOrder=40
# PowerShell script invoked to destroy a resource (or undeploy an artifact) on Windows. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.destroyScript)
#windows.ImportedRegFile.destroyScript=null
# Verb that is used to prefix the description for the destroy step. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.destroyVerb)
#windows.ImportedRegFile.destroyVerb=Destroy
# Order at which the discover step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.discoverOrder)
#windows.ImportedRegFile.discoverOrder=50
# Script invoked to discover and inspect deployeds of this type. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.discoverScript)
#windows.ImportedRegFile.discoverScript=null
# Whether to add the host password to the powershell variable values. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.exposePasswordPropertiesOnHosts)
#windows.ImportedRegFile.exposePasswordPropertiesOnHosts=false
# List of scripts to append to the the step script. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.libraryScripts)
#windows.ImportedRegFile.libraryScripts=null
# Maximum number of steps in a batch. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.maxBatchSize)
#windows.ImportedRegFile.maxBatchSize=100
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.modifyOptions)
#windows.ImportedRegFile.modifyOptions=uploadArtifactData,uploadClasspathResources
# Order at which the modify step will be executed.
#windows.ImportedRegFile.modifyOrder=72
# PowerShell script invoked to modify a resource (or an artifact) on Windows.
#windows.ImportedRegFile.modifyScript=windows/import-reg-file.ps1
# Verb that is used to prefix the description for the modify step.
#windows.ImportedRegFile.modifyVerb=Import
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.noopOptions)
#windows.ImportedRegFile.noopOptions=uploadClasspathResources
# Order at which the noop step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.noopOrder)
#windows.ImportedRegFile.noopOrder=50
# PowerShell script invoked to noop a resource or an artifact on Windows. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.noopScript)
#windows.ImportedRegFile.noopScript=null
# Verb that is used to prefix the description for the noop step. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.noopVerb)
#windows.ImportedRegFile.noopVerb=Noop
# Options for the start step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.startOptions)
#windows.ImportedRegFile.startOptions=uploadClasspathResources
# Order at which the start step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.startOrder)
#windows.ImportedRegFile.startOrder=90
# PowerShell script invoked to start a resource of an artifact on Windows. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.startScript)
#windows.ImportedRegFile.startScript=null
# Verb that is used to prefix the description for the start step. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.startVerb)
#windows.ImportedRegFile.startVerb=Start
# Options for the stop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.stopOptions)
#windows.ImportedRegFile.stopOptions=uploadClasspathResources
# Order at which the stop script will be executed. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.stopOrder)
#windows.ImportedRegFile.stopOrder=10
# PowerShell script invoked to stop a resource or an artifact on Windows. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.stopScript)
#windows.ImportedRegFile.stopScript=null
# Verb that is used to prefix the description for the stop step. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.stopVerb)
#windows.ImportedRegFile.stopVerb=Stop
# Whether to use a sidecar '.ini' file to transfer the powershell variable values. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.useSidecarIniFile)
#windows.ImportedRegFile.useSidecarIniFile=false
# If set to true, multiple steps at the same order will be batched together in one batch to improve performance over high-latency WinRM connections (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.batchSteps)
#windows.InstalledMsi.batchSteps=false
# The set of created CIs. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.boundConfigurationItems)
#windows.InstalledMsi.boundConfigurationItems=null
# Additional classpath resources that should be uploaded to the working directory before executing the script. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.classpathResources)
#windows.InstalledMsi.classpathResources=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.createOptions)
#windows.InstalledMsi.createOptions=uploadArtifactData,uploadClasspathResources
# Order at which the create step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.createOrder)
#windows.InstalledMsi.createOrder=60
# PowerShell script invoked to create a resource (or deploy an artifact) on Windows.
#windows.InstalledMsi.createScript=windows/install-msi.ps1
# Verb that is used to prefix the description for the create step.
#windows.InstalledMsi.createVerb=Install
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed).
#windows.InstalledMsi.destroyOptions=uploadArtifactData
# Order at which the destroy step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.destroyOrder)
#windows.InstalledMsi.destroyOrder=40
# PowerShell script invoked to destroy a resource (or undeploy an artifact) on Windows.
#windows.InstalledMsi.destroyScript=windows/uninstall-msi.ps1
# Verb that is used to prefix the description for the destroy step.
#windows.InstalledMsi.destroyVerb=Uninstall
# Order at which the discover step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.discoverOrder)
#windows.InstalledMsi.discoverOrder=50
# Script invoked to discover and inspect deployeds of this type. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.discoverScript)
#windows.InstalledMsi.discoverScript=null
# Whether to add the host password to the powershell variable values. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.exposePasswordPropertiesOnHosts)
#windows.InstalledMsi.exposePasswordPropertiesOnHosts=false
# List of scripts to append to the the step script. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.libraryScripts)
#windows.InstalledMsi.libraryScripts=null
# Maximum number of steps in a batch. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.maxBatchSize)
#windows.InstalledMsi.maxBatchSize=100
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.modifyOptions)
#windows.InstalledMsi.modifyOptions=uploadArtifactData,uploadClasspathResources
# Order at which the modify step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.modifyOrder)
#windows.InstalledMsi.modifyOrder=60
# PowerShell script invoked to modify a resource (or an artifact) on Windows. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.modifyScript)
#windows.InstalledMsi.modifyScript=null
# Verb that is used to prefix the description for the modify step. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.modifyVerb)
#windows.InstalledMsi.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.noopOptions)
#windows.InstalledMsi.noopOptions=uploadClasspathResources
# Order at which the noop step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.noopOrder)
#windows.InstalledMsi.noopOrder=50
# PowerShell script invoked to noop a resource or an artifact on Windows. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.noopScript)
#windows.InstalledMsi.noopScript=null
# Verb that is used to prefix the description for the noop step. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.noopVerb)
#windows.InstalledMsi.noopVerb=Noop
# Options for the start step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.startOptions)
#windows.InstalledMsi.startOptions=uploadClasspathResources
# Order at which the start step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.startOrder)
#windows.InstalledMsi.startOrder=90
# PowerShell script invoked to start a resource of an artifact on Windows. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.startScript)
#windows.InstalledMsi.startScript=null
# Verb that is used to prefix the description for the start step. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.startVerb)
#windows.InstalledMsi.startVerb=Start
# Options for the stop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.stopOptions)
#windows.InstalledMsi.stopOptions=uploadClasspathResources
# Order at which the stop script will be executed. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.stopOrder)
#windows.InstalledMsi.stopOrder=10
# PowerShell script invoked to stop a resource or an artifact on Windows. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.stopScript)
#windows.InstalledMsi.stopScript=null
# Verb that is used to prefix the description for the stop step. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.stopVerb)
#windows.InstalledMsi.stopVerb=Stop
# Whether to use a sidecar '.ini' file to transfer the powershell variable values. (inherited from: powershell.ExtensiblePowerShellDeployedArtifact.useSidecarIniFile)
#windows.InstalledMsi.useSidecarIniFile=false
# The set of CI templates. (inherited from: powershell.BasePowerShellDeployableFileArtifact.boundTemplates)
#windows.Msi.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: powershell.BasePowerShellDeployableFileArtifact.delimiters)
#windows.Msi.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: powershell.BasePowerShellDeployableFileArtifact.textFileNamesRegex)
#windows.Msi.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of CI templates. (inherited from: powershell.BasePowerShellDeployableFileArtifact.boundTemplates)
#windows.RegFile.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: powershell.BasePowerShellDeployableFileArtifact.delimiters)
#windows.RegFile.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: powershell.BasePowerShellDeployableFileArtifact.textFileNamesRegex)
#windows.RegFile.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# If set to true, multiple steps at the same order will be batched together in one batch to improve performance over high-latency WinRM connections (inherited from: powershell.ExtensiblePowerShellDeployed.batchSteps)
#windows.Service.batchSteps=false
# The set of created CIs. (inherited from: powershell.ExtensiblePowerShellDeployed.boundConfigurationItems)
#windows.Service.boundConfigurationItems=null
# Additional classpath resources that should be uploaded to the working directory before executing the script. (inherited from: powershell.ExtensiblePowerShellDeployed.classpathResources)
#windows.Service.classpathResources=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployed.createOptions)
#windows.Service.createOptions=uploadArtifactData,uploadClasspathResources
# Order at which the create step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployed.createOrder)
#windows.Service.createOrder=60
# PowerShell script invoked to create a resource (or deploy an artifact) on Windows.
#windows.Service.createScript=windows/install-service.ps1
# Verb that is used to prefix the description for the create step.
#windows.Service.createVerb=Install
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployed.destroyOptions)
#windows.Service.destroyOptions=uploadClasspathResources
# Order at which the destroy step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployed.destroyOrder)
#windows.Service.destroyOrder=40
# PowerShell script invoked to destroy a resource (or undeploy an artifact) on Windows.
#windows.Service.destroyScript=windows/uninstall-service.ps1
# Verb that is used to prefix the description for the destroy step.
#windows.Service.destroyVerb=Uninstall
# Order at which the discover step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployed.discoverOrder)
#windows.Service.discoverOrder=50
# Script invoked to discover and inspect deployeds of this type.
#windows.Service.discoverScript=windows/inspect-services.ps1
# Whether to add the host password to the powershell variable values. (inherited from: powershell.ExtensiblePowerShellDeployed.exposePasswordPropertiesOnHosts)
#windows.Service.exposePasswordPropertiesOnHosts=false
# List of scripts to append to the the step script. (inherited from: powershell.ExtensiblePowerShellDeployed.libraryScripts)
#windows.Service.libraryScripts=null
# Maximum number of steps in a batch. (inherited from: powershell.ExtensiblePowerShellDeployed.maxBatchSize)
#windows.Service.maxBatchSize=100
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployed.modifyOptions)
#windows.Service.modifyOptions=uploadArtifactData,uploadClasspathResources
# Order at which the modify step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployed.modifyOrder)
#windows.Service.modifyOrder=60
# PowerShell script invoked to modify a resource (or an artifact) on Windows. (inherited from: powershell.ExtensiblePowerShellDeployed.modifyScript)
#windows.Service.modifyScript=null
# Verb that is used to prefix the description for the modify step. (inherited from: powershell.ExtensiblePowerShellDeployed.modifyVerb)
#windows.Service.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployed.noopOptions)
#windows.Service.noopOptions=uploadClasspathResources
# Order at which the noop step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployed.noopOrder)
#windows.Service.noopOrder=50
# PowerShell script invoked to noop a resource or an artifact on Windows. (inherited from: powershell.ExtensiblePowerShellDeployed.noopScript)
#windows.Service.noopScript=null
# Verb that is used to prefix the description for the noop step. (inherited from: powershell.ExtensiblePowerShellDeployed.noopVerb)
#windows.Service.noopVerb=Noop
# Options for the start step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployed.startOptions)
#windows.Service.startOptions=uploadClasspathResources
# Order at which the start step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployed.startOrder)
#windows.Service.startOrder=90
# PowerShell script invoked to start a resource of an artifact on Windows.
#windows.Service.startScript=windows/start-service.ps1
# Amount of seconds to wait for the service to start. Note: If the service goes into the Pending state, the actual timeout used will be the double the specified amount.
#windows.Service.startTimeout=30
# Verb that is used to prefix the description for the start step. (inherited from: powershell.ExtensiblePowerShellDeployed.startVerb)
#windows.Service.startVerb=Start
# Startup type is this service. Defaults to Automatic
#windows.Service.startupType=Automatic
# Options for the stop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployed.stopOptions)
#windows.Service.stopOptions=uploadClasspathResources
# Order at which the stop script will be executed. (inherited from: powershell.ExtensiblePowerShellDeployed.stopOrder)
#windows.Service.stopOrder=10
# PowerShell script invoked to stop a resource or an artifact on Windows.
#windows.Service.stopScript=windows/stop-service.ps1
# If set to true, this service is stopped and started when another component in the same package is deployed
#windows.Service.stopStartOnNoop=true
# Amount of seconds to wait for the service to start. Note: If the service goes into the Pending state, the actual timeout used will be the double the specified amount.
#windows.Service.stopTimeout=30
# Verb that is used to prefix the description for the stop step. (inherited from: powershell.ExtensiblePowerShellDeployed.stopVerb)
#windows.Service.stopVerb=Stop
# Whether to use a sidecar '.ini' file to transfer the powershell variable values. (inherited from: powershell.ExtensiblePowerShellDeployed.useSidecarIniFile)
#windows.Service.useSidecarIniFile=false
# The set of CI templates. (inherited from: powershell.BasePowerShellDeployable.boundTemplates)
#windows.ServiceSpec.boundTemplates=null
# If set to true, multiple steps at the same order will be batched together in one batch to improve performance over high-latency WinRM connections (inherited from: powershell.ExtensiblePowerShellDeployed.batchSteps)
#windows.Share.batchSteps=false
# The set of created CIs. (inherited from: powershell.ExtensiblePowerShellDeployed.boundConfigurationItems)
#windows.Share.boundConfigurationItems=null
# Additional classpath resources that should be uploaded to the working directory before executing the script. (inherited from: powershell.ExtensiblePowerShellDeployed.classpathResources)
#windows.Share.classpathResources=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployed.createOptions)
#windows.Share.createOptions=uploadArtifactData,uploadClasspathResources
# Order at which the create step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployed.createOrder)
#windows.Share.createOrder=60
# PowerShell script invoked to create a resource (or deploy an artifact) on Windows.
#windows.Share.createScript=windows/create-share.ps1
# Verb that is used to prefix the description for the create step. (inherited from: powershell.ExtensiblePowerShellDeployed.createVerb)
#windows.Share.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployed.destroyOptions)
#windows.Share.destroyOptions=uploadClasspathResources
# Order at which the destroy step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployed.destroyOrder)
#windows.Share.destroyOrder=40
# PowerShell script invoked to destroy a resource (or undeploy an artifact) on Windows.
#windows.Share.destroyScript=windows/delete-share.ps1
# Verb that is used to prefix the description for the destroy step. (inherited from: powershell.ExtensiblePowerShellDeployed.destroyVerb)
#windows.Share.destroyVerb=Destroy
# Order at which the discover step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployed.discoverOrder)
#windows.Share.discoverOrder=50
# Script invoked to discover and inspect deployeds of this type.
#windows.Share.discoverScript=windows/inspect-shares.ps1
# Whether to add the host password to the powershell variable values. (inherited from: powershell.ExtensiblePowerShellDeployed.exposePasswordPropertiesOnHosts)
#windows.Share.exposePasswordPropertiesOnHosts=false
# List of scripts to append to the the step script. (inherited from: powershell.ExtensiblePowerShellDeployed.libraryScripts)
#windows.Share.libraryScripts=null
# Maximum number of steps in a batch. (inherited from: powershell.ExtensiblePowerShellDeployed.maxBatchSize)
#windows.Share.maxBatchSize=100
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployed.modifyOptions)
#windows.Share.modifyOptions=uploadArtifactData,uploadClasspathResources
# Order at which the modify step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployed.modifyOrder)
#windows.Share.modifyOrder=60
# PowerShell script invoked to modify a resource (or an artifact) on Windows. (inherited from: powershell.ExtensiblePowerShellDeployed.modifyScript)
#windows.Share.modifyScript=null
# Verb that is used to prefix the description for the modify step. (inherited from: powershell.ExtensiblePowerShellDeployed.modifyVerb)
#windows.Share.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployed.noopOptions)
#windows.Share.noopOptions=uploadClasspathResources
# Order at which the noop step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployed.noopOrder)
#windows.Share.noopOrder=50
# PowerShell script invoked to noop a resource or an artifact on Windows. (inherited from: powershell.ExtensiblePowerShellDeployed.noopScript)
#windows.Share.noopScript=null
# Verb that is used to prefix the description for the noop step. (inherited from: powershell.ExtensiblePowerShellDeployed.noopVerb)
#windows.Share.noopVerb=Noop
# Options for the start step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployed.startOptions)
#windows.Share.startOptions=uploadClasspathResources
# Order at which the start step will be executed. (inherited from: powershell.ExtensiblePowerShellDeployed.startOrder)
#windows.Share.startOrder=90
# PowerShell script invoked to start a resource of an artifact on Windows. (inherited from: powershell.ExtensiblePowerShellDeployed.startScript)
#windows.Share.startScript=null
# Verb that is used to prefix the description for the start step. (inherited from: powershell.ExtensiblePowerShellDeployed.startVerb)
#windows.Share.startVerb=Start
# Options for the stop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,exposeDeployedApplication,exposePreviousDeployed). (inherited from: powershell.ExtensiblePowerShellDeployed.stopOptions)
#windows.Share.stopOptions=uploadClasspathResources
# Order at which the stop script will be executed. (inherited from: powershell.ExtensiblePowerShellDeployed.stopOrder)
#windows.Share.stopOrder=10
# PowerShell script invoked to stop a resource or an artifact on Windows. (inherited from: powershell.ExtensiblePowerShellDeployed.stopScript)
#windows.Share.stopScript=null
# Verb that is used to prefix the description for the stop step. (inherited from: powershell.ExtensiblePowerShellDeployed.stopVerb)
#windows.Share.stopVerb=Stop
# Whether to use a sidecar '.ini' file to transfer the powershell variable values. (inherited from: powershell.ExtensiblePowerShellDeployed.useSidecarIniFile)
#windows.Share.useSidecarIniFile=false
# The set of CI templates. (inherited from: powershell.BasePowerShellDeployable.boundTemplates)
#windows.ShareSpec.boundTemplates=null
# Type of application archive.
#wlp.Application.archiveType=null
# Indicates whether or not the server should start the application automatically when the server starts.
#wlp.Application.autoStart=true
# The set of created CIs. (inherited from: udm.BaseDeployedArtifact.boundConfigurationItems)
#wlp.Application.boundConfigurationItems=null
# Application restart strategy.
#wlp.Application.restartStrategy=NONE
# Property Mapping
#wlp.ApplicationBnd.propertyMapping=version:,security-role:securityRoles
# Property Mapping
#wlp.Classloader.propertyMapping=delegation:,apiTypeVisibility:,privateLibraryRef:,commonLibraryRef:,classProviderRef:
# The set of created CIs. (inherited from: wlp.Resource.boundConfigurationItems)
#wlp.ConnectionManager.boundConfigurationItems=null
# Create Order
#wlp.ConnectionManager.createOrder=66
# Destroy Order
#wlp.ConnectionManager.destroyOrder=43
# Property Mapping
#wlp.ConnectionManager.propertyMapping=id:name,agedTimeout:,connectionTimeout:,maxIdleTime:,maxPoolSize:,minPoolSize:,purgePolicy:,reapTime:,maxConnectionsPerThread:,numConnectionsPerThreadLocal:
# Property Mapping Element Name
#wlp.ConnectionManager.propertyMappingElementName=connectionManager
# The set of CI templates. (inherited from: wlp.ResourceSpec.boundTemplates)
#wlp.ConnectionManagerSpec.boundTemplates=null
# Additional Property Mapping
#wlp.DB2DataSource.additionalPropertyMapping=properties.db2.jcc/driverType:driverType,             properties.db2.jcc/databaseName:databaseName,properties.db2.jcc/serverName:serverName,properties.db2.jcc/portNumber:portNumber,             properties.db2.jcc/user:user,properties.db2.jcc/password:password
# The set of created CIs. (inherited from: wlp.DataSource.boundConfigurationItems)
#wlp.DB2DataSource.boundConfigurationItems=null
# Create Order (inherited from: wlp.DataSource.createOrder)
#wlp.DB2DataSource.createOrder=67
# Element name for custom properties.
#wlp.DB2DataSource.customPropertiesElementName=properties.db2.jcc
# Destroy Order (inherited from: wlp.DataSource.destroyOrder)
#wlp.DB2DataSource.destroyOrder=42
# Property Mapping (inherited from: wlp.DataSource.propertyMapping)
#wlp.DB2DataSource.propertyMapping=id:name,jndiName:,jdbcDriverRef:,connectionManagerRef:,containerAuthDataRef:,             recoveryAuthDataRef:,datasourceType:,connectionSharing:,isolationLevel:,statementCacheSize:,transactional:,beginTranForResultSetScrollingAPIs:,             beginTranForVendorAPIs:,syncQueryTimeoutWithTransactionTimeout:,supplementalJDBCTrace:,commitOrRollbackOnCleanup:,queryTimeout:
# Property Mapping Element Name (inherited from: wlp.DataSource.propertyMappingElementName)
#wlp.DB2DataSource.propertyMappingElementName=dataSource
# The set of CI templates. (inherited from: wlp.DataSourceSpec.boundTemplates)
#wlp.DB2DataSourceSpec.boundTemplates=null
# Attempt transaction enlistment when result set scrolling interfaces are used.
#wlp.DataSource.beginTranForResultSetScrollingAPIs=true
# Attempt transaction enlistment when vendor interfaces are used.
#wlp.DataSource.beginTranForVendorAPIs=true
# The set of created CIs. (inherited from: wlp.Resource.boundConfigurationItems)
#wlp.DataSource.boundConfigurationItems=null
# Create Order
#wlp.DataSource.createOrder=67
# Destroy Order
#wlp.DataSource.destroyOrder=42
# Property Mapping
#wlp.DataSource.propertyMapping=id:name,jndiName:,jdbcDriverRef:,connectionManagerRef:,containerAuthDataRef:,             recoveryAuthDataRef:,datasourceType:,connectionSharing:,isolationLevel:,statementCacheSize:,transactional:,beginTranForResultSetScrollingAPIs:,             beginTranForVendorAPIs:,syncQueryTimeoutWithTransactionTimeout:,supplementalJDBCTrace:,commitOrRollbackOnCleanup:,queryTimeout:
# Property Mapping Element Name
#wlp.DataSource.propertyMappingElementName=dataSource
# Supplements the JDBC driver trace that is logged when JDBC driver trace is enabled in bootstrap.properties. JDBC driver trace specifications include: com.ibm.ws.database.logwriter, com.ibm.ws.db2.logwriter, com.ibm.ws.derby.logwriter, com.ibm.ws.informix.logwriter, com.ibm.ws.oracle.logwriter, com.ibm.ws.sqlserver.logwriter, com.ibm.ws.sybase.logwriter.
#wlp.DataSource.supplementalJDBCTrace=false
# Use the time remaining (if any) in a JTA transaction as the default query timeout for SQL statements.
#wlp.DataSource.syncQueryTimeoutWithTransactionTimeout=false
# Enable participation in transactions that are managed by the application server.
#wlp.DataSource.transactional=true
# The set of CI templates. (inherited from: wlp.ResourceSpec.boundTemplates)
#wlp.DataSourceSpec.boundTemplates=null
# Type of application archive.
#wlp.EjbApplication.archiveType=ejb
# The set of created CIs. (inherited from: wlp.Application.boundConfigurationItems)
#wlp.EjbApplication.boundConfigurationItems=null
# Property Mapping
#wlp.EjbApplication.propertyMapping=id:name,name:,location:,autoStart:,type:archiveType,classloader:,application-bnd:applicationBindings
# Property Mapping Element Name
#wlp.EjbApplication.propertyMappingElementName=ejbApplication
# The set of CI templates. (inherited from: jee.EjbJar.boundTemplates)
#wlp.EjbApplicationSpec.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: jee.EjbJar.delimiters)
#wlp.EjbApplicationSpec.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: jee.EjbJar.textFileNamesRegex)
#wlp.EjbApplicationSpec.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# Type of application archive.
#wlp.EnterpriseApplication.archiveType=ear
# The set of created CIs. (inherited from: wlp.Application.boundConfigurationItems)
#wlp.EnterpriseApplication.boundConfigurationItems=null
# Property Mapping
#wlp.EnterpriseApplication.propertyMapping=id:name,name:,location:,autoStart:,type:archiveType,defaultClientModule:,classloader:,application-bnd:applicationBindings
# Property Mapping Element Name
#wlp.EnterpriseApplication.propertyMappingElementName=enterpriseApplication
# The set of CI templates. (inherited from: jee.Ear.boundTemplates)
#wlp.EnterpriseApplicationSpec.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: jee.Ear.delimiters)
#wlp.EnterpriseApplicationSpec.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: jee.Ear.textFileNamesRegex)
#wlp.EnterpriseApplicationSpec.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#wlp.Feature.boundConfigurationItems=null
# Install a feature or an enterprise subsystem archive (ESA) file to the runtime environment.
#wlp.Feature.installFeature=true
# Specify additional options for the featureManager install command (e.g. --offlineOnly,--to=usr).
#wlp.Feature.installOptions=--acceptLicense --when-file-exists=replace
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#wlp.FeatureSpec.boundTemplates=null
# The set of created CIs. (inherited from: wlp.Resource.boundConfigurationItems)
#wlp.Fileset.boundConfigurationItems=null
# Boolean to indicate whether or not the search should be case sensitive.
#wlp.Fileset.caseSensitive=true
# Create Order
#wlp.Fileset.createOrder=63
# Destroy Order
#wlp.Fileset.destroyOrder=46
# Property Mapping
#wlp.Fileset.propertyMapping=id:name,name:,dir:,caseSensitive:,includes:,excludes:,scanInterval:
# Property Mapping Element Name
#wlp.Fileset.propertyMappingElementName=fileset
# The set of CI templates. (inherited from: wlp.ResourceSpec.boundTemplates)
#wlp.FilesetSpec.boundTemplates=null
# Additional Property Mapping
#wlp.GenericDataSource.additionalPropertyMapping=properties/databaseName:databaseName,properties/serverName:serverName,properties/portNumber:portNumber,             properties/URL:url,properties/user:user,properties/password:password
# The set of created CIs. (inherited from: wlp.DataSource.boundConfigurationItems)
#wlp.GenericDataSource.boundConfigurationItems=null
# Create Order (inherited from: wlp.DataSource.createOrder)
#wlp.GenericDataSource.createOrder=67
# Destroy Order (inherited from: wlp.DataSource.destroyOrder)
#wlp.GenericDataSource.destroyOrder=42
# Property Mapping (inherited from: wlp.DataSource.propertyMapping)
#wlp.GenericDataSource.propertyMapping=id:name,jndiName:,jdbcDriverRef:,connectionManagerRef:,containerAuthDataRef:,             recoveryAuthDataRef:,datasourceType:,connectionSharing:,isolationLevel:,statementCacheSize:,transactional:,beginTranForResultSetScrollingAPIs:,             beginTranForVendorAPIs:,syncQueryTimeoutWithTransactionTimeout:,supplementalJDBCTrace:,commitOrRollbackOnCleanup:,queryTimeout:
# Property Mapping Element Name (inherited from: wlp.DataSource.propertyMappingElementName)
#wlp.GenericDataSource.propertyMappingElementName=dataSource
# The set of CI templates. (inherited from: wlp.DataSourceSpec.boundTemplates)
#wlp.GenericDataSourceSpec.boundTemplates=null
# Property Mapping
#wlp.GroupRole.propertyMapping=id:name,name:groupName,access-id:accessId
# The set of created CIs. (inherited from: wlp.Resource.boundConfigurationItems)
#wlp.JdbcDriver.boundConfigurationItems=null
# Create Order
#wlp.JdbcDriver.createOrder=65
# Destroy Order
#wlp.JdbcDriver.destroyOrder=44
# Property Mapping
#wlp.JdbcDriver.propertyMapping=id:name,libraryRef:,javax.sql.XADataSource:xaDataSource,javax.sql.ConnectionPoolDataSource:connectionPoolDataSource,javax.sql.DataSource:dataSource
# Property Mapping Element Name
#wlp.JdbcDriver.propertyMappingElementName=jdbcDriver
# The set of CI templates. (inherited from: wlp.ResourceSpec.boundTemplates)
#wlp.JdbcDriverSpec.boundTemplates=null
# The set of created CIs. (inherited from: wlp.Resource.boundConfigurationItems)
#wlp.JmsConnectionFactory.boundConfigurationItems=null
# Create Order (inherited from: wlp.Resource.createOrder)
#wlp.JmsConnectionFactory.createOrder=60
# Destroy Order (inherited from: wlp.Resource.destroyOrder)
#wlp.JmsConnectionFactory.destroyOrder=40
# The set of CI templates. (inherited from: wlp.ResourceSpec.boundTemplates)
#wlp.JmsConnectionFactorySpec.boundTemplates=null
# The set of created CIs. (inherited from: wlp.Resource.boundConfigurationItems)
#wlp.JmsResource.boundConfigurationItems=null
# Create Order (inherited from: wlp.Resource.createOrder)
#wlp.JmsResource.createOrder=60
# Destroy Order (inherited from: wlp.Resource.destroyOrder)
#wlp.JmsResource.destroyOrder=40
# The set of CI templates. (inherited from: wlp.ResourceSpec.boundTemplates)
#wlp.JmsResourceSpec.boundTemplates=null
# The set of created CIs. (inherited from: wlp.Resource.boundConfigurationItems)
#wlp.Library.boundConfigurationItems=null
# Create Order
#wlp.Library.createOrder=64
# Destroy Order
#wlp.Library.destroyOrder=45
# Property Mapping
#wlp.Library.propertyMapping=id:name,name:,filesetRef:,apiTypeVisibility:
# Property Mapping Element Name
#wlp.Library.propertyMappingElementName=library
# The set of CI templates. (inherited from: wlp.ResourceSpec.boundTemplates)
#wlp.LibrarySpec.boundTemplates=null
# Additional Property Mapping
#wlp.MicrosoftSQLServerDataSource.additionalPropertyMapping=properties.microsoft.sqlserver/databaseName:databaseName,             properties.microsoft.sqlserver/instanceName:instanceName,properties.microsoft.sqlserver/serverName:serverName,             properties.microsoft.sqlserver/portNumber:portNumber,properties.microsoft.sqlserver/URL:url,properties.microsoft.sqlserver/user:user,             properties.microsoft.sqlserver/password:password
# The set of created CIs. (inherited from: wlp.DataSource.boundConfigurationItems)
#wlp.MicrosoftSQLServerDataSource.boundConfigurationItems=null
# Create Order (inherited from: wlp.DataSource.createOrder)
#wlp.MicrosoftSQLServerDataSource.createOrder=67
# Element name for custom properties.
#wlp.MicrosoftSQLServerDataSource.customPropertiesElementName=properties.microsoft.sqlserver
# Destroy Order (inherited from: wlp.DataSource.destroyOrder)
#wlp.MicrosoftSQLServerDataSource.destroyOrder=42
# Property Mapping (inherited from: wlp.DataSource.propertyMapping)
#wlp.MicrosoftSQLServerDataSource.propertyMapping=id:name,jndiName:,jdbcDriverRef:,connectionManagerRef:,containerAuthDataRef:,             recoveryAuthDataRef:,datasourceType:,connectionSharing:,isolationLevel:,statementCacheSize:,transactional:,beginTranForResultSetScrollingAPIs:,             beginTranForVendorAPIs:,syncQueryTimeoutWithTransactionTimeout:,supplementalJDBCTrace:,commitOrRollbackOnCleanup:,queryTimeout:
# Property Mapping Element Name (inherited from: wlp.DataSource.propertyMappingElementName)
#wlp.MicrosoftSQLServerDataSource.propertyMappingElementName=dataSource
# The set of CI templates. (inherited from: wlp.DataSourceSpec.boundTemplates)
#wlp.MicrosoftSQLServerDataSourceSpec.boundTemplates=null
# Additional Property Mapping
#wlp.OracleDataSource.additionalPropertyMapping=properties.oracle/databaseName:databaseName,                 properties.oracle/serverName:serverName,properties.oracle/portNumber:portNumber,properties.oracle/URL:url,properties.oracle/user:user,                 properties.oracle/password:password,properties.oracle/connectionProperties:connectionProperties,properties.oracle/loginTimout:loginTimeout,                 properties.oracle/networkProtocol:networkProtocol,properties.oracle/ONSConfiguration:onsConfiguration,                 properties.oracle/serviceName:serviceName,properties.oracle/TNSEntryName:tnsEntryName
# The set of created CIs. (inherited from: wlp.DataSource.boundConfigurationItems)
#wlp.OracleDataSource.boundConfigurationItems=null
# Create Order (inherited from: wlp.DataSource.createOrder)
#wlp.OracleDataSource.createOrder=67
# Element name for custom properties.
#wlp.OracleDataSource.customPropertiesElementName=properties.oracle
# Destroy Order (inherited from: wlp.DataSource.destroyOrder)
#wlp.OracleDataSource.destroyOrder=42
# Property Mapping (inherited from: wlp.DataSource.propertyMapping)
#wlp.OracleDataSource.propertyMapping=id:name,jndiName:,jdbcDriverRef:,connectionManagerRef:,containerAuthDataRef:,             recoveryAuthDataRef:,datasourceType:,connectionSharing:,isolationLevel:,statementCacheSize:,transactional:,beginTranForResultSetScrollingAPIs:,             beginTranForVendorAPIs:,syncQueryTimeoutWithTransactionTimeout:,supplementalJDBCTrace:,commitOrRollbackOnCleanup:,queryTimeout:
# Property Mapping Element Name (inherited from: wlp.DataSource.propertyMappingElementName)
#wlp.OracleDataSource.propertyMappingElementName=dataSource
# The set of CI templates. (inherited from: wlp.DataSourceSpec.boundTemplates)
#wlp.OracleDataSourceSpec.boundTemplates=null
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#wlp.Resource.boundConfigurationItems=null
# Create Order
#wlp.Resource.createOrder=60
# Destroy Order
#wlp.Resource.destroyOrder=40
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#wlp.ResourceSpec.boundTemplates=null
# Property Mapping
#wlp.RunAsUserRole.propertyMapping=id:name,userid:,password:
# Property Mapping
#wlp.SecurityRole.propertyMapping=id:name,name:roleName,user:users,group:groups,special-subject:specialSubjects,run-as:runAsUsers
# Timeout opening a communications link to the resource, in milliseconds.
#wlp.Server.connectTimeout=60000
# Timeout reading from Input stream when a connection is established, in milliseconds.
#wlp.Server.readTimeout=60000
# Notify the WLP server about server.xml changes after deployments and undeployments.
#wlp.Server.reloadServerConfiguration=true
# The underlying protocol used for communication, e.g. SSL, SSLv3, TLS, TLSv1.2 etc.
#wlp.Server.sslProtocol=SSL
# Ignores certificate verification checks, use in development environments only.
#wlp.Server.trustAllCertificates=false
# Ignores host verification checks, use in development environments only.
#wlp.Server.trustAllHostnames=false
# Property Mapping
#wlp.SpecialSubjectRole.propertyMapping=id:name,type:subjectType
# Additional Property Mapping
#wlp.SybaseDataSource.additionalPropertyMapping=properties.sybase/databaseName:databaseName,             properties.sybase/serverName:serverName,properties.sybase/portNumber:portNumber,properties.sybase/user:user,             properties.sybase/password:password,properties.sybase/connectionProperties:connectionProperties,properties.sybase/loginTimout:loginTimeout,             properties.sybase/networkProtocol:networkProtocol,properties.sybase/resourceManagerName:resourceManagerName,             properties.sybase/SERVER_INITIATED_TRANSACTIONS:serverInitiatedTransactions,properties.sybase/version:version
# The set of created CIs. (inherited from: wlp.DataSource.boundConfigurationItems)
#wlp.SybaseDataSource.boundConfigurationItems=null
# Create Order (inherited from: wlp.DataSource.createOrder)
#wlp.SybaseDataSource.createOrder=67
# Element name for custom properties.
#wlp.SybaseDataSource.customPropertiesElementName=properties.sybase
# Destroy Order (inherited from: wlp.DataSource.destroyOrder)
#wlp.SybaseDataSource.destroyOrder=42
# Property Mapping (inherited from: wlp.DataSource.propertyMapping)
#wlp.SybaseDataSource.propertyMapping=id:name,jndiName:,jdbcDriverRef:,connectionManagerRef:,containerAuthDataRef:,             recoveryAuthDataRef:,datasourceType:,connectionSharing:,isolationLevel:,statementCacheSize:,transactional:,beginTranForResultSetScrollingAPIs:,             beginTranForVendorAPIs:,syncQueryTimeoutWithTransactionTimeout:,supplementalJDBCTrace:,commitOrRollbackOnCleanup:,queryTimeout:
# Property Mapping Element Name (inherited from: wlp.DataSource.propertyMappingElementName)
#wlp.SybaseDataSource.propertyMappingElementName=dataSource
# The set of CI templates. (inherited from: wlp.DataSourceSpec.boundTemplates)
#wlp.SybaseDataSourceSpec.boundTemplates=null
# Property Mapping
#wlp.UserRole.propertyMapping=id:name,name:userName,access-id:accessId
# The set of created CIs. (inherited from: wlp.Resource.boundConfigurationItems)
#wlp.Variable.boundConfigurationItems=null
# Create Order
#wlp.Variable.createOrder=62
# Destroy Order
#wlp.Variable.destroyOrder=47
# Property Mapping
#wlp.Variable.propertyMapping=id:name,name:,value:
# Property Mapping Element Name
#wlp.Variable.propertyMappingElementName=variable
# The set of CI templates. (inherited from: wlp.ResourceSpec.boundTemplates)
#wlp.VariableSpec.boundTemplates=null
# Type of application archive.
#wlp.WebApplication.archiveType=war
# The set of created CIs. (inherited from: wlp.Application.boundConfigurationItems)
#wlp.WebApplication.boundConfigurationItems=null
# Property Mapping
#wlp.WebApplication.propertyMapping=id:name,name:,location:,autoStart:,type:archiveType,contextRoot:,classloader:,application-bnd:applicationBindings
# Property Mapping Element Name
#wlp.WebApplication.propertyMappingElementName=webApplication
# The set of CI templates. (inherited from: jee.War.boundTemplates)
#wlp.WebApplicationSpec.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: jee.War.delimiters)
#wlp.WebApplicationSpec.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: jee.War.textFileNamesRegex)
#wlp.WebApplicationSpec.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: wlp.JmsConnectionFactory.boundConfigurationItems)
#wlp.WmqConnectionFactory.boundConfigurationItems=null
# Create Order
#wlp.WmqConnectionFactory.createOrder=67
# Element name for custom properties.
#wlp.WmqConnectionFactory.customPropertiesElementName=properties.wmqJms
# Destroy Order
#wlp.WmqConnectionFactory.destroyOrder=42
# The set of CI templates. (inherited from: wlp.JmsConnectionFactorySpec.boundTemplates)
#wlp.WmqConnectionFactorySpec.boundTemplates=null
# The set of created CIs. (inherited from: wlp.JmsResource.boundConfigurationItems)
#wlp.WmqDestination.boundConfigurationItems=null
# Create Order (inherited from: wlp.JmsResource.createOrder)
#wlp.WmqDestination.createOrder=60
# Destroy Order (inherited from: wlp.JmsResource.destroyOrder)
#wlp.WmqDestination.destroyOrder=40
# The set of CI templates. (inherited from: wlp.JmsResourceSpec.boundTemplates)
#wlp.WmqDestinationSpec.boundTemplates=null
# The set of created CIs. (inherited from: wlp.Resource.boundConfigurationItems)
#wlp.WmqJmsClient.boundConfigurationItems=null
# Create Order
#wlp.WmqJmsClient.createOrder=65
# Destroy Order
#wlp.WmqJmsClient.destroyOrder=44
# A flag to enable or disable the sending of a diagnostic trace to a LogWriter object provided by the application server. Server default value: true
#wlp.WmqJmsClient.logWriterEnabled=true
# Property Mapping
#wlp.WmqJmsClient.propertyMapping=id:name,connectionConcurrency:,logWriterEnabled:,maxConnections:,nativeLibraryPath:,reconnectionRetryCount:,reconnectionRetryInterval:,startupRetryCount:,startupRetryInterval:
# Property Mapping Element Name
#wlp.WmqJmsClient.propertyMappingElementName=wmqJmsClient
# The set of CI templates. (inherited from: wlp.ResourceSpec.boundTemplates)
#wlp.WmqJmsClientSpec.boundTemplates=null
# The set of created CIs. (inherited from: wlp.WmqDestination.boundConfigurationItems)
#wlp.WmqQueue.boundConfigurationItems=null
# Create Order
#wlp.WmqQueue.createOrder=68
# Destroy Order
#wlp.WmqQueue.destroyOrder=41
# Property Mapping
#wlp.WmqQueue.propertyMapping=id:name,jndiName:,properties.wmqJms/baseQueueManagerName:baseQueueManagerName,properties.wmqJms/baseQueueName:baseQueueName,         properties.wmqJms/CCSID:ccsid,properties.wmqJms/encoding:encoding,properties.wmqJms/expiry:expiry,         properties.wmqJms/failIfQuiesce:failIfQuiesce,properties.wmqJms/persistence:persistence,properties.wmqJms/priority:priority,properties.wmqJms/putAsyncAllowed:putAsyncAllowed,properties.wmqJms/readAheadAllowed:readAheadAllowed,         properties.wmqJms/readAheadClosePolicy:readAheadClosePolicy,properties.wmqJms/receiveCCSID:receiveCcsid,properties.wmqJms/receiveConversion:receiveConversion,properties.wmqJms/targetClient:targetClient,properties.wmqJms/arbitraryProperties:arbitraryProperties
# Property Mapping Element Name
#wlp.WmqQueue.propertyMappingElementName=jmsQueue
# The set of created CIs. (inherited from: wlp.WmqConnectionFactory.boundConfigurationItems)
#wlp.WmqQueueConnectionFactory.boundConfigurationItems=null
# Create Order (inherited from: wlp.WmqConnectionFactory.createOrder)
#wlp.WmqQueueConnectionFactory.createOrder=67
# Element name for custom properties. (inherited from: wlp.WmqConnectionFactory.customPropertiesElementName)
#wlp.WmqQueueConnectionFactory.customPropertiesElementName=properties.wmqJms
# Destroy Order (inherited from: wlp.WmqConnectionFactory.destroyOrder)
#wlp.WmqQueueConnectionFactory.destroyOrder=42
# Property Mapping
#wlp.WmqQueueConnectionFactory.propertyMapping=id:name,jndiName:,connectionManagerRef:,containerAuthDataRef:,recoveryAuthDataRef:,         properties.wmqJms/applicationName:applicationName,properties.wmqJms/channel:channel,properties.wmqJms/hostName:hostName,properties.wmqJms/port:port,properties.wmqJms/queueManager:queueManager,         properties.wmqJms/userName:userName,properties.wmqJms/password:password,properties.wmqJms/transportType:transportType,properties.wmqJms/ccdtURL:ccdtURL,         properties.wmqJms/CCSID:ccsid,properties.wmqJms/clientId:clientId,properties.wmqJms/connectionNameList:connectionNameList,properties.wmqJms/providerVersion:providerVersion
# Property Mapping Element Name
#wlp.WmqQueueConnectionFactory.propertyMappingElementName=jmsQueueConnectionFactory
# The set of CI templates. (inherited from: wlp.WmqConnectionFactorySpec.boundTemplates)
#wlp.WmqQueueConnectionFactorySpec.boundTemplates=null
# The set of CI templates. (inherited from: wlp.WmqDestinationSpec.boundTemplates)
#wlp.WmqQueueSpec.boundTemplates=null
# The set of created CIs. (inherited from: wlp.WmqDestination.boundConfigurationItems)
#wlp.WmqTopic.boundConfigurationItems=null
# Create Order
#wlp.WmqTopic.createOrder=68
# Destroy Order
#wlp.WmqTopic.destroyOrder=41
# Property Mapping
#wlp.WmqTopic.propertyMapping=id:name,jndiName:,properties.wmqJms/baseTopicName:baseTopicName,properties.wmqJms/brokerCCDurSubQueue:brokerCCDurSubQueue,properties.wmqJms/brokerDurSubQueue:brokerDurSubQueue,         properties.wmqJms/brokerPubQueue:brokerPubQueue,properties.wmqJms/brokerPubQueueManager:brokerPubQueueManager,properties.wmqJms/brokerVersion:brokerVersion,properties.wmqJms/CCSID:ccsid,         properties.wmqJms/encoding:encoding,properties.wmqJms/expiry:expiry,properties.wmqJms/failIfQuiesce:failIfQuiesce,properties.wmqJms/persistence:persistence,properties.wmqJms/priority:priority,         properties.wmqJms/putAsyncAllowed:putAsyncAllowed,properties.wmqJms/readAheadAllowed:readAheadAllowed,properties.wmqJms/readAheadClosePolicy:readAheadClosePolicy,properties.wmqJms/receiveCCSID:receiveCcsid,         properties.wmqJms/receiveConversion:receiveConversion,properties.wmqJms/targetClient:targetClient,properties.wmqJms/arbitraryProperties:arbitraryProperties
# Property Mapping Element Name
#wlp.WmqTopic.propertyMappingElementName=jmsTopic
# The set of created CIs. (inherited from: wlp.WmqConnectionFactory.boundConfigurationItems)
#wlp.WmqTopicConnectionFactory.boundConfigurationItems=null
# Create Order (inherited from: wlp.WmqConnectionFactory.createOrder)
#wlp.WmqTopicConnectionFactory.createOrder=67
# Element name for custom properties. (inherited from: wlp.WmqConnectionFactory.customPropertiesElementName)
#wlp.WmqTopicConnectionFactory.customPropertiesElementName=properties.wmqJms
# Destroy Order (inherited from: wlp.WmqConnectionFactory.destroyOrder)
#wlp.WmqTopicConnectionFactory.destroyOrder=42
# Property Mapping
#wlp.WmqTopicConnectionFactory.propertyMapping=id:name,jndiName:,connectionManagerRef:,containerAuthDataRef:,recoveryAuthDataRef:,         properties.wmqJms/applicationName:applicationName,properties.wmqJms/channel:channel,properties.wmqJms/hostName:hostName,properties.wmqJms/port:port,properties.wmqJms/queueManager:queueManager,         properties.wmqJms/userName:userName,properties.wmqJms/password:password,properties.wmqJms/transportType:transportType,properties.wmqJms/ccdtURL:ccdtURL,         properties.wmqJms/CCSID:ccsid,properties.wmqJms/clientId:clientId,properties.wmqJms/connectionNameList:connectionNameList,properties.wmqJms/providerVersion:providerVersion,         properties.wmqJms/brokerCCSubQueue:brokerCCSubQueue,properties.wmqJms/brokerControlQueue:brokerControlQueue,properties.wmqJms/brokerPubQueue:brokerPubQueue,         properties.wmqJms/brokerQueueManager:brokerQueueManager,properties.wmqJms/brokerSubQueue:brokerSubQueue,properties.wmqJms/brokerVersion:brokerVersion
# Property Mapping Element Name
#wlp.WmqTopicConnectionFactory.propertyMappingElementName=jmsTopicConnectionFactory
# The set of CI templates. (inherited from: wlp.WmqConnectionFactorySpec.boundTemplates)
#wlp.WmqTopicConnectionFactorySpec.boundTemplates=null
# The set of CI templates. (inherited from: wlp.WmqDestinationSpec.boundTemplates)
#wlp.WmqTopicSpec.boundTemplates=null
# The set of created CIs. (inherited from: wls.JmsDestination.boundConfigurationItems)
#wls.AbstractQueue.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsDestination.createOptions)
#wls.AbstractQueue.createOptions=uploadArtifactData
# Create Order (inherited from: wls.JmsDestination.createOrder)
#wls.AbstractQueue.createOrder=60
# Python script invoked to create this resource (inherited from: wls.JmsDestination.createScript)
#wls.AbstractQueue.createScript=null
# Create Verb (inherited from: wls.JmsDestination.createVerb)
#wls.AbstractQueue.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsDestination.destroyOptions)
#wls.AbstractQueue.destroyOptions=uploadArtifactData
# Destroy Order (inherited from: wls.JmsDestination.destroyOrder)
#wls.AbstractQueue.destroyOrder=40
# Python script invoked to destroy this resource (inherited from: wls.JmsDestination.destroyScript)
#wls.AbstractQueue.destroyScript=null
# Destroy Verb (inherited from: wls.JmsDestination.destroyVerb)
#wls.AbstractQueue.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: wls.JmsDestination.discoverOrder)
#wls.AbstractQueue.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.JmsDestination.exposeDeployedApplication)
#wls.AbstractQueue.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.JmsDestination.libraryScripts)
#wls.AbstractQueue.libraryScripts=null
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsDestination.modifyOptions)
#wls.AbstractQueue.modifyOptions=uploadArtifactData
# Modify Order (inherited from: wls.JmsDestination.modifyOrder)
#wls.AbstractQueue.modifyOrder=40
# Python script invoked to upgrade this resource (inherited from: wls.JmsDestination.modifyScript)
#wls.AbstractQueue.modifyScript=null
# Modify Verb (inherited from: wls.JmsDestination.modifyVerb)
#wls.AbstractQueue.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsDestination.noopOptions)
#wls.AbstractQueue.noopOptions=uploadArtifactData
# Set Error Destination Order (inherited from: wls.JmsDestination.setErrorDestinationOrder)
#wls.AbstractQueue.setErrorDestinationOrder=61
# Python script invoked to set error destination on this jms resource (inherited from: wls.JmsDestination.setErrorDestinationScript)
#wls.AbstractQueue.setErrorDestinationScript=null
# Set Error Destination Verb (inherited from: wls.JmsDestination.setErrorDestinationVerb)
#wls.AbstractQueue.setErrorDestinationVerb=Set error queue for
# Standard Properties Not To Expose (inherited from: wls.JmsDestination.standardPropertiesNotToExpose)
#wls.AbstractQueue.standardPropertiesNotToExpose=id, name, type, properties, deployable, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, destroyScript, destroyVerb, destroyOrder, securityPermissions, inheritPermissions, exposeDeployedApplication, jndiName, jmsModuleName, subDeploymentName, errorDestination, setErrorDestinationScript, setErrorDestinationVerb, setErrorDestinationOrder, unsetErrorDestinationVerb, unsetErrorDestinationOrder, unsetErrorDestinationScript, restartTarget, libraryScripts, discoverOrder, createOptions, modifyOptions, destroyOptions, noopOptions, provisioners, ordinal, boundConfigurationItems
# Unset Error Destination Order (inherited from: wls.JmsDestination.unsetErrorDestinationOrder)
#wls.AbstractQueue.unsetErrorDestinationOrder=37
# Python script invoked to unset error destination from this jms resource (inherited from: wls.JmsDestination.unsetErrorDestinationScript)
#wls.AbstractQueue.unsetErrorDestinationScript=null
# Unset Error Destination Verb (inherited from: wls.JmsDestination.unsetErrorDestinationVerb)
#wls.AbstractQueue.unsetErrorDestinationVerb=Unset error queue from =
# The set of created CIs. (inherited from: wls.JmsDestination.boundConfigurationItems)
#wls.AbstractTopic.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsDestination.createOptions)
#wls.AbstractTopic.createOptions=uploadArtifactData
# Create Order (inherited from: wls.JmsDestination.createOrder)
#wls.AbstractTopic.createOrder=60
# Python script invoked to create this resource (inherited from: wls.JmsDestination.createScript)
#wls.AbstractTopic.createScript=null
# Create Verb (inherited from: wls.JmsDestination.createVerb)
#wls.AbstractTopic.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsDestination.destroyOptions)
#wls.AbstractTopic.destroyOptions=uploadArtifactData
# Destroy Order (inherited from: wls.JmsDestination.destroyOrder)
#wls.AbstractTopic.destroyOrder=40
# Python script invoked to destroy this resource (inherited from: wls.JmsDestination.destroyScript)
#wls.AbstractTopic.destroyScript=null
# Destroy Verb (inherited from: wls.JmsDestination.destroyVerb)
#wls.AbstractTopic.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: wls.JmsDestination.discoverOrder)
#wls.AbstractTopic.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.JmsDestination.exposeDeployedApplication)
#wls.AbstractTopic.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.JmsDestination.libraryScripts)
#wls.AbstractTopic.libraryScripts=null
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsDestination.modifyOptions)
#wls.AbstractTopic.modifyOptions=uploadArtifactData
# Modify Order (inherited from: wls.JmsDestination.modifyOrder)
#wls.AbstractTopic.modifyOrder=40
# Python script invoked to upgrade this resource (inherited from: wls.JmsDestination.modifyScript)
#wls.AbstractTopic.modifyScript=null
# Modify Verb (inherited from: wls.JmsDestination.modifyVerb)
#wls.AbstractTopic.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsDestination.noopOptions)
#wls.AbstractTopic.noopOptions=uploadArtifactData
# Set Error Destination Order (inherited from: wls.JmsDestination.setErrorDestinationOrder)
#wls.AbstractTopic.setErrorDestinationOrder=61
# Python script invoked to set error destination on this jms resource (inherited from: wls.JmsDestination.setErrorDestinationScript)
#wls.AbstractTopic.setErrorDestinationScript=null
# Set Error Destination Verb (inherited from: wls.JmsDestination.setErrorDestinationVerb)
#wls.AbstractTopic.setErrorDestinationVerb=Set error queue for
# Standard Properties Not To Expose (inherited from: wls.JmsDestination.standardPropertiesNotToExpose)
#wls.AbstractTopic.standardPropertiesNotToExpose=id, name, type, properties, deployable, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, destroyScript, destroyVerb, destroyOrder, securityPermissions, inheritPermissions, exposeDeployedApplication, jndiName, jmsModuleName, subDeploymentName, errorDestination, setErrorDestinationScript, setErrorDestinationVerb, setErrorDestinationOrder, unsetErrorDestinationVerb, unsetErrorDestinationOrder, unsetErrorDestinationScript, restartTarget, libraryScripts, discoverOrder, createOptions, modifyOptions, destroyOptions, noopOptions, provisioners, ordinal, boundConfigurationItems
# Unset Error Destination Order (inherited from: wls.JmsDestination.unsetErrorDestinationOrder)
#wls.AbstractTopic.unsetErrorDestinationOrder=37
# Python script invoked to unset error destination from this jms resource (inherited from: wls.JmsDestination.unsetErrorDestinationScript)
#wls.AbstractTopic.unsetErrorDestinationScript=null
# Unset Error Destination Verb (inherited from: wls.JmsDestination.unsetErrorDestinationVerb)
#wls.AbstractTopic.unsetErrorDestinationVerb=Unset error queue from =
# The set of created CIs. (inherited from: wls.JmsDestination.boundConfigurationItems)
#wls.AbstractUniformDistributedQueue.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsDestination.createOptions)
#wls.AbstractUniformDistributedQueue.createOptions=uploadArtifactData
# Create Order (inherited from: wls.JmsDestination.createOrder)
#wls.AbstractUniformDistributedQueue.createOrder=60
# Python script invoked to create this resource (inherited from: wls.JmsDestination.createScript)
#wls.AbstractUniformDistributedQueue.createScript=null
# Create Verb (inherited from: wls.JmsDestination.createVerb)
#wls.AbstractUniformDistributedQueue.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsDestination.destroyOptions)
#wls.AbstractUniformDistributedQueue.destroyOptions=uploadArtifactData
# Destroy Order (inherited from: wls.JmsDestination.destroyOrder)
#wls.AbstractUniformDistributedQueue.destroyOrder=40
# Python script invoked to destroy this resource (inherited from: wls.JmsDestination.destroyScript)
#wls.AbstractUniformDistributedQueue.destroyScript=null
# Destroy Verb (inherited from: wls.JmsDestination.destroyVerb)
#wls.AbstractUniformDistributedQueue.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: wls.JmsDestination.discoverOrder)
#wls.AbstractUniformDistributedQueue.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.JmsDestination.exposeDeployedApplication)
#wls.AbstractUniformDistributedQueue.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.JmsDestination.libraryScripts)
#wls.AbstractUniformDistributedQueue.libraryScripts=null
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsDestination.modifyOptions)
#wls.AbstractUniformDistributedQueue.modifyOptions=uploadArtifactData
# Modify Order (inherited from: wls.JmsDestination.modifyOrder)
#wls.AbstractUniformDistributedQueue.modifyOrder=40
# Python script invoked to upgrade this resource (inherited from: wls.JmsDestination.modifyScript)
#wls.AbstractUniformDistributedQueue.modifyScript=null
# Modify Verb (inherited from: wls.JmsDestination.modifyVerb)
#wls.AbstractUniformDistributedQueue.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsDestination.noopOptions)
#wls.AbstractUniformDistributedQueue.noopOptions=uploadArtifactData
# Set Error Destination Order (inherited from: wls.JmsDestination.setErrorDestinationOrder)
#wls.AbstractUniformDistributedQueue.setErrorDestinationOrder=61
# Python script invoked to set error destination on this jms resource (inherited from: wls.JmsDestination.setErrorDestinationScript)
#wls.AbstractUniformDistributedQueue.setErrorDestinationScript=null
# Set Error Destination Verb (inherited from: wls.JmsDestination.setErrorDestinationVerb)
#wls.AbstractUniformDistributedQueue.setErrorDestinationVerb=Set error queue for
# Standard Properties Not To Expose (inherited from: wls.JmsDestination.standardPropertiesNotToExpose)
#wls.AbstractUniformDistributedQueue.standardPropertiesNotToExpose=id, name, type, properties, deployable, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, destroyScript, destroyVerb, destroyOrder, securityPermissions, inheritPermissions, exposeDeployedApplication, jndiName, jmsModuleName, subDeploymentName, errorDestination, setErrorDestinationScript, setErrorDestinationVerb, setErrorDestinationOrder, unsetErrorDestinationVerb, unsetErrorDestinationOrder, unsetErrorDestinationScript, restartTarget, libraryScripts, discoverOrder, createOptions, modifyOptions, destroyOptions, noopOptions, provisioners, ordinal, boundConfigurationItems
# Unset Error Destination Order (inherited from: wls.JmsDestination.unsetErrorDestinationOrder)
#wls.AbstractUniformDistributedQueue.unsetErrorDestinationOrder=37
# Python script invoked to unset error destination from this jms resource (inherited from: wls.JmsDestination.unsetErrorDestinationScript)
#wls.AbstractUniformDistributedQueue.unsetErrorDestinationScript=null
# Unset Error Destination Verb (inherited from: wls.JmsDestination.unsetErrorDestinationVerb)
#wls.AbstractUniformDistributedQueue.unsetErrorDestinationVerb=Unset error queue from =
# The set of created CIs. (inherited from: wls.JmsDestination.boundConfigurationItems)
#wls.AbstractUniformDistributedTopic.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsDestination.createOptions)
#wls.AbstractUniformDistributedTopic.createOptions=uploadArtifactData
# Create Order (inherited from: wls.JmsDestination.createOrder)
#wls.AbstractUniformDistributedTopic.createOrder=60
# Python script invoked to create this resource (inherited from: wls.JmsDestination.createScript)
#wls.AbstractUniformDistributedTopic.createScript=null
# Create Verb (inherited from: wls.JmsDestination.createVerb)
#wls.AbstractUniformDistributedTopic.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsDestination.destroyOptions)
#wls.AbstractUniformDistributedTopic.destroyOptions=uploadArtifactData
# Destroy Order (inherited from: wls.JmsDestination.destroyOrder)
#wls.AbstractUniformDistributedTopic.destroyOrder=40
# Python script invoked to destroy this resource (inherited from: wls.JmsDestination.destroyScript)
#wls.AbstractUniformDistributedTopic.destroyScript=null
# Destroy Verb (inherited from: wls.JmsDestination.destroyVerb)
#wls.AbstractUniformDistributedTopic.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: wls.JmsDestination.discoverOrder)
#wls.AbstractUniformDistributedTopic.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.JmsDestination.exposeDeployedApplication)
#wls.AbstractUniformDistributedTopic.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.JmsDestination.libraryScripts)
#wls.AbstractUniformDistributedTopic.libraryScripts=null
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsDestination.modifyOptions)
#wls.AbstractUniformDistributedTopic.modifyOptions=uploadArtifactData
# Modify Order (inherited from: wls.JmsDestination.modifyOrder)
#wls.AbstractUniformDistributedTopic.modifyOrder=40
# Python script invoked to upgrade this resource (inherited from: wls.JmsDestination.modifyScript)
#wls.AbstractUniformDistributedTopic.modifyScript=null
# Modify Verb (inherited from: wls.JmsDestination.modifyVerb)
#wls.AbstractUniformDistributedTopic.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsDestination.noopOptions)
#wls.AbstractUniformDistributedTopic.noopOptions=uploadArtifactData
# Set Error Destination Order (inherited from: wls.JmsDestination.setErrorDestinationOrder)
#wls.AbstractUniformDistributedTopic.setErrorDestinationOrder=61
# Python script invoked to set error destination on this jms resource (inherited from: wls.JmsDestination.setErrorDestinationScript)
#wls.AbstractUniformDistributedTopic.setErrorDestinationScript=null
# Set Error Destination Verb (inherited from: wls.JmsDestination.setErrorDestinationVerb)
#wls.AbstractUniformDistributedTopic.setErrorDestinationVerb=Set error queue for
# Standard Properties Not To Expose (inherited from: wls.JmsDestination.standardPropertiesNotToExpose)
#wls.AbstractUniformDistributedTopic.standardPropertiesNotToExpose=id, name, type, properties, deployable, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, destroyScript, destroyVerb, destroyOrder, securityPermissions, inheritPermissions, exposeDeployedApplication, jndiName, jmsModuleName, subDeploymentName, errorDestination, setErrorDestinationScript, setErrorDestinationVerb, setErrorDestinationOrder, unsetErrorDestinationVerb, unsetErrorDestinationOrder, unsetErrorDestinationScript, restartTarget, libraryScripts, discoverOrder, createOptions, modifyOptions, destroyOptions, noopOptions, provisioners, ordinal, boundConfigurationItems
# Unset Error Destination Order (inherited from: wls.JmsDestination.unsetErrorDestinationOrder)
#wls.AbstractUniformDistributedTopic.unsetErrorDestinationOrder=37
# Python script invoked to unset error destination from this jms resource (inherited from: wls.JmsDestination.unsetErrorDestinationScript)
#wls.AbstractUniformDistributedTopic.unsetErrorDestinationScript=null
# Unset Error Destination Verb (inherited from: wls.JmsDestination.unsetErrorDestinationVerb)
#wls.AbstractUniformDistributedTopic.unsetErrorDestinationVerb=Unset error queue from =
# The set of created CIs. (inherited from: python.PythonManagedDeployed.boundConfigurationItems)
#wls.BaseWlsDeployed.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed).
#wls.BaseWlsDeployed.createOptions=uploadArtifactData
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed).
#wls.BaseWlsDeployed.destroyOptions=uploadArtifactData
# The order in which a discover step will be executed. (inherited from: python.PythonManagedDeployed.discoverOrder)
#wls.BaseWlsDeployed.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: python.PythonManagedDeployed.exposeDeployedApplication)
#wls.BaseWlsDeployed.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: python.PythonManagedDeployed.libraryScripts)
#wls.BaseWlsDeployed.libraryScripts=null
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed).
#wls.BaseWlsDeployed.modifyOptions=uploadArtifactData
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed).
#wls.BaseWlsDeployed.noopOptions=uploadArtifactData
# Start Order
#wls.Cluster.startOrder=80
# The time to wait in seconds for a container start action.
#wls.Cluster.startWaitTime=1
# Stop Order
#wls.Cluster.stopOrder=20
# Additional Properties Not To Expose
#wls.ConnectionFactory.additionalPropertiesNotToExpose=libraryScripts, discoverOrder
# The set of created CIs. (inherited from: wls.JmsResource.boundConfigurationItems)
#wls.ConnectionFactory.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsResource.createOptions)
#wls.ConnectionFactory.createOptions=uploadArtifactData
# Create Order
#wls.ConnectionFactory.createOrder=60
# Python script invoked to create this resource
#wls.ConnectionFactory.createScript=wls/jms/create-connection-factory.py
# Create Verb
#wls.ConnectionFactory.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsResource.destroyOptions)
#wls.ConnectionFactory.destroyOptions=uploadArtifactData
# Destroy Order
#wls.ConnectionFactory.destroyOrder=40
# Python script invoked to destroy this resource
#wls.ConnectionFactory.destroyScript=wls/jms/destroy-connection-factory.py
# Destroy Verb
#wls.ConnectionFactory.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: wls.JmsResource.discoverOrder)
#wls.ConnectionFactory.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.JmsResource.exposeDeployedApplication)
#wls.ConnectionFactory.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.JmsResource.libraryScripts)
#wls.ConnectionFactory.libraryScripts=null
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsResource.modifyOptions)
#wls.ConnectionFactory.modifyOptions=uploadArtifactData
# Modify Order (inherited from: wls.JmsResource.modifyOrder)
#wls.ConnectionFactory.modifyOrder=40
# Python script invoked to upgrade this resource (inherited from: wls.JmsResource.modifyScript)
#wls.ConnectionFactory.modifyScript=null
# Modify Verb (inherited from: wls.JmsResource.modifyVerb)
#wls.ConnectionFactory.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsResource.noopOptions)
#wls.ConnectionFactory.noopOptions=uploadArtifactData
# Standard Properties Not To Expose (inherited from: wls.JmsResource.standardPropertiesNotToExpose)
#wls.ConnectionFactory.standardPropertiesNotToExpose=id, name, type, properties, deployable, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, destroyOrder, jndiName, jmsModuleName, subDeploymentName, restartTarget, libraryScripts, discoverOrder, createOptions, modifyOptions, destroyOptions, noopOptions, provisioners, ordinal, boundConfigurationItems
# The set of CI templates. (inherited from: wls.JmsResourceSpec.boundTemplates)
#wls.ConnectionFactorySpec.boundTemplates=null
# The set of created CIs. (inherited from: udm.BaseDeployed.boundConfigurationItems)
#wls.CopiedArtifact.boundConfigurationItems=null
# The order of the step in the step list for the create operation.
#wls.CopiedArtifact.createOrder=50
# Create the target directory on the wls server if it does not exist.
#wls.CopiedArtifact.createTargetDirectory=false
# The order of the step in the step list for the destroy operation.
#wls.CopiedArtifact.destroyOrder=40
# Restart the target container
#wls.CopiedArtifact.restartTarget=false
# Is the target directory shared by others on the wls server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it.
#wls.CopiedArtifact.targetDirectoryShared=true
# Indicates the policy used to stop/start the target container when resource restartTarget property is 'true'
#wls.CopiedArtifact.targetRestartPolicy=RESTART
# The set of created CIs. (inherited from: generic.CopiedArtifact.boundConfigurationItems)
#wls.CopiedDeploymentPlan.boundConfigurationItems=null
# If set to true, files are directly copied to the target directory without first being uploaded to the staging or temporary directory (like versions of XL Deploy prior to 4.0.0) (inherited from: generic.CopiedArtifact.copyDirectlyToTargetPath)
#wls.CopiedDeploymentPlan.copyDirectlyToTargetPath=false
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.createOptions)
#wls.CopiedDeploymentPlan.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: generic.CopiedArtifact.createOrder)
#wls.CopiedDeploymentPlan.createOrder=50
# Create the target directory on the WLS AdminServer host if it does not exist.
#wls.CopiedDeploymentPlan.createTargetDirectory=true
# Create Verb (inherited from: generic.CopiedArtifact.createVerb)
#wls.CopiedDeploymentPlan.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.destroyOptions)
#wls.CopiedDeploymentPlan.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: generic.CopiedArtifact.destroyOrder)
#wls.CopiedDeploymentPlan.destroyOrder=40
# Destroy Verb (inherited from: generic.CopiedArtifact.destroyVerb)
#wls.CopiedDeploymentPlan.destroyVerb=Destroy
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.CopiedArtifact.inspectClasspathResources)
#wls.CopiedDeploymentPlan.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.CopiedArtifact.inspectScript)
#wls.CopiedDeploymentPlan.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.CopiedArtifact.inspectTemplateClasspathResources)
#wls.CopiedDeploymentPlan.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.modifyOptions)
#wls.CopiedDeploymentPlan.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: generic.CopiedArtifact.modifyOrder)
#wls.CopiedDeploymentPlan.modifyOrder=50
# Modify Verb (inherited from: generic.CopiedArtifact.modifyVerb)
#wls.CopiedDeploymentPlan.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.noopOptions)
#wls.CopiedDeploymentPlan.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: generic.CopiedArtifact.noopOrder)
#wls.CopiedDeploymentPlan.noopOrder=50
# Noop Verb (inherited from: generic.CopiedArtifact.noopVerb)
#wls.CopiedDeploymentPlan.noopVerb=Modify
# If set to true, preserve the existing files on the remote host (do not delete the copied files during the destroy operation).  (inherited from: generic.CopiedArtifact.preserveExistingFiles)
#wls.CopiedDeploymentPlan.preserveExistingFiles=false
# The generic container requires a restart for the action performed by this deployed. (inherited from: generic.CopiedArtifact.restartRequired)
#wls.CopiedDeploymentPlan.restartRequired=false
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: generic.CopiedArtifact.restartRequiredForNoop)
#wls.CopiedDeploymentPlan.restartRequiredForNoop=false
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: generic.CopiedArtifact.targetDirectoryShared)
#wls.CopiedDeploymentPlan.targetDirectoryShared=true
# If set to true, the sub directories on the target machine are not deleted if files other than that copied by XL Deploy are present. Please note that setting this option to true will cause the removal process to be a slower.  (inherited from: generic.CopiedArtifact.targetPathSharedSubDirectories)
#wls.CopiedDeploymentPlan.targetPathSharedSubDirectories=false
# Additional Properties Not To Expose
#wls.DataSource.additionalPropertiesNotToExpose=jndiNames, url, driverName, username, password, properties, libraryScripts, discoverOrder
# The set of created CIs. (inherited from: wls.Resource.boundConfigurationItems)
#wls.DataSource.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.Resource.createOptions)
#wls.DataSource.createOptions=uploadArtifactData
# Create Order
#wls.DataSource.createOrder=60
# Python script invoked to create this resource
#wls.DataSource.createScript=wls/ds/create-datasource.py
# Create Verb
#wls.DataSource.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.Resource.destroyOptions)
#wls.DataSource.destroyOptions=uploadArtifactData
# Destroy Order
#wls.DataSource.destroyOrder=40
# Python script invoked to destroy this resource
#wls.DataSource.destroyScript=wls/ds/destroy-datasource.py
# Destroy Verb
#wls.DataSource.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: wls.Resource.discoverOrder)
#wls.DataSource.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.Resource.exposeDeployedApplication)
#wls.DataSource.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.Resource.libraryScripts)
#wls.DataSource.libraryScripts=null
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.Resource.modifyOptions)
#wls.DataSource.modifyOptions=uploadArtifactData
# Modify Order (inherited from: wls.Resource.modifyOrder)
#wls.DataSource.modifyOrder=40
# Python script invoked to upgrade this resource (inherited from: wls.Resource.modifyScript)
#wls.DataSource.modifyScript=null
# Modify Verb (inherited from: wls.Resource.modifyVerb)
#wls.DataSource.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.Resource.noopOptions)
#wls.DataSource.noopOptions=uploadArtifactData
# Standard Properties Not To Expose (inherited from: wls.Resource.standardPropertiesNotToExpose)
#wls.DataSource.standardPropertiesNotToExpose=id, name, type, _properties, deployable, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyScript, destroyVerb, destroyOrder, jndiName, restartTarget, libraryScripts, discoverOrder, targetRestartPolicy, createOptions, modifyOptions, destroyOptions, noopOptions, provisioners, ordinal, boundConfigurationItems
# The set of CI templates. (inherited from: wls.ResourceSpec.boundTemplates)
#wls.DataSourceSpec.boundTemplates=null
# The set of created CIs. (inherited from: wls.CopiedArtifact.boundConfigurationItems)
#wls.DeployedFile.boundConfigurationItems=null
# The order of the step in the step list for the create operation. (inherited from: wls.CopiedArtifact.createOrder)
#wls.DeployedFile.createOrder=50
# The order of the step in the step list for the destroy operation. (inherited from: wls.CopiedArtifact.destroyOrder)
#wls.DeployedFile.destroyOrder=40
# Path to which artifact must be copied to on the wls server.
#wls.DeployedFile.targetDirectory=${deployed.container.domain.domainHome}/lib
# The set of created CIs. (inherited from: wls.CopiedArtifact.boundConfigurationItems)
#wls.DeployedFolder.boundConfigurationItems=null
# The order of the step in the step list for the create operation. (inherited from: wls.CopiedArtifact.createOrder)
#wls.DeployedFolder.createOrder=50
# The order of the step in the step list for the destroy operation. (inherited from: wls.CopiedArtifact.destroyOrder)
#wls.DeployedFolder.destroyOrder=40
# Path to which artifact must be copied to on the wls server.
#wls.DeployedFolder.targetDirectory=${deployed.container.domain.domainHome}/lib
# The set of CI templates. (inherited from: generic.File.boundTemplates)
#wls.DeploymentPlan.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: generic.File.delimiters)
#wls.DeploymentPlan.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: generic.File.textFileNamesRegex)
#wls.DeploymentPlan.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The name of the admin server
#wls.Domain.adminServerName=AdminServer
# Path containing the custom wlst templates: wlst.sh.ftl (Unix) and wlst.cmd.ftl (Windows)
#wls.Domain.customWlstTemplatePath=null
# Deployeds To Discover
#wls.Domain.deployedsToDiscover=wls.FilePersistentStore
# Specify if deploy, undeploy, start and stop operations should be batched and target multiple servers as part of one WLST command. Valid values: 'SINGLE_TARGET' (default, issues a separate call to each target server), 'MULTI_TARGET' (issues one call for multiple target servers by setting the WLST targets options).
#wls.Domain.deploymentMode=SINGLE_TARGET
# Order used to trigger the clean of the JMS Modules of the domain
#wls.Domain.destroyJmsModuleOrder=100
# Port to be used by the AdminServer for this domain
#wls.Domain.port=7001
# Protocol to be used by the AdminServer for this domain
#wls.Domain.protocol=t3
# Set to true to execute commands with the Python daemon
#wls.Domain.runWithDaemon=true
# Tells how a managed server is start and stop, default is NodeManager, others are Script or Windows Service
#wls.Domain.startMode=NodeManager
# Start Order
#wls.Domain.startOrder=80
# Stop Order
#wls.Domain.stopOrder=20
# Version of Oracle WebLogic Server
#wls.Domain.version=WEBLOGIC_10
# The set of CI templates. (inherited from: jee.Ear.boundTemplates)
#wls.Ear.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: jee.Ear.delimiters)
#wls.Ear.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: jee.Ear.textFileNamesRegex)
#wls.Ear.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# Time (in milliseconds) that WLST waits for the activation of configuration changes to complete before canceling the operation. A value of -1 indicates that the operation will not time out. A value of -10 indicates that this parameter will not be taken into account and server set default will be used. This argument normally defaults to 300,000 ms (or 5 minutes). (inherited from: wls.ExtensibleDeployedArtifact.activationTimeout)
#wls.EarModule.activationTimeout=-10
# The set of created CIs. (inherited from: wls.ExtensibleDeployedArtifact.boundConfigurationItems)
#wls.EarModule.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.ExtensibleDeployedArtifact.createOptions)
#wls.EarModule.createOptions=uploadArtifactData
# Create Order (inherited from: wls.ExtensibleDeployedArtifact.createOrder)
#wls.EarModule.createOrder=70
# Python script invoked to deploy this Java EE artifact (inherited from: wls.ExtensibleDeployedArtifact.createScript)
#wls.EarModule.createScript=wls/application/deploy-application.py
# Create Verb (inherited from: wls.ExtensibleDeployedArtifact.createVerb)
#wls.EarModule.createVerb=Deploy
# Delete Artifact Order (inherited from: wls.ExtensibleDeployedArtifact.deleteArtifactOrder)
#wls.EarModule.deleteArtifactOrder=31
# Delete Retired Artifact Order (inherited from: wls.ExtensibleDeployedArtifact.deleteRetiredArtifactOrder)
#wls.EarModule.deleteRetiredArtifactOrder=99
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.ExtensibleDeployedArtifact.destroyOptions)
#wls.EarModule.destroyOptions=uploadArtifactData
# Destroy Order (inherited from: wls.ExtensibleDeployedArtifact.destroyOrder)
#wls.EarModule.destroyOrder=30
# Python script invoked to undeploy this Java EE artifact (inherited from: wls.ExtensibleDeployedArtifact.destroyScript)
#wls.EarModule.destroyScript=wls/application/undeploy-application.py
# Destroy Verb (inherited from: wls.ExtensibleDeployedArtifact.destroyVerb)
#wls.EarModule.destroyVerb=Undeploy
# The order in which a discover step will be executed. (inherited from: wls.ExtensibleDeployedArtifact.discoverOrder)
#wls.EarModule.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.ExtensibleDeployedArtifact.exposeDeployedApplication)
#wls.EarModule.exposeDeployedApplication=false
# Time in milliseconds to wait before next retry to check if the deployment is still running (inherited from: wls.ExtensibleDeployedArtifact.isRunningRetryWaitInterval)
#wls.EarModule.isRunningRetryWaitInterval=500
# Is Start Or Stop Operation Required (inherited from: wls.ExtensibleDeployedArtifact.isStartOrStopOperationRequired)
#wls.EarModule.isStartOrStopOperationRequired=true
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.ExtensibleDeployedArtifact.libraryScripts)
#wls.EarModule.libraryScripts=null
# Property in the manifest file of the archive indicating that it is a versioned artifact. You can override this property in XLDEPLOY_HOME/conf/deployit-defaults.properties. For example: wls.WarModule.manifestVersionProperty=Weblogic-Application-Version. (inherited from: wls.ExtensibleDeployedArtifact.manifestVersionProperty)
#wls.EarModule.manifestVersionProperty=Extension-Name
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.ExtensibleDeployedArtifact.modifyOptions)
#wls.EarModule.modifyOptions=uploadArtifactData
# Modify Order (inherited from: wls.ExtensibleDeployedArtifact.modifyOrder)
#wls.EarModule.modifyOrder=60
# Python script invoked to upgrade this Java EE artifact (inherited from: wls.ExtensibleDeployedArtifact.modifyScript)
#wls.EarModule.modifyScript=null
# Modify Verb (inherited from: wls.ExtensibleDeployedArtifact.modifyVerb)
#wls.EarModule.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.ExtensibleDeployedArtifact.noopOptions)
#wls.EarModule.noopOptions=uploadArtifactData
# Standard Properties Not To Expose (inherited from: wls.ExtensibleDeployedArtifact.standardPropertiesNotToExpose)
#wls.EarModule.standardPropertiesNotToExpose=id, name, type, deployable, properties, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, destroyScript, destroyVerb, destroyOrder, deleteArtifactOrder,  startScript, startVerb, startOrder, stopScript, stopVerb, stopOrder, deploymentStrategy, placeholders, file, redeploymentStrategy, securityPermissions, inheritPermissions, exposeDeployedApplication, stopRetiredApplicationOrder, undeployRetiredApplicationOrder, deleteRetiredArtifactOrder, isRunningRetryWaitInterval, wlstPath, libraryScripts, discoverOrder, deploymentOrder, isStartOrStopOperationRequired, automaticVersioning, createOptions, modifyOptions, destroyOptions, noopOptions, manifestVersionProperty, versionTemplateFile, provisioners, ordinal, boundConfigurationItems
# Start Order (inherited from: wls.ExtensibleDeployedArtifact.startOrder)
#wls.EarModule.startOrder=90
# Python script invoked to start this Java EE artifact (inherited from: wls.ExtensibleDeployedArtifact.startScript)
#wls.EarModule.startScript=wls/application/start-application.py
# Start Verb (inherited from: wls.ExtensibleDeployedArtifact.startVerb)
#wls.EarModule.startVerb=Start
# Stop Order (inherited from: wls.ExtensibleDeployedArtifact.stopOrder)
#wls.EarModule.stopOrder=10
# Stop Retired Application Order (inherited from: wls.ExtensibleDeployedArtifact.stopRetiredApplicationOrder)
#wls.EarModule.stopRetiredApplicationOrder=55
# Python script invoked to stop this Java EE artifact (inherited from: wls.ExtensibleDeployedArtifact.stopScript)
#wls.EarModule.stopScript=wls/application/stop-application.py
# Stop Verb (inherited from: wls.ExtensibleDeployedArtifact.stopVerb)
#wls.EarModule.stopVerb=Stop
# Undeploy Retired Application Order (inherited from: wls.ExtensibleDeployedArtifact.undeployRetiredApplicationOrder)
#wls.EarModule.undeployRetiredApplicationOrder=58
# FreeMarker expression used to build the version based on the manifest file (properties are put in a map named 'manifestAttributes'). You can override this property in XLDEPLOY_HOME/conf/deployit-defaults.properties. For example: wls.WarModule.versionExpression=${manifestAttributes['Weblogic-Application-Version']}. (inherited from: wls.ExtensibleDeployedArtifact.versionExpression)
#wls.EarModule.versionExpression=[#ftl]${manifestAttributes["Specification-Version"]}[#if manifestAttributes["Implementation-Version"]??]@${manifestAttributes["Implementation-Version"]}[/#if]
# Wlst Path (inherited from: wls.ExtensibleDeployedArtifact.wlstPath)
#wls.EarModule.wlstPath=AppDeployments
# The set of CI templates. (inherited from: jee.EjbJar.boundTemplates)
#wls.EjbJar.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: jee.EjbJar.delimiters)
#wls.EjbJar.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: jee.EjbJar.textFileNamesRegex)
#wls.EjbJar.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# Time (in milliseconds) that WLST waits for the activation of configuration changes to complete before canceling the operation. A value of -1 indicates that the operation will not time out. A value of -10 indicates that this parameter will not be taken into account and server set default will be used. This argument normally defaults to 300,000 ms (or 5 minutes). (inherited from: wls.ExtensibleDeployedArtifact.activationTimeout)
#wls.EjbJarModule.activationTimeout=-10
# The set of created CIs. (inherited from: wls.ExtensibleDeployedArtifact.boundConfigurationItems)
#wls.EjbJarModule.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.ExtensibleDeployedArtifact.createOptions)
#wls.EjbJarModule.createOptions=uploadArtifactData
# Create Order (inherited from: wls.ExtensibleDeployedArtifact.createOrder)
#wls.EjbJarModule.createOrder=70
# Python script invoked to deploy this Java EE artifact (inherited from: wls.ExtensibleDeployedArtifact.createScript)
#wls.EjbJarModule.createScript=wls/application/deploy-application.py
# Create Verb (inherited from: wls.ExtensibleDeployedArtifact.createVerb)
#wls.EjbJarModule.createVerb=Deploy
# Delete Artifact Order (inherited from: wls.ExtensibleDeployedArtifact.deleteArtifactOrder)
#wls.EjbJarModule.deleteArtifactOrder=31
# Delete Retired Artifact Order (inherited from: wls.ExtensibleDeployedArtifact.deleteRetiredArtifactOrder)
#wls.EjbJarModule.deleteRetiredArtifactOrder=99
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.ExtensibleDeployedArtifact.destroyOptions)
#wls.EjbJarModule.destroyOptions=uploadArtifactData
# Destroy Order (inherited from: wls.ExtensibleDeployedArtifact.destroyOrder)
#wls.EjbJarModule.destroyOrder=30
# Python script invoked to undeploy this Java EE artifact (inherited from: wls.ExtensibleDeployedArtifact.destroyScript)
#wls.EjbJarModule.destroyScript=wls/application/undeploy-application.py
# Destroy Verb (inherited from: wls.ExtensibleDeployedArtifact.destroyVerb)
#wls.EjbJarModule.destroyVerb=Undeploy
# The order in which a discover step will be executed. (inherited from: wls.ExtensibleDeployedArtifact.discoverOrder)
#wls.EjbJarModule.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.ExtensibleDeployedArtifact.exposeDeployedApplication)
#wls.EjbJarModule.exposeDeployedApplication=false
# Time in milliseconds to wait before next retry to check if the deployment is still running (inherited from: wls.ExtensibleDeployedArtifact.isRunningRetryWaitInterval)
#wls.EjbJarModule.isRunningRetryWaitInterval=500
# Is Start Or Stop Operation Required (inherited from: wls.ExtensibleDeployedArtifact.isStartOrStopOperationRequired)
#wls.EjbJarModule.isStartOrStopOperationRequired=true
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.ExtensibleDeployedArtifact.libraryScripts)
#wls.EjbJarModule.libraryScripts=null
# Property in the manifest file of the archive indicating that it is a versioned artifact. You can override this property in XLDEPLOY_HOME/conf/deployit-defaults.properties. For example: wls.WarModule.manifestVersionProperty=Weblogic-Application-Version. (inherited from: wls.ExtensibleDeployedArtifact.manifestVersionProperty)
#wls.EjbJarModule.manifestVersionProperty=Extension-Name
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.ExtensibleDeployedArtifact.modifyOptions)
#wls.EjbJarModule.modifyOptions=uploadArtifactData
# Modify Order (inherited from: wls.ExtensibleDeployedArtifact.modifyOrder)
#wls.EjbJarModule.modifyOrder=60
# Python script invoked to upgrade this Java EE artifact (inherited from: wls.ExtensibleDeployedArtifact.modifyScript)
#wls.EjbJarModule.modifyScript=null
# Modify Verb (inherited from: wls.ExtensibleDeployedArtifact.modifyVerb)
#wls.EjbJarModule.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.ExtensibleDeployedArtifact.noopOptions)
#wls.EjbJarModule.noopOptions=uploadArtifactData
# Standard Properties Not To Expose (inherited from: wls.ExtensibleDeployedArtifact.standardPropertiesNotToExpose)
#wls.EjbJarModule.standardPropertiesNotToExpose=id, name, type, deployable, properties, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, destroyScript, destroyVerb, destroyOrder, deleteArtifactOrder,  startScript, startVerb, startOrder, stopScript, stopVerb, stopOrder, deploymentStrategy, placeholders, file, redeploymentStrategy, securityPermissions, inheritPermissions, exposeDeployedApplication, stopRetiredApplicationOrder, undeployRetiredApplicationOrder, deleteRetiredArtifactOrder, isRunningRetryWaitInterval, wlstPath, libraryScripts, discoverOrder, deploymentOrder, isStartOrStopOperationRequired, automaticVersioning, createOptions, modifyOptions, destroyOptions, noopOptions, manifestVersionProperty, versionTemplateFile, provisioners, ordinal, boundConfigurationItems
# Start Order (inherited from: wls.ExtensibleDeployedArtifact.startOrder)
#wls.EjbJarModule.startOrder=90
# Python script invoked to start this Java EE artifact (inherited from: wls.ExtensibleDeployedArtifact.startScript)
#wls.EjbJarModule.startScript=wls/application/start-application.py
# Start Verb (inherited from: wls.ExtensibleDeployedArtifact.startVerb)
#wls.EjbJarModule.startVerb=Start
# Stop Order (inherited from: wls.ExtensibleDeployedArtifact.stopOrder)
#wls.EjbJarModule.stopOrder=10
# Stop Retired Application Order (inherited from: wls.ExtensibleDeployedArtifact.stopRetiredApplicationOrder)
#wls.EjbJarModule.stopRetiredApplicationOrder=55
# Python script invoked to stop this Java EE artifact (inherited from: wls.ExtensibleDeployedArtifact.stopScript)
#wls.EjbJarModule.stopScript=wls/application/stop-application.py
# Stop Verb (inherited from: wls.ExtensibleDeployedArtifact.stopVerb)
#wls.EjbJarModule.stopVerb=Stop
# Undeploy Retired Application Order (inherited from: wls.ExtensibleDeployedArtifact.undeployRetiredApplicationOrder)
#wls.EjbJarModule.undeployRetiredApplicationOrder=58
# FreeMarker expression used to build the version based on the manifest file (properties are put in a map named 'manifestAttributes'). You can override this property in XLDEPLOY_HOME/conf/deployit-defaults.properties. For example: wls.WarModule.versionExpression=${manifestAttributes['Weblogic-Application-Version']}. (inherited from: wls.ExtensibleDeployedArtifact.versionExpression)
#wls.EjbJarModule.versionExpression=[#ftl]${manifestAttributes["Specification-Version"]}[#if manifestAttributes["Implementation-Version"]??]@${manifestAttributes["Implementation-Version"]}[/#if]
# Wlst Path (inherited from: wls.ExtensibleDeployedArtifact.wlstPath)
#wls.EjbJarModule.wlstPath=AppDeployments
# Time (in milliseconds) that WLST waits for the activation of configuration changes to complete before canceling the operation. A value of -1 indicates that the operation will not time out. A value of -10 indicates that this parameter will not be taken into account and server set default will be used. This argument normally defaults to 300,000 ms (or 5 minutes).
#wls.ExtensibleDeployedArtifact.activationTimeout=-10
# If set, the 'versionIdentifier' property is managed by the plugin. Any value explicitly set for 'versionIdentifier' is ignored. 'automaticVersioning' is enabled by default, in which case a unique version is created for the deployed module. If the manifest file includes an implementation version, then you must disable 'automaticVersioning'. If your manifest file includes a specification version and you want to use the implementation version that is defined in the manifest file, then you must set 'automaticVersioning' to false and enter the specification version as the 'versionIdentifier' property on the CI.
#wls.ExtensibleDeployedArtifact.automaticVersioning=true
# boolean value specifying whether the deployment should block user interaction until the command complete
#wls.ExtensibleDeployedArtifact.block=true
# The set of created CIs. (inherited from: wls.BaseWlsDeployed.boundConfigurationItems)
#wls.ExtensibleDeployedArtifact.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.BaseWlsDeployed.createOptions)
#wls.ExtensibleDeployedArtifact.createOptions=uploadArtifactData
# Create Order
#wls.ExtensibleDeployedArtifact.createOrder=70
# Python script invoked to deploy this Java EE artifact
#wls.ExtensibleDeployedArtifact.createScript=wls/application/deploy-application.py
# Create Verb
#wls.ExtensibleDeployedArtifact.createVerb=Deploy
# Delete Artifact Order
#wls.ExtensibleDeployedArtifact.deleteArtifactOrder=31
# Delete Retired Artifact Order
#wls.ExtensibleDeployedArtifact.deleteRetiredArtifactOrder=99
# By default, new applications and modules are configured with a Deployment Order value of 100
#wls.ExtensibleDeployedArtifact.deploymentOrder=100
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.BaseWlsDeployed.destroyOptions)
#wls.ExtensibleDeployedArtifact.destroyOptions=uploadArtifactData
# Destroy Order
#wls.ExtensibleDeployedArtifact.destroyOrder=30
# Python script invoked to undeploy this Java EE artifact
#wls.ExtensibleDeployedArtifact.destroyScript=wls/application/undeploy-application.py
# Destroy Verb
#wls.ExtensibleDeployedArtifact.destroyVerb=Undeploy
# The order in which a discover step will be executed. (inherited from: wls.BaseWlsDeployed.discoverOrder)
#wls.ExtensibleDeployedArtifact.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.BaseWlsDeployed.exposeDeployedApplication)
#wls.ExtensibleDeployedArtifact.exposeDeployedApplication=false
# Time in milliseconds to wait before next retry to check if the deployment is still running
#wls.ExtensibleDeployedArtifact.isRunningRetryWaitInterval=500
# Is Start Or Stop Operation Required
#wls.ExtensibleDeployedArtifact.isStartOrStopOperationRequired=true
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.BaseWlsDeployed.libraryScripts)
#wls.ExtensibleDeployedArtifact.libraryScripts=null
# Property in the manifest file of the archive indicating that it is a versioned artifact. You can override this property in XLDEPLOY_HOME/conf/deployit-defaults.properties. For example: wls.WarModule.manifestVersionProperty=Weblogic-Application-Version.
#wls.ExtensibleDeployedArtifact.manifestVersionProperty=Extension-Name
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.BaseWlsDeployed.modifyOptions)
#wls.ExtensibleDeployedArtifact.modifyOptions=uploadArtifactData
# Modify Order
#wls.ExtensibleDeployedArtifact.modifyOrder=60
# Python script invoked to upgrade this Java EE artifact
#wls.ExtensibleDeployedArtifact.modifyScript=null
# Modify Verb
#wls.ExtensibleDeployedArtifact.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.BaseWlsDeployed.noopOptions)
#wls.ExtensibleDeployedArtifact.noopOptions=uploadArtifactData
# Indicates what redeployment strategy to use for upgrading the application. Possible values: CLASSIC, STOP_START, SIDE_BY_SIDE
#wls.ExtensibleDeployedArtifact.redeploymentStrategy=CLASSIC
# Timeout interval (in secs) before the previous application version is undeployed for side by side redeployment strategy
#wls.ExtensibleDeployedArtifact.retireTimeout=-1
# Indicates whether the artifact will be deployed as staged or nostage mode
#wls.ExtensibleDeployedArtifact.stageMode=Stage
# Standard Properties Not To Expose
#wls.ExtensibleDeployedArtifact.standardPropertiesNotToExpose=id, name, type, deployable, properties, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, destroyScript, destroyVerb, destroyOrder, deleteArtifactOrder,  startScript, startVerb, startOrder, stopScript, stopVerb, stopOrder, deploymentStrategy, placeholders, file, redeploymentStrategy, securityPermissions, inheritPermissions, exposeDeployedApplication, stopRetiredApplicationOrder, undeployRetiredApplicationOrder, deleteRetiredArtifactOrder, isRunningRetryWaitInterval, wlstPath, libraryScripts, discoverOrder, deploymentOrder, isStartOrStopOperationRequired, automaticVersioning, createOptions, modifyOptions, destroyOptions, noopOptions, manifestVersionProperty, versionTemplateFile, provisioners, ordinal, boundConfigurationItems
# Start Order
#wls.ExtensibleDeployedArtifact.startOrder=90
# Python script invoked to start this Java EE artifact
#wls.ExtensibleDeployedArtifact.startScript=wls/application/start-application.py
# Start Verb
#wls.ExtensibleDeployedArtifact.startVerb=Start
# Stop Order
#wls.ExtensibleDeployedArtifact.stopOrder=10
# Stop Retired Application Order
#wls.ExtensibleDeployedArtifact.stopRetiredApplicationOrder=55
# Python script invoked to stop this Java EE artifact
#wls.ExtensibleDeployedArtifact.stopScript=wls/application/stop-application.py
# Stop Verb
#wls.ExtensibleDeployedArtifact.stopVerb=Stop
# Undeploy Retired Application Order
#wls.ExtensibleDeployedArtifact.undeployRetiredApplicationOrder=58
# FreeMarker expression used to build the version based on the manifest file (properties are put in a map named 'manifestAttributes'). You can override this property in XLDEPLOY_HOME/conf/deployit-defaults.properties. For example: wls.WarModule.versionExpression=${manifestAttributes['Weblogic-Application-Version']}.
#wls.ExtensibleDeployedArtifact.versionExpression=[#ftl]${manifestAttributes["Specification-Version"]}[#if manifestAttributes["Implementation-Version"]??]@${manifestAttributes["Implementation-Version"]}[/#if]
# Indicates wither this artifact is to be deployed as a versioned application
#wls.ExtensibleDeployedArtifact.versioned=false
# Wlst Path
#wls.ExtensibleDeployedArtifact.wlstPath=AppDeployments
# Time (in milliseconds) that WLST waits for the activation of configuration changes to complete before canceling the operation. A value of -1 indicates that the operation will not time out. A value of -10 indicates that this parameter will not be taken into account and server set default will be used. This argument normally defaults to 300,000 ms (or 5 minutes). (inherited from: wls.ExtensibleDeployedArtifact.activationTimeout)
#wls.ExtensibleDeployedSharedLibrary.activationTimeout=-10
# The set of created CIs. (inherited from: wls.ExtensibleDeployedArtifact.boundConfigurationItems)
#wls.ExtensibleDeployedSharedLibrary.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.ExtensibleDeployedArtifact.createOptions)
#wls.ExtensibleDeployedSharedLibrary.createOptions=uploadArtifactData
# Create Order (inherited from: wls.ExtensibleDeployedArtifact.createOrder)
#wls.ExtensibleDeployedSharedLibrary.createOrder=70
# Python script invoked to deploy this Java EE artifact (inherited from: wls.ExtensibleDeployedArtifact.createScript)
#wls.ExtensibleDeployedSharedLibrary.createScript=wls/application/deploy-application.py
# Create Verb (inherited from: wls.ExtensibleDeployedArtifact.createVerb)
#wls.ExtensibleDeployedSharedLibrary.createVerb=Deploy
# Delete Artifact Order (inherited from: wls.ExtensibleDeployedArtifact.deleteArtifactOrder)
#wls.ExtensibleDeployedSharedLibrary.deleteArtifactOrder=31
# Delete Retired Artifact Order (inherited from: wls.ExtensibleDeployedArtifact.deleteRetiredArtifactOrder)
#wls.ExtensibleDeployedSharedLibrary.deleteRetiredArtifactOrder=99
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.ExtensibleDeployedArtifact.destroyOptions)
#wls.ExtensibleDeployedSharedLibrary.destroyOptions=uploadArtifactData
# Destroy Order (inherited from: wls.ExtensibleDeployedArtifact.destroyOrder)
#wls.ExtensibleDeployedSharedLibrary.destroyOrder=30
# Python script invoked to undeploy this Java EE artifact (inherited from: wls.ExtensibleDeployedArtifact.destroyScript)
#wls.ExtensibleDeployedSharedLibrary.destroyScript=wls/application/undeploy-application.py
# Destroy Verb (inherited from: wls.ExtensibleDeployedArtifact.destroyVerb)
#wls.ExtensibleDeployedSharedLibrary.destroyVerb=Undeploy
# The order in which a discover step will be executed. (inherited from: wls.ExtensibleDeployedArtifact.discoverOrder)
#wls.ExtensibleDeployedSharedLibrary.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.ExtensibleDeployedArtifact.exposeDeployedApplication)
#wls.ExtensibleDeployedSharedLibrary.exposeDeployedApplication=false
# Time in milliseconds to wait before next retry to check if the deployment is still running (inherited from: wls.ExtensibleDeployedArtifact.isRunningRetryWaitInterval)
#wls.ExtensibleDeployedSharedLibrary.isRunningRetryWaitInterval=500
# Is Start Or Stop Operation Required
#wls.ExtensibleDeployedSharedLibrary.isStartOrStopOperationRequired=false
# Library Module
#wls.ExtensibleDeployedSharedLibrary.libraryModule=true
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.ExtensibleDeployedArtifact.libraryScripts)
#wls.ExtensibleDeployedSharedLibrary.libraryScripts=null
# Property in the manifest file of the archive indicating that it is a versioned artifact. You can override this property in XLDEPLOY_HOME/conf/deployit-defaults.properties. For example: wls.WarModule.manifestVersionProperty=Weblogic-Application-Version. (inherited from: wls.ExtensibleDeployedArtifact.manifestVersionProperty)
#wls.ExtensibleDeployedSharedLibrary.manifestVersionProperty=Extension-Name
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.ExtensibleDeployedArtifact.modifyOptions)
#wls.ExtensibleDeployedSharedLibrary.modifyOptions=uploadArtifactData
# Modify Order (inherited from: wls.ExtensibleDeployedArtifact.modifyOrder)
#wls.ExtensibleDeployedSharedLibrary.modifyOrder=60
# Python script invoked to upgrade this Java EE artifact (inherited from: wls.ExtensibleDeployedArtifact.modifyScript)
#wls.ExtensibleDeployedSharedLibrary.modifyScript=null
# Modify Verb (inherited from: wls.ExtensibleDeployedArtifact.modifyVerb)
#wls.ExtensibleDeployedSharedLibrary.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.ExtensibleDeployedArtifact.noopOptions)
#wls.ExtensibleDeployedSharedLibrary.noopOptions=uploadArtifactData
# Runtime Dependencies Types
#wls.ExtensibleDeployedSharedLibrary.runtimeDependenciesTypes=wls.EarModule, wls.WarModule
# Standard Properties Not To Expose (inherited from: wls.ExtensibleDeployedArtifact.standardPropertiesNotToExpose)
#wls.ExtensibleDeployedSharedLibrary.standardPropertiesNotToExpose=id, name, type, deployable, properties, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, destroyScript, destroyVerb, destroyOrder, deleteArtifactOrder,  startScript, startVerb, startOrder, stopScript, stopVerb, stopOrder, deploymentStrategy, placeholders, file, redeploymentStrategy, securityPermissions, inheritPermissions, exposeDeployedApplication, stopRetiredApplicationOrder, undeployRetiredApplicationOrder, deleteRetiredArtifactOrder, isRunningRetryWaitInterval, wlstPath, libraryScripts, discoverOrder, deploymentOrder, isStartOrStopOperationRequired, automaticVersioning, createOptions, modifyOptions, destroyOptions, noopOptions, manifestVersionProperty, versionTemplateFile, provisioners, ordinal, boundConfigurationItems
# Start Order (inherited from: wls.ExtensibleDeployedArtifact.startOrder)
#wls.ExtensibleDeployedSharedLibrary.startOrder=90
# Python script invoked to start this Java EE artifact (inherited from: wls.ExtensibleDeployedArtifact.startScript)
#wls.ExtensibleDeployedSharedLibrary.startScript=wls/application/start-application.py
# Start Verb (inherited from: wls.ExtensibleDeployedArtifact.startVerb)
#wls.ExtensibleDeployedSharedLibrary.startVerb=Start
# Stop Order (inherited from: wls.ExtensibleDeployedArtifact.stopOrder)
#wls.ExtensibleDeployedSharedLibrary.stopOrder=10
# Stop Retired Application Order (inherited from: wls.ExtensibleDeployedArtifact.stopRetiredApplicationOrder)
#wls.ExtensibleDeployedSharedLibrary.stopRetiredApplicationOrder=55
# Python script invoked to stop this Java EE artifact (inherited from: wls.ExtensibleDeployedArtifact.stopScript)
#wls.ExtensibleDeployedSharedLibrary.stopScript=wls/application/stop-application.py
# Stop Verb (inherited from: wls.ExtensibleDeployedArtifact.stopVerb)
#wls.ExtensibleDeployedSharedLibrary.stopVerb=Stop
# Undeploy Retired Application Order (inherited from: wls.ExtensibleDeployedArtifact.undeployRetiredApplicationOrder)
#wls.ExtensibleDeployedSharedLibrary.undeployRetiredApplicationOrder=58
# FreeMarker expression used to build the version based on the manifest file (properties are put in a map named 'manifestAttributes'). You can override this property in XLDEPLOY_HOME/conf/deployit-defaults.properties. For example: wls.WarModule.versionExpression=${manifestAttributes['Weblogic-Application-Version']}. (inherited from: wls.ExtensibleDeployedArtifact.versionExpression)
#wls.ExtensibleDeployedSharedLibrary.versionExpression=[#ftl]${manifestAttributes["Specification-Version"]}[#if manifestAttributes["Implementation-Version"]??]@${manifestAttributes["Implementation-Version"]}[/#if]
# Indicates wither this artifact is to be deployed as a versioned application
#wls.ExtensibleDeployedSharedLibrary.versioned=true
# Wlst Path
#wls.ExtensibleDeployedSharedLibrary.wlstPath=Libraries
# The set of CI templates. (inherited from: generic.File.boundTemplates)
#wls.File.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: generic.File.delimiters)
#wls.File.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: generic.File.textFileNamesRegex)
#wls.File.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: wls.PersistentStore.boundConfigurationItems)
#wls.FilePersistentStore.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.PersistentStore.createOptions)
#wls.FilePersistentStore.createOptions=uploadArtifactData
# Create Order (inherited from: wls.PersistentStore.createOrder)
#wls.FilePersistentStore.createOrder=60
# Python script invoked to create this resource
#wls.FilePersistentStore.createScript=wls/resources/create-file-persistence-store.py
# Create Verb (inherited from: wls.PersistentStore.createVerb)
#wls.FilePersistentStore.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.PersistentStore.destroyOptions)
#wls.FilePersistentStore.destroyOptions=uploadArtifactData
# Destroy Order (inherited from: wls.PersistentStore.destroyOrder)
#wls.FilePersistentStore.destroyOrder=40
# Python script invoked to destroy this resource
#wls.FilePersistentStore.destroyScript=wls/resources/destroy-file-persistence-store.py
# Destroy Verb (inherited from: wls.PersistentStore.destroyVerb)
#wls.FilePersistentStore.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: wls.PersistentStore.discoverOrder)
#wls.FilePersistentStore.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.PersistentStore.exposeDeployedApplication)
#wls.FilePersistentStore.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.PersistentStore.libraryScripts)
#wls.FilePersistentStore.libraryScripts=null
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.PersistentStore.modifyOptions)
#wls.FilePersistentStore.modifyOptions=uploadArtifactData
# Modify Order (inherited from: wls.PersistentStore.modifyOrder)
#wls.FilePersistentStore.modifyOrder=40
# Python script invoked to upgrade this resource (inherited from: wls.PersistentStore.modifyScript)
#wls.FilePersistentStore.modifyScript=null
# Modify Verb (inherited from: wls.PersistentStore.modifyVerb)
#wls.FilePersistentStore.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.PersistentStore.noopOptions)
#wls.FilePersistentStore.noopOptions=uploadArtifactData
# Standard Properties Not To Expose (inherited from: wls.PersistentStore.standardPropertiesNotToExpose)
#wls.FilePersistentStore.standardPropertiesNotToExpose=id, name, type, _properties, deployable, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyScript, destroyVerb, destroyOrder, jndiName, restartTarget, libraryScripts, discoverOrder, targetRestartPolicy, createOptions, modifyOptions, destroyOptions, noopOptions, provisioners, ordinal, boundConfigurationItems
# The disk write policy that determines how the file store writes data to disk. The valid policy options are:  Direct-Write, Direct-Write-With-Cache, Cache-Flush, Disabled.
#wls.FilePersistentStore.synchronousWritePolicy=Cache-Flush
# The set of CI templates. (inherited from: wls.PersistentStoreSpec.boundTemplates)
#wls.FilePersistentStoreSpec.boundTemplates=null
# The set of CI templates. (inherited from: generic.Folder.boundTemplates)
#wls.Folder.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: generic.Folder.delimiters)
#wls.Folder.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: generic.Folder.textFileNamesRegex)
#wls.Folder.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: wls.JmsResource.boundConfigurationItems)
#wls.JmsDestination.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsResource.createOptions)
#wls.JmsDestination.createOptions=uploadArtifactData
# Create Order (inherited from: wls.JmsResource.createOrder)
#wls.JmsDestination.createOrder=60
# Python script invoked to create this resource (inherited from: wls.JmsResource.createScript)
#wls.JmsDestination.createScript=null
# Create Verb (inherited from: wls.JmsResource.createVerb)
#wls.JmsDestination.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsResource.destroyOptions)
#wls.JmsDestination.destroyOptions=uploadArtifactData
# Destroy Order (inherited from: wls.JmsResource.destroyOrder)
#wls.JmsDestination.destroyOrder=40
# Python script invoked to destroy this resource (inherited from: wls.JmsResource.destroyScript)
#wls.JmsDestination.destroyScript=null
# Destroy Verb (inherited from: wls.JmsResource.destroyVerb)
#wls.JmsDestination.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: wls.JmsResource.discoverOrder)
#wls.JmsDestination.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.JmsResource.exposeDeployedApplication)
#wls.JmsDestination.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.JmsResource.libraryScripts)
#wls.JmsDestination.libraryScripts=null
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsResource.modifyOptions)
#wls.JmsDestination.modifyOptions=uploadArtifactData
# Modify Order (inherited from: wls.JmsResource.modifyOrder)
#wls.JmsDestination.modifyOrder=40
# Python script invoked to upgrade this resource (inherited from: wls.JmsResource.modifyScript)
#wls.JmsDestination.modifyScript=null
# Modify Verb (inherited from: wls.JmsResource.modifyVerb)
#wls.JmsDestination.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsResource.noopOptions)
#wls.JmsDestination.noopOptions=uploadArtifactData
# Set Error Destination Order
#wls.JmsDestination.setErrorDestinationOrder=61
# Python script invoked to set error destination on this jms resource
#wls.JmsDestination.setErrorDestinationScript=null
# Set Error Destination Verb
#wls.JmsDestination.setErrorDestinationVerb=Set error queue for
# Standard Properties Not To Expose
#wls.JmsDestination.standardPropertiesNotToExpose=id, name, type, properties, deployable, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, destroyScript, destroyVerb, destroyOrder, securityPermissions, inheritPermissions, exposeDeployedApplication, jndiName, jmsModuleName, subDeploymentName, errorDestination, setErrorDestinationScript, setErrorDestinationVerb, setErrorDestinationOrder, unsetErrorDestinationVerb, unsetErrorDestinationOrder, unsetErrorDestinationScript, restartTarget, libraryScripts, discoverOrder, createOptions, modifyOptions, destroyOptions, noopOptions, provisioners, ordinal, boundConfigurationItems
# Unset Error Destination Order
#wls.JmsDestination.unsetErrorDestinationOrder=37
# Python script invoked to unset error destination from this jms resource
#wls.JmsDestination.unsetErrorDestinationScript=null
# Unset Error Destination Verb
#wls.JmsDestination.unsetErrorDestinationVerb=Unset error queue from =
# The set of created CIs. (inherited from: wls.JmsPersistentStore.boundConfigurationItems)
#wls.JmsFilePersistentStore.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsPersistentStore.createOptions)
#wls.JmsFilePersistentStore.createOptions=uploadArtifactData
# Create Order (inherited from: wls.JmsPersistentStore.createOrder)
#wls.JmsFilePersistentStore.createOrder=60
# Python script invoked to create this resource
#wls.JmsFilePersistentStore.createScript=wls/jms/create-jms-file-persistence-store.py
# Create Verb (inherited from: wls.JmsPersistentStore.createVerb)
#wls.JmsFilePersistentStore.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsPersistentStore.destroyOptions)
#wls.JmsFilePersistentStore.destroyOptions=uploadArtifactData
# Destroy Order (inherited from: wls.JmsPersistentStore.destroyOrder)
#wls.JmsFilePersistentStore.destroyOrder=40
# Python script invoked to destroy this resource
#wls.JmsFilePersistentStore.destroyScript=wls/jms/destroy-jms-file-persistence-store.py
# Destroy Verb (inherited from: wls.JmsPersistentStore.destroyVerb)
#wls.JmsFilePersistentStore.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: wls.JmsPersistentStore.discoverOrder)
#wls.JmsFilePersistentStore.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.JmsPersistentStore.exposeDeployedApplication)
#wls.JmsFilePersistentStore.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.JmsPersistentStore.libraryScripts)
#wls.JmsFilePersistentStore.libraryScripts=null
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsPersistentStore.modifyOptions)
#wls.JmsFilePersistentStore.modifyOptions=uploadArtifactData
# Modify Order (inherited from: wls.JmsPersistentStore.modifyOrder)
#wls.JmsFilePersistentStore.modifyOrder=40
# Python script invoked to upgrade this resource (inherited from: wls.JmsPersistentStore.modifyScript)
#wls.JmsFilePersistentStore.modifyScript=null
# Modify Verb (inherited from: wls.JmsPersistentStore.modifyVerb)
#wls.JmsFilePersistentStore.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsPersistentStore.noopOptions)
#wls.JmsFilePersistentStore.noopOptions=uploadArtifactData
# Standard Properties Not To Expose (inherited from: wls.JmsPersistentStore.standardPropertiesNotToExpose)
#wls.JmsFilePersistentStore.standardPropertiesNotToExpose=id, name, type, _properties, deployable, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyScript, destroyVerb, destroyOrder, jndiName, restartTarget, libraryScripts, discoverOrder, targetRestartPolicy, createOptions, modifyOptions, destroyOptions, noopOptions, provisioners, ordinal, boundConfigurationItems
# The disk write policy that determines how the file store writes data to disk. The valid policy options are:  Direct-Write, Direct-Write-With-Cache, Cache-Flush, Disabled.
#wls.JmsFilePersistentStore.synchronousWritePolicy=Cache-Flush
# The set of CI templates. (inherited from: wls.JmsPersistentStoreSpec.boundTemplates)
#wls.JmsFilePersistentStoreSpec.boundTemplates=null
# The set of created CIs. (inherited from: wls.JmsPersistentStore.boundConfigurationItems)
#wls.JmsJdbcPersistentStore.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsPersistentStore.createOptions)
#wls.JmsJdbcPersistentStore.createOptions=uploadArtifactData
# Create Order
#wls.JmsJdbcPersistentStore.createOrder=62
# Python script invoked to create this resource
#wls.JmsJdbcPersistentStore.createScript=wls/jms/create-jms-jdbc-persistence-store.py
# Create Verb (inherited from: wls.JmsPersistentStore.createVerb)
#wls.JmsJdbcPersistentStore.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsPersistentStore.destroyOptions)
#wls.JmsJdbcPersistentStore.destroyOptions=uploadArtifactData
# Destroy Order
#wls.JmsJdbcPersistentStore.destroyOrder=38
# Python script invoked to destroy this resource
#wls.JmsJdbcPersistentStore.destroyScript=wls/jms/destroy-jms-jdbc-persistence-store.py
# Destroy Verb (inherited from: wls.JmsPersistentStore.destroyVerb)
#wls.JmsJdbcPersistentStore.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: wls.JmsPersistentStore.discoverOrder)
#wls.JmsJdbcPersistentStore.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.JmsPersistentStore.exposeDeployedApplication)
#wls.JmsJdbcPersistentStore.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.JmsPersistentStore.libraryScripts)
#wls.JmsJdbcPersistentStore.libraryScripts=null
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsPersistentStore.modifyOptions)
#wls.JmsJdbcPersistentStore.modifyOptions=uploadArtifactData
# Modify Order (inherited from: wls.JmsPersistentStore.modifyOrder)
#wls.JmsJdbcPersistentStore.modifyOrder=40
# Python script invoked to upgrade this resource (inherited from: wls.JmsPersistentStore.modifyScript)
#wls.JmsJdbcPersistentStore.modifyScript=null
# Modify Verb (inherited from: wls.JmsPersistentStore.modifyVerb)
#wls.JmsJdbcPersistentStore.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.JmsPersistentStore.noopOptions)
#wls.JmsJdbcPersistentStore.noopOptions=uploadArtifactData
# The prefix for the JDBC store's database table (WLStore), in the following format: [[[catalog.]schema.]prefix].
#wls.JmsJdbcPersistentStore.prefixName=
# Standard Properties Not To Expose (inherited from: wls.JmsPersistentStore.standardPropertiesNotToExpose)
#wls.JmsJdbcPersistentStore.standardPropertiesNotToExpose=id, name, type, _properties, deployable, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyScript, destroyVerb, destroyOrder, jndiName, restartTarget, libraryScripts, discoverOrder, targetRestartPolicy, createOptions, modifyOptions, destroyOptions, noopOptions, provisioners, ordinal, boundConfigurationItems
# The set of CI templates. (inherited from: wls.JmsPersistentStoreSpec.boundTemplates)
#wls.JmsJdbcPersistentStoreSpec.boundTemplates=null
# The set of created CIs. (inherited from: wls.Resource.boundConfigurationItems)
#wls.JmsPersistentStore.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.Resource.createOptions)
#wls.JmsPersistentStore.createOptions=uploadArtifactData
# Create Order (inherited from: wls.Resource.createOrder)
#wls.JmsPersistentStore.createOrder=60
# Python script invoked to create this resource (inherited from: wls.Resource.createScript)
#wls.JmsPersistentStore.createScript=null
# Create Verb (inherited from: wls.Resource.createVerb)
#wls.JmsPersistentStore.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.Resource.destroyOptions)
#wls.JmsPersistentStore.destroyOptions=uploadArtifactData
# Destroy Order (inherited from: wls.Resource.destroyOrder)
#wls.JmsPersistentStore.destroyOrder=40
# Python script invoked to destroy this resource (inherited from: wls.Resource.destroyScript)
#wls.JmsPersistentStore.destroyScript=null
# Destroy Verb (inherited from: wls.Resource.destroyVerb)
#wls.JmsPersistentStore.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: wls.Resource.discoverOrder)
#wls.JmsPersistentStore.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.Resource.exposeDeployedApplication)
#wls.JmsPersistentStore.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.Resource.libraryScripts)
#wls.JmsPersistentStore.libraryScripts=null
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.Resource.modifyOptions)
#wls.JmsPersistentStore.modifyOptions=uploadArtifactData
# Modify Order (inherited from: wls.Resource.modifyOrder)
#wls.JmsPersistentStore.modifyOrder=40
# Python script invoked to upgrade this resource (inherited from: wls.Resource.modifyScript)
#wls.JmsPersistentStore.modifyScript=null
# Modify Verb (inherited from: wls.Resource.modifyVerb)
#wls.JmsPersistentStore.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.Resource.noopOptions)
#wls.JmsPersistentStore.noopOptions=uploadArtifactData
# Standard Properties Not To Expose (inherited from: wls.Resource.standardPropertiesNotToExpose)
#wls.JmsPersistentStore.standardPropertiesNotToExpose=id, name, type, _properties, deployable, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyScript, destroyVerb, destroyOrder, jndiName, restartTarget, libraryScripts, discoverOrder, targetRestartPolicy, createOptions, modifyOptions, destroyOptions, noopOptions, provisioners, ordinal, boundConfigurationItems
# The set of CI templates. (inherited from: wls.ResourceSpec.boundTemplates)
#wls.JmsPersistentStoreSpec.boundTemplates=null
# The set of created CIs. (inherited from: wls.BaseWlsDeployed.boundConfigurationItems)
#wls.JmsResource.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.BaseWlsDeployed.createOptions)
#wls.JmsResource.createOptions=uploadArtifactData
# Create Order
#wls.JmsResource.createOrder=60
# Python script invoked to create this resource
#wls.JmsResource.createScript=null
# Create Verb
#wls.JmsResource.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.BaseWlsDeployed.destroyOptions)
#wls.JmsResource.destroyOptions=uploadArtifactData
# Destroy Order
#wls.JmsResource.destroyOrder=40
# Python script invoked to destroy this resource
#wls.JmsResource.destroyScript=null
# Destroy Verb
#wls.JmsResource.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: wls.BaseWlsDeployed.discoverOrder)
#wls.JmsResource.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.BaseWlsDeployed.exposeDeployedApplication)
#wls.JmsResource.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.BaseWlsDeployed.libraryScripts)
#wls.JmsResource.libraryScripts=null
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.BaseWlsDeployed.modifyOptions)
#wls.JmsResource.modifyOptions=uploadArtifactData
# Modify Order
#wls.JmsResource.modifyOrder=40
# Python script invoked to upgrade this resource
#wls.JmsResource.modifyScript=null
# Modify Verb
#wls.JmsResource.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.BaseWlsDeployed.noopOptions)
#wls.JmsResource.noopOptions=uploadArtifactData
# Standard Properties Not To Expose
#wls.JmsResource.standardPropertiesNotToExpose=id, name, type, properties, deployable, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, destroyScript, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyVerb, destroyOrder, jndiName, jmsModuleName, subDeploymentName, restartTarget, libraryScripts, discoverOrder, createOptions, modifyOptions, destroyOptions, noopOptions, provisioners, ordinal, boundConfigurationItems
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#wls.JmsResourceSpec.boundTemplates=null
# Additional Properties Not To Expose
#wls.MailSession.additionalPropertiesNotToExpose=jndiName,javaMailProperties,libraryScripts,discoverOrder
# The set of created CIs. (inherited from: wls.Resource.boundConfigurationItems)
#wls.MailSession.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.Resource.createOptions)
#wls.MailSession.createOptions=uploadArtifactData
# Create Order (inherited from: wls.Resource.createOrder)
#wls.MailSession.createOrder=60
# Python script invoked to create this resource
#wls.MailSession.createScript=wls/resources/create-mail-session.py
# Create Verb (inherited from: wls.Resource.createVerb)
#wls.MailSession.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.Resource.destroyOptions)
#wls.MailSession.destroyOptions=uploadArtifactData
# Destroy Order (inherited from: wls.Resource.destroyOrder)
#wls.MailSession.destroyOrder=40
# Python script invoked to destroy this resource
#wls.MailSession.destroyScript=wls/resources/destroy-mail-session.py
# Destroy Verb (inherited from: wls.Resource.destroyVerb)
#wls.MailSession.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: wls.Resource.discoverOrder)
#wls.MailSession.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.Resource.exposeDeployedApplication)
#wls.MailSession.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.Resource.libraryScripts)
#wls.MailSession.libraryScripts=null
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.Resource.modifyOptions)
#wls.MailSession.modifyOptions=uploadArtifactData
# Modify Order (inherited from: wls.Resource.modifyOrder)
#wls.MailSession.modifyOrder=40
# Python script invoked to upgrade this resource (inherited from: wls.Resource.modifyScript)
#wls.MailSession.modifyScript=null
# Modify Verb (inherited from: wls.Resource.modifyVerb)
#wls.MailSession.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.Resource.noopOptions)
#wls.MailSession.noopOptions=uploadArtifactData
# Standard Properties Not To Expose (inherited from: wls.Resource.standardPropertiesNotToExpose)
#wls.MailSession.standardPropertiesNotToExpose=id, name, type, _properties, deployable, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyScript, destroyVerb, destroyOrder, jndiName, restartTarget, libraryScripts, discoverOrder, targetRestartPolicy, createOptions, modifyOptions, destroyOptions, noopOptions, provisioners, ordinal, boundConfigurationItems
# The set of CI templates. (inherited from: wls.ResourceSpec.boundTemplates)
#wls.MailSessionSpec.boundTemplates=null
# The set of created CIs. (inherited from: wls.Resource.boundConfigurationItems)
#wls.PersistentStore.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.Resource.createOptions)
#wls.PersistentStore.createOptions=uploadArtifactData
# Create Order (inherited from: wls.Resource.createOrder)
#wls.PersistentStore.createOrder=60
# Python script invoked to create this resource (inherited from: wls.Resource.createScript)
#wls.PersistentStore.createScript=null
# Create Verb (inherited from: wls.Resource.createVerb)
#wls.PersistentStore.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.Resource.destroyOptions)
#wls.PersistentStore.destroyOptions=uploadArtifactData
# Destroy Order (inherited from: wls.Resource.destroyOrder)
#wls.PersistentStore.destroyOrder=40
# Python script invoked to destroy this resource (inherited from: wls.Resource.destroyScript)
#wls.PersistentStore.destroyScript=null
# Destroy Verb (inherited from: wls.Resource.destroyVerb)
#wls.PersistentStore.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: wls.Resource.discoverOrder)
#wls.PersistentStore.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.Resource.exposeDeployedApplication)
#wls.PersistentStore.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.Resource.libraryScripts)
#wls.PersistentStore.libraryScripts=null
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.Resource.modifyOptions)
#wls.PersistentStore.modifyOptions=uploadArtifactData
# Modify Order (inherited from: wls.Resource.modifyOrder)
#wls.PersistentStore.modifyOrder=40
# Python script invoked to upgrade this resource (inherited from: wls.Resource.modifyScript)
#wls.PersistentStore.modifyScript=null
# Modify Verb (inherited from: wls.Resource.modifyVerb)
#wls.PersistentStore.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.Resource.noopOptions)
#wls.PersistentStore.noopOptions=uploadArtifactData
# Standard Properties Not To Expose (inherited from: wls.Resource.standardPropertiesNotToExpose)
#wls.PersistentStore.standardPropertiesNotToExpose=id, name, type, _properties, deployable, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyScript, destroyVerb, destroyOrder, jndiName, restartTarget, libraryScripts, discoverOrder, targetRestartPolicy, createOptions, modifyOptions, destroyOptions, noopOptions, provisioners, ordinal, boundConfigurationItems
# The set of CI templates. (inherited from: wls.ResourceSpec.boundTemplates)
#wls.PersistentStoreSpec.boundTemplates=null
# Number of redelivery tries a message can have before it is moved to the error destination
#wls.Queue.DeliveryFailureParams_RedeliveryLimit=-1
# Additional Properties Not To Expose
#wls.Queue.additionalPropertiesNotToExpose=libraryScripts, discoverOrder, discoverScript
# The set of created CIs. (inherited from: wls.AbstractQueue.boundConfigurationItems)
#wls.Queue.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.AbstractQueue.createOptions)
#wls.Queue.createOptions=uploadArtifactData
# Create Order
#wls.Queue.createOrder=60
# Python script invoked to create this resource
#wls.Queue.createScript=wls/jms/create-queue.py
# Create Verb
#wls.Queue.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.AbstractQueue.destroyOptions)
#wls.Queue.destroyOptions=uploadArtifactData
# Destroy Order
#wls.Queue.destroyOrder=40
# Python script invoked to destroy this resource
#wls.Queue.destroyScript=wls/jms/destroy-queue.py
# Destroy Verb
#wls.Queue.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: wls.AbstractQueue.discoverOrder)
#wls.Queue.discoverOrder=50
# Python WLST script invoked to inspect a JMS Queue.
#wls.Queue.discoverScript=wls/jms/discover-inspect-queues.py
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.AbstractQueue.exposeDeployedApplication)
#wls.Queue.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script
#wls.Queue.libraryScripts=wls/jms/discover-inspect-queues-lib.py
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.AbstractQueue.modifyOptions)
#wls.Queue.modifyOptions=uploadArtifactData
# Modify Order (inherited from: wls.AbstractQueue.modifyOrder)
#wls.Queue.modifyOrder=40
# Python script invoked to upgrade this resource (inherited from: wls.AbstractQueue.modifyScript)
#wls.Queue.modifyScript=null
# Modify Verb (inherited from: wls.AbstractQueue.modifyVerb)
#wls.Queue.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.AbstractQueue.noopOptions)
#wls.Queue.noopOptions=uploadArtifactData
# Set Error Destination Order (inherited from: wls.AbstractQueue.setErrorDestinationOrder)
#wls.Queue.setErrorDestinationOrder=61
# Python script invoked to set error destination on this jms resource
#wls.Queue.setErrorDestinationScript=wls/jms/set-error-queue.py
# Set Error Destination Verb (inherited from: wls.AbstractQueue.setErrorDestinationVerb)
#wls.Queue.setErrorDestinationVerb=Set error queue for
# Standard Properties Not To Expose (inherited from: wls.AbstractQueue.standardPropertiesNotToExpose)
#wls.Queue.standardPropertiesNotToExpose=id, name, type, properties, deployable, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, destroyScript, destroyVerb, destroyOrder, securityPermissions, inheritPermissions, exposeDeployedApplication, jndiName, jmsModuleName, subDeploymentName, errorDestination, setErrorDestinationScript, setErrorDestinationVerb, setErrorDestinationOrder, unsetErrorDestinationVerb, unsetErrorDestinationOrder, unsetErrorDestinationScript, restartTarget, libraryScripts, discoverOrder, createOptions, modifyOptions, destroyOptions, noopOptions, provisioners, ordinal, boundConfigurationItems
# Unset Error Destination Order (inherited from: wls.AbstractQueue.unsetErrorDestinationOrder)
#wls.Queue.unsetErrorDestinationOrder=37
# Python script invoked to unset error destination from this jms resource
#wls.Queue.unsetErrorDestinationScript=wls/jms/unset-error-queue.py
# Unset Error Destination Verb (inherited from: wls.AbstractQueue.unsetErrorDestinationVerb)
#wls.Queue.unsetErrorDestinationVerb=Unset error queue from =
# The set of CI templates. (inherited from: wls.JmsResourceSpec.boundTemplates)
#wls.QueueSpec.boundTemplates=null
# The set of created CIs. (inherited from: wls.BaseWlsDeployed.boundConfigurationItems)
#wls.Resource.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.BaseWlsDeployed.createOptions)
#wls.Resource.createOptions=uploadArtifactData
# Create Order
#wls.Resource.createOrder=60
# Python script invoked to create this resource
#wls.Resource.createScript=null
# Create Verb
#wls.Resource.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.BaseWlsDeployed.destroyOptions)
#wls.Resource.destroyOptions=uploadArtifactData
# Destroy Order
#wls.Resource.destroyOrder=40
# Python script invoked to destroy this resource
#wls.Resource.destroyScript=null
# Destroy Verb
#wls.Resource.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: wls.BaseWlsDeployed.discoverOrder)
#wls.Resource.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.BaseWlsDeployed.exposeDeployedApplication)
#wls.Resource.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.BaseWlsDeployed.libraryScripts)
#wls.Resource.libraryScripts=null
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.BaseWlsDeployed.modifyOptions)
#wls.Resource.modifyOptions=uploadArtifactData
# Modify Order
#wls.Resource.modifyOrder=40
# Python script invoked to upgrade this resource
#wls.Resource.modifyScript=null
# Modify Verb
#wls.Resource.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.BaseWlsDeployed.noopOptions)
#wls.Resource.noopOptions=uploadArtifactData
# If set to true, a restart operation (stop & start) will be triggered just after the creation or the deletion of the resource
#wls.Resource.restartTarget=false
# Standard Properties Not To Expose
#wls.Resource.standardPropertiesNotToExpose=id, name, type, _properties, deployable, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, securityPermissions, inheritPermissions, exposeDeployedApplication, destroyScript, destroyVerb, destroyOrder, jndiName, restartTarget, libraryScripts, discoverOrder, targetRestartPolicy, createOptions, modifyOptions, destroyOptions, noopOptions, provisioners, ordinal, boundConfigurationItems
# Indicates the policy used to stop/start the target container when resource restartTarget property is 'true'
#wls.Resource.targetRestartPolicy=RESTART
# The set of CI templates. (inherited from: udm.BaseDeployable.boundTemplates)
#wls.ResourceSpec.boundTemplates=null
# Number of times to attempt executing the test, in case the step fails
#wls.Server.maxRetries=10
# Port for the server runs on
#wls.Server.port=0
# Time in seconds to wait before next retry
#wls.Server.retryWaitInterval=5
# Time in seconds to wait before starting the execution of the verify step
#wls.Server.startDelay=5
# Start Order
#wls.Server.startOrder=80
# Start Script
#wls.Server.startScript=wls/server/start-script
# The time to wait in seconds for a container start action.
#wls.Server.startWaitTime=1
# Stop Order
#wls.Server.stopOrder=20
# Stop Script
#wls.Server.stopScript=wls/server/stop-script
# Test Server Is Running
#wls.Server.testServerIsRunning=true
# The set of CI templates. (inherited from: generic.Archive.boundTemplates)
#wls.SharedLibraryJar.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: generic.Archive.delimiters)
#wls.SharedLibraryJar.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: generic.Archive.textFileNamesRegex)
#wls.SharedLibraryJar.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# Time (in milliseconds) that WLST waits for the activation of configuration changes to complete before canceling the operation. A value of -1 indicates that the operation will not time out. A value of -10 indicates that this parameter will not be taken into account and server set default will be used. This argument normally defaults to 300,000 ms (or 5 minutes). (inherited from: wls.ExtensibleDeployedSharedLibrary.activationTimeout)
#wls.SharedLibraryJarModule.activationTimeout=-10
# The set of created CIs. (inherited from: wls.ExtensibleDeployedSharedLibrary.boundConfigurationItems)
#wls.SharedLibraryJarModule.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.ExtensibleDeployedSharedLibrary.createOptions)
#wls.SharedLibraryJarModule.createOptions=uploadArtifactData
# Create Order
#wls.SharedLibraryJarModule.createOrder=68
# Python script invoked to deploy this Java EE artifact (inherited from: wls.ExtensibleDeployedSharedLibrary.createScript)
#wls.SharedLibraryJarModule.createScript=wls/application/deploy-application.py
# Create Verb (inherited from: wls.ExtensibleDeployedSharedLibrary.createVerb)
#wls.SharedLibraryJarModule.createVerb=Deploy
# Delete Artifact Order (inherited from: wls.ExtensibleDeployedSharedLibrary.deleteArtifactOrder)
#wls.SharedLibraryJarModule.deleteArtifactOrder=31
# Delete Retired Artifact Order (inherited from: wls.ExtensibleDeployedSharedLibrary.deleteRetiredArtifactOrder)
#wls.SharedLibraryJarModule.deleteRetiredArtifactOrder=99
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.ExtensibleDeployedSharedLibrary.destroyOptions)
#wls.SharedLibraryJarModule.destroyOptions=uploadArtifactData
# Destroy Order
#wls.SharedLibraryJarModule.destroyOrder=32
# Python script invoked to undeploy this Java EE artifact (inherited from: wls.ExtensibleDeployedSharedLibrary.destroyScript)
#wls.SharedLibraryJarModule.destroyScript=wls/application/undeploy-application.py
# Destroy Verb (inherited from: wls.ExtensibleDeployedSharedLibrary.destroyVerb)
#wls.SharedLibraryJarModule.destroyVerb=Undeploy
# The order in which a discover step will be executed. (inherited from: wls.ExtensibleDeployedSharedLibrary.discoverOrder)
#wls.SharedLibraryJarModule.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.ExtensibleDeployedSharedLibrary.exposeDeployedApplication)
#wls.SharedLibraryJarModule.exposeDeployedApplication=false
# Time in milliseconds to wait before next retry to check if the deployment is still running (inherited from: wls.ExtensibleDeployedSharedLibrary.isRunningRetryWaitInterval)
#wls.SharedLibraryJarModule.isRunningRetryWaitInterval=500
# Is Start Or Stop Operation Required (inherited from: wls.ExtensibleDeployedSharedLibrary.isStartOrStopOperationRequired)
#wls.SharedLibraryJarModule.isStartOrStopOperationRequired=false
# Library Module (inherited from: wls.ExtensibleDeployedSharedLibrary.libraryModule)
#wls.SharedLibraryJarModule.libraryModule=true
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.ExtensibleDeployedSharedLibrary.libraryScripts)
#wls.SharedLibraryJarModule.libraryScripts=null
# Property in the manifest file of the archive indicating that it is a versioned artifact. You can override this property in XLDEPLOY_HOME/conf/deployit-defaults.properties. For example: wls.WarModule.manifestVersionProperty=Weblogic-Application-Version. (inherited from: wls.ExtensibleDeployedSharedLibrary.manifestVersionProperty)
#wls.SharedLibraryJarModule.manifestVersionProperty=Extension-Name
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.ExtensibleDeployedSharedLibrary.modifyOptions)
#wls.SharedLibraryJarModule.modifyOptions=uploadArtifactData
# Modify Order (inherited from: wls.ExtensibleDeployedSharedLibrary.modifyOrder)
#wls.SharedLibraryJarModule.modifyOrder=60
# Python script invoked to upgrade this Java EE artifact (inherited from: wls.ExtensibleDeployedSharedLibrary.modifyScript)
#wls.SharedLibraryJarModule.modifyScript=null
# Modify Verb (inherited from: wls.ExtensibleDeployedSharedLibrary.modifyVerb)
#wls.SharedLibraryJarModule.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.ExtensibleDeployedSharedLibrary.noopOptions)
#wls.SharedLibraryJarModule.noopOptions=uploadArtifactData
# Runtime Dependencies Types (inherited from: wls.ExtensibleDeployedSharedLibrary.runtimeDependenciesTypes)
#wls.SharedLibraryJarModule.runtimeDependenciesTypes=wls.EarModule, wls.WarModule
# Standard Properties Not To Expose (inherited from: wls.ExtensibleDeployedSharedLibrary.standardPropertiesNotToExpose)
#wls.SharedLibraryJarModule.standardPropertiesNotToExpose=id, name, type, deployable, properties, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, destroyScript, destroyVerb, destroyOrder, deleteArtifactOrder,  startScript, startVerb, startOrder, stopScript, stopVerb, stopOrder, deploymentStrategy, placeholders, file, redeploymentStrategy, securityPermissions, inheritPermissions, exposeDeployedApplication, stopRetiredApplicationOrder, undeployRetiredApplicationOrder, deleteRetiredArtifactOrder, isRunningRetryWaitInterval, wlstPath, libraryScripts, discoverOrder, deploymentOrder, isStartOrStopOperationRequired, automaticVersioning, createOptions, modifyOptions, destroyOptions, noopOptions, manifestVersionProperty, versionTemplateFile, provisioners, ordinal, boundConfigurationItems
# Start Order (inherited from: wls.ExtensibleDeployedSharedLibrary.startOrder)
#wls.SharedLibraryJarModule.startOrder=90
# Python script invoked to start this Java EE artifact (inherited from: wls.ExtensibleDeployedSharedLibrary.startScript)
#wls.SharedLibraryJarModule.startScript=wls/application/start-application.py
# Start Verb (inherited from: wls.ExtensibleDeployedSharedLibrary.startVerb)
#wls.SharedLibraryJarModule.startVerb=Start
# Stop Order (inherited from: wls.ExtensibleDeployedSharedLibrary.stopOrder)
#wls.SharedLibraryJarModule.stopOrder=10
# Stop Retired Application Order (inherited from: wls.ExtensibleDeployedSharedLibrary.stopRetiredApplicationOrder)
#wls.SharedLibraryJarModule.stopRetiredApplicationOrder=55
# Python script invoked to stop this Java EE artifact (inherited from: wls.ExtensibleDeployedSharedLibrary.stopScript)
#wls.SharedLibraryJarModule.stopScript=wls/application/stop-application.py
# Stop Verb (inherited from: wls.ExtensibleDeployedSharedLibrary.stopVerb)
#wls.SharedLibraryJarModule.stopVerb=Stop
# Undeploy Retired Application Order (inherited from: wls.ExtensibleDeployedSharedLibrary.undeployRetiredApplicationOrder)
#wls.SharedLibraryJarModule.undeployRetiredApplicationOrder=58
# FreeMarker expression used to build the version based on the manifest file (properties are put in a map named 'manifestAttributes'). You can override this property in XLDEPLOY_HOME/conf/deployit-defaults.properties. For example: wls.WarModule.versionExpression=${manifestAttributes['Weblogic-Application-Version']}. (inherited from: wls.ExtensibleDeployedSharedLibrary.versionExpression)
#wls.SharedLibraryJarModule.versionExpression=[#ftl]${manifestAttributes["Specification-Version"]}[#if manifestAttributes["Implementation-Version"]??]@${manifestAttributes["Implementation-Version"]}[/#if]
# Indicates wither this artifact is to be deployed as a versioned application (inherited from: wls.ExtensibleDeployedSharedLibrary.versioned)
#wls.SharedLibraryJarModule.versioned=true
# Wlst Path (inherited from: wls.ExtensibleDeployedSharedLibrary.wlstPath)
#wls.SharedLibraryJarModule.wlstPath=Libraries
# The set of CI templates. (inherited from: jee.War.boundTemplates)
#wls.SharedLibraryWar.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: jee.War.delimiters)
#wls.SharedLibraryWar.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: jee.War.textFileNamesRegex)
#wls.SharedLibraryWar.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# Time (in milliseconds) that WLST waits for the activation of configuration changes to complete before canceling the operation. A value of -1 indicates that the operation will not time out. A value of -10 indicates that this parameter will not be taken into account and server set default will be used. This argument normally defaults to 300,000 ms (or 5 minutes). (inherited from: wls.ExtensibleDeployedSharedLibrary.activationTimeout)
#wls.SharedLibraryWarModule.activationTimeout=-10
# The set of created CIs. (inherited from: wls.ExtensibleDeployedSharedLibrary.boundConfigurationItems)
#wls.SharedLibraryWarModule.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.ExtensibleDeployedSharedLibrary.createOptions)
#wls.SharedLibraryWarModule.createOptions=uploadArtifactData
# Create Order (inherited from: wls.ExtensibleDeployedSharedLibrary.createOrder)
#wls.SharedLibraryWarModule.createOrder=70
# Python script invoked to deploy this Java EE artifact (inherited from: wls.ExtensibleDeployedSharedLibrary.createScript)
#wls.SharedLibraryWarModule.createScript=wls/application/deploy-application.py
# Create Verb (inherited from: wls.ExtensibleDeployedSharedLibrary.createVerb)
#wls.SharedLibraryWarModule.createVerb=Deploy
# Delete Artifact Order (inherited from: wls.ExtensibleDeployedSharedLibrary.deleteArtifactOrder)
#wls.SharedLibraryWarModule.deleteArtifactOrder=31
# Delete Retired Artifact Order (inherited from: wls.ExtensibleDeployedSharedLibrary.deleteRetiredArtifactOrder)
#wls.SharedLibraryWarModule.deleteRetiredArtifactOrder=99
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.ExtensibleDeployedSharedLibrary.destroyOptions)
#wls.SharedLibraryWarModule.destroyOptions=uploadArtifactData
# Destroy Order (inherited from: wls.ExtensibleDeployedSharedLibrary.destroyOrder)
#wls.SharedLibraryWarModule.destroyOrder=30
# Python script invoked to undeploy this Java EE artifact (inherited from: wls.ExtensibleDeployedSharedLibrary.destroyScript)
#wls.SharedLibraryWarModule.destroyScript=wls/application/undeploy-application.py
# Destroy Verb (inherited from: wls.ExtensibleDeployedSharedLibrary.destroyVerb)
#wls.SharedLibraryWarModule.destroyVerb=Undeploy
# The order in which a discover step will be executed. (inherited from: wls.ExtensibleDeployedSharedLibrary.discoverOrder)
#wls.SharedLibraryWarModule.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.ExtensibleDeployedSharedLibrary.exposeDeployedApplication)
#wls.SharedLibraryWarModule.exposeDeployedApplication=false
# Time in milliseconds to wait before next retry to check if the deployment is still running (inherited from: wls.ExtensibleDeployedSharedLibrary.isRunningRetryWaitInterval)
#wls.SharedLibraryWarModule.isRunningRetryWaitInterval=500
# Is Start Or Stop Operation Required (inherited from: wls.ExtensibleDeployedSharedLibrary.isStartOrStopOperationRequired)
#wls.SharedLibraryWarModule.isStartOrStopOperationRequired=false
# Library Module (inherited from: wls.ExtensibleDeployedSharedLibrary.libraryModule)
#wls.SharedLibraryWarModule.libraryModule=true
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.ExtensibleDeployedSharedLibrary.libraryScripts)
#wls.SharedLibraryWarModule.libraryScripts=null
# Property in the manifest file of the archive indicating that it is a versioned artifact. You can override this property in XLDEPLOY_HOME/conf/deployit-defaults.properties. For example: wls.WarModule.manifestVersionProperty=Weblogic-Application-Version. (inherited from: wls.ExtensibleDeployedSharedLibrary.manifestVersionProperty)
#wls.SharedLibraryWarModule.manifestVersionProperty=Extension-Name
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.ExtensibleDeployedSharedLibrary.modifyOptions)
#wls.SharedLibraryWarModule.modifyOptions=uploadArtifactData
# Modify Order (inherited from: wls.ExtensibleDeployedSharedLibrary.modifyOrder)
#wls.SharedLibraryWarModule.modifyOrder=60
# Python script invoked to upgrade this Java EE artifact (inherited from: wls.ExtensibleDeployedSharedLibrary.modifyScript)
#wls.SharedLibraryWarModule.modifyScript=null
# Modify Verb (inherited from: wls.ExtensibleDeployedSharedLibrary.modifyVerb)
#wls.SharedLibraryWarModule.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.ExtensibleDeployedSharedLibrary.noopOptions)
#wls.SharedLibraryWarModule.noopOptions=uploadArtifactData
# Runtime Dependencies Types (inherited from: wls.ExtensibleDeployedSharedLibrary.runtimeDependenciesTypes)
#wls.SharedLibraryWarModule.runtimeDependenciesTypes=wls.EarModule, wls.WarModule
# Standard Properties Not To Expose (inherited from: wls.ExtensibleDeployedSharedLibrary.standardPropertiesNotToExpose)
#wls.SharedLibraryWarModule.standardPropertiesNotToExpose=id, name, type, deployable, properties, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, destroyScript, destroyVerb, destroyOrder, deleteArtifactOrder,  startScript, startVerb, startOrder, stopScript, stopVerb, stopOrder, deploymentStrategy, placeholders, file, redeploymentStrategy, securityPermissions, inheritPermissions, exposeDeployedApplication, stopRetiredApplicationOrder, undeployRetiredApplicationOrder, deleteRetiredArtifactOrder, isRunningRetryWaitInterval, wlstPath, libraryScripts, discoverOrder, deploymentOrder, isStartOrStopOperationRequired, automaticVersioning, createOptions, modifyOptions, destroyOptions, noopOptions, manifestVersionProperty, versionTemplateFile, provisioners, ordinal, boundConfigurationItems
# Start Order (inherited from: wls.ExtensibleDeployedSharedLibrary.startOrder)
#wls.SharedLibraryWarModule.startOrder=90
# Python script invoked to start this Java EE artifact (inherited from: wls.ExtensibleDeployedSharedLibrary.startScript)
#wls.SharedLibraryWarModule.startScript=wls/application/start-application.py
# Start Verb (inherited from: wls.ExtensibleDeployedSharedLibrary.startVerb)
#wls.SharedLibraryWarModule.startVerb=Start
# Stop Order (inherited from: wls.ExtensibleDeployedSharedLibrary.stopOrder)
#wls.SharedLibraryWarModule.stopOrder=10
# Stop Retired Application Order (inherited from: wls.ExtensibleDeployedSharedLibrary.stopRetiredApplicationOrder)
#wls.SharedLibraryWarModule.stopRetiredApplicationOrder=55
# Python script invoked to stop this Java EE artifact (inherited from: wls.ExtensibleDeployedSharedLibrary.stopScript)
#wls.SharedLibraryWarModule.stopScript=wls/application/stop-application.py
# Stop Verb (inherited from: wls.ExtensibleDeployedSharedLibrary.stopVerb)
#wls.SharedLibraryWarModule.stopVerb=Stop
# Undeploy Retired Application Order (inherited from: wls.ExtensibleDeployedSharedLibrary.undeployRetiredApplicationOrder)
#wls.SharedLibraryWarModule.undeployRetiredApplicationOrder=58
# FreeMarker expression used to build the version based on the manifest file (properties are put in a map named 'manifestAttributes'). You can override this property in XLDEPLOY_HOME/conf/deployit-defaults.properties. For example: wls.WarModule.versionExpression=${manifestAttributes['Weblogic-Application-Version']}. (inherited from: wls.ExtensibleDeployedSharedLibrary.versionExpression)
#wls.SharedLibraryWarModule.versionExpression=[#ftl]${manifestAttributes["Specification-Version"]}[#if manifestAttributes["Implementation-Version"]??]@${manifestAttributes["Implementation-Version"]}[/#if]
# Indicates wither this artifact is to be deployed as a versioned application (inherited from: wls.ExtensibleDeployedSharedLibrary.versioned)
#wls.SharedLibraryWarModule.versioned=true
# Wlst Path (inherited from: wls.ExtensibleDeployedSharedLibrary.wlstPath)
#wls.SharedLibraryWarModule.wlstPath=Libraries
# Number of redelivery tries a message can have before it is moved to the error destination
#wls.Topic.DeliveryFailureParams_RedeliveryLimit=-1
# Additional Properties Not To Expose
#wls.Topic.additionalPropertiesNotToExpose=libraryScripts, discoverOrder
# The set of created CIs. (inherited from: wls.AbstractTopic.boundConfigurationItems)
#wls.Topic.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.AbstractTopic.createOptions)
#wls.Topic.createOptions=uploadArtifactData
# Create Order
#wls.Topic.createOrder=60
# Python script invoked to create this resource
#wls.Topic.createScript=wls/jms/create-topic.py
# Create Verb
#wls.Topic.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.AbstractTopic.destroyOptions)
#wls.Topic.destroyOptions=uploadArtifactData
# Destroy Order
#wls.Topic.destroyOrder=40
# Python script invoked to destroy this resource
#wls.Topic.destroyScript=wls/jms/destroy-topic.py
# Destroy Verb
#wls.Topic.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: wls.AbstractTopic.discoverOrder)
#wls.Topic.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.AbstractTopic.exposeDeployedApplication)
#wls.Topic.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.AbstractTopic.libraryScripts)
#wls.Topic.libraryScripts=null
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.AbstractTopic.modifyOptions)
#wls.Topic.modifyOptions=uploadArtifactData
# Modify Order (inherited from: wls.AbstractTopic.modifyOrder)
#wls.Topic.modifyOrder=40
# Python script invoked to upgrade this resource (inherited from: wls.AbstractTopic.modifyScript)
#wls.Topic.modifyScript=null
# Modify Verb (inherited from: wls.AbstractTopic.modifyVerb)
#wls.Topic.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.AbstractTopic.noopOptions)
#wls.Topic.noopOptions=uploadArtifactData
# Set Error Destination Order (inherited from: wls.AbstractTopic.setErrorDestinationOrder)
#wls.Topic.setErrorDestinationOrder=61
# Python script invoked to set error destination on this jms resource
#wls.Topic.setErrorDestinationScript=wls/jms/set-error-topic.py
# Set Error Destination Verb (inherited from: wls.AbstractTopic.setErrorDestinationVerb)
#wls.Topic.setErrorDestinationVerb=Set error queue for
# Standard Properties Not To Expose (inherited from: wls.AbstractTopic.standardPropertiesNotToExpose)
#wls.Topic.standardPropertiesNotToExpose=id, name, type, properties, deployable, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, destroyScript, destroyVerb, destroyOrder, securityPermissions, inheritPermissions, exposeDeployedApplication, jndiName, jmsModuleName, subDeploymentName, errorDestination, setErrorDestinationScript, setErrorDestinationVerb, setErrorDestinationOrder, unsetErrorDestinationVerb, unsetErrorDestinationOrder, unsetErrorDestinationScript, restartTarget, libraryScripts, discoverOrder, createOptions, modifyOptions, destroyOptions, noopOptions, provisioners, ordinal, boundConfigurationItems
# Unset Error Destination Order (inherited from: wls.AbstractTopic.unsetErrorDestinationOrder)
#wls.Topic.unsetErrorDestinationOrder=37
# Python script invoked to unset error destination from this jms resource
#wls.Topic.unsetErrorDestinationScript=wls/jms/unset-error-topic.py
# Unset Error Destination Verb (inherited from: wls.AbstractTopic.unsetErrorDestinationVerb)
#wls.Topic.unsetErrorDestinationVerb=Unset error queue from =
# The set of CI templates. (inherited from: wls.JmsResourceSpec.boundTemplates)
#wls.TopicSpec.boundTemplates=null
# Number of redelivery tries a message can have before it is moved to the error destination
#wls.UniformDistributedQueue.DeliveryFailureParams_RedeliveryLimit=-1
# Additional Properties Not To Expose
#wls.UniformDistributedQueue.additionalPropertiesNotToExpose=libraryScripts, discoverOrder
# The set of created CIs. (inherited from: wls.AbstractUniformDistributedQueue.boundConfigurationItems)
#wls.UniformDistributedQueue.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.AbstractUniformDistributedQueue.createOptions)
#wls.UniformDistributedQueue.createOptions=uploadArtifactData
# Create Order
#wls.UniformDistributedQueue.createOrder=60
# Python script invoked to create this resource
#wls.UniformDistributedQueue.createScript=wls/jms/create-udd-queue.py
# Create Verb
#wls.UniformDistributedQueue.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.AbstractUniformDistributedQueue.destroyOptions)
#wls.UniformDistributedQueue.destroyOptions=uploadArtifactData
# Destroy Order
#wls.UniformDistributedQueue.destroyOrder=40
# Python script invoked to destroy this resource
#wls.UniformDistributedQueue.destroyScript=wls/jms/destroy-udd-queue.py
# Destroy Verb
#wls.UniformDistributedQueue.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: wls.AbstractUniformDistributedQueue.discoverOrder)
#wls.UniformDistributedQueue.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.AbstractUniformDistributedQueue.exposeDeployedApplication)
#wls.UniformDistributedQueue.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.AbstractUniformDistributedQueue.libraryScripts)
#wls.UniformDistributedQueue.libraryScripts=null
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.AbstractUniformDistributedQueue.modifyOptions)
#wls.UniformDistributedQueue.modifyOptions=uploadArtifactData
# Modify Order (inherited from: wls.AbstractUniformDistributedQueue.modifyOrder)
#wls.UniformDistributedQueue.modifyOrder=40
# Python script invoked to upgrade this resource (inherited from: wls.AbstractUniformDistributedQueue.modifyScript)
#wls.UniformDistributedQueue.modifyScript=null
# Modify Verb (inherited from: wls.AbstractUniformDistributedQueue.modifyVerb)
#wls.UniformDistributedQueue.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.AbstractUniformDistributedQueue.noopOptions)
#wls.UniformDistributedQueue.noopOptions=uploadArtifactData
# Set Error Destination Order (inherited from: wls.AbstractUniformDistributedQueue.setErrorDestinationOrder)
#wls.UniformDistributedQueue.setErrorDestinationOrder=61
# Python script invoked to set error destination on this jms resource
#wls.UniformDistributedQueue.setErrorDestinationScript=wls/jms/set-udd-error-queue.py
# Set Error Destination Verb (inherited from: wls.AbstractUniformDistributedQueue.setErrorDestinationVerb)
#wls.UniformDistributedQueue.setErrorDestinationVerb=Set error queue for
# Standard Properties Not To Expose (inherited from: wls.AbstractUniformDistributedQueue.standardPropertiesNotToExpose)
#wls.UniformDistributedQueue.standardPropertiesNotToExpose=id, name, type, properties, deployable, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, destroyScript, destroyVerb, destroyOrder, securityPermissions, inheritPermissions, exposeDeployedApplication, jndiName, jmsModuleName, subDeploymentName, errorDestination, setErrorDestinationScript, setErrorDestinationVerb, setErrorDestinationOrder, unsetErrorDestinationVerb, unsetErrorDestinationOrder, unsetErrorDestinationScript, restartTarget, libraryScripts, discoverOrder, createOptions, modifyOptions, destroyOptions, noopOptions, provisioners, ordinal, boundConfigurationItems
# Unset Error Destination Order (inherited from: wls.AbstractUniformDistributedQueue.unsetErrorDestinationOrder)
#wls.UniformDistributedQueue.unsetErrorDestinationOrder=37
# Python script invoked to unset error destination from this jms resource
#wls.UniformDistributedQueue.unsetErrorDestinationScript=wls/jms/unset-udd-error-queue.py
# Unset Error Destination Verb (inherited from: wls.AbstractUniformDistributedQueue.unsetErrorDestinationVerb)
#wls.UniformDistributedQueue.unsetErrorDestinationVerb=Unset error queue from =
# The set of CI templates. (inherited from: wls.JmsResourceSpec.boundTemplates)
#wls.UniformDistributedQueueSpec.boundTemplates=null
# Additional Properties Not To Expose
#wls.UniformDistributedTopic.additionalPropertiesNotToExpose=libraryScripts, discoverOrder
# The set of created CIs. (inherited from: wls.AbstractUniformDistributedTopic.boundConfigurationItems)
#wls.UniformDistributedTopic.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.AbstractUniformDistributedTopic.createOptions)
#wls.UniformDistributedTopic.createOptions=uploadArtifactData
# Create Order
#wls.UniformDistributedTopic.createOrder=60
# Python script invoked to create this resource
#wls.UniformDistributedTopic.createScript=wls/jms/create-udd-topic.py
# Create Verb
#wls.UniformDistributedTopic.createVerb=Create
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.AbstractUniformDistributedTopic.destroyOptions)
#wls.UniformDistributedTopic.destroyOptions=uploadArtifactData
# Destroy Order
#wls.UniformDistributedTopic.destroyOrder=40
# Python script invoked to destroy this resource
#wls.UniformDistributedTopic.destroyScript=wls/jms/destroy-udd-topic.py
# Destroy Verb
#wls.UniformDistributedTopic.destroyVerb=Destroy
# The order in which a discover step will be executed. (inherited from: wls.AbstractUniformDistributedTopic.discoverOrder)
#wls.UniformDistributedTopic.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.AbstractUniformDistributedTopic.exposeDeployedApplication)
#wls.UniformDistributedTopic.exposeDeployedApplication=false
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.AbstractUniformDistributedTopic.libraryScripts)
#wls.UniformDistributedTopic.libraryScripts=null
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.AbstractUniformDistributedTopic.modifyOptions)
#wls.UniformDistributedTopic.modifyOptions=uploadArtifactData
# Modify Order (inherited from: wls.AbstractUniformDistributedTopic.modifyOrder)
#wls.UniformDistributedTopic.modifyOrder=40
# Python script invoked to upgrade this resource (inherited from: wls.AbstractUniformDistributedTopic.modifyScript)
#wls.UniformDistributedTopic.modifyScript=null
# Modify Verb (inherited from: wls.AbstractUniformDistributedTopic.modifyVerb)
#wls.UniformDistributedTopic.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.AbstractUniformDistributedTopic.noopOptions)
#wls.UniformDistributedTopic.noopOptions=uploadArtifactData
# Set Error Destination Order (inherited from: wls.AbstractUniformDistributedTopic.setErrorDestinationOrder)
#wls.UniformDistributedTopic.setErrorDestinationOrder=61
# Python script invoked to set error destination on this jms resource
#wls.UniformDistributedTopic.setErrorDestinationScript=wls/jms/set-udd-error-topic.py
# Set Error Destination Verb (inherited from: wls.AbstractUniformDistributedTopic.setErrorDestinationVerb)
#wls.UniformDistributedTopic.setErrorDestinationVerb=Set error queue for
# Standard Properties Not To Expose (inherited from: wls.AbstractUniformDistributedTopic.standardPropertiesNotToExpose)
#wls.UniformDistributedTopic.standardPropertiesNotToExpose=id, name, type, properties, deployable, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, destroyScript, destroyVerb, destroyOrder, securityPermissions, inheritPermissions, exposeDeployedApplication, jndiName, jmsModuleName, subDeploymentName, errorDestination, setErrorDestinationScript, setErrorDestinationVerb, setErrorDestinationOrder, unsetErrorDestinationVerb, unsetErrorDestinationOrder, unsetErrorDestinationScript, restartTarget, libraryScripts, discoverOrder, createOptions, modifyOptions, destroyOptions, noopOptions, provisioners, ordinal, boundConfigurationItems
# Unset Error Destination Order (inherited from: wls.AbstractUniformDistributedTopic.unsetErrorDestinationOrder)
#wls.UniformDistributedTopic.unsetErrorDestinationOrder=37
# Python script invoked to unset error destination from this jms resource
#wls.UniformDistributedTopic.unsetErrorDestinationScript=wls/jms/unset-udd-error-topic.py
# Unset Error Destination Verb (inherited from: wls.AbstractUniformDistributedTopic.unsetErrorDestinationVerb)
#wls.UniformDistributedTopic.unsetErrorDestinationVerb=Unset error queue from =
# The set of CI templates. (inherited from: wls.JmsResourceSpec.boundTemplates)
#wls.UniformDistributedTopicSpec.boundTemplates=null
# The set of CI templates. (inherited from: jee.War.boundTemplates)
#wls.War.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: jee.War.delimiters)
#wls.War.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: jee.War.textFileNamesRegex)
#wls.War.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# Time (in milliseconds) that WLST waits for the activation of configuration changes to complete before canceling the operation. A value of -1 indicates that the operation will not time out. A value of -10 indicates that this parameter will not be taken into account and server set default will be used. This argument normally defaults to 300,000 ms (or 5 minutes). (inherited from: wls.ExtensibleDeployedArtifact.activationTimeout)
#wls.WarModule.activationTimeout=-10
# The set of created CIs. (inherited from: wls.ExtensibleDeployedArtifact.boundConfigurationItems)
#wls.WarModule.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.ExtensibleDeployedArtifact.createOptions)
#wls.WarModule.createOptions=uploadArtifactData
# Create Order (inherited from: wls.ExtensibleDeployedArtifact.createOrder)
#wls.WarModule.createOrder=70
# Python script invoked to deploy this Java EE artifact (inherited from: wls.ExtensibleDeployedArtifact.createScript)
#wls.WarModule.createScript=wls/application/deploy-application.py
# Create Verb (inherited from: wls.ExtensibleDeployedArtifact.createVerb)
#wls.WarModule.createVerb=Deploy
# Delete Artifact Order (inherited from: wls.ExtensibleDeployedArtifact.deleteArtifactOrder)
#wls.WarModule.deleteArtifactOrder=31
# Delete Retired Artifact Order (inherited from: wls.ExtensibleDeployedArtifact.deleteRetiredArtifactOrder)
#wls.WarModule.deleteRetiredArtifactOrder=99
# Options for the destroy step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.ExtensibleDeployedArtifact.destroyOptions)
#wls.WarModule.destroyOptions=uploadArtifactData
# Destroy Order (inherited from: wls.ExtensibleDeployedArtifact.destroyOrder)
#wls.WarModule.destroyOrder=30
# Python script invoked to undeploy this Java EE artifact (inherited from: wls.ExtensibleDeployedArtifact.destroyScript)
#wls.WarModule.destroyScript=wls/application/undeploy-application.py
# Destroy Verb (inherited from: wls.ExtensibleDeployedArtifact.destroyVerb)
#wls.WarModule.destroyVerb=Undeploy
# The order in which a discover step will be executed. (inherited from: wls.ExtensibleDeployedArtifact.discoverOrder)
#wls.WarModule.discoverOrder=50
# Flag to indicate whether the deployed application CI is to be injected to the Python script execution context. (inherited from: wls.ExtensibleDeployedArtifact.exposeDeployedApplication)
#wls.WarModule.exposeDeployedApplication=false
# Time in milliseconds to wait before next retry to check if the deployment is still running (inherited from: wls.ExtensibleDeployedArtifact.isRunningRetryWaitInterval)
#wls.WarModule.isRunningRetryWaitInterval=500
# Is Start Or Stop Operation Required (inherited from: wls.ExtensibleDeployedArtifact.isStartOrStopOperationRequired)
#wls.WarModule.isStartOrStopOperationRequired=true
# List of scripts to be appended to the deployed's runtime script (inherited from: wls.ExtensibleDeployedArtifact.libraryScripts)
#wls.WarModule.libraryScripts=null
# Property in the manifest file of the archive indicating that it is a versioned artifact. You can override this property in XLDEPLOY_HOME/conf/deployit-defaults.properties. For example: wls.WarModule.manifestVersionProperty=Weblogic-Application-Version. (inherited from: wls.ExtensibleDeployedArtifact.manifestVersionProperty)
#wls.WarModule.manifestVersionProperty=Extension-Name
# Options for the modify step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.ExtensibleDeployedArtifact.modifyOptions)
#wls.WarModule.modifyOptions=uploadArtifactData
# Modify Order (inherited from: wls.ExtensibleDeployedArtifact.modifyOrder)
#wls.WarModule.modifyOrder=60
# Python script invoked to upgrade this Java EE artifact (inherited from: wls.ExtensibleDeployedArtifact.modifyScript)
#wls.WarModule.modifyScript=null
# Modify Verb (inherited from: wls.ExtensibleDeployedArtifact.modifyVerb)
#wls.WarModule.modifyVerb=Upgrade
# Options for the noop step (1 or more of: none,uploadArtifactData,exposeDeployedApplication,exposePreviousDeployed). (inherited from: wls.ExtensibleDeployedArtifact.noopOptions)
#wls.WarModule.noopOptions=uploadArtifactData
# Standard Properties Not To Expose (inherited from: wls.ExtensibleDeployedArtifact.standardPropertiesNotToExpose)
#wls.WarModule.standardPropertiesNotToExpose=id, name, type, deployable, properties, container, createScript, createVerb, createOrder, modifyScript, modifyVerb, modifyOrder, destroyScript, destroyVerb, destroyOrder, deleteArtifactOrder,  startScript, startVerb, startOrder, stopScript, stopVerb, stopOrder, deploymentStrategy, placeholders, file, redeploymentStrategy, securityPermissions, inheritPermissions, exposeDeployedApplication, stopRetiredApplicationOrder, undeployRetiredApplicationOrder, deleteRetiredArtifactOrder, isRunningRetryWaitInterval, wlstPath, libraryScripts, discoverOrder, deploymentOrder, isStartOrStopOperationRequired, automaticVersioning, createOptions, modifyOptions, destroyOptions, noopOptions, manifestVersionProperty, versionTemplateFile, provisioners, ordinal, boundConfigurationItems
# Start Order (inherited from: wls.ExtensibleDeployedArtifact.startOrder)
#wls.WarModule.startOrder=90
# Python script invoked to start this Java EE artifact (inherited from: wls.ExtensibleDeployedArtifact.startScript)
#wls.WarModule.startScript=wls/application/start-application.py
# Start Verb (inherited from: wls.ExtensibleDeployedArtifact.startVerb)
#wls.WarModule.startVerb=Start
# Stop Order (inherited from: wls.ExtensibleDeployedArtifact.stopOrder)
#wls.WarModule.stopOrder=10
# Stop Retired Application Order (inherited from: wls.ExtensibleDeployedArtifact.stopRetiredApplicationOrder)
#wls.WarModule.stopRetiredApplicationOrder=55
# Python script invoked to stop this Java EE artifact (inherited from: wls.ExtensibleDeployedArtifact.stopScript)
#wls.WarModule.stopScript=wls/application/stop-application.py
# Stop Verb (inherited from: wls.ExtensibleDeployedArtifact.stopVerb)
#wls.WarModule.stopVerb=Stop
# Undeploy Retired Application Order (inherited from: wls.ExtensibleDeployedArtifact.undeployRetiredApplicationOrder)
#wls.WarModule.undeployRetiredApplicationOrder=58
# FreeMarker expression used to build the version based on the manifest file (properties are put in a map named 'manifestAttributes'). You can override this property in XLDEPLOY_HOME/conf/deployit-defaults.properties. For example: wls.WarModule.versionExpression=${manifestAttributes['Weblogic-Application-Version']}. (inherited from: wls.ExtensibleDeployedArtifact.versionExpression)
#wls.WarModule.versionExpression=[#ftl]${manifestAttributes["Specification-Version"]}[#if manifestAttributes["Implementation-Version"]??]@${manifestAttributes["Implementation-Version"]}[/#if]
# Wlst Path (inherited from: wls.ExtensibleDeployedArtifact.wlstPath)
#wls.WarModule.wlstPath=AppDeployments
# The set of CI templates. (inherited from: generic.File.boundTemplates)
#www.ApacheConfFile.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: generic.File.delimiters)
#www.ApacheConfFile.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: generic.File.textFileNamesRegex)
#www.ApacheConfFile.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# The set of created CIs. (inherited from: generic.ProcessedTemplate.boundConfigurationItems)
#www.ApacheConfFragment.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.ProcessedTemplate.createOptions)
#www.ApacheConfFragment.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: generic.ProcessedTemplate.createOrder)
#www.ApacheConfFragment.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: generic.ProcessedTemplate.createTargetDirectory)
#www.ApacheConfFragment.createTargetDirectory=false
# Create Verb
#www.ApacheConfFragment.createVerb=Deploy
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.ProcessedTemplate.destroyOptions)
#www.ApacheConfFragment.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: generic.ProcessedTemplate.destroyOrder)
#www.ApacheConfFragment.destroyOrder=40
# Destroy Verb
#www.ApacheConfFragment.destroyVerb=Remove
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.ProcessedTemplate.inspectClasspathResources)
#www.ApacheConfFragment.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.ProcessedTemplate.inspectScript)
#www.ApacheConfFragment.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.ProcessedTemplate.inspectTemplateClasspathResources)
#www.ApacheConfFragment.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.ProcessedTemplate.modifyOptions)
#www.ApacheConfFragment.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: generic.ProcessedTemplate.modifyOrder)
#www.ApacheConfFragment.modifyOrder=50
# Modify Verb (inherited from: generic.ProcessedTemplate.modifyVerb)
#www.ApacheConfFragment.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.ProcessedTemplate.noopOptions)
#www.ApacheConfFragment.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: generic.ProcessedTemplate.noopOrder)
#www.ApacheConfFragment.noopOrder=50
# Noop Verb (inherited from: generic.ProcessedTemplate.noopVerb)
#www.ApacheConfFragment.noopVerb=Modify
# The generic container requires a restart for the action performed by this deployed.
#www.ApacheConfFragment.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: generic.ProcessedTemplate.restartRequiredForNoop)
#www.ApacheConfFragment.restartRequiredForNoop=false
# Target directory name
#www.ApacheConfFragment.targetDirectory=${deployed.container.configurationFragmentDirectory}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: generic.ProcessedTemplate.targetDirectoryShared)
#www.ApacheConfFragment.targetDirectoryShared=true
# Target file name
#www.ApacheConfFragment.targetFile=${deployed.name}.conf
# Configuration fragment template file name.
#www.ApacheConfFragment.template=www/apache/${deployed.type}.conf.ftl
# The set of CI templates. (inherited from: generic.Resource.boundTemplates)
#www.ApacheConfFragmentSpec.boundTemplates=null
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.Container.inspectClasspathResources)
#www.ApacheHttpdServer.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.Container.inspectScript)
#www.ApacheHttpdServer.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.Container.inspectTemplateClasspathResources)
#www.ApacheHttpdServer.inspectTemplateClasspathResources=null
# Additional classpath resources that should be uploaded to the working directory before executing the restart script. (inherited from: generic.Container.restartClasspathResources)
#www.ApacheHttpdServer.restartClasspathResources=null
# The order of the restart container step in the step list. (inherited from: generic.Container.restartOrder)
#www.ApacheHttpdServer.restartOrder=90
# The command to restart or reload Apache. If left blank, the sequence 'stop, start' is used. Arguments containing spaces are not supported
#www.ApacheHttpdServer.restartScript=<#assign restart=(container.restartCommand)!''><#if restart != ''>www/apache/restart<#else>www/apache/stopstart</#if>
# Additional template classpath resources that should be uploaded to the working directory before executing the restart script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.Container.restartTemplateClasspathResources)
#www.ApacheHttpdServer.restartTemplateClasspathResources=null
# Duration (in secs) to wait after the restart server step has been executed
#www.ApacheHttpdServer.restartWaitTime=10
# Additional classpath resources that should be uploaded to the working directory before executing the start script. (inherited from: generic.Container.startClasspathResources)
#www.ApacheHttpdServer.startClasspathResources=null
# The order of the start container step in the step list. (inherited from: generic.Container.startOrder)
#www.ApacheHttpdServer.startOrder=90
# The command to start Apache. Arguments containing spaces are not supported
#www.ApacheHttpdServer.startScript=www/apache/start
# Additional template classpath resources that should be uploaded to the working directory before executing the start script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.Container.startTemplateClasspathResources)
#www.ApacheHttpdServer.startTemplateClasspathResources=null
# Duration (in secs) to wait after the start server step has been executed
#www.ApacheHttpdServer.startWaitTime=10
# Additional classpath resources that should be uploaded to the working directory before executing the stop script. (inherited from: generic.Container.stopClasspathResources)
#www.ApacheHttpdServer.stopClasspathResources=null
# The order of the stop container step in the step list. (inherited from: generic.Container.stopOrder)
#www.ApacheHttpdServer.stopOrder=10
# The command to stop Apache. Arguments containing spaces are not supported
#www.ApacheHttpdServer.stopScript=www/apache/stop
# Additional template classpath resources that should be uploaded to the working directory before executing the stop script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.Container.stopTemplateClasspathResources)
#www.ApacheHttpdServer.stopTemplateClasspathResources=null
# Duration (in secs) to wait after the stop server step has been executed
#www.ApacheHttpdServer.stopWaitTime=10
# The set of created CIs. (inherited from: www.ApacheConfFragment.boundConfigurationItems)
#www.ApacheProxyPass.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: www.ApacheConfFragment.createOptions)
#www.ApacheProxyPass.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: www.ApacheConfFragment.createOrder)
#www.ApacheProxyPass.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: www.ApacheConfFragment.createTargetDirectory)
#www.ApacheProxyPass.createTargetDirectory=false
# Create Verb (inherited from: www.ApacheConfFragment.createVerb)
#www.ApacheProxyPass.createVerb=Deploy
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: www.ApacheConfFragment.destroyOptions)
#www.ApacheProxyPass.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: www.ApacheConfFragment.destroyOrder)
#www.ApacheProxyPass.destroyOrder=40
# Destroy Verb (inherited from: www.ApacheConfFragment.destroyVerb)
#www.ApacheProxyPass.destroyVerb=Remove
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: www.ApacheConfFragment.inspectClasspathResources)
#www.ApacheProxyPass.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: www.ApacheConfFragment.inspectScript)
#www.ApacheProxyPass.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: www.ApacheConfFragment.inspectTemplateClasspathResources)
#www.ApacheProxyPass.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: www.ApacheConfFragment.modifyOptions)
#www.ApacheProxyPass.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: www.ApacheConfFragment.modifyOrder)
#www.ApacheProxyPass.modifyOrder=50
# Modify Verb (inherited from: www.ApacheConfFragment.modifyVerb)
#www.ApacheProxyPass.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: www.ApacheConfFragment.noopOptions)
#www.ApacheProxyPass.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: www.ApacheConfFragment.noopOrder)
#www.ApacheProxyPass.noopOrder=50
# Noop Verb (inherited from: www.ApacheConfFragment.noopVerb)
#www.ApacheProxyPass.noopVerb=Modify
# The proxy parameters
#www.ApacheProxyPass.options=
# The generic container requires a restart for the action performed by this deployed. (inherited from: www.ApacheConfFragment.restartRequired)
#www.ApacheProxyPass.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: www.ApacheConfFragment.restartRequiredForNoop)
#www.ApacheProxyPass.restartRequiredForNoop=false
# Whether to set up a ProxyPassReverse also
#www.ApacheProxyPass.reverse=false
# Target directory name (inherited from: www.ApacheConfFragment.targetDirectory)
#www.ApacheProxyPass.targetDirectory=${deployed.container.configurationFragmentDirectory}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: www.ApacheConfFragment.targetDirectoryShared)
#www.ApacheProxyPass.targetDirectoryShared=true
# Target file name (inherited from: www.ApacheConfFragment.targetFile)
#www.ApacheProxyPass.targetFile=${deployed.name}.conf
# Configuration fragment template file name. (inherited from: www.ApacheConfFragment.template)
#www.ApacheProxyPass.template=www/apache/${deployed.type}.conf.ftl
# The set of CI templates. (inherited from: www.ApacheConfFragmentSpec.boundTemplates)
#www.ApacheProxyPassSpec.boundTemplates=null
# The set of created CIs. (inherited from: www.ApacheConfFragment.boundConfigurationItems)
#www.ApacheVirtualHost.boundConfigurationItems=null
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: www.ApacheConfFragment.createOptions)
#www.ApacheVirtualHost.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: www.ApacheConfFragment.createOrder)
#www.ApacheVirtualHost.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: www.ApacheConfFragment.createTargetDirectory)
#www.ApacheVirtualHost.createTargetDirectory=false
# Create Verb (inherited from: www.ApacheConfFragment.createVerb)
#www.ApacheVirtualHost.createVerb=Deploy
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: www.ApacheConfFragment.destroyOptions)
#www.ApacheVirtualHost.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: www.ApacheConfFragment.destroyOrder)
#www.ApacheVirtualHost.destroyOrder=40
# Destroy Verb (inherited from: www.ApacheConfFragment.destroyVerb)
#www.ApacheVirtualHost.destroyVerb=Remove
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: www.ApacheConfFragment.inspectClasspathResources)
#www.ApacheVirtualHost.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: www.ApacheConfFragment.inspectScript)
#www.ApacheVirtualHost.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: www.ApacheConfFragment.inspectTemplateClasspathResources)
#www.ApacheVirtualHost.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: www.ApacheConfFragment.modifyOptions)
#www.ApacheVirtualHost.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: www.ApacheConfFragment.modifyOrder)
#www.ApacheVirtualHost.modifyOrder=50
# Modify Verb (inherited from: www.ApacheConfFragment.modifyVerb)
#www.ApacheVirtualHost.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: www.ApacheConfFragment.noopOptions)
#www.ApacheVirtualHost.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: www.ApacheConfFragment.noopOrder)
#www.ApacheVirtualHost.noopOrder=50
# Noop Verb (inherited from: www.ApacheConfFragment.noopVerb)
#www.ApacheVirtualHost.noopVerb=Modify
# The generic container requires a restart for the action performed by this deployed. (inherited from: www.ApacheConfFragment.restartRequired)
#www.ApacheVirtualHost.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: www.ApacheConfFragment.restartRequiredForNoop)
#www.ApacheVirtualHost.restartRequiredForNoop=false
# Target directory name (inherited from: www.ApacheConfFragment.targetDirectory)
#www.ApacheVirtualHost.targetDirectory=${deployed.container.configurationFragmentDirectory}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: www.ApacheConfFragment.targetDirectoryShared)
#www.ApacheVirtualHost.targetDirectoryShared=true
# Target file name (inherited from: www.ApacheConfFragment.targetFile)
#www.ApacheVirtualHost.targetFile=${deployed.name}.conf
# Configuration fragment template file name. (inherited from: www.ApacheConfFragment.template)
#www.ApacheVirtualHost.template=www/apache/${deployed.type}.conf.ftl
# The set of CI templates. (inherited from: www.ApacheConfFragmentSpec.boundTemplates)
#www.ApacheVirtualHostSpec.boundTemplates=null
# The set of created CIs. (inherited from: generic.CopiedArtifact.boundConfigurationItems)
#www.DeployedApacheConfFile.boundConfigurationItems=null
# If set to true, files are directly copied to the target directory without first being uploaded to the staging or temporary directory (like versions of XL Deploy prior to 4.0.0) (inherited from: generic.CopiedArtifact.copyDirectlyToTargetPath)
#www.DeployedApacheConfFile.copyDirectlyToTargetPath=false
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.createOptions)
#www.DeployedApacheConfFile.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: generic.CopiedArtifact.createOrder)
#www.DeployedApacheConfFile.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: generic.CopiedArtifact.createTargetDirectory)
#www.DeployedApacheConfFile.createTargetDirectory=false
# Create Verb
#www.DeployedApacheConfFile.createVerb=Deploy
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.destroyOptions)
#www.DeployedApacheConfFile.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: generic.CopiedArtifact.destroyOrder)
#www.DeployedApacheConfFile.destroyOrder=40
# Destroy Verb
#www.DeployedApacheConfFile.destroyVerb=Remove
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.CopiedArtifact.inspectClasspathResources)
#www.DeployedApacheConfFile.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.CopiedArtifact.inspectScript)
#www.DeployedApacheConfFile.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.CopiedArtifact.inspectTemplateClasspathResources)
#www.DeployedApacheConfFile.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.modifyOptions)
#www.DeployedApacheConfFile.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: generic.CopiedArtifact.modifyOrder)
#www.DeployedApacheConfFile.modifyOrder=50
# Modify Verb (inherited from: generic.CopiedArtifact.modifyVerb)
#www.DeployedApacheConfFile.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.noopOptions)
#www.DeployedApacheConfFile.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: generic.CopiedArtifact.noopOrder)
#www.DeployedApacheConfFile.noopOrder=50
# Noop Verb (inherited from: generic.CopiedArtifact.noopVerb)
#www.DeployedApacheConfFile.noopVerb=Modify
# If set to true, preserve the existing files on the remote host (do not delete the copied files during the destroy operation).  (inherited from: generic.CopiedArtifact.preserveExistingFiles)
#www.DeployedApacheConfFile.preserveExistingFiles=false
# The generic container requires a restart for the action performed by this deployed.
#www.DeployedApacheConfFile.restartRequired=true
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: generic.CopiedArtifact.restartRequiredForNoop)
#www.DeployedApacheConfFile.restartRequiredForNoop=false
# Target directory name
#www.DeployedApacheConfFile.targetDirectory=${deployed.container.configurationFragmentDirectory}
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: generic.CopiedArtifact.targetDirectoryShared)
#www.DeployedApacheConfFile.targetDirectoryShared=true
# Target file name
#www.DeployedApacheConfFile.targetFile=${deployed.name}
# If set to true, the sub directories on the target machine are not deleted if files other than that copied by XL Deploy are present. Please note that setting this option to true will cause the removal process to be a slower.  (inherited from: generic.CopiedArtifact.targetPathSharedSubDirectories)
#www.DeployedApacheConfFile.targetPathSharedSubDirectories=false
# The set of created CIs. (inherited from: generic.CopiedArtifact.boundConfigurationItems)
#www.PublishedWebContent.boundConfigurationItems=null
# If set to true, files are directly copied to the target directory without first being uploaded to the staging or temporary directory (like versions of XL Deploy prior to 4.0.0) (inherited from: generic.CopiedArtifact.copyDirectlyToTargetPath)
#www.PublishedWebContent.copyDirectlyToTargetPath=false
# Options for the create step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.createOptions)
#www.PublishedWebContent.createOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the create operation. (inherited from: generic.CopiedArtifact.createOrder)
#www.PublishedWebContent.createOrder=50
# Create the target directory on the generic server if it does not exist. (inherited from: generic.CopiedArtifact.createTargetDirectory)
#www.PublishedWebContent.createTargetDirectory=false
# Create Verb
#www.PublishedWebContent.createVerb=Deploy
# Options for the destroy step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.destroyOptions)
#www.PublishedWebContent.destroyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the destroy operation. (inherited from: generic.CopiedArtifact.destroyOrder)
#www.PublishedWebContent.destroyOrder=40
# Destroy Verb
#www.PublishedWebContent.destroyVerb=Remove
# Additional classpath resources that should be uploaded to the working directory before executing the inspect script. (inherited from: generic.CopiedArtifact.inspectClasspathResources)
#www.PublishedWebContent.inspectClasspathResources=null
# Classpath to the script used to inspect the generic container. (inherited from: generic.CopiedArtifact.inspectScript)
#www.PublishedWebContent.inspectScript=null
# Additional template classpath resources that should be uploaded to the working directory before executing the inspect script.The template is first rendered and the rendered content copied to a file, with the same name as the template, in the working directory. (inherited from: generic.CopiedArtifact.inspectTemplateClasspathResources)
#www.PublishedWebContent.inspectTemplateClasspathResources=null
# Options for the modify step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.modifyOptions)
#www.PublishedWebContent.modifyOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the modify operation. (inherited from: generic.CopiedArtifact.modifyOrder)
#www.PublishedWebContent.modifyOrder=50
# Modify Verb (inherited from: generic.CopiedArtifact.modifyVerb)
#www.PublishedWebContent.modifyVerb=Modify
# Options for the noop step (1 or more of: none,uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources). (inherited from: generic.CopiedArtifact.noopOptions)
#www.PublishedWebContent.noopOptions=uploadArtifactData,uploadClasspathResources,uploadTemplateClasspathResources
# The order of the step in the step list for the noop operation. (inherited from: generic.CopiedArtifact.noopOrder)
#www.PublishedWebContent.noopOrder=50
# Noop Verb (inherited from: generic.CopiedArtifact.noopVerb)
#www.PublishedWebContent.noopVerb=Modify
# If set to true, preserve the existing files on the remote host (do not delete the copied files during the destroy operation).  (inherited from: generic.CopiedArtifact.preserveExistingFiles)
#www.PublishedWebContent.preserveExistingFiles=false
# The generic container requires a restart for the action performed by this deployed.
#www.PublishedWebContent.restartRequired=false
# The generic container requires a restart for the NOOP action performed by this deployed. (inherited from: generic.CopiedArtifact.restartRequiredForNoop)
#www.PublishedWebContent.restartRequiredForNoop=false
# Target directory name
#www.PublishedWebContent.targetDirectory=<#assign target=(deployed.virtualHost.documentRoot)!''/><#if target != ''>${target}<#else>${deployed.container.defaultDocumentRoot}</#if>
# Is the target directory shared by others on the generic server. When true, the target directory is not deleted during a destroy operation; only the artifacts copied to it. (inherited from: generic.CopiedArtifact.targetDirectoryShared)
#www.PublishedWebContent.targetDirectoryShared=true
# Name of the artifact on the generic server.
#www.PublishedWebContent.targetFile=null
# If set to true, the sub directories on the target machine are not deleted if files other than that copied by XL Deploy are present. Please note that setting this option to true will cause the removal process to be a slower.  (inherited from: generic.CopiedArtifact.targetPathSharedSubDirectories)
#www.PublishedWebContent.targetPathSharedSubDirectories=false
# The set of CI templates. (inherited from: generic.Folder.boundTemplates)
#www.WebContent.boundTemplates=null
# The delimiters used indicate placeholders, defaults to '{{ }}'. This is a 5 character string with a space in the middle, the first two are the leading delimiter, the last two are the closing delimiter (inherited from: generic.Folder.delimiters)
#www.WebContent.delimiters={{ }}
# Regular expression that matches file names of text files (inherited from: generic.Folder.textFileNamesRegex)
#www.WebContent.textFileNamesRegex=.+\.(cfg | conf | config | ini | properties | props | txt | asp | aspx | htm | html | jsf | jsp | xht | xhtml | sql | xml | xsd | xsl | xslt)
# Enable encrypted communication.
#xl.Satellite.encrypted=false
# Address where the satellite can be reached.
#xl.SatelliteGroup.address=none
# Enable encrypted communication.
#xl.SatelliteGroup.encrypted=null
# Port where the satellite is listening.
#xl.SatelliteGroup.protocolPort=0
# Delay between each attempt, in seconds.
#xl.Satellite_restartSatellite.delay=10
# Modifies the restart behavior, so that running tasks are forcibly terminated. Should only be used when a satellite appears to be hanging, because it will cause active tasks to fail.
#xl.Satellite_restartSatellite.force=false
# Number of attempts to reach the satellite after restart.
#xl.Satellite_restartSatellite.maxAttempts=10
# Delay between each attempt, in seconds.
#xl.Satellite_syncPlugins.delay=10
# Number of attempts to reach the satellite after restart.
#xl.Satellite_syncPlugins.maxAttempts=10
